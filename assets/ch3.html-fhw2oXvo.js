import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as n,e as a}from"./app-ic11pCxs.js";const d={},t=a(`<h1 id="_3-基础数据类型" tabindex="-1"><a class="header-anchor" href="#_3-基础数据类型" aria-hidden="true">#</a> 3. 基础数据类型</h1><p>Go语言将数据类型分为四类：基础类型、复合类型、引用类型和接口类型。</p><ul><li>本章介绍基础类型，包括：数字、字符串和布尔型。</li><li>复合数据类型——数组（§4.1）和结构体（§4.2）——是通过组合简单类型，来表达更加复杂的数据结构。</li><li>引用类型包括指针（§2.3.2）、切片（§4.2)）、字典（§4.3）、函数（§5）、通道（§8）</li><li>将在第7章介绍接口类型</li></ul><p>虽然数据种类很多，但它们都是对程序中一个变量或状态的间接引用。这意味着对任一引用类型数据的修改都会影响所有该引用的拷贝。</p><p>Go语言的数值类型包括几种不同大小的整数、浮点数和复数。每种数值类型都决定了对应的大小范围和是否支持正负符号。</p><h2 id="_3-1-整型" tabindex="-1"><a class="header-anchor" href="#_3-1-整型" aria-hidden="true">#</a> 3.1. 整型</h2><h3 id="不同的整型-值域" tabindex="-1"><a class="header-anchor" href="#不同的整型-值域" aria-hidden="true">#</a> 不同的整型&amp;值域</h3><p>Go语言同时提供了有符号和无符号类型的整数运算。</p><ul><li><p>int8、int16、int32和int64四种截然不同大小的有符号整数类型，分别对应8、16、32、64bit大小的有符号整数，与此对应的是uint8、uint16、uint32和uint64四种无符号整数类型。</p></li><li><p>两种一般对应特定CPU平台机器字大小的有符号和无符号整数int和uint；其中int是应用最广泛的数值类型。不同的编译器即使在相同的硬件平台上可能产生不同的大小。</p></li><li><p>Unicode字符rune类型是和int32等价的类型，通常用于表示一个Unicode码点。这两个名称可以互换使用。</p></li><li><p>byte也是uint8类型的等价类型，byte类型一般用于强调数值是一个原始的数据而不是一个小的整数。</p></li><li><p>无符号的整数类型uintptr，没有指定具体的bit大小但是足以容纳指针。uintptr类型只有在底层编程时才需要，特别是Go语言和C语言函数库或操作系统接口相交互的地方。</p></li></ul><p>不管它们的具体大小，int、uint和uintptr是不同类型的兄弟类型。其中int和int32也是不同的类型，即使int的大小也是32bit，在需要将int当作int32类型的地方需要一个显式的类型转换操作，反之亦然。</p><p><strong>值域</strong></p><p>其中有符号整数采用2的补码形式表示，也就是最高bit位用来表示符号位，一个n-bit的有符号数的值域是从-2n-1到2n-1-1。无符号整数的所有bit位都用于表示非负数，值域是0到2n-1。例如，int8类型整数的值域是从-128到127，而uint8类型整数的值域是从0到255。</p><h3 id="二元运算符" tabindex="-1"><a class="header-anchor" href="#二元运算符" aria-hidden="true">#</a> 二元运算符</h3><p>下面是Go语言中关于算术运算、逻辑运算和比较运算的二元运算符，它们按照优先级递减的顺序排列：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>*      /      %      &lt;&lt;       &gt;&gt;     &amp;       &amp;^
+      -      |      ^
==     !=     &lt;      &lt;=       &gt;      &gt;=
&amp;&amp;
||
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二元运算符有五种优先级。在同一个优先级，使用左优先结合规则，但是使用括号可以明确优先顺序，使用括号也可以用于提升优先级，例如<code>mask &amp; (1 &lt;&lt; 28)</code>。对于上表中前两行的运算符，例如+运算符还有一个与赋值相结合的对应运算符+=，可以用于简化赋值语句。</p><h4 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符" aria-hidden="true">#</a> 算数运算符</h4><ul><li>算术运算符<code>+</code>、<code>-</code>、<code>*</code>和<code>/</code>可以适用于整数、浮点数和复数，但是取模运算符%仅用于整数间的运算。</li><li>对于不同编程语言，%取模运算的行为可能并不相同。在Go语言中，%取模运算符的符号和被取模数的符号总是一致的，因此<code>-5%3</code>和<code>-5%-3</code>结果都是-2。</li><li>除法运算符<code>/</code>的行为则依赖于操作数是否全为整数，比如<code>5.0/4.0</code>的结果是1.25，但是5/4的结果是1，因为整数除法会向着0方向截断余数。</li></ul><p><strong>结果溢出</strong></p><p>一个算术运算的结果，不管是有符号或者是无符号的，如果需要更多的bit位才能正确表示的话，就说明计算结果是溢出了。超出的高位的bit位部分将被丢弃。如果原始的数值是有符号类型，而且最左边的bit位是1的话，那么最终结果可能是负的，例如int8的例子：</p><div class="language-Go line-numbers-mode" data-ext="Go"><pre class="language-Go"><code>var u uint8 = 255
fmt.Println(u, u+1, u*u) // &quot;255 0 1&quot;

var i int8 = 127
fmt.Println(i, i+1, i*i) // &quot;127 -128 1&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h4><p>两个相同的整数类型可以使用下面的二元比较运算符进行比较；比较表达式的结果是布尔类型。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>==    等于
!=    不等于
&lt;     小于
&lt;=    小于等于
&gt;     大于
&gt;=    大于等于
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事实上，布尔型、数字类型和字符串等基本类型都是可比较的，也就是说两个相同类型的值可以用==和!=进行比较。此外，整数、浮点数和字符串可以根据比较结果排序。许多其它类型的值可能是不可比较的，因此也就可能是不可排序的。对于我们遇到的每种类型，我们需要保证规则的一致性。</p><h3 id="其他运算符" tabindex="-1"><a class="header-anchor" href="#其他运算符" aria-hidden="true">#</a> 其他运算符</h3><h4 id="一元的加减法运算符" tabindex="-1"><a class="header-anchor" href="#一元的加减法运算符" aria-hidden="true">#</a> 一元的加减法运算符</h4><p>这里是一元的加法和减法运算符：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>+      一元加法（无效果）
-      负数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于整数，+x是0+x的简写，-x则是0-x的简写；对于浮点数和复数，+x就是x，-x则是x 的负数。</p><h4 id="bit位操作运算符" tabindex="-1"><a class="header-anchor" href="#bit位操作运算符" aria-hidden="true">#</a> bit位操作运算符</h4><p>Go语言还提供了以下的bit位操作运算符，前面4个操作运算符并不区分是有符号还是无符号数：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&amp;      位运算 AND
|      位运算 OR
^      位运算 XOR
&amp;^     位清空 AND(a, NOT(b))
&lt;&lt;     左移
&gt;&gt;     右移
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>位操作运算符<code>^</code>作为二元运算符时是按位异或（XOR），当用作一元运算符时表示按位取反；也就是说，它返回一个每个bit位都取反的数。</p><p>位操作运算符<code>&amp;^</code>用于按位置零（AND NOT）：如果对应y中bit位为1的话，表达式<code>z = x &amp;^ y</code>结果z的对应的bit位为0，否则z对应的bit位等于x相应的bit位的值。</p>`,35),l=[t];function r(s,c){return e(),n("div",null,l)}const p=i(d,[["render",r],["__file","ch3.html.vue"]]);export{p as default};
