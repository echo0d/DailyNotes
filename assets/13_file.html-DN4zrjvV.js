import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as p,o}from"./app-vU8izl1I.js";const t={};function e(c,n){return o(),a("div",null,[...n[0]||(n[0]=[p(`<h1 id="_13-c语言-文件操作" tabindex="-1"><a class="header-anchor" href="#_13-c语言-文件操作"><span>13. C语言-文件操作</span></a></h1><h2 id="_1-文件指针" tabindex="-1"><a class="header-anchor" href="#_1-文件指针"><span>1 文件指针</span></a></h2><p>C 语言提供了一个 FILE 数据结构，记录了操作一个文件所需要的信息。该结构定义在头文件<code>stdio.h</code>，所有文件操作函数都要通过这个数据结构，获取文件信息。</p><p>开始操作一个文件之前，就要定义一个指向该文件的 FILE 指针，相当于获取一块内存区域，用来保存文件信息。</p><pre><code class="language-c">FILE<span class="token operator">*</span> fp<span class="token punctuation">;</span>
</code></pre><p>上面示例定义了一个 FILE 指针<code>fp</code>。</p><p>下面是一个读取文件的完整示例。</p><pre><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  FILE<span class="token operator">*</span> fp<span class="token punctuation">;</span>
  <span class="token keyword">char</span> c<span class="token punctuation">;</span>

  fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  c <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>上面示例中，新建文件指针<code>fp</code>以后，依次使用了下面三个文件操作函数，分成三个步骤。其他的文件操作，大致上也是这样的步骤。</p><p>第一步，使用<code>fopen()</code>打开指定文件，返回一个 File 指针。如果出错，返回 NULL。</p><p>它相当于将指定文件的信息与新建的文件指针<code>fp</code>相关联，在 FILE 结构内部记录了这样一些信息：文件内部的当前读写位置、读写报错的记录、文件结尾指示器、缓冲区开始位置的指针、文件标识符、一个计数器（统计拷贝进缓冲区的字节数）等等。后继的操作就可以使用这个指针（而不是文件名）来处理指定文件。</p><p>同时，它还为文件建立一个缓存区。由于存在缓存区，也可以说<code>fopen()</code>函数“打开一个了流”，后继的读写文件都是流模式。</p><p>第二步，使用读写函数，从文件读取数据，或者向文件写入数据。上例使用了<code>fgetc()</code>函数，从已经打开的文件里面，读取一个字符。</p><p><code>fgetc()</code>一调用，文件的数据块先拷贝到缓冲区。不同的计算机有不同的缓冲区大小，一般是512字节或是它的倍数，如4096或16384。随着计算机硬盘容量越来越大，缓冲区也越来越大。</p><p><code>fgetc()</code>从缓冲区读取数据，同时将文件指针内部的读写位置指示器，指向所读取字符的下一个字符。所有的文件读取函数都使用相同的缓冲区，后面再调用任何一个读取函数，都将从指示器指向的位置，即上一次读取函数停止的位置开始读取。</p><p>当读取函数发现已读完缓冲区里面的所有字符时，会请求把下一个缓冲区大小的数据块，从文件拷贝到缓冲区中。读取函数就以这种方式，读完文件的所有内容，直到文件结尾。不过，上例是只从缓存区读取一个字符。当函数在缓冲区里面，读完文件的最后一个字符时，就把 FILE 结构里面的文件结尾指示器设置为真。于是，下一次再调用读取函数时，会返回常量 EOF。EOF 是一个整数值，代表文件结尾，一般是<code>-1</code>。</p><p>第三步，<code>fclose()</code>关闭文件，同时清空缓存区。</p><p>上面是文件读取的过程，文件写入也是类似的方式，先把数据写入缓冲区，当缓冲区填满后，缓存区的数据将被转移到文件中。</p><h2 id="_2-fopen" tabindex="-1"><a class="header-anchor" href="#_2-fopen"><span>2 fopen()</span></a></h2><p><code>fopen()</code>函数用来打开文件。所有文件操作的第一步，都是使用<code>fopen()</code>打开指定文件。这个函数的原型定义在头文件<code>stdio.h</code>。</p><pre><code class="language-c">FILE<span class="token operator">*</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>它接受两个参数。第一个参数是文件名(可以包含路径)，第二个参数是模式字符串，指定对文件执行的操作，比如下面的例子中，<code>r</code>表示以读取模式打开文件。</p><pre><code class="language-c">fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;in.dat&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>成功打开文件以后，<code>fopen()</code>返回一个 FILE 指针，其他函数可以用这个指针操作文件。如果无法打开文件（比如文件不存在或没有权限），会返回空指针 NULL。所以，执行<code>fopen()</code>以后，最好判断一下，有没有打开成功。</p><pre><code class="language-c">fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Can&#39;t open file!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>上面示例中，如果<code>fopen()</code>返回一个空指针，程序就会报错。</p><p><code>fopen()</code>的模式字符串有以下几种。</p><ul><li><code>r</code>：读模式，只用来读取数据。如果文件不存在，返回 NULL 指针。</li><li><code>w</code>：写模式，只用来写入数据。如果文件存在，文件长度会被截为0，然后再写入；如果文件不存在，则创建该文件。</li><li><code>a</code>：写模式(追加，不可读)，只用来在文件尾部追加数据。如果文件不存在，则创建该文件。</li><li><code>r+</code>：读写模式（读到的话向文件头部插入）。如果文件存在，指针指向文件开始处，可以在文件头部添加数据。如果文件不存在，返回 NULL 指针。</li><li><code>w+</code>：读写模式（覆写）。如果文件存在，文件长度会被截为0，然后再写入数据。这种模式实际上读不到数据，反而会擦掉数据。如果文件不存在，则创建该文件。</li><li><code>a+</code>：读写模式（追加，可读）。如果文件存在，指针指向文件结尾，可以在现有文件末尾添加内容。如果文件不存在，则创建该文件。</li></ul><p>上一小节说过，<code>fopen()</code>函数会为打开的文件创建一个缓冲区。读模式下，创建的是读缓存区；写模式下，创建的是写缓存区；读写模式下，会同时创建两个缓冲区。C 语言通过缓存区，以流的形式，向文件读写数据。</p><p>数据在文件里面，都是以二进制形式存储。但是，读取的时候，有不同的解读方法：以原本的二进制形式解读，叫做“二进制流”；将二进制数据转成文本，以文本形式解读，叫做“文本流”。写入操作也是如此，分成以二进制写入和以文本写入，后者会多一个文本转二进制的步骤。</p><p><code>fopen()</code>的模式字符串，默认是以文本流读写。如果添加<code>b</code>后缀（表示 binary），就会以“二进制流”进行读写。比如，<code>rb</code>是读取二进制数据模式，<code>wb</code>是写入二进制数据模式。</p><p>模式字符串还有一个<code>x</code>后缀，表示独占模式（exclusive）。如果文件已经存在，则打开文件失败；如果文件不存在，则新建文件，打开后不再允许其他程序或线程访问当前文件。比如，<code>wx</code>表示以独占模式写入文件，如果文件已经存在，就会打开失败。</p><h2 id="_3-标准流" tabindex="-1"><a class="header-anchor" href="#_3-标准流"><span>3 标准流</span></a></h2><p>Linux 系统默认提供三个已经打开的文件，它们的文件指针如下。</p><ul><li><code>stdin</code>（标准输入）：默认来源为键盘，文件指针编号为<code>0</code>。</li><li><code>stdout</code>（标准输出）：默认目的地为显示器，文件指针编号为<code>1</code>。</li><li><code>stderr</code>（标准错误）：默认目的地为显示器，文件指针编号为<code>2</code>。</li></ul><p>Linux 系统的文件，不一定是数据文件，也可以是设备文件，即文件代表一个可以读或写的设备。文件指针<code>stdin</code>默认是把键盘看作一个文件，读取这个文件，就能获取用户的键盘输入。同理，<code>stdout</code>和<code>stderr</code>默认是把显示器看作一个文件，将程序的运行结果写入这个文件，用户就能看到运行结果了。它们的区别是，<code>stdout</code>写入的是程序的正常运行结果，<code>stderr</code>写入的是程序的报错信息。</p><p>这三个输入和输出渠道，是 Linux 默认提供的，所以分别称为标准输入（stdin）、标准输出（stdout）和标准错误（stderr）。因为它们的实现是一样的，都是文件流，所以合称为“标准流”。</p><p>Linux 允许改变这三个文件指针（文件流）指向的文件，这称为重定向（redirection）。</p><p>如果标准输入不绑定键盘，而是绑定其他文件，可以在文件名前面加上小于号<code>&lt;</code>，跟在程序名后面。这叫做“输入重定向”（input redirection）。</p><pre><code class="language-bash">$ demo <span class="token operator">&lt;</span> in.dat
</code></pre><p>上面示例中，<code>demo</code>程序代码里面的<code>stdin</code>，将指向文件<code>in.dat</code>，即从<code>in.dat</code>获取数据。</p><p>如果标准输出绑定其他文件，而不是显示器，可以在文件名前加上大于号<code>&gt;</code>，跟在程序名后面。这叫做“输出重定向”（output redirection）。</p><pre><code class="language-bash">$ demo <span class="token operator">&gt;</span> out.dat
</code></pre><p>上面示例中，<code>demo</code>程序代码里面的<code>stdout</code>，将指向文件<code>out.dat</code>，即向<code>out.dat</code>写入数据。</p><p>输出重定向<code>&gt;</code>会先擦去<code>out.dat</code>的所有原有的内容，然后再写入。如果希望写入的信息追加在<code>out.dat</code>的结尾，可以使用<code>&gt;&gt;</code>符号。</p><pre><code class="language-bash">$ demo <span class="token operator">&gt;&gt;</span> out.dat
</code></pre><p>上面示例中，<code>demo</code>程序代码里面的<code>stdout</code>，将向文件<code>out.dat</code>写入数据。与<code>&gt;</code>不同的是，写入的开始位置是<code>out.dat</code>的文件结尾。</p><p>标准错误的重定向符号是<code>2&gt;</code>。其中的<code>2</code>代表文件指针的编号，即<code>2&gt;</code>表示将2号文件指针的写入，重定向到<code>err.txt</code>。2号文件指针就是标准错误<code>stderr</code>。</p><pre><code class="language-bash">$ demo <span class="token operator">&gt;</span> out.dat <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> err.txt
</code></pre><p>上面示例中，<code>demo</code>程序代码里面的<code>stderr</code>，会向文件<code>err.txt</code>写入报错信息。而<code>stdout</code>向文件<code>out.dat</code>写入。</p><p>输入重定向和输出重定向，也可以结合在一条命令里面。</p><pre><code class="language-bash">$ demo <span class="token operator">&lt;</span> in.dat <span class="token operator">&gt;</span> out.dat

// or
$ demo <span class="token operator">&gt;</span> out.dat <span class="token operator">&lt;</span> in.dat
</code></pre><p>重定向还有另一种情况，就是将一个程序的标准输出<code>stdout</code>，指向另一个程序的标准输入<code>stdin</code>，这时要使用<code>|</code>符号。</p><pre><code class="language-bash">$ random <span class="token operator">|</span> <span class="token function">sum</span>
</code></pre><p>上面示例中，<code>random</code>程序代码里面的<code>stdout</code>的写入，会从<code>sum</code>程序代码里面的<code>stdin</code>被读取。</p><h2 id="_4-fclose" tabindex="-1"><a class="header-anchor" href="#_4-fclose"><span>4 fclose()</span></a></h2><p><code>fclose()</code>用来关闭已经使用<code>fopen()</code>打开的文件。它的原型定义在<code>stdio.h</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> <span class="token function">fclose</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>它接受一个文件指针<code>fp</code>作为参数。如果成功关闭文件，<code>fclose()</code>函数返回整数<code>0</code>；如果操作失败（比如磁盘已满，或者出现 I/O 错误），则返回一个特殊值 EOF（详见下一小节）。</p><pre><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Something wrong.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>不再使用的文件，都应该使用<code>fclose()</code>关闭，否则无法释放资源。一般来说，系统对同时打开的文件数量有限制，及时关闭文件可以避免超过这个限制。</p><h2 id="_5-eof" tabindex="-1"><a class="header-anchor" href="#_5-eof"><span>5 EOF</span></a></h2><p>C 语言的文件操作函数的设计是，如果遇到文件结尾，就返回一个特殊值。程序接收到这个特殊值，就知道已经到达文件结尾了。</p><p>头文件<code>stdio.h</code>为这个特殊值定义了一个宏<code>EOF</code>（end of file 的缩写），它的值一般是<code>-1</code>。这是因为从文件读取的二进制值，不管作为无符号数字解释，还是作为 ASCII 码解释，都不可能是负值，所以可以很安全地返回<code>-1</code>，不会跟文件本身的数据相冲突。</p><p>需要注意的是，不像字符串结尾真的存储了<code>\\0</code>这个值，<code>EOF</code>并不存储在文件结尾，文件中并不存在这个值，完全是文件操作函数发现到达了文件结尾，而返回这个值。</p><h2 id="_6-freopen" tabindex="-1"><a class="header-anchor" href="#_6-freopen"><span>6 freopen()</span></a></h2><p><code>freopen()</code>用于新打开一个文件，直接关联到某个已经打开的文件指针。这样可以复用文件指针。它的原型定义在头文件<code>stdio.h</code>。</p><pre><code class="language-c">FILE<span class="token operator">*</span> <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> mode<span class="token punctuation">,</span> FILE<span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>它跟<code>fopen()</code>相比，就是多出了第三个参数，表示要复用的文件指针。其他两个参数都一样，分别是文件名和打开模式。</p><pre><code class="language-c"><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">&quot;output.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例将文件<code>output.txt</code>关联到<code>stdout</code>，此后向<code>stdout</code>写入的内容，都会写入<code>output.txt</code>。由于<code>printf()</code>默认就是输出到<code>stdout</code>，所以运行上面的代码以后，文件<code>output.txt</code>会被写入<code>hello</code>。</p><p><code>freopen()</code>的返回值是它的第三个参数（文件指针）。如果打开失败（比如文件不存在），会返回空指针 NULL。</p><p><code>freopen()</code>会自动关闭原先已经打开的文件，如果文件指针并没有指向已经打开的文件，则<code>freopen()</code>等同于<code>fopen()</code>。</p><p>下面是<code>freopen()</code>关联<code>scanf()</code>的例子。</p><pre><code class="language-c"><span class="token keyword">int</span> i<span class="token punctuation">,</span> i2<span class="token punctuation">;</span>

<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> 

<span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">&quot;someints.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面例子中，一共调用了两次<code>scanf()</code>，第一次调用是从键盘读取，然后使用<code>freopen()</code>将<code>stdin</code>指针关联到某个文件，第二次调用就会从该文件读取。</p><p>某些系统允许使用<code>freopen()</code>，改变文件的打开模式。这时，<code>freopen()</code>的第一个参数应该是 NULL。</p><pre><code class="language-c"><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;wb&quot;</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例将<code>stdout</code>的打开模式从<code>w</code>改成了<code>wb</code>。</p><h2 id="_7-fgetc-getc" tabindex="-1"><a class="header-anchor" href="#_7-fgetc-getc"><span>7 fgetc()，getc()</span></a></h2><p><code>fgetc()</code>和<code>getc()</code>用于从文件读取一个字符。它们的用法跟<code>getchar()</code>类似，区别是<code>getchar()</code>只用来从<code>stdin</code>读取，而这两个函数是从任意指定的文件读取。它们的原型定义在头文件<code>stdio.h</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">getc</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p><code>fgetc()</code>与<code>getc()</code>的用法是一样的，都只有文件指针一个参数。两者的区别是，<code>getc()</code>一般用宏来实现，而<code>fgetc()</code>是函数实现，所以前者的性能可能更好一些。注意，虽然这两个函数返回的是一个字符，但是它们的返回值类型却不是<code>char</code>，而是<code>int</code>，这是因为读取失败的情况下，它们会返回 EOF，这个值一般是<code>-1</code>。</p><pre><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>
  fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">int</span> c<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">getc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>上面示例中，<code>getc()</code>依次读取文件的每个字符，将其放入变量<code>c</code>，直到读到文件结尾，返回 EOF，循环终止。变量<code>c</code>的类型是<code>int</code>，而不是<code>char</code>，因为有可能等于负值，所以设为<code>int</code>更好一些。</p><h2 id="_8-fputc-putc" tabindex="-1"><a class="header-anchor" href="#_8-fputc-putc"><span>8 fputc()，putc()</span></a></h2><p><code>fputc()</code>和<code>putc()</code>用于向文件写入一个字符。它们的用法跟<code>putchar()</code>类似，区别是<code>putchar()</code>是向<code>stdout</code>写入，而这两个函数是向文件写入。它们的原型定义在头文件<code>stdio.h</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">char</span><span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">putc</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">char</span><span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p><code>fputc()</code>与<code>putc()</code>的用法是一样，都接受两个参数，第一个参数是待写入的字符，第二个参数是文件指针。它们的区别是，<code>putc()</code>通常是使用宏来实现，而<code>fputc()</code>只作为函数来实现，所以理论上，<code>putc()</code>的性能会好一点。</p><p>写入成功时，它们返回写入的字符；写入失败时，返回 EOF。</p><h2 id="_9-fprintf" tabindex="-1"><a class="header-anchor" href="#_9-fprintf"><span>9 fprintf()</span></a></h2><p><code>fprintf()</code>用于向文件写入格式化字符串，用法与<code>printf()</code>类似。区别是<code>printf()</code>总是写入<code>stdout</code>，而<code>fprintf()</code>则是写入指定的文件，它的第一个参数必须是一个文件指针。它的原型定义在头文件<code>stdio.h</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> <span class="token function">fprintf</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> stream<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre><p><code>fprintf()</code>可以替代<code>printf()</code>。</p><pre><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello, world!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面例子中，指定<code>fprintf()</code>写入<code>stdout</code>，结果就等同于调用<code>printf()</code>。</p><pre><code class="language-c"><span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">&quot;Sum: %d\\n&quot;</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例是向文件指针<code>fp</code>写入指定格式的字符串。</p><p>下面是向<code>stderr</code>输出错误信息的例子。</p><pre><code class="language-c"><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;Something number.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="_10-fscanf" tabindex="-1"><a class="header-anchor" href="#_10-fscanf"><span>10 fscanf()</span></a></h2><p><code>fscanf()</code>用于按照给定的模式，从文件中读取内容，用法跟<code>scanf()</code>类似。区别是<code>scanf()</code>总是从<code>stdin</code>读取数据，而<code>fscanf()</code>是从文件读入数据，它的原型定义在头文件<code>stdio.h</code>，第一个参数必须是文件指针。</p><pre><code class="language-c"><span class="token keyword">int</span> <span class="token function">fscanf</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> stream<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>下面是一个例子。</p><pre><code class="language-c"><span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，<code>fscanf()</code>从文件<code>fp</code>里面，读取两个整数，放入变量<code>i</code>和<code>j</code>。</p><p>使用<code>fscanf()</code>的前提是知道文件的结构，它的占位符解析规则与<code>scanf()</code>完全一致。由于<code>fscanf()</code>可以连续读取，直到读到文件尾，或者发生错误（读取失败、匹配失败），才会停止读取，所以<code>fscanf()</code>通常放在循环里面。</p><pre><code class="language-c"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> words<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token function">puts</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，<code>fscanf()</code>依次读取文件的每个词，将它们一行打印一个，直到文件结束。</p><p><code>fscanf()</code>的返回值是赋值成功的变量数量，如果赋值失败会返回 EOF。</p><h2 id="_11-fgets" tabindex="-1"><a class="header-anchor" href="#_11-fgets"><span>11 fgets()</span></a></h2><p><code>fgets()</code>用于从文件读取指定长度的字符串，它名字的第一个字符是<code>f</code>，就代表<code>file</code>。它的原型定义在头文件<code>stdio.h</code>。</p><pre><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> STRLEN<span class="token punctuation">,</span> File<span class="token operator">*</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>它的第一个参数<code>str</code>是一个字符串指针，用于存放读取的内容。第二个参数<code>STRLEN</code>指定读取的长度，第三个参数是一个 FILE 指针，指向要读取的文件。</p><p><code>fgets()</code>读取 STRLEN - 1 个字符之后，或者遇到换行符与文件结尾，就会停止读取，然后在已经读取的内容末尾添加一个空字符<code>\\0</code>，使之成为一个字符串。注意，<code>fgets()</code>会将换行符（<code>\\n</code>）存储进字符串。</p><p>如果<code>fgets</code>的第三个参数是<code>stdin</code>，就可以读取标准输入，等同于<code>scanf()</code>。</p><pre><code class="language-c"><span class="token function">fgets</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>读取成功时，<code>fgets()</code>的返回值是它的第一个参数，即指向字符串的指针，否则返回空指针 NULL。</p><p><code>fgets()</code>可以用来读取文件的每一行，下面是读取文件所有行的例子。</p><pre><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  FILE<span class="token operator">*</span> fp<span class="token punctuation">;</span>
  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 数组必须足够大，足以放下一行</span>
  <span class="token keyword">int</span> linecount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;hello.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> s<span class="token punctuation">,</span> fp<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d: %s&quot;</span><span class="token punctuation">,</span> <span class="token operator">++</span>linecount<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>上面示例中，每读取一行，都会输出行号和该行的内容。</p><p>下面的例子是循环读取用户的输入。</p><pre><code class="language-c"><span class="token keyword">char</span> words<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;Enter strings (q to quit):&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>words<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;q&#39;</span> <span class="token operator">&amp;&amp;</span> words<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>

  <span class="token function">puts</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;Done.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面的示例中，如果用户输入的字符串大于9个字符，<code>fgets()</code>会多次读取。直到遇到<code>q</code> + 回车键，才会退出循环。</p><h2 id="_12-fputs" tabindex="-1"><a class="header-anchor" href="#_12-fputs"><span>12 fputs()</span></a></h2><p><code>fputs()</code>函数用于向文件写入字符串，和<code>puts()</code>函数只有一点不同，那就是它不会在字符串末尾添加换行符。这是因为<code>fgets()</code>保留了换行符，所以<code>fputs()</code>就不添加了。<code>fputs()</code>函数通常与<code>fgets()</code>配对使用。</p><p>它的原型定义在<code>stdio.h</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span> FILE<span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>它接受两个参数，第一个参数是字符串指针，第二个参数是要写入的文件指针。如果第二个参数为<code>stdout</code>（标准输出），就是将内容输出到计算机屏幕，等同于<code>printf()</code>。</p><pre><code class="language-c"><span class="token keyword">char</span> words<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;Enter a string, please.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fgets</span><span class="token punctuation">(</span>words<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;This is your string:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fputs</span><span class="token punctuation">(</span>words<span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，先用<code>fgets()</code>从<code>stdin</code>读取用户输入，然后用<code>fputs()</code>输出到<code>stdout</code>。</p><p>写入成功时，<code>fputs()</code>返回一个非负整数，否则返回 EOF。</p><h2 id="_13-fwrite" tabindex="-1"><a class="header-anchor" href="#_13-fwrite"><span>13 fwrite()</span></a></h2><p><code>fwrite()</code>用来一次性写入较大的数据块，主要用途是将数组数据一次性写入文件，适合写入二进制数据。它的原型定义在<code>stdio.h</code>。</p><pre><code class="language-c"><span class="token class-name">size_t</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>
  <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> ptr<span class="token punctuation">,</span>
  <span class="token class-name">size_t</span> size<span class="token punctuation">,</span>
  <span class="token class-name">size_t</span> nmemb<span class="token punctuation">,</span>
  FILE<span class="token operator">*</span> fp
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>它接受四个参数。</p><ul><li><code>ptr</code>：数组指针。</li><li><code>size</code>：每个数组成员的大小，单位字节。</li><li><code>nmemb</code>：数组成员的数量。</li><li><code>fp</code>：要写入的文件指针。</li></ul><p>注意，<code>fwrite()</code>原型的第一个参数类型是<code>void*</code>，这是一个无类型指针，编译器会自动将参数指针转成<code>void*</code>类型。正是由于<code>fwrite()</code>不知道数组成员的类型，所以才需要知道每个成员的大小（第二个参数）和成员数量（第三个参数）。</p><p><code>fwrite()</code>函数的返回值是成功写入的数组成员的数量（注意不是字节数）。正常情况下，该返回值就是第三个参数<code>nmemb</code>，但如果出现写入错误，只写入了一部分成员，返回值会比<code>nmemb</code>小。</p><p>要将整个数组<code>arr</code>写入文件，可以采用下面的写法。</p><pre><code class="language-c"><span class="token function">fwrite</span><span class="token punctuation">(</span>
  arr<span class="token punctuation">,</span>
  <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  fp
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，<code>sizeof(a[0])</code>是每个数组成员占用的字节，<code>sizeof(a) / sizeof(a[0])</code>是整个数组的成员数量。</p><p>下面的例子是将一个大小为256字节的字符串写入文件。</p><pre><code class="language-c"><span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">fwrite</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，数组<code>buffer</code>每个成员是1个字节，一共有256个成员。由于<code>fwrite()</code>是连续内存复制，所以写成<code>fwrite(buffer, 256, 1, fp)</code>也能达到目的。</p><p><code>fwrite()</code>没有规定一定要写入整个数组，只写入数组的一部分也是可以的。</p><p>任何类型的数据都可以看成是1字节数据组成的数组，或者是一个成员的数组，所以<code>fwrite()</code>实际上可以写入任何类型的数据，而不仅仅是数组。比如，<code>fwrite()</code>可以将一个 Struct 结构写入文件保存。</p><pre><code class="language-c"><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，<code>s</code>是一个 Struct 结构指针，可以看成是一个成员的数组。注意，如果<code>s</code>的属性包含指针，存储时需要小心，因为保存指针可能没意义，还原出来的时候，并不能保证指针指向的数据还存在。</p><p><code>fwrite()</code>以及后面要介绍的<code>fread()</code>，比较适合读写二进制数据，因为它们不会对写入的数据进行解读。二进制数据可能包含空字符<code>\\0</code>，这是 C 语言的字符串结尾标记，所以读写二进制文件，不适合使用文本读写函数（比如<code>fprintf()</code>等）。</p><p>下面是一个写入二进制文件的例子。</p><pre><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  FILE<span class="token operator">*</span> fp<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> bytes<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;output.bin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fwrite</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>上面示例中，写入二进制文件时，<code>fopen()</code>要使用<code>wb</code>模式打开，表示二进制写入。<code>fwrite()</code>可以把数据解释成单字节数组，因此它的第二个参数是<code>sizeof(char)</code>，第三个参数是数组的总字节数<code>sizeof(bytes)</code>。</p><p>上面例子写入的文件<code>output.bin</code>，使用十六进制编辑器打开，会是下面的内容。</p><pre><code class="language-c"><span class="token number">05</span> <span class="token number">25</span> <span class="token number">00</span> <span class="token number">58</span> ff <span class="token number">0</span>c
</code></pre><p><code>fwrite()</code>还可以连续向一个文件写入数据。</p><pre><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">clientData</span> myClient <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">&#39;foo bar&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>myClient<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">clientData</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> cfPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>上面示例中，<code>fwrite()</code>连续将100条数据写入文件。</p><h2 id="_14-fread" tabindex="-1"><a class="header-anchor" href="#_14-fread"><span>14 fread()</span></a></h2><p><code>fread()</code>函数用于一次性从文件读取较大的数据块，主要用途是将文件内容读入一个数组，适合读取二进制数据。它的原型定义在头文件<code>stdio.h</code>。</p><pre><code class="language-c"><span class="token class-name">size_t</span> <span class="token function">fread</span><span class="token punctuation">(</span>
  <span class="token keyword">void</span><span class="token operator">*</span> ptr<span class="token punctuation">,</span>
  <span class="token class-name">size_t</span> size<span class="token punctuation">,</span>
  <span class="token class-name">size_t</span> nmemb<span class="token punctuation">,</span>
  FILE<span class="token operator">*</span> fp
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>它接受四个参数，与<code>fwrite()</code>完全相同。</p><ul><li><code>ptr</code>：数组地址。</li><li><code>size</code>：每个数组成员的大小，单位为字节。</li><li><code>nmemb</code>：数组的成员数量。</li><li><code>fp</code>：文件指针。</li></ul><p>要将文件内容读入数组<code>arr</code>，可以采用下面的写法。</p><pre><code class="language-c"><span class="token function">fread</span><span class="token punctuation">(</span>
  arr<span class="token punctuation">,</span>
  <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  fp
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，数组长度（第二个参数）和每个成员的大小（第三个参数）的乘积，就是数组占用的内存空间的大小。<code>fread()</code>会从文件（第四个参数）里面读取相同大小的内容，然后将<code>ptr</code>（第一个参数）指向这些内容的内存地址。</p><p>下面的例子是将文件内容读入一个10个成员的双精度浮点数数组。</p><pre><code class="language-c"><span class="token keyword">double</span> earnings<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">fread</span><span class="token punctuation">(</span>earnings<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，每个数组成员的大小是<code>sizeof(double)</code>，一个有10个成员，就会从文件<code>fp</code>读取<code>sizeof(double) * 10</code>大小的内容。</p><p><code>fread()</code>函数的返回值是成功读取的数组成员的数量。正常情况下，该返回值就是第三个参数<code>nmemb</code>，但如果出现读取错误或读到文件结尾，该返回值就会比<code>nmemb</code>小。所以，检查<code>fread()</code>的返回值是非常重要的。</p><p><code>fread()</code>和<code>fwrite()</code>可以配合使用。在程序终止之前，使用<code>fwrite()</code>将数据保存进文件，下次运行时再用<code>fread()</code>将数据还原进入内存。</p><p>下面是读取上一节生成的二进制文件<code>output.bin</code>的例子。</p><pre><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  FILE<span class="token operator">*</span> fp<span class="token punctuation">;</span>
  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> c<span class="token punctuation">;</span>

  fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;output.bin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>运行后，得到如下结果。</p><pre><code class="language-c"><span class="token number">5</span>
<span class="token number">37</span>
<span class="token number">0</span>
<span class="token number">88</span>
<span class="token number">255</span>
<span class="token number">12</span>
</code></pre><h2 id="_15-feof" tabindex="-1"><a class="header-anchor" href="#_15-feof"><span>15 feof()</span></a></h2><p><code>feof()</code>函数判断文件的内部指针是否指向文件结尾。它的原型定义在头文件<code>stdio.h</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> <span class="token function">feof</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p><code>feof()</code>接受一个文件指针作为参数。如果已经到达文件结尾，会返回一个非零值（表示 true），否则返回<code>0</code>（表示 false）。</p><p>诸如<code>fgetc()</code>这样的文件读取函数，如果返回 EOF，有两种可能，一种可能是已读取到文件结尾，另一种可能是出现读取错误。<code>feof()</code>可以用来判断到底是那一种情况。</p><p>下面是通过<code>feof()</code>判断是否到达文件结尾，从而循环读取整个文件的例子。</p><pre><code class="language-c"><span class="token keyword">int</span> num<span class="token punctuation">;</span>
<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

FILE<span class="token operator">*</span> cfPtr <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;clients.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>cfPtr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">fscanf</span><span class="token punctuation">(</span>cfPtr<span class="token punctuation">,</span> <span class="token string">&quot;%d%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %s\\n&quot;</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">fclose</span><span class="token punctuation">(</span>cfPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例通过循环判断<code>feof()</code>是否读到文件结尾，从而实现读出整个文件内容。</p><p><code>feof()</code>为真时，可以通过<code>fseek()</code>、<code>rewind()</code>、<code>fsetpos()</code>函数改变文件内部读写位置的指示器，从而清除这个函数的状态。</p><h2 id="_16-fseek" tabindex="-1"><a class="header-anchor" href="#_16-fseek"><span>16 fseek()</span></a></h2><p>每个文件指针都有一个内部指示器（内部指针），记录当前打开的文件的读写位置（file position），即下一次读写从哪里开始。文件操作函数（比如<code>getc()</code>、<code>fgets()</code>、<code>fscanf()</code>和<code>fread()</code>等）都从这个指示器指定的位置开始按顺序读写文件。</p><p>如果希望改变这个指示器，将它移到文件的指定位置，可以使用<code>fseek()</code>函数。它的原型定义在头文件<code>stdio.h</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> <span class="token function">fseek</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> stream<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> whence<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p><code>fseek()</code>接受3个参数。</p><ul><li><code>stream</code>：文件指针。</li><li><code>offset</code>：距离基准（第三个参数）的字节数。类型为 long int，可以为正值（向文件末尾移动）、负值（向文件开始处移动）或 0（保持不动）。</li><li><code>whence</code>：位置基准，用来确定计算起点。它的值是以下三个宏（定义在<code>stdio.h</code>）：<code>SEEK_SET</code>（文件开始处）、<code>SEEK_CUR </code>（内部指针的当前位置）、<code>SEEK_END</code>（文件末尾）</li></ul><p>请看下面的例子。</p><pre><code class="language-c"><span class="token comment">// 定位到文件开始处</span>
<span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 定位到文件末尾</span>
<span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 从当前位置后移2个字节</span>
<span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">2L</span><span class="token punctuation">,</span> <span class="token constant">SEEK_CUR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 定位到文件第10个字节</span>
<span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">10L</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 定位到文件倒数第10个字节</span>
<span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10L</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，<code>fseek()</code>的第二个参数为 long 类型，所以移动距离必须加上后缀<code>L</code>，将其转为 long 类型。</p><p>下面的示例逆向输出文件的所有字节。</p><pre><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span>count <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span> count <span class="token operator">&lt;=</span> size<span class="token punctuation">;</span> count<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token operator">-</span>count<span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ch <span class="token operator">=</span> <span class="token function">getc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>注意，<code>fseek()</code>最好只用来操作二进制文件，不要用来读取文本文件。因为文本文件的字符有不同的编码，某个位置的准确字节位置不容易确定。</p><p>正常情况下，<code>fseek()</code>的返回值为0。如果发生错误（如移动的距离超出文件的范围），返回值为非零值（比如<code>-1</code>)。</p><h2 id="_17-ftell" tabindex="-1"><a class="header-anchor" href="#_17-ftell"><span>17 ftell()</span></a></h2><p><code>ftell()</code>函数返回文件内部指示器的当前位置。它的原型定义在头文件<code>stdio.h</code>。</p><pre><code class="language-c"><span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">ftell</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>它接受一个文件指针作为参数。返回值是一个 long 类型的整数，表示内部指示器的当前位置，即文件开始处到当前位置的字节数，<code>0</code>表示文件开始处。如果发生错误，<code>ftell()</code>返回<code>-1L</code>。</p><p><code>ftell()</code>可以跟<code>fseek()</code>配合使用，先记录内部指针的位置，一系列操作过后，再用<code>fseek()</code>返回原来的位置。</p><pre><code class="language-c"><span class="token keyword">long</span> file_pos <span class="token operator">=</span> <span class="token function">ftell</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 一系列文件操作之后</span>
<span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> file_pos<span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>下面的例子先将指示器定位到文件结尾，然后得到文件开始处到结尾的字节数。</p><pre><code class="language-c"><span class="token function">fseek</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
size <span class="token operator">=</span> <span class="token function">ftell</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="_18-rewind" tabindex="-1"><a class="header-anchor" href="#_18-rewind"><span>18 rewind()</span></a></h2><p><code>rewind()</code>函数可以让文件的内部指示器回到文件开始处。它的原型定义在<code>stdio.h</code>。</p><pre><code class="language-c"><span class="token keyword">void</span> <span class="token function">rewind</span><span class="token punctuation">(</span>file<span class="token operator">*</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>它接受一个文件指针作为参数。</p><p><code>rewind(fp)</code>基本等价于<code>fseek(fp, 0l, seek_set)</code>，唯一的区别是<code>rewind()</code>没有返回值，而且会清除当前文件的错误指示器。</p><h2 id="_19-fgetpos-fsetpos" tabindex="-1"><a class="header-anchor" href="#_19-fgetpos-fsetpos"><span>19 fgetpos()，fsetpos()</span></a></h2><p><code>fseek()</code>和<code>ftell()</code>有一个潜在的问题，那就是它们都把文件大小限制在 long int 类型能表示的范围内。这看起来相当大，但是在32位计算机上，long int 的长度为4个字节，能够表示的范围最大为 4GB。随着存储设备的容量迅猛增长，文件也越来越大，往往会超出这个范围。鉴于此，C 语言新增了两个处理大文件的新定位函数：<code>fgetpos()</code>和<code>fsetpos()</code>。</p><p>它们的原型都定义在头文件<code>stdio.h</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> <span class="token function">fgetpos</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> stream<span class="token punctuation">,</span> <span class="token class-name">fpos_t</span><span class="token operator">*</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">fsetpos</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> stream<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">fpos_t</span><span class="token operator">*</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p><code>fgetpos()</code>函数会将文件内部指示器的当前位置，存储在指针变量<code>pos</code>。该函数接受两个参数，第一个是文件指针，第二个存储指示器位置的变量。</p><p><code>fsetpos()</code>函数会将文件内部指示器的位置，移动到指针变量<code>pos</code>指定的地址。注意，变量<code>pos</code>必须是通过调用<code>fgetpos()</code>方法获得的。<code>fsetpos()</code>的两个参数与<code>fgetpos()</code>必须是一样的。</p><p>记录文件内部指示器位置的指针变量<code>pos</code>，类型为<code>fpos_t*</code>（file position type 的缩写，意为文件定位类型）。它不一定是整数，也可能是一个 Struct 结构。</p><p>下面是用法示例。</p><pre><code class="language-c"><span class="token class-name">fpos_t</span> file_pos<span class="token punctuation">;</span>
<span class="token function">fgetpos</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>file_pos<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 一系列文件操作之后</span>
<span class="token function">fsetpos</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>file_pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，先用<code>fgetpos()</code>获取内部指针的位置，后面再用<code>fsetpos()</code>恢复指针的位置。</p><p>执行成功时，<code>fgetpos()</code>和<code>fsetpos()</code>都会返回<code>0</code>，否则返回非零值。</p><h2 id="_20-ferror-clearerr" tabindex="-1"><a class="header-anchor" href="#_20-ferror-clearerr"><span>20 ferror()，clearerr()</span></a></h2><p>所有的文件操作函数如果执行失败，都会在文件指针里面记录错误状态。后面的操作只要读取错误指示器，就知道前面的操作出错了。</p><p><code>ferror()</code>函数用来返回错误指示器的状态。可以通过这个函数，判断前面的文件操作是否成功。它的原型定义在头文件<code>stdio.h</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> <span class="token function">ferror</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>它接受一个文件指针作为参数。如果前面的操作出现错误，<code>ferror()</code>就会返回一个非零整数（表示 true），否则返回<code>0</code>。</p><p><code>clearerr()</code>函数用来重置出错指示器。它的原型定义在头文件<code>stdio.h</code>。</p><pre><code class="language-c"><span class="token keyword">void</span> <span class="token function">clearerr</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>它接受一个文件指针作为参数，没有返回值。</p><p>下面是一个例子。</p><pre><code class="language-c">FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;file.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ferror</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;读取文件：file.txt 时发生错误\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">clearerr</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，<code>fgetc()</code>尝试读取一个以”写模式“打开的文件，读取失败就会返回 EOF。这时调用<code>ferror()</code>就可以知道上一步操作出错了。处理完以后，再用<code>clearerr()</code>清除出错状态。</p><p>文件操作函数如果正常执行，<code>ferror()</code>和<code>feof()</code>都会返回零。如果执行不正常，就要判断到底是哪里出了问题。</p><pre><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ferror</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;io error\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;end of file\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">clearerr</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>上面示例中，当<code>fscanf()</code>函数报错时，通过检查<code>ferror()</code>和<code>feof()</code>，确定到底发生什么问题。这两个指示器改变状态后，会保持不变，所以要用<code>clearerr()</code>清除它们，<code>clearerr()</code>可以同时清除两个指示器。</p><h2 id="_21-remove" tabindex="-1"><a class="header-anchor" href="#_21-remove"><span>21 remove()</span></a></h2><p><code>remove()</code>函数用于删除指定文件。它的原型定义在头文件<code>stdio.h</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>它接受文件名作为参数。如果删除成功，<code>remove()</code>返回<code>0</code>，否则返回非零值。</p><pre><code class="language-c"><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;foo.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例删除了<code>foo.txt</code>文件。</p><p>注意，删除文件必须是在文件关闭的状态下。如果是用<code>fopen()</code>打开的文件，必须先用<code>fclose()</code>关闭后再删除。</p><h2 id="_22-rename" tabindex="-1"><a class="header-anchor" href="#_22-rename"><span>22 rename()</span></a></h2><p><code>rename()</code>函数用于文件改名，也用于移动文件。它的原型定义在头文件<code>stdio.h</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> <span class="token function">rename</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> old_filename<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> new_filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>它接受两个参数，第一个参数是现在的文件名，第二个参数是新的文件名。如果改名成功，<code>rename()</code>返回<code>0</code>，否则返回非零值。</p><pre><code class="language-c"><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">&quot;foo.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bar.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例将<code>foo.txt</code>改名为<code>bar.txt</code>。</p><p>注意，改名后的文件不能与现有文件同名。另外，如果要改名的文件已经打开了，必须先关闭，然后再改名，对打开的文件进行改名会失败。</p><p>下面是移动文件的例子。</p><pre><code class="language-c"><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">&quot;/tmp/evidence.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/home/beej/nothing.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>`,251)])])}const i=s(t,[["render",e]]),d=JSON.parse('{"path":"/develop/C/13_file.html","title":"13. C语言-文件操作","lang":"zh-CN","frontmatter":{"category":"C","tags":["C"],"description":"13. C语言-文件操作 1 文件指针 C 语言提供了一个 FILE 数据结构，记录了操作一个文件所需要的信息。该结构定义在头文件stdio.h，所有文件操作函数都要通过这个数据结构，获取文件信息。 开始操作一个文件之前，就要定义一个指向该文件的 FILE 指针，相当于获取一块内存区域，用来保存文件信息。 上面示例定义了一个 FILE 指针fp。 下面...","head":[["meta",{"property":"og:url","content":"https://echo0d.github.io/DailyNotes/develop/C/13_file.html"}],["meta",{"property":"og:site_name","content":"echo0d-notes"}],["meta",{"property":"og:title","content":"13. C语言-文件操作"}],["meta",{"property":"og:description","content":"13. C语言-文件操作 1 文件指针 C 语言提供了一个 FILE 数据结构，记录了操作一个文件所需要的信息。该结构定义在头文件stdio.h，所有文件操作函数都要通过这个数据结构，获取文件信息。 开始操作一个文件之前，就要定义一个指向该文件的 FILE 指针，相当于获取一块内存区域，用来保存文件信息。 上面示例定义了一个 FILE 指针fp。 下面..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-11T02:11:10.000Z"}],["meta",{"property":"article:author","content":"echo0d"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:modified_time","content":"2025-04-11T02:11:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"13. C语言-文件操作\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-11T02:11:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"echo0d\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"1 文件指针","slug":"_1-文件指针","link":"#_1-文件指针","children":[]},{"level":2,"title":"2 fopen()","slug":"_2-fopen","link":"#_2-fopen","children":[]},{"level":2,"title":"3 标准流","slug":"_3-标准流","link":"#_3-标准流","children":[]},{"level":2,"title":"4 fclose()","slug":"_4-fclose","link":"#_4-fclose","children":[]},{"level":2,"title":"5 EOF","slug":"_5-eof","link":"#_5-eof","children":[]},{"level":2,"title":"6 freopen()","slug":"_6-freopen","link":"#_6-freopen","children":[]},{"level":2,"title":"7 fgetc()，getc()","slug":"_7-fgetc-getc","link":"#_7-fgetc-getc","children":[]},{"level":2,"title":"8 fputc()，putc()","slug":"_8-fputc-putc","link":"#_8-fputc-putc","children":[]},{"level":2,"title":"9 fprintf()","slug":"_9-fprintf","link":"#_9-fprintf","children":[]},{"level":2,"title":"10 fscanf()","slug":"_10-fscanf","link":"#_10-fscanf","children":[]},{"level":2,"title":"11 fgets()","slug":"_11-fgets","link":"#_11-fgets","children":[]},{"level":2,"title":"12 fputs()","slug":"_12-fputs","link":"#_12-fputs","children":[]},{"level":2,"title":"13 fwrite()","slug":"_13-fwrite","link":"#_13-fwrite","children":[]},{"level":2,"title":"14 fread()","slug":"_14-fread","link":"#_14-fread","children":[]},{"level":2,"title":"15 feof()","slug":"_15-feof","link":"#_15-feof","children":[]},{"level":2,"title":"16 fseek()","slug":"_16-fseek","link":"#_16-fseek","children":[]},{"level":2,"title":"17 ftell()","slug":"_17-ftell","link":"#_17-ftell","children":[]},{"level":2,"title":"18 rewind()","slug":"_18-rewind","link":"#_18-rewind","children":[]},{"level":2,"title":"19 fgetpos()，fsetpos()","slug":"_19-fgetpos-fsetpos","link":"#_19-fgetpos-fsetpos","children":[]},{"level":2,"title":"20 ferror()，clearerr()","slug":"_20-ferror-clearerr","link":"#_20-ferror-clearerr","children":[]},{"level":2,"title":"21 remove()","slug":"_21-remove","link":"#_21-remove","children":[]},{"level":2,"title":"22 rename()","slug":"_22-rename","link":"#_22-rename","children":[]}],"git":{"createdTime":1743069738000,"updatedTime":1744337470000,"contributors":[{"name":"echo0d","email":"echo0d@163.com","commits":3}]},"readingTime":{"minutes":27.67,"words":8302},"filePathRelative":"develop/C/13_file.md","localizedDate":"2025年3月27日","excerpt":"","autoDesc":true}');export{i as comp,d as data};
