import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as s,e as t}from"./app-94clFSvf.js";const a="/DailyNotes/assets/image-20240813141650756-uNzkBvZx.png",i={},o=t(`<h1 id="_5-listener" tabindex="-1"><a class="header-anchor" href="#_5-listener" aria-hidden="true">#</a> 5-Listener</h1><p>Listener 表示监听器，可以监听 <code>application</code>，<code>session</code>，<code>request</code> 三个对象创建、销毁或者往其中添加修改删除属性时自动执行代码的功能组件。 <code>application</code> 是 <code>ServletContext</code> 类型的对象。<code>ServletContext</code> 代表整个web应用，在服务器启动的时候，tomcat会自动创建该对象。在服务器关闭时会自动销毁该对象。</p><h2 id="_1-listener分类" tabindex="-1"><a class="header-anchor" href="#_1-listener分类" aria-hidden="true">#</a> 1. Listener分类</h2><p>在JavaWeb中提供了8个监听器：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>6个常规监听器
    ServletContext
            ServletContextListener（上下文监听器，监听ServletContext对象的创建和销毁事件，用于监听Web应用程序的启动和关闭事件。）
            ServletContextAttributeListener（属性监听，监听ServletContext中属性的添加、修改和删除事件。）
    HttpSession
            HttpSessionListener（会话监听器，监听HttpSession对象的创建和销毁事件，用于监听会话的创建和销毁事件。）
            HttpSessionAttributeListener（属性监听，监听HttpSession中属性的添加、修改和删除事件。）
    ServletRequest
            ServletRequestListener（请求监听器，监听ServletRequest对象的创建和销毁事件，用于监听请求的创建和销毁事件。）
            ServletRequestAttributeListener（属性监听，监听ServletRequest中属性的添加、修改和删除事件。）

2个感知监听
    HttpSessionBindingListener
    HttpSessionActivationListener
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-listener-生命周期" tabindex="-1"><a class="header-anchor" href="#_2-listener-生命周期" aria-hidden="true">#</a> 2. Listener 生命周期</h2><p>Listener 的生命周期由容器管理，容器会在适当的时机调用监听器的方法。让我们简要了解一下这些生命周期方法。</p><h5 id="servletcontextlistener-生命周期" tabindex="-1"><a class="header-anchor" href="#servletcontextlistener-生命周期" aria-hidden="true">#</a> <code>ServletContextListener</code> 生命周期</h5><p><code>ServletContextListener</code> 接口定义了两个方法：</p><ul><li><strong><code>contextInitialized(ServletContextEvent sce)</code></strong>：在 Web 应用程序初始化时被调用。</li><li><strong><code>contextDestroyed(ServletContextEvent sce)</code></strong>：在 Web 应用程序销毁时被调用。</li></ul><h5 id="httpsessionlistener-生命周期" tabindex="-1"><a class="header-anchor" href="#httpsessionlistener-生命周期" aria-hidden="true">#</a> <code>HttpSessionListener</code> 生命周期</h5><p><code>HttpSessionListener</code> 接口也定义了两个方法：</p><ul><li><strong><code>sessionCreated(HttpSessionEvent se)</code></strong>：在会话创建时被调用。</li><li><strong><code>sessionDestroyed(HttpSessionEvent se)</code></strong>：在会话销毁时被调用。</li></ul><h5 id="servletrequestlistener-生命周期" tabindex="-1"><a class="header-anchor" href="#servletrequestlistener-生命周期" aria-hidden="true">#</a> <code>ServletRequestListener</code> 生命周期</h5><p><code>ServletRequestListener</code> 接口同样定义了两个方法：</p><ul><li><strong><code>requestInitialized(ServletRequestEvent sre)</code></strong>：在请求创建时被调用。</li><li><strong><code>requestDestroyed(ServletRequestEvent sre)</code></strong>：在请求销毁时被调用。</li></ul><h2 id="_3-listener实现步骤" tabindex="-1"><a class="header-anchor" href="#_3-listener实现步骤" aria-hidden="true">#</a> 3. Listener实现步骤</h2><p>以<code>ServletContextListener</code>为例，<code>ServletContextListener</code> 用于监听 Web 应用程序的启动和关闭事件。</p><ul><li>定义类，实现<code>ServletContextListener</code> 接口</li><li>重写所有抽象方法，我们可以在 <code>contextInitialized</code> 方法中执行一些初始化操作，在 <code>contextDestroyed</code> 方法中执行清理操作。</li><li>使用 <code>@WebListener</code> 进行配置（或者使用<code>web.xml ： &lt;listener&gt;&lt;/listener&gt;</code>）</li><li>启动tomcat，查看console的输出</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>echo0d</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContextEvent</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContextListener</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebListener</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@WebListener</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServletContextListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 应用程序启动时执行的初始化操作</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;应用程序已启动&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 加载配置文件、初始化数据库连接池等</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 应用程序关闭时执行的清理操作</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;应用程序即将关闭&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 关闭数据库连接池、释放资源等</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+a+'" alt="image-20240813141650756" tabindex="0" loading="lazy"><figcaption>image-20240813141650756</figcaption></figure>',21),l=[o];function c(p,r){return n(),s("div",null,l)}const v=e(i,[["render",c],["__file","5-JavaWeb_Listener.html.vue"]]);export{v as default};
