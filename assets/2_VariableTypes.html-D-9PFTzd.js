import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as o,o as e}from"./app-BJ0txEXQ.js";const p={};function c(t,n){return e(),a("div",null,n[0]||(n[0]=[o(`<h1 id="_02-变量-数据类型" tabindex="-1"><a class="header-anchor" href="#_02-变量-数据类型"><span>02. 变量&amp;数据类型</span></a></h1><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h2><p>变量（variable）可以理解成一块内存区域的名字。通过变量名，可以引用这块内存区域，获取里面存储的值。由于值可能发生变化，所以称为变量，否则就是常量了。</p><h3 id="变量名" tabindex="-1"><a class="header-anchor" href="#变量名"><span>变量名</span></a></h3><p>变量名在 C 语言里面属于标识符（identifier），命名有严格的规范。</p><ul><li>只能由字母（包括大写和小写）、数字和下划线（<code>_</code>）组成。</li><li>不能以数字开头。</li><li>长度不能超过63个字符。</li></ul><p>下面是一些无效变量名的例子。</p><pre><code>$zj
j**p
2cat
Hot-tab
tax rate
don&#39;t
</code></pre><p>上面示例中，每一行的变量名都是无效的。</p><p>变量名区分大小写，<code>star</code>、<code>Star</code>、<code>STAR</code>都是不同的变量。</p><p>并非所有的词都能用作变量名，有些词在 C 语言里面有特殊含义（比如<code>int</code>），另一些词是命令（比如<code>continue</code>），它们都称为关键字，不能用作变量名。另外，C 语言还保留了一些词，供未来使用，这些保留字也不能用作变量名。下面就是 C 语言主要的关键字和保留字。</p><blockquote><p>auto, break, case, char, const, continue, default, do, double, else, enum, extern, float, for, goto, if, inline, int, long, register, restrict, return, short, signed, sizeof, static, struct, switch, typedef, union, unsigned, void, volatile, while</p></blockquote><p>另外，两个下划线开头的变量名，以及一个下划线 + 大写英文字母开头的变量名，都是系统保留的，自己不应该起这样的变量名。</p><h3 id="变量的声明" tabindex="-1"><a class="header-anchor" href="#变量的声明"><span>变量的声明</span></a></h3><p>C 语言的变量，必须先声明后使用。如果一个变量没有声明，就直接使用，会报错。</p><p>每个变量都有自己的类型（type）。声明变量时，必须把变量的类型告诉编译器。</p><pre><code class="language-c"><span class="token keyword">int</span> height<span class="token punctuation">;</span>
</code></pre><p>上面代码声明了变量<code>height</code>，并且指定类型为<code>int</code>（整数）。</p><p>如果几个变量具有相同类型，可以在同一行声明。</p><pre><code class="language-c"><span class="token keyword">int</span> height<span class="token punctuation">,</span> width<span class="token punctuation">;</span>

<span class="token comment">// 等同于</span>
<span class="token keyword">int</span> height<span class="token punctuation">;</span>
<span class="token keyword">int</span> width<span class="token punctuation">;</span>
</code></pre><p>注意，声明变量的语句必须以分号结尾。</p><p>一旦声明，变量的类型就不能在运行时修改。</p><h3 id="变量的赋值" tabindex="-1"><a class="header-anchor" href="#变量的赋值"><span>变量的赋值</span></a></h3><p>C 语言会在变量声明时，就为它分配内存空间，但是不会清除内存里面原来的值。这导致声明变量以后，变量会是一个随机的值。所以，变量一定要赋值以后才能使用。</p><p>赋值操作通过赋值运算符（<code>=</code>）完成。</p><pre><code class="language-c"><span class="token keyword">int</span> num<span class="token punctuation">;</span>
num <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，第一行声明了一个整数变量<code>num</code>，第二行给这个变量赋值。</p><p>变量的值应该与类型一致，不应该赋予不是同一个类型的值，比如<code>num</code>的类型是整数，就不应该赋值为小数。虽然 C 语言会自动转换类型，但是应该避免赋值运算符两侧的类型不一致。</p><p>变量的声明和赋值，也可以写在一行。</p><pre><code class="language-c"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
</code></pre><p>多个相同类型变量的赋值，可以写在同一行。</p><pre><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><p>注意，赋值表达式有返回值，等于等号右边的值。</p><pre><code class="language-c"><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>

x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
y <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面代码中，变量<code>y</code>的值就是赋值表达式（<code>x = 2 * x</code>）的返回值<code>2</code>。</p><p>由于赋值表达式有返回值，所以 C 语言可以写出多重赋值表达式。</p><pre><code class="language-c"><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span>

x <span class="token operator">=</span> y <span class="token operator">=</span> z <span class="token operator">=</span> m <span class="token operator">=</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><p>上面的代码是合法代码，一次为多个变量赋值。赋值运算符是从右到左执行，所以先为<code>n</code>赋值，然后依次为<code>m</code>、<code>z</code>、<code>y</code>和<code>x</code>赋值。</p><p>C 语言有左值（left value）和右值（right value）的概念。左值是可以放在赋值运算符左边的值，一般是变量；右值是可以放在赋值运算符右边的值，一般是一个具体的值。这是为了强调有些值不能放在赋值运算符的左边，比如<code>x = 1</code>是合法的表达式，但是<code>1 = x</code>就会报错。</p><h3 id="变量的作用域" tabindex="-1"><a class="header-anchor" href="#变量的作用域"><span>变量的作用域</span></a></h3><p>作用域（scope）指的是变量生效的范围。C 语言的变量作用域主要有两种：文件作用域（file scope）和块作用域（block scope）。</p><p>文件作用域（file scope）指的是，在源码文件顶层声明的变量，从声明的位置到文件结束都有效。</p><pre><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%i\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>上面示例中，变量<code>x</code>是在文件顶层声明的，从声明位置开始的整个当前文件都是它的作用域，可以在这个范围的任何地方读取这个变量，比如函数<code>main()</code>内部就可以读取这个变量。</p><p>块作用域（block scope）指的是由大括号（<code>{}</code>）组成的代码块，它形成一个单独的作用域。凡是在块作用域里面声明的变量，只在当前代码块有效，代码块外部不可见。</p><pre><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 12 99</span>
<span class="token punctuation">}</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 12</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 出错</span>
</code></pre><p>上面例子中，变量<code>b</code>是在<code>if</code>代码块里面声明的，所以对于大括号外面的代码，这个变量是不存在的。</p><p>代码块可以嵌套，即代码块内部还有代码块，这时就形成了多层的块作用域。它的规则是：内层代码块可以使用外层声明的变量，但外层不可以使用内层声明的变量。如果内层的变量与外层同名，那么会在当前作用域覆盖外层变量。</p><pre><code class="language-c"><span class="token punctuation">{</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

  <span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 20</span>
  <span class="token punctuation">}</span>

  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 10</span>
<span class="token punctuation">}</span>
</code></pre><p>上面示例中，内层和外层都有一个变量<code>i</code>，每个作用域都会优先使用当前作用域声明的<code>i</code>。</p><p>最常见的块作用域就是函数，函数内部声明的变量，对于函数外部是不可见的。<code>for</code>循环也是一个块作用域，循环变量只对循环体内部可见，外部是不可见的。</p><pre><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 出错</span>
</code></pre><p>上面示例中，<code>for</code>循环省略了大括号，但依然是一个块作用域，在外部读取循环变量<code>i</code>，编译器就会报错。</p><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><p>C 语言的每一种数据，都是有类型（type）的，编译器必须知道数据的类型，才能操作数据。所谓“类型”，就是相似的数据所拥有的共同特征，那么一旦知道某个值的数据类型，就能知道该值的特征和操作方式。</p><p>基本数据类型有三种：字符（char）、整数（int）和浮点数（float）。复杂的类型都是基于它们构建的。</p><h3 id="字符类型" tabindex="-1"><a class="header-anchor" href="#字符类型"><span>字符类型</span></a></h3><p>字符类型指的是单个字符，类型声明使用<code>char</code>关键字。</p><pre><code class="language-c"><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;B&#39;</span><span class="token punctuation">;</span>
</code></pre><p>上面示例声明了变量<code>c</code>是字符类型，并将其赋值为字母<code>B</code>。</p><p>C 语言规定，字符常量必须放在单引号里面。</p><p>在计算机内部，字符类型使用一个字节（8位）存储。C 语言将其当作整数处理，所以字符类型就是宽度为一个字节的整数。每个字符对应一个整数（由 ASCII 码确定），比如<code>B</code>对应整数<code>66</code>。</p><p>字符类型在不同计算机的默认范围是不一样的。一些系统默认为<code>-128</code>到<code>127</code>，另一些系统默认为<code>0</code>到<code>255</code>。这两种范围正好都能覆盖<code>0</code>到<code>127</code>的 ASCII 字符范围。</p><p>只要在字符类型的范围之内，整数与字符是可以互换的，都可以赋值给字符类型的变量。</p><pre><code class="language-c"><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">66</span><span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">&#39;B&#39;</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，变量<code>c</code>是字符类型，赋给它的值是整数66。这跟赋值为字符<code>B</code>的效果是一样的。</p><p>两个字符类型的变量可以进行数学运算。</p><pre><code class="language-c"><span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token char">&#39;B&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 等同于 char a = 66;</span>
<span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token char">&#39;C&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 等同于 char b = 67;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 133</span>
</code></pre><p>上面示例中，字符类型变量<code>a</code>和<code>b</code>相加，视同两个整数相加。占位符<code>%d</code>表示输出十进制整数，因此输出结果为133。</p><p>单引号本身也是一个字符，如果要表示这个字符常量，必须使用反斜杠转义。</p><pre><code class="language-c"><span class="token keyword">char</span> t <span class="token operator">=</span> <span class="token char">&#39;\\&#39;&#39;</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，变量<code>t</code>为单引号字符，由于字符常量必须放在单引号里面，所以内部的单引号要使用反斜杠转义。</p><p>这种转义的写法，主要用来表示 ASCII 码定义的一些无法打印的控制字符，它们也属于字符类型的值。</p><ul><li><code>\\a</code>：警报，这会使得终端发出警报声或出现闪烁，或者两者同时发生。</li><li><code>\\b</code>：退格键，光标回退一个字符，但不删除字符。</li><li><code>\\f</code>：换页符，光标移到下一页。在现代系统上，这已经反映不出来了，行为改成类似于<code>\\v</code>。</li><li><code>\\n</code>：换行符。</li><li><code>\\r</code>：回车符，光标移到同一行的开头。</li><li><code>\\t</code>：制表符，光标移到下一个水平制表位，通常是下一个8的倍数。</li><li><code>\\v</code>：垂直分隔符，光标移到下一个垂直制表位，通常是下一行的同一列。</li><li><code>\\0</code>：null 字符，代表没有内容。注意，这个值不等于数字0。</li></ul><p>转义写法还能使用八进制和十六进制表示一个字符。</p><ul><li><code>\\nn</code>：字符的八进制写法，<code>nn</code>为八进制值。</li><li><code>\\xnn</code>：字符的十六进制写法，<code>nn</code>为十六进制值。</li></ul><pre><code class="language-c"><span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token char">&#39;B&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token number">66</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token char">&#39;\\102&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 八进制</span>
<span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token char">&#39;\\x42&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 十六进制</span>
</code></pre><p>上面示例的四种写法都是等价的。</p><h3 id="整数类型" tabindex="-1"><a class="header-anchor" href="#整数类型"><span>整数类型</span></a></h3><h4 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h4><p>整数类型用来表示较大的整数，类型声明使用<code>int</code>关键字。</p><pre><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">;</span>
</code></pre><p>上面示例声明了一个整数变量<code>a</code>。</p><p>不同计算机的<code>int</code>类型的大小是不一样的。比较常见的是使用4个字节（32位）存储一个<code>int</code>类型的值，但是2个字节（16位）或8个字节（64位）也有可能使用。它们可以表示的整数范围如下。</p><ul><li>16位：-32,768 到 32,767。</li><li>32位：-2,147,483,648 到 2,147,483,647。</li><li>64位：-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807。</li></ul><h4 id="signed-unsigned" tabindex="-1"><a class="header-anchor" href="#signed-unsigned"><span>signed，unsigned</span></a></h4><p>C 语言使用<code>signed</code>关键字，表示一个类型带有正负号，包含负值；使用<code>unsigned</code>关键字，表示该类型不带有正负号，只能表示零和正整数。</p><p>对于<code>int</code>类型，默认是带有正负号的，也就是说<code>int</code>等同于<code>signed int</code>。由于这是默认情况，关键字<code>signed</code>一般都省略不写，但是写了也不算错。</p><pre><code class="language-c"><span class="token keyword">signed</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token keyword">int</span> a<span class="token punctuation">;</span>
</code></pre><p><code>int</code>类型也可以不带正负号，只表示非负整数。这时就必须使用关键字<code>unsigned</code>声明变量。</p><pre><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
</code></pre><p>整数变量声明为<code>unsigned</code>的好处是，同样长度的内存能够表示的最大整数值，增大了一倍。比如，16位的<code>signed int</code>最大值为32,767，而<code>unsigned int</code>的最大值增大到了65,535。</p><p><code>unsigned int</code>里面的<code>int</code>可以省略，所以上面的变量声明也可以写成下面这样。</p><pre><code class="language-c"><span class="token keyword">unsigned</span> a<span class="token punctuation">;</span>
</code></pre><p>字符类型<code>char</code>也可以设置<code>signed</code>和<code>unsigned</code>。</p><pre><code class="language-c"><span class="token keyword">signed</span> <span class="token keyword">char</span> c<span class="token punctuation">;</span> <span class="token comment">// 范围为 -128 到 127</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> c<span class="token punctuation">;</span> <span class="token comment">// 范围为 0 到 255</span>
</code></pre><p>注意，C 语言规定<code>char</code>类型默认是否带有正负号，由当前系统决定。这就是说，<code>char</code>不等同于<code>signed char</code>，它有可能是<code>signed char</code>，也有可能是<code>unsigned char</code>。这一点与<code>int</code>不同，<code>int</code>就是等同于<code>signed int</code>。</p><p>整数的子类型</p><p>如果<code>int</code>类型使用4个或8个字节表示一个整数，对于小整数，这样做很浪费空间。另一方面，某些场合需要更大的整数，8个字节还不够。为了解决这些问题，C 语言在<code>int</code>类型之外，又提供了三个整数的子类型。这样有利于更精细地限定整数变量的范围，也有利于更好地表达代码的意图。</p><ul><li><code>short int</code>（简写为<code>short</code>）：占用空间不多于<code>int</code>，一般占用2个字节（整数范围为-32768～32767)。</li><li><code>long int</code>（简写为<code>long</code>）：占用空间不少于<code>int</code>，至少为4个字节。</li><li><code>long long int</code>（简写为<code>long long</code>）：占用空间多于<code>long</code>，至少为8个字节。</li></ul><pre><code class="language-c"><span class="token keyword">short</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span>
</code></pre><p>上面代码分别声明了三种整数子类型的变量。</p><p>默认情况下，<code>short</code>、<code>long</code>、<code>long long</code>都是带符号的（signed），即<code>signed</code>关键字省略了。它们也可以声明为不带符号（unsigned），使得能够表示的最大值扩大一倍。</p><pre><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span>
</code></pre><p>C 语言允许省略<code>int</code>，所以变量声明语句也可以写成下面这样。</p><pre><code class="language-c"><span class="token keyword">short</span> a<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">short</span> a<span class="token punctuation">;</span>

<span class="token keyword">long</span> b<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> b<span class="token punctuation">;</span>

<span class="token keyword">long</span> <span class="token keyword">long</span> c<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> c<span class="token punctuation">;</span>
</code></pre><p>不同的计算机，数据类型的字节长度是不一样的。确实需要32位整数时，应使用<code>long</code>类型而不是<code>int</code>类型，可以确保不少于4个字节；确实需要64位的整数时，应该使用<code>long long</code>类型，可以确保不少于8个字节。另一方面，为了节省空间，只需要16位整数时，应使用<code>short</code>类型；需要8位整数时，应该使用<code>char</code>类型。</p><h4 id="整数类型的极限值" tabindex="-1"><a class="header-anchor" href="#整数类型的极限值"><span>整数类型的极限值</span></a></h4><p>有时候需要查看，当前系统不同整数类型的最大值和最小值，C 语言的头文件<code>limits.h</code>提供了相应的常量，比如<code>SCHAR_MIN</code>代表 signed char 类型的最小值<code>-128</code>，<code>SCHAR_MAX</code>代表 signed char 类型的最大值<code>127</code>。</p><p>为了代码的可移植性，需要知道某种整数类型的极限值时，应该尽量使用这些常量。</p><ul><li><code>SCHAR_MIN</code>，<code>SCHAR_MAX</code>：signed char 的最小值和最大值。</li><li><code>SHRT_MIN</code>，<code>SHRT_MAX</code>：short 的最小值和最大值。</li><li><code>INT_MIN</code>，<code>INT_MAX</code>：int 的最小值和最大值。</li><li><code>LONG_MIN</code>，<code>LONG_MAX</code>：long 的最小值和最大值。</li><li><code>LLONG_MIN</code>，<code>LLONG_MAX</code>：long long 的最小值和最大值。</li><li><code>UCHAR_MAX</code>：unsigned char 的最大值。</li><li><code>USHRT_MAX</code>：unsigned short 的最大值。</li><li><code>UINT_MAX</code>：unsigned int 的最大值。</li><li><code>ULONG_MAX</code>：unsigned long 的最大值。</li><li><code>ULLONG_MAX</code>：unsigned long long 的最大值。</li></ul><h4 id="整数的进制" tabindex="-1"><a class="header-anchor" href="#整数的进制"><span>整数的进制</span></a></h4><p>C 语言的整数默认都是十进制数，如果要表示八进制数和十六进制数，必须使用专门的表示法。</p><p>八进制使用<code>0</code>作为前缀，比如<code>017</code>、<code>0377</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">012</span><span class="token punctuation">;</span> <span class="token comment">// 八进制，相当于十进制的10</span>
</code></pre><p>十六进制使用<code>0x</code>或<code>0X</code>作为前缀，比如<code>0xf</code>、<code>0X10</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0x1A2B</span><span class="token punctuation">;</span> <span class="token comment">// 十六进制，相当于十进制的6699</span>
</code></pre><p>有些编译器使用<code>0b</code>前缀，表示二进制数，但不是标准。</p><pre><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span>b101010<span class="token punctuation">;</span>
</code></pre><p>注意，不同的进制只是整数的书写方法，不会对整数的实际存储方式产生影响。所有整数都是二进制形式存储，跟书写方式无关。不同进制可以混合使用，比如<code>10 + 015 + 0x20</code>是一个合法的表达式。</p><p><code>printf()</code>的进制相关占位符如下。</p><ul><li><code>%d</code>：十进制整数。</li><li><code>%o</code>：八进制整数。</li><li><code>%x</code>：十六进制整数。</li><li><code>%#o</code>：显示前缀<code>0</code>的八进制整数。</li><li><code>%#x</code>：显示前缀<code>0x</code>的十六进制整数。</li><li><code>%#X</code>：显示前缀<code>0X</code>的十六进制整数。</li></ul><pre><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;dec = %d\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;octal = %o\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 144</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hex = %x\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 64</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;octal = %#o\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0144</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hex = %#x\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0x64</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hex = %#X\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0X64</span>
</code></pre><h3 id="浮点数类型" tabindex="-1"><a class="header-anchor" href="#浮点数类型"><span>浮点数类型</span></a></h3><p>任何有小数点的数值，都会被编译器解释为浮点数。所谓“浮点数”就是使用 m * be 的形式，存储一个数值，<code>m</code>是小数部分，<code>b</code>是基数（通常是<code>2</code>），<code>e</code>是指数部分。这种形式是精度和数值范围的一种结合，可以表示非常大或者非常小的数。</p><p>浮点数的类型声明使用<code>float</code>关键字，可以用来声明浮点数变量。</p><pre><code class="language-c"><span class="token keyword">float</span> c <span class="token operator">=</span> <span class="token number">10.5</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，变量<code>c</code>的就是浮点数类型。</p><p><code>float</code>类型占用4个字节（32位），其中8位存放指数的值和符号，剩下24位存放小数的值和符号。<code>float</code>类型至少能够提供（十进制的）6位有效数字，指数部分的范围为（十进制的）<code>-37</code>到<code>37</code>，即数值范围为10-37到1037。</p><p>有时候，32位浮点数提供的精度或者数值范围还不够，C 语言又提供了另外两种更大的浮点数类型。</p><ul><li><code>double</code>：占用8个字节（64位），至少提供13位有效数字。</li><li><code>long double</code>：通常占用16个字节。</li></ul><p>注意，由于存在精度限制，浮点数只是一个近似值，它的计算是不精确的，比如 C 语言里面<code>0.1 + 0.2</code>并不等于<code>0.3</code>，而是有一个很小的误差。</p><pre><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">==</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><p>C 语言允许使用科学计数法表示浮点数，使用字母<code>e</code>来分隔小数部分和指数部分。</p><pre><code class="language-c"><span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">123.456e+3</span><span class="token punctuation">;</span> <span class="token comment">// 123.456 x 10^3</span>
<span class="token comment">// 等同于</span>
<span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">123.456e3</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，<code>e</code>后面如果是加号<code>+</code>，加号可以省略。注意，科学计数法里面<code>e</code>的前后，不能存在空格。</p><p>另外，科学计数法的小数部分如果是<code>0.x</code>或<code>x.0</code>的形式，那么<code>0</code>可以省略。</p><pre><code class="language-c"><span class="token number">0.3E6</span>
<span class="token comment">// 等同于</span>
<span class="token number">.3E6</span>

<span class="token number">3.0E6</span>
<span class="token comment">// 等同于</span>
<span class="token number">3.E6</span>
</code></pre><h3 id="布尔类型" tabindex="-1"><a class="header-anchor" href="#布尔类型"><span>布尔类型</span></a></h3><p>C 语言原来并没有为布尔值单独设置一个类型，而是使用整数<code>0</code>表示伪，所有非零值表示真。</p><pre><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;x is true!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>上面示例中，变量<code>x</code>等于<code>1</code>，C 语言就认为这个值代表真，从而会执行判断体内部的代码。</p><p>C99 标准添加了类型<code>_Bool</code>，表示布尔值。但是，这个类型其实只是整数类型的别名，还是使用<code>0</code>表示伪，<code>1</code>表示真，下面是一个示例。</p><pre><code class="language-c"><span class="token keyword">_Bool</span> isNormal<span class="token punctuation">;</span>

isNormal <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>isNormal<span class="token punctuation">)</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Everything is OK.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>头文件<code>stdbool.h</code>定义了另一个类型别名<code>bool</code>，并且定义了<code>true</code>代表<code>1</code>、<code>false</code>代表<code>0</code>。只要加载这个头文件，就可以使用这几个关键字。</p><pre><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h&gt;</span></span>

bool flag <span class="token operator">=</span> false<span class="token punctuation">;</span>
</code></pre><p>上面示例中，加载头文件<code>stdbool.h</code>以后，就可以使用<code>bool</code>定义布尔值类型，以及<code>false</code>和<code>true</code>表示真伪。</p><h3 id="字面量的类型" tabindex="-1"><a class="header-anchor" href="#字面量的类型"><span>字面量的类型</span></a></h3><p>字面量（literal）指的是代码里面直接出现的值。</p><pre><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
</code></pre><p>上面代码中，<code>x</code>是变量，<code>123</code>就是字面量。</p><p>编译时，字面量也会写入内存，因此编译器必须为字面量指定数据类型，就像必须为变量指定数据类型一样。</p><p>一般情况下，十进制整数字面量（比如<code>123</code>）会被编译器指定为<code>int</code>类型。如果一个数值比较大，超出了<code>int</code>能够表示的范围，编译器会将其指定为<code>long int</code>。如果数值超过了<code>long int</code>，会被指定为<code>unsigned long</code>。如果还不够大，就指定为<code>long long</code>或<code>unsigned long long</code>。</p><p>小数（比如<code>3.14</code>）会被指定为<code>double</code>类型。</p><h3 id="字面量后缀" tabindex="-1"><a class="header-anchor" href="#字面量后缀"><span>字面量后缀</span></a></h3><p>有时候，程序员希望为字面量指定一个不同的类型。比如，编译器将一个整数字面量指定为<code>int</code>类型，但是程序员希望将其指定为<code>long</code>类型，这时可以为该字面量加上后缀<code>l</code>或<code>L</code>，编译器就知道要把这个字面量的类型指定为<code>long</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">123L</span><span class="token punctuation">;</span>
</code></pre><p>上面代码中，字面量<code>123</code>有后缀<code>L</code>，编译器就会将其指定为<code>long</code>类型。这里<code>123L</code>写成<code>123l</code>，效果也是一样的，但是建议优先使用<code>L</code>，因为小写的<code>l</code>容易跟数字<code>1</code>混淆。</p><p>八进制和十六进制的值，也可以使用后缀<code>l</code>和<code>L</code>指定为 Long 类型，比如<code>020L</code>和<code>0x20L</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0377L</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0x7fffL</span><span class="token punctuation">;</span>
</code></pre><p>如果希望指定为无符号整数<code>unsigned int</code>，可以使用后缀<code>u</code>或<code>U</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">123U</span><span class="token punctuation">;</span>
</code></pre><p><code>L</code>和<code>U</code>可以结合使用，表示<code>unsigned long</code>类型。<code>L</code>和<code>U</code>的大小写和组合顺序无所谓。</p><pre><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">123LU</span><span class="token punctuation">;</span>
</code></pre><p>对于浮点数，编译器默认指定为 double 类型，如果希望指定为其他类型，需要在小数后面添加后缀<code>f</code>（float）或<code>l</code>（long double）。</p><p>科学计数法也可以使用后缀。</p><pre><code class="language-c"><span class="token number">1.2345e+10F</span>
<span class="token number">1.2345e+10L</span>
</code></pre><p>总结一下，常用的字面量后缀有下面这些。</p><ul><li><code>f</code>和<code>F</code>：<code>float</code>类型。</li><li><code>l</code>和<code>L</code>：对于整数是<code>long int</code>类型，对于小数是<code>long double</code>类型。</li><li><code>ll</code>和<code>LL</code>：Long Long 类型，比如<code>3LL</code>。</li><li><code>u</code>和<code>U</code>：表示<code>unsigned int</code>，比如<code>15U</code>、<code>0377U</code>。</li></ul><p><code>u</code>还可以与其他整数后缀结合，放在前面或后面都可以，比如<code>10UL</code>、<code>10ULL</code>和<code>10LLU</code>都是合法的。</p><p>下面是一些示例。</p><pre><code class="language-c"><span class="token keyword">int</span>           x <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">int</span>      x <span class="token operator">=</span> <span class="token number">1234L</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1234LL</span>

<span class="token keyword">unsigned</span> <span class="token keyword">int</span>           x <span class="token operator">=</span> <span class="token number">1234U</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">int</span>      x <span class="token operator">=</span> <span class="token number">1234UL</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1234ULL</span><span class="token punctuation">;</span>

<span class="token keyword">float</span> x       <span class="token operator">=</span> <span class="token number">3.14f</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> x      <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token number">3.14L</span><span class="token punctuation">;</span>
</code></pre><h3 id="溢出" tabindex="-1"><a class="header-anchor" href="#溢出"><span>溢出</span></a></h3><p>每一种数据类型都有数值范围，如果存放的数值超出了这个范围（小于最小值或大于最大值），需要更多的二进制位存储，就会发生溢出。大于最大值，叫做向上溢出（overflow）；小于最小值，叫做向下溢出（underflow）。</p><p>一般来说，编译器不会对溢出报错，会正常执行代码，但是会忽略多出来的二进制位，只保留剩下的位，这样往往会得到意想不到的结果。所以，应该避免溢出。</p><pre><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</code></pre><p>上面示例中，变量<code>x</code>加<code>1</code>，得到的结果不是<code>256</code>，而是<code>0</code>。因为<code>x</code>是<code>unsign char</code>类型，最大值是<code>255</code>（二进制<code>11111111</code>），加<code>1</code>后就发生了溢出，<code>256</code>（二进制<code>100000000</code>）的最高位<code>1</code>被丢弃，剩下的值就是<code>0</code>。</p><p>再看下面的例子。</p><pre><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> ui <span class="token operator">=</span> UINT_MAX<span class="token punctuation">;</span>  <span class="token comment">// 4,294,967,295</span>
ui<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ui = %u\\n&quot;</span><span class="token punctuation">,</span> ui<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
ui<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ui = %u\\n&quot;</span><span class="token punctuation">,</span> ui<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4,294,967,295</span>
</code></pre><p>上面示例中，常量<code>UINT_MAX</code>是 unsigned int 类型的最大值。如果加<code>1</code>，对于该类型就会溢出，从而得到<code>0</code>；而<code>0</code>是该类型的最小值，再减<code>1</code>，又会得到<code>UINT_MAX</code>。</p><p>溢出很容易被忽视，编译器又不会报错，所以必须非常小心。</p><pre><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token comment">// 错误</span>
</code></pre><p>上面代码表面看似乎没有问题，但是循环变量<code>i</code>的类型是 unsigned int，这个类型的最小值是<code>0</code>，不可能得到小于0的结果。当<code>i</code>等于0，再减去<code>1</code>的时候，并不会返回<code>-1</code>，而是返回 unsigned int 的类型最大值，这个值总是大于等于<code>0</code>，导致无限循环。</p><p>为了避免溢出，最好方法就是将运算结果与类型的极限值进行比较。</p><pre><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> ui<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> sum<span class="token punctuation">;</span>

<span class="token comment">// 错误</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> ui <span class="token operator">&gt;</span> UINT_MAX<span class="token punctuation">)</span> <span class="token function">too_big</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> sum <span class="token operator">=</span> sum <span class="token operator">+</span> ui<span class="token punctuation">;</span>

<span class="token comment">// 正确</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>ui <span class="token operator">&gt;</span> UINT_MAX <span class="token operator">-</span> sum<span class="token punctuation">)</span> <span class="token function">too_big</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> sum <span class="token operator">=</span> sum <span class="token operator">+</span> ui<span class="token punctuation">;</span>
</code></pre><p>上面示例中，变量<code>sum</code>和<code>ui</code>都是 unsigned int 类型，它们相加的和还是 unsigned int 类型，这就有可能发生溢出。但是，不能通过相加的和是否超出了最大值<code>UINT_MAX</code>，来判断是否发生了溢出，因为<code>sum + ui</code>总是返回溢出后的结果，不可能大于<code>UINT_MAX</code>。正确的比较方法是，判断<code>UINT_MAX - sum</code>与<code>ui</code>之间的大小关系。</p><p>下面是另一种错误的写法。</p><pre><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> j <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 错误</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;negative\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;positive\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例的运算结果，会输出<code>positive</code>。原因是变量<code>i</code>和<code>j</code>都是 unsigned int 类型，<code>i - j</code>的结果也是这个类型，最小值为<code>0</code>，不可能得到小于<code>0</code>的结果。正确的写法是写成下面这样。</p><pre><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> i<span class="token punctuation">)</span> <span class="token comment">// ....</span>
</code></pre><h3 id="sizeof-运算符" tabindex="-1"><a class="header-anchor" href="#sizeof-运算符"><span>sizeof 运算符</span></a></h3><p><code>sizeof</code>是 C 语言提供的一个运算符，返回某种数据类型或某个值占用的字节数量。它的参数可以是数据类型的关键字，也可以是变量名或某个具体的值。</p><pre><code class="language-c"><span class="token comment">// 参数为数据类型</span>
<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 参数为变量</span>
<span class="token keyword">int</span> i<span class="token punctuation">;</span>
<span class="token keyword">sizeof</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 参数为数值</span>
<span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面的第一个示例，返回得到<code>int</code>类型占用的字节数量（通常是<code>4</code>或<code>8</code>）。第二个示例返回整数变量占用字节数量，结果与前一个示例完全一样。第三个示例返回浮点数<code>3.14</code>占用的字节数量，由于浮点数的字面量一律存储为 double 类型，所以会返回<code>8</code>，因为 double 类型占用的8个字节。</p><p><code>sizeof</code>运算符的返回值，C 语言只规定是无符号整数，并没有规定具体的类型，而是留给系统自己去决定，<code>sizeof</code>到底返回什么类型。不同的系统中，返回值的类型有可能是<code>unsigned int</code>，也有可能是<code>unsigned long</code>，甚至是<code>unsigned long long</code>，对应的<code>printf()</code>占位符分别是<code>%u</code>、<code>%lu</code>和<code>%llu</code>。这样不利于程序的可移植性。</p><p>C 语言提供了一个解决方法，创造了一个类型别名<code>size_t</code>，用来统一表示<code>sizeof</code>的返回值类型。该别名定义在<code>stddef.h</code>头文件（引入<code>stdio.h</code>时会自动引入）里面，对应当前系统的<code>sizeof</code>的返回值类型，可能是<code>unsigned int</code>，也可能是<code>unsigned long</code>。</p><p>C 语言还提供了一个常量<code>SIZE_MAX</code>，表示<code>size_t</code>可以表示的最大整数。所以，<code>size_t</code>能够表示的整数范围为<code>[0, SIZE_MAX]</code>。</p><p><code>printf()</code>有专门的占位符<code>%zd</code>或<code>%zu</code>，用来处理<code>size_t</code>类型的值。</p><pre><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%zd\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面代码中，不管<code>sizeof</code>返回值的类型是什么，<code>%zd</code>占位符（或<code>%zu</code>）都可以正确输出。</p><p>如果当前系统不支持<code>%zd</code>或<code>%zu</code>，可使用<code>%u</code>（unsigned int）或<code>%lu</code>（unsigned long int）代替。</p><h3 id="类型的自动转换" tabindex="-1"><a class="header-anchor" href="#类型的自动转换"><span>类型的自动转换</span></a></h3><p>某些情况下，C 语言会自动转换某个值的类型。</p><h4 id="赋值运算" tabindex="-1"><a class="header-anchor" href="#赋值运算"><span>赋值运算</span></a></h4><p>赋值运算符会自动将右边的值，转成左边变量的类型。</p><p>（1）浮点数赋值给整数变量</p><p>浮点数赋予整数变量时，C 语言直接丢弃小数部分，而不是四舍五入。</p><pre><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，变量<code>x</code>是整数类型，赋给它的值是一个浮点数。编译器会自动把<code>3.14</code>先转为<code>int</code>类型，丢弃小数部分，再赋值给<code>x</code>，因此<code>x</code>的值是<code>3</code>。</p><p>这种自动转换会导致部分数据的丢失（<code>3.14</code>丢失了小数部分），所以最好不要跨类型赋值，尽量保证变量与所要赋予的值是同一个类型。</p><p>注意，舍弃小数部分时，不是四舍五入，而是整个舍弃。</p><pre><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">12.99</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，<code>x</code>等于<code>12</code>，而不是四舍五入的<code>13</code>。</p><p>（2）整数赋值给浮点数变量</p><p>整数赋值给浮点数变量时，会自动转为浮点数。</p><pre><code class="language-c"><span class="token keyword">float</span> y <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，变量<code>y</code>的值不是<code>24</code>，而是<code>24.0</code>，因为等号右边的整数自动转为了浮点数。</p><p>（3）窄类型赋值给宽类型</p><p>字节宽度较小的整数类型，赋值给字节宽度较大的整数变量时，会发生类型提升，即窄类型自动转为宽类型。</p><p>比如，<code>char</code>或<code>short</code>类型赋值给<code>int</code>类型，会自动提升为<code>int</code>。</p><pre><code class="language-c"><span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
</code></pre><p>上面示例中，变量<code>x</code>的类型是<code>char</code>，由于赋值给<code>int</code>类型，所以会自动提升为<code>int</code>。</p><p>（4）宽类型赋值给窄类型</p><p>字节宽度较大的类型，赋值给字节宽度较小的变量时，会发生类型降级，自动转为后者的类型。这时可能会发生截值（truncation），系统会自动截去多余的二进制位，导致难以预料的结果。</p><pre><code class="language-c"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">321</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> ch <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// ch 的值是 65 （321 % 256 的余值）</span>
</code></pre><p>上面例子中，变量<code>ch</code>是<code>char</code>类型，宽度是8个二进制位。变量<code>i</code>是<code>int</code>类型，将<code>i</code>赋值给<code>ch</code>，后者只能容纳<code>i</code>（二进制形式为<code>101000001</code>，共9位）的后八位，前面多出来的二进制位被丢弃，保留后八位就变成了<code>01000001</code>（十进制的65，相当于字符<code>A</code>）。</p><p>浮点数赋值给整数类型的值，也会发生截值，浮点数的小数部分会被截去。</p><pre><code class="language-c"><span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> pi<span class="token punctuation">;</span> <span class="token comment">// i 的值为 3</span>
</code></pre><p>上面示例中，<code>i</code>等于<code>3</code>，<code>pi</code>的小数部分被截去了。</p><h4 id="混合类型的运算" tabindex="-1"><a class="header-anchor" href="#混合类型的运算"><span>混合类型的运算</span></a></h4><p>不同类型的值进行混合计算时，必须先转成同一个类型，才能进行计算。转换规则如下：</p><p>（1）整数与浮点数混合运算时，整数转为浮点数类型，与另一个运算数类型相同。</p><pre><code class="language-c"><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1.2</span> <span class="token comment">// 4.2</span>
</code></pre><p>上面示例是<code>int</code>类型与<code>float</code>类型的混合计算，<code>int</code>类型的<code>3</code>会先转成<code>float</code>的<code>3.0</code>，再进行计算，得到<code>4.2</code>。</p><p>（2）不同的浮点数类型混合运算时，宽度较小的类型转为宽度较大的类型，比如<code>float</code>转为<code>double</code>，<code>double</code>转为<code>long double</code>。</p><p>（3）不同的整数类型混合运算时，宽度较小的类型会提升为宽度较大的类型。比如<code>short</code>转为<code>int</code>，<code>int</code>转为<code>long</code>等，有时还会将带符号的类型<code>signed</code>转为无符号<code>unsigned</code>。</p><p>下面例子的执行结果，可能会出人意料。</p><pre><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>）
  <span class="token function">do_something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，变量<code>a</code>是带符号整数，<code>sizeof(int)</code>是<code>size_t</code>类型，这是一个无符号整数。按照规则，signed int 自动转为 unsigned int，所以<code>a</code>会自动转成无符号整数<code>4294967291</code>（转换规则是<code>-5</code>加上无符号整数的最大值，再加1），导致比较失败，<code>do_something()</code>不会执行。</p><p>所以，最好避免无符号整数与有符号整数的混合运算。因为这时 C 语言会自动将<code>signed int</code>转为<code>unsigned int</code>，可能不会得到预期的结果。</p><h4 id="整数类型的运算" tabindex="-1"><a class="header-anchor" href="#整数类型的运算"><span>整数类型的运算</span></a></h4><p>两个相同类型的整数运算时，或者单个整数的运算，一般来说，运算结果也属于同一类型。但是有一个例外，宽度小于<code>int</code>的类型，运算结果会自动提升为<code>int</code>。</p><pre><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token number">66</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;negative\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;positive\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，变量<code>a</code>是 unsigned char 类型，这个类型不可能小于0，但是<code>-a</code>不是 unsigned char 类型，会自动转为 int 类型，导致上面的代码输出 negative。</p><p>再看下面的例子。</p><pre><code class="language-c"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> b <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">do_something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">+</span> c<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token function">do_something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，表达式<code>a - 5</code>和<code>b + c</code>都会自动转为 int 类型，所以函数<code>do_something()</code>会执行两次。</p><h4 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h4><p>函数的参数和返回值，会自动转成函数定义里指定的类型。</p><pre><code class="language-c"><span class="token keyword">int</span> <span class="token function">dostuff</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> m <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">short</span> n <span class="token operator">=</span> <span class="token number">43</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">dostuff</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，参数变量<code>m</code>和<code>n</code>不管原来的类型是什么，都会转成函数<code>dostuff()</code>定义的参数类型。</p><p>下面是返回值自动转换类型的例子。</p><pre><code class="language-c"><span class="token keyword">char</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>上面示例中，函数内部的变量<code>a</code>是<code>int</code>类型，但是返回的值是<code>char</code>类型，因为函数定义中返回的是这个类型。</p><h3 id="类型的显式转换" tabindex="-1"><a class="header-anchor" href="#类型的显式转换"><span>类型的显式转换</span></a></h3><p>原则上，应该避免类型的自动转换，防止出现意料之外的结果。C 语言提供了类型的显式转换，允许手动转换类型。</p><p>只要在一个值或变量的前面，使用圆括号指定类型<code>(type)</code>，就可以将这个值或变量转为指定的类型，这叫做“类型指定”（casting）。</p><pre><code class="language-c"><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span> ch
</code></pre><p>上面示例将变量<code>ch</code>转成无符号的字符类型。</p><pre><code class="language-c"><span class="token keyword">long</span> <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，<code>(long int)</code>将<code>10</code>显式转为<code>long int</code>类型。这里的显示转换其实是不必要的，因为赋值运算符会自动将右边的值，转为左边变量的类型。</p><h3 id="可移植类型" tabindex="-1"><a class="header-anchor" href="#可移植类型"><span>可移植类型</span></a></h3><p>C 语言的整数类型（short、int、long）在不同计算机上，占用的字节宽度可能是不一样的，无法提前知道它们到底占用多少个字节。</p><p>程序员有时控制准确的字节宽度，这样的话，代码可以有更好的可移植性，头文件<code>stdint.h</code>创造了一些新的类型别名。</p><p>（1）精确宽度类型(exact-width integer type)，保证某个整数类型的宽度是确定的。</p><ul><li><code>int8_t</code>：8位有符号整数。</li><li><code>int16_t</code>：16位有符号整数。</li><li><code>int32_t</code>：32位有符号整数。</li><li><code>int64_t</code>：64位有符号整数。</li><li><code>uint8_t</code>：8位无符号整数。</li><li><code>uint16_t</code>：16位无符号整数。</li><li><code>uint32_t</code>：32位无符号整数。</li><li><code>uint64_t</code>：64位无符号整数。</li></ul><p>上面这些都是类型别名，编译器会指定它们指向的底层类型。比如，某个系统中，如果<code>int</code>类型为32位，<code>int32_t</code>就会指向<code>int</code>；如果<code>long</code>类型为32位，<code>int32_t</code>则会指向<code>long</code>。</p><p>下面是一个使用示例。</p><pre><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">int32_t</span> x32 <span class="token operator">=</span> <span class="token number">45933945</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;x32 = %d\\n&quot;</span><span class="token punctuation">,</span> x32<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>上面示例中，变量<code>x32</code>声明为<code>int32_t</code>类型，可以保证是32位的宽度。</p><p>（2）最小宽度类型（minimum width type），保证某个整数类型的最小长度。</p><ul><li>int_least8_t</li><li>int_least16_t</li><li>int_least32_t</li><li>int_least64_t</li><li>uint_least8_t</li><li>uint_least16_t</li><li>uint_least32_t</li><li>uint_least64_t</li></ul><p>上面这些类型，可以保证占据的字节不少于指定宽度。比如，<code>int_least8_t</code>表示可以容纳8位有符号整数的最小宽度的类型。</p><p>（3）最快的最小宽度类型（fast minimum width type），可以使整数计算达到最快的类型。</p><ul><li>int_fast8_t</li><li>int_fast16_t</li><li>int_fast32_t</li><li>int_fast64_t</li><li>uint_fast8_t</li><li>uint_fast16_t</li><li>uint_fast32_t</li><li>uint_fast64_t</li></ul><p>上面这些类型是保证字节宽度的同时，追求最快的运算速度，比如<code>int_fast8_t</code>表示对于8位有符号整数，运算速度最快的类型。这是因为某些机器对于特定宽度的数据，运算速度最快，举例来说，32位计算机对于32位数据的运算速度，会快于16位数据。</p><p>（4）可以保存指针的整数类型。</p><ul><li><code>intptr_t</code>：可以存储指针（内存地址）的有符号整数类型。</li><li><code>uintptr_t</code>：可以存储指针的无符号整数类型。</li></ul><p>（5）最大宽度整数类型，用于存放最大的整数。</p><ul><li><code>intmax_t</code>：可以存储任何有效的有符号整数的类型。</li><li><code>uintmax_t</code>：可以存放任何有效的无符号整数的类型。</li></ul><p>上面的这两个类型的宽度比<code>long long</code>和<code>unsigned long</code>更大。</p>`,281)]))}const i=s(p,[["render",c],["__file","2_VariableTypes.html.vue"]]),u=JSON.parse(`{"path":"/develop/C/2_VariableTypes.html","title":"02. 变量&数据类型","lang":"zh-CN","frontmatter":{"category":"C","tag":"C","description":"02. 变量&数据类型 变量 变量（variable）可以理解成一块内存区域的名字。通过变量名，可以引用这块内存区域，获取里面存储的值。由于值可能发生变化，所以称为变量，否则就是常量了。 变量名 变量名在 C 语言里面属于标识符（identifier），命名有严格的规范。 只能由字母（包括大写和小写）、数字和下划线（_）组成。 不能以数字开头。 长度不...","head":[["meta",{"property":"og:url","content":"https://echo0d.github.io/DailyNotes/develop/C/2_VariableTypes.html"}],["meta",{"property":"og:site_name","content":"echo0d-notes"}],["meta",{"property":"og:title","content":"02. 变量&数据类型"}],["meta",{"property":"og:description","content":"02. 变量&数据类型 变量 变量（variable）可以理解成一块内存区域的名字。通过变量名，可以引用这块内存区域，获取里面存储的值。由于值可能发生变化，所以称为变量，否则就是常量了。 变量名 变量名在 C 语言里面属于标识符（identifier），命名有严格的规范。 只能由字母（包括大写和小写）、数字和下划线（_）组成。 不能以数字开头。 长度不..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-10T05:36:24.000Z"}],["meta",{"property":"article:author","content":"echo0d"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:modified_time","content":"2025-01-10T05:36:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"02. 变量&数据类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-10T05:36:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"echo0d\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"变量","slug":"变量","link":"#变量","children":[{"level":3,"title":"变量名","slug":"变量名","link":"#变量名","children":[]},{"level":3,"title":"变量的声明","slug":"变量的声明","link":"#变量的声明","children":[]},{"level":3,"title":"变量的赋值","slug":"变量的赋值","link":"#变量的赋值","children":[]},{"level":3,"title":"变量的作用域","slug":"变量的作用域","link":"#变量的作用域","children":[]}]},{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[{"level":3,"title":"字符类型","slug":"字符类型","link":"#字符类型","children":[]},{"level":3,"title":"整数类型","slug":"整数类型","link":"#整数类型","children":[]},{"level":3,"title":"浮点数类型","slug":"浮点数类型","link":"#浮点数类型","children":[]},{"level":3,"title":"布尔类型","slug":"布尔类型","link":"#布尔类型","children":[]},{"level":3,"title":"字面量的类型","slug":"字面量的类型","link":"#字面量的类型","children":[]},{"level":3,"title":"字面量后缀","slug":"字面量后缀","link":"#字面量后缀","children":[]},{"level":3,"title":"溢出","slug":"溢出","link":"#溢出","children":[]},{"level":3,"title":"sizeof 运算符","slug":"sizeof-运算符","link":"#sizeof-运算符","children":[]},{"level":3,"title":"类型的自动转换","slug":"类型的自动转换","link":"#类型的自动转换","children":[]},{"level":3,"title":"类型的显式转换","slug":"类型的显式转换","link":"#类型的显式转换","children":[]},{"level":3,"title":"可移植类型","slug":"可移植类型","link":"#可移植类型","children":[]}]}],"git":{"createdTime":1734332093000,"updatedTime":1736487384000,"contributors":[{"name":"echo0d","email":"echo0d@163.com","commits":2}]},"readingTime":{"minutes":29.23,"words":8768},"filePathRelative":"develop/C/2_VariableTypes.md","localizedDate":"2024年12月16日","excerpt":"\\n<h2>变量</h2>\\n<p>变量（variable）可以理解成一块内存区域的名字。通过变量名，可以引用这块内存区域，获取里面存储的值。由于值可能发生变化，所以称为变量，否则就是常量了。</p>\\n<h3>变量名</h3>\\n<p>变量名在 C 语言里面属于标识符（identifier），命名有严格的规范。</p>\\n<ul>\\n<li>只能由字母（包括大写和小写）、数字和下划线（<code>_</code>）组成。</li>\\n<li>不能以数字开头。</li>\\n<li>长度不能超过63个字符。</li>\\n</ul>\\n<p>下面是一些无效变量名的例子。</p>\\n<pre><code>$zj\\nj**p\\n2cat\\nHot-tab\\ntax rate\\ndon't\\n</code></pre>","autoDesc":true}`);export{i as comp,u as data};
