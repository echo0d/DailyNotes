import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as t,o as e}from"./app-Q99yxrzh.js";const p={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="_1-基础收尾" tabindex="-1"><a class="header-anchor" href="#_1-基础收尾"><span>1. 基础收尾</span></a></h1><h2 id="_1-1-项目结构" tabindex="-1"><a class="header-anchor" href="#_1-1-项目结构"><span>1.1. 项目结构</span></a></h2><p>在 Go 语言中，经典的项目结构通常遵循一种约定俗成的布局，这有助于使项目更具可读性和易维护性。以下是一个经典的 Go 项目结构示例：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>project-root/
|-- cmd/
|   |-- main.go
|
|-- internal/
|   |-- pkg1/
|   |   |-- ...
|   |
|   |-- pkg2/
|   |   |-- ...
|   |
|   |-- ...
|
|-- pkg/
|   |-- pkg3/
|   |   |-- ...
|   |
|   |-- pkg4/
|   |   |-- ...
|   |
|   |-- ...
|
|-- api/
|   |-- http/
|   |   |-- ...
|   |
|   |-- grpc/
|   |   |-- ...
|   |
|   |-- ...
|
|-- configs/
|   |-- config.go
|
|-- deployments/
|   |-- docker/
|   |   |-- Dockerfile
|   |
|   |-- kubernetes/
|   |   |-- ...
|   |
|   |-- ...
|
|-- docs/
|   |-- ...
|
|-- pkg/
|   |-- ...
|
|-- scripts/
|   |-- ...
|
|-- test/
|   |-- ...
|
|-- .gitignore
|-- go.mod
|-- go.sum
|-- README.md
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>cmd/</strong>: 包含应用程序的入口点，每个可执行程序应该有一个对应的文件夹。</li><li><strong>internal/</strong>: 包含项目私有的代码，不希望被外部代码引用。</li><li><strong>pkg/</strong>: 包含项目的可重用代码包，可以被其他项目引用。</li><li><strong>api/</strong>: 包含项目的 API 定义，例如 HTTP 和 gRPC 的端点。</li><li><strong>configs/</strong>: 包含项目的配置文件。</li><li><strong>deployments/</strong>: 包含部署相关的文件，例如 Dockerfile 和 Kubernetes 配置。</li><li><strong>docs/</strong>: 包含项目文档和说明。</li><li><strong>scripts/</strong>: 包含项目的脚本文件。</li><li><strong>test/</strong>: 包含项目的测试代码。</li><li><strong>.gitignore</strong>: Git 忽略文件列表。</li><li><strong>go.mod</strong> 和 <strong>go.sum</strong>: Go modules 文件，用于管理项目依赖。</li><li><strong>README.md</strong>: 项目的说明文件。</li></ul><p>这种结构有助于组织和管理代码，同时也提供了清晰的分层结构和可扩展性。项目结构可能会因项目规模和需求而有所不同，但上述示例代表了一个通用的 Go 项目结构。</p><h2 id="_1-2-defer函数" tabindex="-1"><a class="header-anchor" href="#_1-2-defer函数"><span>1.2. defer函数</span></a></h2><p>在 Go 语言中，<code>defer</code> 语句用于延迟（defer）函数的执行直到包含 <code>defer</code> 语句的函数执行完毕。<code>defer</code> 语句允许在函数执行的任何时候注册一个函数调用，该函数会在函数执行完毕时被调用。这种机制通常用于确保资源在函数执行完毕后得到正确释放，以及在函数返回之前执行清理操作。</p><p>defer的运行机制决定了无论函数是执行到函数体末尾正常返回，还是在函数体中的某个错误处理分支显式调用return返回，或函数体内部出现panic，已经注册了的deferred函数都会被调度执行。</p><h3 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法"><span><strong>基本语法</strong></span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>func someFunction() {
    defer fmt.Println(&quot;This will be executed last&quot;)
    
    // Other function logic
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例用途" tabindex="-1"><a class="header-anchor" href="#示例用途"><span><strong>示例用途</strong></span></a></h3><p><strong>资源释放</strong>：<code>defer</code> 经常用于关闭文件、释放锁、关闭数据库连接等操作，确保资源得到正确释放。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">readFile</span><span class="token punctuation">(</span>filename <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 在函数返回前关闭文件</span>
    <span class="token comment">// 读取文件内容</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>跟踪执行</strong>：<code>defer</code> 可以用于跟踪函数的执行情况。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">printStartAndEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Function end&quot;</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Function start&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>处理错误</strong>：<code>defer</code> 可以用于处理错误，确保清理操作在函数返回时执行。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理错误</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">someFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">defer</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 可能引发 panic 的代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>defer</code> 语句按照后进先出（LIFO）的顺序执行，即最后注册的函数最先执行。这使得 <code>defer</code> 在 Go 中成为一个强大而简洁的工具，用于确保资源管理和代码执行顺序的可靠性。</p><p>以下是一个示例，展示了一个函数内有多个 <code>defer</code> 语句的情况：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Start&quot;</span><span class="token punctuation">)</span>

    <span class="token comment">// 第一个 defer，注册的函数将在 main 函数执行结束后执行</span>
    <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Deferred statement 1&quot;</span><span class="token punctuation">)</span>
 	
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Middle&quot;</span><span class="token punctuation">)</span>
    
    <span class="token comment">// 第二个 defer</span>
    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Deferred statement 2&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;End&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>main</code> 函数内有两个 <code>defer</code> 语句，它们分别注册了两个匿名函数。当 <code>main</code> 函数执行时，它们会按照 LIFO 的顺序执行。因此，输出顺序将是：</p><ol><li><code>Start</code></li><li><code>End</code></li><li><code>Middle</code></li><li><code>Deferred statement 2</code></li><li><code>Deferred statement 1</code></li></ol><h3 id="哪些函数可以defer" tabindex="-1"><a class="header-anchor" href="#哪些函数可以defer"><span>哪些函数可以defer</span></a></h3><p>Go语言中除了有自定义的函数或方法，还有内置函数。下面是Go语言内置函数的完整列表：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>append cap close complex copy delete imag len
make new panic print println real recover
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>内置函数是否都能作为deferred函数呢？</p><p>append、cap、len、make、new等内置函数是不可以直接作为deferred函数的，而close、copy、delete、print、recover等可以。</p><p>对于那些不能直接作为deferred函数的内置函数，我们可以使用一个包裹它的匿名函数来间接满足要求。以append为例：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>sl<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但这么做有什么实际意义需要开发者自己把握。</p><h2 id="_1-3-receiver参数" tabindex="-1"><a class="header-anchor" href="#_1-3-receiver参数"><span>1.3. receiver参数</span></a></h2><p>Go语言虽然不支持经典的面向对象语法元素，比如类、对象、继承等，Go语言中的方法在声明形式上仅仅多了一个参数，Go称之为receiver参数。receiver参数是方法与类型之间的纽带。Go方法的一般声明形式如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>receiver T<span class="token comment">/*T) MethodName(参数列表) (返回值列表) {
    // 方法体
}
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面方法声明中的T称为receiver的基类型。通过receiver，上述方法被绑定到类型T上。换句话说，上述方法是类型T的一个方法，我们可以通过类型T或*T的实例调用该方法，如下面的伪代码所示：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> t T
t<span class="token punctuation">.</span><span class="token function">MethodName</span><span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span>

<span class="token keyword">var</span> pt <span class="token operator">*</span>T <span class="token operator">=</span> <span class="token operator">&amp;</span>t
pt<span class="token punctuation">.</span><span class="token function">MethodName</span><span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Go方法具有如下特点。</p><p>1）方法名的首字母是否大写决定了该方法是不是导出方法。</p><p>2）方法定义要与类型定义放在同一个包内。由此我们可以推出：不能为原生类型（如int、float64、map等）添加方法，只能为自定义类型定义方法（示例代码如下）。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 错误的做法</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token comment">// 编译器错误：cannot define new methods on non- local type int</span>
    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 正确的做法</span>
<span class="token keyword">type</span> MyInt <span class="token builtin">int</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>i MyInt<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token function">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）每个方法只能有一个receiver参数，不支持多receiver参数列表或变长receiver参数。一个方法只能绑定一个基类型，Go语言不支持同时绑定多个类型的方法。</p><p>4）receiver参数的基类型本身不能是指针类型或接口类型，下面的示例展示了这点：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> MyInt <span class="token operator">*</span><span class="token builtin">int</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r MyInt<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token comment">// 编译器错误：invalid receiver type MyInt (MyInt  is a pointer type)</span>
    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> MyReader io<span class="token punctuation">.</span>Reader
<span class="token keyword">func</span> <span class="token punctuation">(</span>r MyReader<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 编译器错误：invalid receiver  type MyReader (MyReader is an  interface type)</span>
    <span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-4-变长参数函数" tabindex="-1"><a class="header-anchor" href="#_1-4-变长参数函数"><span>1.4. 变长参数函数</span></a></h2><p>在Go语言中，可以使用变长参数函数（variadic functions）来处理可变数量的参数。变长参数函数可以接受任意数量的参数，这些参数被打包成一个切片（slice）传递给函数。这种特性非常有用，特别是当函数需要处理数量不确定的参数时。</p><p>下面是一个简单的示例，展示了如何在Go语言中使用变长参数函数：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token comment">// 变长参数函数</span>
<span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>nums <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    total <span class="token operator">:=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> num <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>
        total <span class="token operator">+=</span> num
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> total
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 调用变长参数函数</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出: 6</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出: 15</span>

    <span class="token comment">// 也可以传递切片作为参数</span>
    numbers <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>numbers<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出: 15</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，sum函数是一个变长参数函数，它接受任意数量的int类型参数，并返回它们的总和。在main函数中，我们演示了如何调用sum函数并传递不同数量的参数或切片作为参数。</p><p>关键点：</p><p>在函数参数列表中，使用<code>...</code>语法指定一个参数是变长参数。 变长参数在函数内部以切片的形式表示。 可以传递不定数量的参数给变长参数函数。 也可以传递切片给变长参数函数，使用<code>...</code>操作符来展开切片。</p><p>使用变长参数函数时最容易出现的一个问题是实参与形参不匹配，比如下面这个例子：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// chapter4/sources/variadic_function_2.go</span>

<span class="token keyword">func</span> <span class="token function">dump</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> args <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;Tony&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jim&quot;</span><span class="token punctuation">}</span>
    <span class="token function">dump</span><span class="token punctuation">(</span>s<span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行这段代码：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>$ go run variadic_function_2.go
./variadic_function_2.go:14:6: cannot use s (type []string) as type []interface {} in argument to dump
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看到，编译器给出了“类型不匹配”的错误。dump函数的变长参数类型为<code>...interface{}</code>，因此匹配该形参的要么是<code>interface{}</code>类型的变量，要么为<code>t...</code>（t类型为<code>[]interface{}</code>）。在例子中给dump传入的实参为<code>s...</code>，但s的类型为<code>[]string</code>，并非<code>[]interface{}</code>，导致不匹配。</p><p>这里要注意的是，虽然<code>string</code>类型变量可以直接赋值给<code>interface{}</code>类型变量，但是<code>[]string</code>类型变量并不能直接赋值给<code>[]interface{}</code>类型变量。要消除编译错误，我们仅需将变量s的类型换为<code>[]interface{}</code>，见下面的代码：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">&quot;Tony&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jim&quot;</span><span class="token punctuation">}</span>
    <span class="token function">dump</span><span class="token punctuation">(</span>s<span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> run variadic_function_2<span class="token punctuation">.</span><span class="token keyword">go</span>
Tony
John
Jim
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过有个例外，那就是Go内置的append函数，它支持通过下面的方式将字符串附加到一个字节切片后面：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// chapter4/sources/variadic_function_3.go</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    b <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    b <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token operator">...</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

$ <span class="token keyword">go</span> run variadic_function_3<span class="token punctuation">.</span><span class="token keyword">go</span>
hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>string类型本是不满足类型要求的（append本需要<code>[]byte...</code>），这算是Go编译器的一个优化，编译器自动将<code>string</code>隐式转换为了<code>[]byte</code>。</p><h2 id="_1-5-模拟函数重载" tabindex="-1"><a class="header-anchor" href="#_1-5-模拟函数重载"><span>1.5. 模拟函数重载</span></a></h2><p>在Go语言中并不支持像一些其他语言（如C++、Java）中那样的函数重载，也就是不能有多个同名函数但参数列表不同的情况。但是可以模拟函数重载的效果。</p><ul><li><p>如果要重载的函数的参数都是相同类型的，仅参数的个数是变化的，那么变长参数函数可以轻松对应；</p></li><li><p>如果参数类型不同且个数可变，那么我们还要结合<code>interface{}</code>类型的特性。一个例子：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>
<span class="token keyword">func</span> <span class="token function">concat</span><span class="token punctuation">(</span>sep <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> result <span class="token builtin">string</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> args <span class="token punctuation">{</span>
        <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            result <span class="token operator">+=</span> sep
        <span class="token punctuation">}</span>
        <span class="token keyword">switch</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int8</span><span class="token punctuation">,</span> <span class="token builtin">int16</span><span class="token punctuation">,</span> <span class="token builtin">int32</span><span class="token punctuation">,</span> <span class="token builtin">int64</span><span class="token punctuation">,</span>
            <span class="token builtin">uint</span><span class="token punctuation">,</span> <span class="token builtin">uint8</span><span class="token punctuation">,</span> <span class="token builtin">uint16</span><span class="token punctuation">,</span> <span class="token builtin">uint32</span><span class="token punctuation">,</span> <span class="token builtin">uint64</span><span class="token punctuation">:</span>
            result <span class="token operator">+=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
        <span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>
            result <span class="token operator">+=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
        <span class="token keyword">case</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">:</span>
            ints <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> ints <span class="token punctuation">{</span>
                <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
                    result <span class="token operator">+=</span> sep
                <span class="token punctuation">}</span>
                result <span class="token operator">+=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">:</span>
            strs <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>
            result <span class="token operator">+=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span> sep<span class="token punctuation">)</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;the argument type [%T] is not supported&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;gopher&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">uint32</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;robot&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ai&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ml&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string">&quot;hacker&quot;</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面这个例子中，我们定义了一个concat函数，该函数支持接受任意数量的整型、字符串、整型切片、字符串切片参数，并将输入的参数通过分隔符（sep）连接在一起。看main函数中对concat的调用，是不是有一种调用重载函数的感觉。</p></li></ul><h2 id="_1-6-功能选项" tabindex="-1"><a class="header-anchor" href="#_1-6-功能选项"><span>1.6. 功能选项</span></a></h2><p>在Go语言中，功能选项（Options）模式是一种常见的设计模式，用于在函数或方法中传递可变数量的配置选项。这种模式在标准库和许多第三方库中被广泛应用，可以使函数的参数更加灵活和可扩展。实现功能选项的一般方法：</p><ul><li>定义选项类型：通常是一个函数类型，它接受并修改某个配置选项。</li><li>定义主要函数：主要函数接受一个或多个选项类型的参数，并根据这些选项进行操作。 例子：</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token comment">// 选项类型</span>
<span class="token keyword">type</span> Options <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Option1 <span class="token builtin">string</span>
    Option2 <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Option <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Options<span class="token punctuation">)</span>

<span class="token comment">// 主要函数，接受选项参数</span>
<span class="token keyword">func</span> <span class="token function">ProcessOptions</span><span class="token punctuation">(</span>opts <span class="token operator">...</span>Option<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    options <span class="token operator">:=</span> <span class="token operator">&amp;</span>Options<span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token comment">// 应用所有选项</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> opt <span class="token operator">:=</span> <span class="token keyword">range</span> opts <span class="token punctuation">{</span>
        <span class="token function">opt</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 在这里使用选项进行操作</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Option1:&quot;</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>Option1<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Option2:&quot;</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>Option2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 选项函数，用于设置 Option1</span>
<span class="token keyword">func</span> <span class="token function">WithOption1</span><span class="token punctuation">(</span>val <span class="token builtin">string</span><span class="token punctuation">)</span> Option <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>o <span class="token operator">*</span>Options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        o<span class="token punctuation">.</span>Option1 <span class="token operator">=</span> val
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 选项函数，用于设置 Option2</span>
<span class="token keyword">func</span> <span class="token function">WithOption2</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span> Option <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>o <span class="token operator">*</span>Options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        o<span class="token punctuation">.</span>Option2 <span class="token operator">=</span> val
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用功能选项模式调用函数</span>
    <span class="token function">ProcessOptions</span><span class="token punctuation">(</span><span class="token function">WithOption1</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">WithOption2</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>Options</code>结构体定义了需要配置的选项，<code>Option</code>是一个函数类型，用于修改这些选项。<code>WithOption1</code>和<code>WithOption2</code>是两个选项函数，分别用于设置<code>Option1</code>和<code>Option2</code>。<code>ProcessOptions</code>函数是主要函数，接受一个或多个选项参数，并根据这些选项进行操作。</p><p>通过使用功能选项模式，可以灵活地向函数传递各种不同的配置选项，并根据需要调整函数的行为。这种模式在Go语言中经常用于简化函数接口，提高代码的可读性和可维护性。</p><h2 id="_1-7-go常见的并发模式" tabindex="-1"><a class="header-anchor" href="#_1-7-go常见的并发模式"><span>1.7. Go常见的并发模式</span></a></h2><p>在语言层面，Go针对CSP模型提供了三种并发原语。</p><ul><li>goroutine：对应CSP模型中的P，封装了数据的处理逻辑，是Go运行时调度的基本执行单元。</li><li>channel：对应CSP模型中的输入/输出原语，用于goroutine之间的通信和同步。</li><li>select：用于应对多路输入/输出，可以让goroutine同时协调处理多个channel操作。</li></ul><h3 id="创建模式" tabindex="-1"><a class="header-anchor" href="#创建模式"><span>创建模式</span></a></h3><p>Go语言使用go关键字+函数/方法创建goroutine：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">go</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;I am a goroutine&quot;</span><span class="token punctuation">)</span>
 
<span class="token comment">// $GOROOT/src/net/http/server.go</span>
c <span class="token operator">:=</span> srv<span class="token punctuation">.</span><span class="token function">newConn</span><span class="token punctuation">(</span>rw<span class="token punctuation">)</span>
<span class="token keyword">go</span> c<span class="token punctuation">.</span><span class="token function">serve</span><span class="token punctuation">(</span>connCtx<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但在稍复杂一些的并发程序中，需要考虑通过CSP模型输入/输出原语的承载体channel，在goroutine之间建立联系。为了满足这一需求，我们通常使用下面的方式来创建goroutine：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> T <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">spawn</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">chan</span> T <span class="token punctuation">{</span>
    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> T<span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用channel变量c(通过闭包方式)与调用spawn的goroutine通信</span>
        <span class="token operator">...</span>
        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">...</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> c
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    c <span class="token operator">:=</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 使用channel变量c与新创建的goroutine通信</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上方式在内部创建一个goroutine并返回一个channel类型变量的函数，这是Go中最常见的goroutine创建模式。</p><p>spawn函数创建的新goroutine与调用spawn函数的goroutine之间通过一个channel建立起了联系：两个goroutine可以通过这个channel进行通信。spawn函数的实现得益于channel作为Go语言一等公民（first-class citizen）的存在：channel可以像变量一样被初始化、传递和赋值。上面例子中的spawn只返回了一个channel变量，大家可以根据需要自行定义返回的channel个数和用途。</p><h3 id="退出模式" tabindex="-1"><a class="header-anchor" href="#退出模式"><span>退出模式</span></a></h3><p>goroutine的使用代价很低，Go官方推荐多使用goroutine。在多数情况下，我们无须考虑对goroutine的退出进行控制：goroutine的执行函数返回，即意味着goroutine退出。但一些常驻的后台服务程序可能会对goroutine有着优雅退出的要求，在这里我们就分类说明一下goroutine的几种退出模式。</p><h4 id="_1-分离模式" tabindex="-1"><a class="header-anchor" href="#_1-分离模式"><span>（1）分离模式</span></a></h4><p>这里借鉴了一些线程模型中的术语，比如分离（detached）模式。分离模式是使用最为广泛的goroutine退出模式。对于分离的goroutine，创建它的goroutine不需要关心它的退出，这类goroutine在启动后即与其创建者彻底分离，其生命周期与其执行的主函数相关，函数返回即goroutine退出。这类goroutine有两个常见用途。</p><p>1）一次性任务：顾名思义，新创建的goroutine用来执行一个简单的任务，执行后即退出。</p><p>2）常驻后台执行一些特定任务，如监视（monitor）、观察（watch）等。其实现通常采用<code>for {...}</code>或<code>for { select{...} }</code>代码段形式，并多以定时器（timer）或事件（event）驱动执行。</p><h4 id="_2-join模式" tabindex="-1"><a class="header-anchor" href="#_2-join模式"><span>（2）join模式</span></a></h4><p>在线程模型中，父线程可以通过<code>pthread_join</code>来等待子线程结束并获取子线程的结束状态。在Go中，我们有时候也有类似的需求：goroutine的创建者需要等待新goroutine结束。笔者为这样的goroutine退出模式起名为“join模式”。</p><p>① 等待一个goroutine退出</p><p>我们从一个简单的场景开始，先来看看如何等待一个goroutine结束。下面是模拟该场景的一段示例代码：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// chapter6/sources/go-concurrency-pattern-1.go</span>
<span class="token keyword">func</span> <span class="token function">worker</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    interval<span class="token punctuation">,</span> ok <span class="token operator">:=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">spawn</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">f</span><span class="token punctuation">(</span>args<span class="token operator">...</span><span class="token punctuation">)</span>
        c <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> c
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     done <span class="token operator">:=</span> <span class="token function">spawn</span><span class="token punctuation">(</span>worker<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
     <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;spawn a worker goroutine&quot;</span><span class="token punctuation">)</span>
     <span class="token operator">&lt;-</span>done
     <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;worker done&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，spawn函数使用典型的goroutine创建模式创建了一个goroutine，main goroutine作为创建者通过spawn函数返回的channel与新goroutine建立联系，这个channel的用途就是在两个goroutine之间建立退出事件的“信号”通信机制。main goroutine在创建完新goroutine后便在该channel上阻塞等待，直到新goroutine退出前向该channel发送了一个信号。运行该示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ go run go-concurrency-pattern-1.go
spawn a worker goroutine
worker <span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 获取goroutine的退出状态</p><p>如果新goroutine的创建者不仅要等待goroutine的退出，还要精准获取其结束状态，同样可以通过自定义类型的channel来实现这一场景需求。下面是基于上面的代码改造后的示例：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// chapter6/sources/go-concurrency-pattern-2.go</span>

<span class="token keyword">var</span> OK <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">worker</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;invalid args&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    interval<span class="token punctuation">,</span> ok <span class="token operator">:=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;invalid interval arg&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> OK
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">spawn</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">chan</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        c <span class="token operator">&lt;-</span> <span class="token function">f</span><span class="token punctuation">(</span>args<span class="token operator">...</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> c
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    done <span class="token operator">:=</span> <span class="token function">spawn</span><span class="token punctuation">(</span>worker<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;spawn worker1&quot;</span><span class="token punctuation">)</span>
    err <span class="token operator">:=</span> <span class="token operator">&lt;-</span>done
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;worker1 done:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    done <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;spawn worker2&quot;</span><span class="token punctuation">)</span>
    err <span class="token operator">=</span> <span class="token operator">&lt;-</span>done
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;worker2 done:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将channel中承载的类型由<code>struct{}</code>改为了error，这样channel承载的信息就不只是一个信号了，还携带了有价值的信息：新goroutine的结束状态。运行上述示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token variable">$go</span> run go-concurrency-pattern-2.go
spawn worker1
worker1 done: ok
spawn worker2
worker2 done: invalid args
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③ 等待多个goroutine退出</p><p>在有些场景中，goroutine的创建者可能会创建不止一个goroutine，并且需要等待全部新goroutine退出。可以通过Go语言提供的<code>sync.WaitGroup</code>实现等待多个goroutine退出的模式：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// chapter6/sources/go-concurrency-pattern-3.go</span>
<span class="token keyword">func</span> <span class="token function">worker</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    
    interval<span class="token punctuation">,</span> ok <span class="token operator">:=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">spawnGroup</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> f <span class="token keyword">func</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
    
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            name <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;worker-%d:&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
            <span class="token function">f</span><span class="token punctuation">(</span>args<span class="token operator">...</span><span class="token punctuation">)</span>
            <span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;done&quot;</span><span class="token punctuation">)</span>
            wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// worker done!</span>
        <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        c <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> c
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    done <span class="token operator">:=</span> <span class="token function">spawnGroup</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> worker<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;spawn a group of workers&quot;</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;-</span>done
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;group workers done&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看到，通过<code>sync.WaitGroup</code>，<code>spawnGroup</code>每创建一个goroutine都会调用<code>wg.Add(1)</code>，新创建的goroutine会在退出前调用<code>wg.Done</code>。在<code>spawnGroup</code>中还创建了一个用于监视的goroutine，该goroutine调用<code>sync.WaitGroup</code>的Wait方法来等待所有goroutine退出。在所有新创建的goroutine退出后，Wait方法返回，该监视goroutine会向<code>done</code>这个channel写入一个信号，这时<code>main</code> goroutine才会从阻塞在<code>done</code> channel上的状态中恢复，继续往下执行。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token variable">$go</span> run go-concurrency-pattern-3.go 
spawn a group of workers
worker-2: <span class="token keyword">done</span>
worker-1: <span class="token keyword">done</span>
worker-0: <span class="token keyword">done</span>
worker-4: <span class="token keyword">done</span>
worker-3: <span class="token keyword">done</span>
group workers <span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④ 支持超时机制的等待</p><p>有时候，我们不想无限阻塞等待所有新创建goroutine的退出，而是仅等待一段合理的时间。如果在这段时间内goroutine没有退出，则创建者会继续向下执行或主动退出。下面的示例代码在等待多个goroutine退出的例子之上增加了超时机制：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// chapter6/sources/go-concurrency-pattern-4.go</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    done <span class="token operator">:=</span> <span class="token function">spawnGroup</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> worker<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;spawn a group of workers&quot;</span><span class="token punctuation">)</span>
    
    timer <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTimer</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">defer</span> timer<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">select</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>timer<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;wait group workers exit timeout!&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;group workers done&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，我们通过一个定时器（<code>time.Timer</code>）设置了超时等待时间，并通过select原语同时监听<code>timer.C</code>和<code>done</code>这两个channel，哪个先返回数据就执行哪个case分支。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ go run go-concurrency-pattern-4.go
spawn a group of workers
<span class="token function">wait</span> group workers <span class="token builtin class-name">exit</span> timeout<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-notify-and-wait模式" tabindex="-1"><a class="header-anchor" href="#_3-notify-and-wait模式"><span>（3）notify-and-wait模式</span></a></h4><p>在前面的几个场景中，goroutine的创建者都是在被动地等待着新goroutine的退出。但很多时候，goroutine创建者需要主动通知那些新goroutine退出，尤其是当main goroutine作为创建者时。main goroutine退出意味着Go程序的终止，而粗暴地直接让main goroutine退出的方式可能会导致业务数据损坏、不完整或丢失。我们可以通过notify-and-wait（通知并等待）模式来满足这一场景的要求。虽然这一模式也不能完全避免损失，但是它给了各个goroutine一个挽救数据的机会，从而尽可能减少损失。</p><p>① 通知并等待一个goroutine退出</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// chapter6/sources/go-concurrency-pattern-5.go</span>
<span class="token keyword">func</span> <span class="token function">worker</span><span class="token punctuation">(</span>j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">spawn</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">chan</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    quit <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> job <span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token comment">// 模拟job channel</span>
        <span class="token keyword">for</span> <span class="token punctuation">{</span>
            <span class="token keyword">select</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> j <span class="token operator">:=</span> <span class="token operator">&lt;-</span>job<span class="token punctuation">:</span>
                <span class="token function">f</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>
            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>quit<span class="token punctuation">:</span>
                quit <span class="token operator">&lt;-</span> <span class="token string">&quot;ok&quot;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> quit
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    quit <span class="token operator">:=</span> <span class="token function">spawn</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;spawn a worker goroutine&quot;</span><span class="token punctuation">)</span>
    
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
    
    <span class="token comment">// 通知新创建的goroutine退出</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;notify the worker to exit...&quot;</span><span class="token punctuation">)</span>
    quit <span class="token operator">&lt;-</span> <span class="token string">&quot;exit&quot;</span>
    
    timer <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTimer</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token keyword">defer</span> timer<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">select</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> status <span class="token operator">:=</span> <span class="token operator">&lt;-</span>quit<span class="token punctuation">:</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;worker done:&quot;</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>timer<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;wait worker exit timeout&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例代码中，使用创建模式创建goroutine的spawn函数返回的channel的作用发生了变化，从原先的只是用于新goroutine发送退出信号给创建者，变成了一个双向的数据通道：既承载创建者发送给新goroutine的退出信号，也承载新goroutine返回给创建者的退出状态。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token variable">$go</span> run go-concurrency-pattern-5.go 
spawn a worker goroutine
notify the worker to exit<span class="token punctuation">..</span>.
worker done: ok
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 通知并等待多个goroutine退出</p><p>Go语言的channel有一个特性是，当使用close函数关闭channel时，所有阻塞到该channel上的goroutine都会得到通知。我们就利用这一特性实现满足这一场景的模式：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// chapter6/sources/go-concurrency-pattern-6.go</span>
<span class="token keyword">func</span> <span class="token function">worker</span><span class="token punctuation">(</span>j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">spawnGroup</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
    quit <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    job <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
    
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 保证wg.Done在goroutine退出前被执行</span>
            name <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;worker-%d:&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
            <span class="token keyword">for</span> <span class="token punctuation">{</span>
                j<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span>job
                <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
                    <span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;done&quot;</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 执行这个job</span>
                <span class="token function">worker</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">&lt;-</span>quit
        <span class="token function">close</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span> <span class="token comment">// 广播给所有新goroutine</span>
        wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        quit <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> quit
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    quit <span class="token operator">:=</span> <span class="token function">spawnGroup</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> worker<span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;spawn a group of workers&quot;</span><span class="token punctuation">)</span>
    
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
    <span class="token comment">// 通知 worker goroutine 组退出</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;notify the worker group to exit...&quot;</span><span class="token punctuation">)</span>
    quit <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    
    timer <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTimer</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">defer</span> timer<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">select</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>timer<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;wait group workers exit timeout!&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>quit<span class="token punctuation">:</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;group workers done&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时各个worker goroutine监听job channel，当创建者关闭job channel时，通过“comma ok”模式获取的ok值为false，也就表明该channel已经被关闭，于是worker goroutine执行退出逻辑（退出前<code>wg.Done()</code>被执行）。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token variable">$go</span> run go-concurrency-pattern-6.go
spawn a group of workers
notify the worker group to exit<span class="token punctuation">..</span>.
worker-3: <span class="token keyword">done</span>
worker-0: <span class="token keyword">done</span>
worker-4: <span class="token keyword">done</span>
worker-2: <span class="token keyword">done</span>
worker-1: <span class="token keyword">done</span>
group workers <span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="管道模式" tabindex="-1"><a class="header-anchor" href="#管道模式"><span>管道模式</span></a></h3><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// chapter6/sources/go-concurrency-pattern-8.go</span>
<span class="token keyword">func</span> <span class="token function">newNumGenerator</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> count <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> i <span class="token operator">:=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> start<span class="token operator">+</span>count<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
            c <span class="token operator">&lt;-</span> i
        <span class="token punctuation">}</span>
        <span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> c
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">filterOdd</span><span class="token punctuation">(</span>in <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> in<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> in<span class="token punctuation">,</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">square</span><span class="token punctuation">(</span>in <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> in <span class="token operator">*</span> in<span class="token punctuation">,</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">spawn</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">,</span> in <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    out <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
    
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> in <span class="token punctuation">{</span>
            r<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token function">f</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
            <span class="token keyword">if</span> ok <span class="token punctuation">{</span>
                out <span class="token operator">&lt;-</span> r
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">close</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> out
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    in <span class="token operator">:=</span> <span class="token function">newNumGenerator</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
    out <span class="token operator">:=</span> <span class="token function">spawn</span><span class="token punctuation">(</span>square<span class="token punctuation">,</span> <span class="token function">spawn</span><span class="token punctuation">(</span>filterOdd<span class="token punctuation">,</span> in<span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">for</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> out <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-8-有缓和无缓channel" tabindex="-1"><a class="header-anchor" href="#_1-8-有缓和无缓channel"><span>1.8. 有缓和无缓channel</span></a></h2><blockquote><p>这里全部来自chatGPT</p></blockquote><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h3><p>在Go语言中，channel（通道）是用于在 Go 协程之间进行通信和同步的重要机制。Channel 可以是有缓冲的（buffered）或无缓冲的（unbuffered），它们有不同的特性和适用场景。</p><p>无缓冲 channel：</p><ul><li>无缓冲 channel 在发送数据和接收数据时是同步的，发送操作和接收操作是阻塞的。</li><li>当一个数据被发送到无缓冲 channel 时，发送方会阻塞直到有其他 Go 协程从该 channel 接收数据。</li><li>同样，当数据被接收时，接收方会阻塞直到有其他 Go 协程向 channel 发送数据。</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// 创建一个无缓冲 channel</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有缓冲 channel：</p><ul><li>有缓冲 channel 具有一定的容量，允许在 channel 中存储一定数量的数据项。</li><li>当往一个有缓冲 channel 发送数据时，如果 channel 还未满，发送操作是非阻塞的；当 channel 满时发送操作会阻塞。</li><li>同样，当从一个有缓冲 channel 接收数据时，如果 channel 中有数据，接收操作是非阻塞的；当 channel 空时接收操作会阻塞。</li></ul><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 创建一个容量为 5 的有缓冲 channel</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h3><p><strong>无缓冲 channel ：</strong></p><ol><li><p>同步数据传递：在两个 Go 协程之间进行数据传递，确保数据的顺序性和同步性。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    data <span class="token operator">:=</span> <span class="token number">42</span>
    ch <span class="token operator">&lt;-</span> data <span class="token comment">// 将数据发送到无缓冲 channel</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
result <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch <span class="token comment">// 接收从 channel 发来的数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>信号量：控制并发操作的数量，确保在特定时刻只有有限数量的并发操作在执行。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>sem <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 限制同时执行的并发操作数量为 5</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>id <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sem <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 获取信号量</span>
        <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&lt;-</span>sem <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 释放信号量</span>
        <span class="token comment">// 执行并发操作</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>有缓冲 channel ：</strong></p><ol><li><p>生产者-消费者模型：用于在生产者和消费者之间进行解耦，提高程序的吞吐量。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 有缓冲 channel，缓冲区大小为 10</span>
<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        ch <span class="token operator">&lt;-</span> i <span class="token comment">// 生产数据</span>
    <span class="token punctuation">}</span>
    <span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> item <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">{</span>
        <span class="token comment">// 消费数据</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>异步结果处理</strong>：用于异步处理任务的结果，减少因为发送或接收操作阻塞而导致的性能问题。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>resultCh <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 有缓冲 channel，用于接收异步操作的结果</span>
<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 异步操作</span>
    resultCh <span class="token operator">&lt;-</span> <span class="token number">42</span> <span class="token comment">// 发送结果到 channel</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
result <span class="token operator">:=</span> <span class="token operator">&lt;-</span>resultCh <span class="token comment">// 接收异步操作的结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>这些场景只是使用无缓冲和有缓冲 channel 的一部分示例。根据具体的需求，合理选择适当类型的 channel 可以提高程序的效率和可维护性，同时确保并发操作的正确性。</p><h2 id="_1-9-cgo-go调用c代码" tabindex="-1"><a class="header-anchor" href="#_1-9-cgo-go调用c代码"><span>1.9. cgo-Go调用C代码</span></a></h2><p>在 Go 语言中，CGO 是 Go 语言提供的一种特性，用于在 Go 代码中调用 C 语言代码。通过 CGO，可以很方便地在 Go 代码中集成现有的 C 代码库，或者利用 C 语言的性能优势来编写高性能的代码片段。</p><p>使用 CGO 的一般流程包括以下步骤：</p><ol><li><strong>编写 C 代码</strong>：首先需要编写需要调用的 C 代码，可以是一个简单的 C 函数或者一个 C 语言库。</li><li><strong>创建 C 头文件</strong>：为了在 Go 代码中调用 C 函数，需要创建一个 C 头文件，用于声明 C 函数的原型。</li><li><strong>在 Go 代码中使用 CGO</strong>：在 Go 代码中通过 <code>import &quot;C&quot;</code> 来引入 CGO，然后通过 <code>// #cgo</code> 指令告诉编译器去链接 C 代码。</li><li><strong>调用 C 函数</strong>：在 Go 代码中就可以像调用普通 Go 函数一样调用 C 函数，通过 CGO 技术实现 Go 与 C 语言的互操作。</li></ol><p>以下是一个更详细的示例，展示如何使用 CGO 在 Go 中调用一个简单的 C 函数来实现字符串加密和解密功能。</p><p><strong>1. 编写 C 代码</strong></p><p>首先，我们编写两个简单的 C 函数，一个用于加密字符串，另一个用于解密字符串。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// encrypt.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token operator">*</span>str <span class="token operator">^</span> <span class="token number">31</span><span class="token punctuation">;</span>
        str<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// decrypt.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token operator">*</span>str <span class="token operator">^</span> <span class="token number">31</span><span class="token punctuation">;</span>
        str<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 创建 C 头文件 <code>crypto.h</code></strong></p><p>创建一个头文件 <code>crypto.h</code>，用于声明 C 函数的原型。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// crypto.h</span>
<span class="token keyword">void</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 编写 Go 代码</strong></p><p>接下来，我们编写 Go 代码，通过 CGO 调用上述的 C 函数来加密和解密字符串。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token comment">/*
#cgo CFLAGS: -g -Wall
#cgo LDFLAGS: -lm
#include &quot;crypto.h&quot;
*/</span>
<span class="token keyword">import</span> <span class="token string">&quot;C&quot;</span>
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    message <span class="token operator">:=</span> <span class="token string">&quot;Hello, world!&quot;</span>

    <span class="token comment">// Encrypt the message</span>
    cMessage <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">CString</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
    <span class="token keyword">defer</span> C<span class="token punctuation">.</span><span class="token function">free</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>cMessage<span class="token punctuation">)</span><span class="token punctuation">)</span>
    C<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>cMessage<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Encrypted message: %s\\n&quot;</span><span class="token punctuation">,</span> C<span class="token punctuation">.</span><span class="token function">GoString</span><span class="token punctuation">(</span>cMessage<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// Decrypt the message</span>
    C<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>cMessage<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Decrypted message: %s\\n&quot;</span><span class="token punctuation">,</span> C<span class="token punctuation">.</span><span class="token function">GoString</span><span class="token punctuation">(</span>cMessage<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，Go 代码通过 <code>import &quot;C&quot;</code> 引入 CGO，然后使用 <code>// #cgo</code> 指令来指定编译选项。在 <code>main</code> 函数中，我们首先将 Go 字符串转换为 C 字符串，然后调用 C 函数来加密和解密字符串，最后将结果打印出来。</p><p><strong>4. 构建和运行程序</strong></p><p>在包含以上文件的目录中，可以通过以下命令构建和运行这个示例程序：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>go build <span class="token parameter variable">-o</span> crypto
./crypto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>程序应该输出以下内容：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Encrypted message: LQYYX;#rNXVX
Decrypted message: Hello, world!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,156)]))}const u=s(p,[["render",o],["__file","1_GoFinal.html.vue"]]),r=JSON.parse('{"path":"/develop/Go/ImprovingGo/1_GoFinal.html","title":"1. 基础收尾","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1.1. 项目结构","slug":"_1-1-项目结构","link":"#_1-1-项目结构","children":[]},{"level":2,"title":"1.2. defer函数","slug":"_1-2-defer函数","link":"#_1-2-defer函数","children":[{"level":3,"title":"基本语法","slug":"基本语法","link":"#基本语法","children":[]},{"level":3,"title":"示例用途","slug":"示例用途","link":"#示例用途","children":[]},{"level":3,"title":"哪些函数可以defer","slug":"哪些函数可以defer","link":"#哪些函数可以defer","children":[]}]},{"level":2,"title":"1.3. receiver参数","slug":"_1-3-receiver参数","link":"#_1-3-receiver参数","children":[]},{"level":2,"title":"1.4. 变长参数函数","slug":"_1-4-变长参数函数","link":"#_1-4-变长参数函数","children":[]},{"level":2,"title":"1.5. 模拟函数重载","slug":"_1-5-模拟函数重载","link":"#_1-5-模拟函数重载","children":[]},{"level":2,"title":"1.6. 功能选项","slug":"_1-6-功能选项","link":"#_1-6-功能选项","children":[]},{"level":2,"title":"1.7. Go常见的并发模式","slug":"_1-7-go常见的并发模式","link":"#_1-7-go常见的并发模式","children":[{"level":3,"title":"创建模式","slug":"创建模式","link":"#创建模式","children":[]},{"level":3,"title":"退出模式","slug":"退出模式","link":"#退出模式","children":[]},{"level":3,"title":"管道模式","slug":"管道模式","link":"#管道模式","children":[]}]},{"level":2,"title":"1.8. 有缓和无缓channel","slug":"_1-8-有缓和无缓channel","link":"#_1-8-有缓和无缓channel","children":[{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]}]},{"level":2,"title":"1.9. cgo-Go调用C代码","slug":"_1-9-cgo-go调用c代码","link":"#_1-9-cgo-go调用c代码","children":[]}],"git":{"createdTime":1723990650000,"updatedTime":1725442128000,"contributors":[{"name":"echo0d","email":"echo0d@163.com","commits":3}]},"readingTime":{"minutes":23.81,"words":7144},"filePathRelative":"develop/Go/ImprovingGo/1_GoFinal.md","localizedDate":"2024年8月18日","excerpt":"\\n<h2>1.1. 项目结构</h2>\\n<p>在 Go 语言中，经典的项目结构通常遵循一种约定俗成的布局，这有助于使项目更具可读性和易维护性。以下是一个经典的 Go 项目结构示例：</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>project-root/\\n|-- cmd/\\n|   |-- main.go\\n|\\n|-- internal/\\n|   |-- pkg1/\\n|   |   |-- ...\\n|   |\\n|   |-- pkg2/\\n|   |   |-- ...\\n|   |\\n|   |-- ...\\n|\\n|-- pkg/\\n|   |-- pkg3/\\n|   |   |-- ...\\n|   |\\n|   |-- pkg4/\\n|   |   |-- ...\\n|   |\\n|   |-- ...\\n|\\n|-- api/\\n|   |-- http/\\n|   |   |-- ...\\n|   |\\n|   |-- grpc/\\n|   |   |-- ...\\n|   |\\n|   |-- ...\\n|\\n|-- configs/\\n|   |-- config.go\\n|\\n|-- deployments/\\n|   |-- docker/\\n|   |   |-- Dockerfile\\n|   |\\n|   |-- kubernetes/\\n|   |   |-- ...\\n|   |\\n|   |-- ...\\n|\\n|-- docs/\\n|   |-- ...\\n|\\n|-- pkg/\\n|   |-- ...\\n|\\n|-- scripts/\\n|   |-- ...\\n|\\n|-- test/\\n|   |-- ...\\n|\\n|-- .gitignore\\n|-- go.mod\\n|-- go.sum\\n|-- README.md\\n</code></pre></div>"}');export{u as comp,r as data};
