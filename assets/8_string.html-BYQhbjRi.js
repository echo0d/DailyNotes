import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as p,o as t}from"./app-vU8izl1I.js";const o={};function c(e,n){return t(),a("div",null,[...n[0]||(n[0]=[p(`<h1 id="_08-c语言-字符串" tabindex="-1"><a class="header-anchor" href="#_08-c语言-字符串"><span>08. C语言-字符串</span></a></h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介"><span>1 简介</span></a></h2><p>C 语言没有单独的字符串类型，字符串被当作字符数组，即<code>char</code>类型的数组。比如，字符串“Hello”是当作数组<code>{&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;}</code>处理的。</p><p>编译器会给数组分配一段连续内存，所有字符储存在相邻的内存单元之中。在字符串结尾，C 语言会自动添加一个全是二进制<code>0</code>的字节，写作<code>\\0</code>字符，表示字符串结束。字符<code>\\0</code>不同于字符<code>0</code>，前者的 ASCII 码是0（二进制形式<code>00000000</code>），后者的 ASCII 码是48（二进制形式<code>00110000</code>）。所以，字符串“Hello”实际储存的数组是<code>{&#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, &#39;\\0&#39;}</code>。</p><p>所有字符串的最后一个字符，都是<code>\\0</code>。这样做的好处是，C 语言不需要知道字符串的长度，就可以读取内存里面的字符串，只要发现有一个字符是<code>\\0</code>，那么就知道字符串结束了。</p><pre><code class="language-c"><span class="token keyword">char</span> localString<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><p>上面示例声明了一个10个成员的字符数组，可以当作字符串。由于必须留一个位置给<code>\\0</code>，所以最多只能容纳9个字符的字符串。</p><p>字符串写成数组的形式，是非常麻烦的。C 语言提供了一种简写法，双引号之中的字符，会被自动视为字符数组。</p><pre><code class="language-c"><span class="token punctuation">{</span><span class="token char">&#39;H&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">}</span>

<span class="token comment">// 等价于</span>
<span class="token string">&quot;Hello&quot;</span>
</code></pre><p>上面两种字符串的写法是等价的，内部存储方式都是一样的。双引号里面的字符串，不用自己添加结尾字符<code>\\0</code>，C 语言会自动添加。</p><p>注意，双引号里面是字符串，单引号里面是字符，两者不能互换。如果把<code>Hello</code>放在单引号里面，编译器会报错。</p><pre><code class="language-c"><span class="token comment">// 报错</span>
<span class="token char">&#39;Hello&#39;</span>
</code></pre><p>另一方面，即使双引号里面只有一个字符（比如<code>&quot;a&quot;</code>），也依然被处理成字符串（存储为2个字节），而不是字符<code>&#39;a&#39;</code>（存储为1个字节）。</p><p>如果字符串内部包含双引号，则该双引号需要使用反斜杠转义。</p><pre><code class="language-c"><span class="token string">&quot;She replied, \\&quot;It does.\\&quot;&quot;</span>
</code></pre><p>反斜杠还可以表示其他特殊字符，比如换行符（<code>\\n</code>）、制表符（<code>\\t</code>）等。</p><pre><code class="language-c"><span class="token string">&quot;Hello, world!\\n&quot;</span>
</code></pre><p>如果字符串过长，可以在需要折行的地方，使用反斜杠（<code>\\</code>）结尾，将一行拆成多行。</p><pre><code class="language-c"><span class="token string">&quot;hello \\
world&quot;</span>
</code></pre><p>上面示例中，第一行尾部的反斜杠，将字符串拆成两行。</p><p>上面这种写法有一个缺点，就是第二行必须顶格书写，如果想包含缩进，那么缩进也会被计入字符串。为了解决这个问题，C 语言允许合并多个字符串字面量，只要这些字符串之间没有间隔，或者只有空格，C 语言会将它们自动合并。</p><pre><code class="language-c"><span class="token keyword">char</span> greeting<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, &quot;</span><span class="token string">&quot;how are you &quot;</span><span class="token string">&quot;today!&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token keyword">char</span> greeting<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, how are you today!&quot;</span><span class="token punctuation">;</span>
</code></pre><p>这种新写法支持多行字符串的合并。</p><pre><code class="language-c"><span class="token keyword">char</span> greeting<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, &quot;</span>
  <span class="token string">&quot;how are you &quot;</span>
  <span class="token string">&quot;today!&quot;</span><span class="token punctuation">;</span>
</code></pre><p><code>printf()</code>使用占位符<code>%s</code>输出字符串。</p><pre><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>
</code></pre><h2 id="_2-字符串变量的声明" tabindex="-1"><a class="header-anchor" href="#_2-字符串变量的声明"><span>2 字符串变量的声明</span></a></h2><p>字符串变量可以声明成一个字符数组，也可以声明成一个指针，指向字符数组。</p><pre><code class="language-c"><span class="token comment">// 写法一</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 写法二</span>
<span class="token keyword">char</span><span class="token operator">*</span> s <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>
</code></pre><p>上面两种写法都声明了一个字符串变量<code>s</code>。如果采用第一种写法，由于字符数组的长度可以让编译器自动计算，所以声明时可以省略字符数组的长度。</p><pre><code class="language-c"><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，编译器会将数组<code>s</code>的长度指定为14，正好容纳后面的字符串。</p><p>字符数组的长度，可以大于字符串的实际长度。</p><pre><code class="language-c"><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，字符数组<code>s</code>的长度是<code>50</code>，但是字符串“hello”的实际长度只有6（包含结尾符号<code>\\0</code>），所以后面空出来的44个位置，都会被初始化为<code>\\0</code>。</p><p>字符数组的长度，不能小于字符串的实际长度。</p><pre><code class="language-c"><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，字符串数组<code>s</code>的长度是<code>5</code>，小于字符串“hello”的实际长度6，这时编译器会报错。因为如果只将前5个字符写入，而省略最后的结尾符号<code>\\0</code>，这很可能导致后面的字符串相关代码出错。</p><p>字符指针和字符数组，这两种声明字符串变量的写法基本是等价的，但是有两个差异。</p><p>第一个差异是，指针指向的字符串，在 C 语言内部被当作常量，不能修改字符串本身。</p><pre><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> s <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>
s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 错误</span>
</code></pre><p>上面代码使用指针，声明了一个字符串变量，然后修改了字符串的第一个字符。这种写法是错的，会导致难以预测的后果，执行时很可能会报错。</p><p>如果使用数组声明字符串变量，就没有这个问题，可以修改数组的任意成员。</p><pre><code class="language-c"><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>
s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">;</span>
</code></pre><p>为什么字符串声明为指针时不能修改，声明为数组时就可以修改？原因是系统会将字符串的字面量保存在内存的常量区，这个区是不允许用户修改的。声明为指针时，指针变量存储的值是一个指向常量区的内存地址，因此用户不能通过这个地址去修改常量区。但是，声明为数组时，编译器会给数组单独分配一段内存，字符串字面量会被编译器解释成字符数组，逐个字符写入这段新分配的内存之中，而这段新内存是允许修改的。</p><p>为了提醒用户，字符串声明为指针后不得修改，可以在声明时使用<code>const</code>说明符，保证该字符串是只读的。</p><pre><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>
</code></pre><p>上面字符串声明为指针时，使用了<code>const</code>说明符，就保证了该字符串无法修改。一旦修改，编译器肯定会报错。</p><p>第二个差异是，指针变量可以指向其它字符串。</p><pre><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> s <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
s <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，字符指针可以指向另一个字符串。</p><p>但是，字符数组变量不能指向另一个字符串。</p><pre><code class="language-c"><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
s <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
</code></pre><p>上面示例中，字符数组的数组名，总是指向初始化时的字符串地址，不能修改。</p><p>同样的原因，声明字符数组后，不能直接用字符串赋值。</p><pre><code class="language-c"><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
s <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 错误</span>
</code></pre><p>上面示例中，不能直接把字符串赋值给字符数组变量，会报错。原因是字符数组的变量名，跟所指向的数组是绑定的，不能指向另一个地址。</p><p>为什么数组变量不能赋值为另一个数组？原因是数组变量所在的地址无法改变，或者说，编译器一旦为数组变量分配地址后，这个地址就绑定这个数组变量了，这种绑定关系是不变的。C 语言也因此规定，数组变量是一个不可修改的左值，即不能用赋值运算符为它重新赋值。</p><p>想要重新赋值，必须使用 C 语言原生提供的<code>strcpy()</code>函数，通过字符串拷贝完成赋值。这样做以后，数组变量的地址还是不变的，即<code>strcpy()</code>只是在原地址写入新的字符串，而不是让数组变量指向新的地址。</p><pre><code class="language-c"><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">strcpy</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，<code>strcpy()</code>函数把字符串<code>abc</code>拷贝给变量<code>s</code>，这个函数的详细用法会在后面介绍。</p><h2 id="_3-strlen" tabindex="-1"><a class="header-anchor" href="#_3-strlen"><span>3 strlen()</span></a></h2><p><code>strlen()</code>函数返回字符串的字节长度，不包括末尾的空字符<code>\\0</code>。该函数的原型如下。</p><pre><code class="language-c"><span class="token comment">// string.h</span>
<span class="token class-name">size_t</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>它的参数是字符串变量，返回的是<code>size_t</code>类型的无符号整数，除非是极长的字符串，一般情况下当作<code>int</code>类型处理即可。下面是一个用法实例。</p><pre><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
</code></pre><p><code>strlen()</code>的原型在标准库的<code>string.h</code>文件中定义，使用时需要加载头文件<code>string.h</code>。</p><pre><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span><span class="token operator">*</span> s <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;The string is %zd characters long.\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>注意，字符串长度（<code>strlen()</code>）与字符串变量长度（<code>sizeof()</code>），是两个不同的概念。</p><pre><code class="language-c"><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 50</span>
</code></pre><p>上面示例中，字符串长度是5，字符串变量长度是50。</p><p>如果不使用这个函数，可以通过判断字符串末尾的<code>\\0</code>，自己计算字符串长度。</p><pre><code class="language-c"><span class="token keyword">int</span> <span class="token function">my_strlen</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">)</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="_4-strcpy" tabindex="-1"><a class="header-anchor" href="#_4-strcpy"><span>4 strcpy()</span></a></h2><p>字符串的复制，不能使用赋值运算符，直接将一个字符串赋值给字符数组变量。</p><pre><code class="language-c"><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

str1 <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
str2 <span class="token operator">=</span> str1<span class="token punctuation">;</span>  <span class="token comment">// 报错</span>
</code></pre><p>上面两种字符串的复制写法，都是错的。因为数组的变量名是一个固定的地址，不能修改，使其指向另一个地址。</p><p>如果是字符指针，赋值运算符（<code>=</code>）只是将一个指针的地址复制给另一个指针，而不是复制字符串。</p><pre><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> s1<span class="token punctuation">;</span>
<span class="token keyword">char</span><span class="token operator">*</span> s2<span class="token punctuation">;</span>

s1 <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
s2 <span class="token operator">=</span> s1<span class="token punctuation">;</span>
</code></pre><p>上面代码可以运行，结果是两个指针变量<code>s1</code>和<code>s2</code>指向同一字符串，而不是将字符串<code>s1</code>的内容复制给<code>s2</code>。</p><p>C 语言提供了<code>strcpy()</code>函数，用于将一个字符串的内容复制到另一个字符串，相当于字符串赋值。该函数的原型定义在<code>string.h</code>头文件里面。</p><pre><code class="language-c"><span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span> dest<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> source<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><p><code>strcpy()</code>接受两个参数，第一个参数是目的字符串数组，第二个参数是源字符串数组。复制字符串之前，必须要保证第一个参数的长度不小于第二个参数，否则虽然不会报错，但会溢出第一个字符串变量的边界，发生难以预料的结果。第二个参数的<code>const</code>说明符，表示这个函数不会修改第二个字符串。</p><pre><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> t<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">strcpy</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>

  t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;Hello, world!&quot;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;zello, world!&quot;</span>
<span class="token punctuation">}</span>
</code></pre><p>上面示例将变量<code>s</code>的值，拷贝一份放到变量<code>t</code>，变成两个不同的字符串，修改一个不会影响到另一个。另外，变量<code>t</code>的长度大于<code>s</code>，复制后多余的位置（结束标志<code>\\0</code>后面的位置）都为随机值。</p><p><code>strcpy()</code>也可以用于字符数组的赋值。</p><pre><code class="language-c"><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&quot;abcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例将字符数组变量，赋值为字符串“abcd”。</p><p><code>strcpy()</code>的返回值是一个字符串指针（即<code>char*</code>），指向第一个参数。</p><pre><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> s1 <span class="token operator">=</span> <span class="token string">&quot;beast&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Be the best that you can be.&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span><span class="token operator">*</span> ps<span class="token punctuation">;</span>

ps <span class="token operator">=</span> <span class="token function">strcpy</span><span class="token punctuation">(</span>s2 <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">puts</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Be the beast</span>
<span class="token function">puts</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// beast</span>
</code></pre><p>上面示例中，从<code>s2</code>的第7个位置开始拷贝字符串<code>beast</code>，前面的位置不变。这导致<code>s2</code>后面的内容都被截去了，因为会连<code>beast</code>结尾的空字符一起拷贝。<code>strcpy()</code>返回的是一个指针，指向拷贝开始的位置。</p><p><code>strcpy()</code>返回值的另一个用途，是连续为多个字符数组赋值。</p><pre><code class="language-c"><span class="token function">strcpy</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token function">strcpy</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token string">&quot;abcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例调用两次<code>strcpy()</code>，完成两个字符串变量的赋值。</p><p>另外，<code>strcpy()</code>的第一个参数最好是一个已经声明的数组，而不是声明后没有进行初始化的字符指针。</p><pre><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">;</span>
<span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 错误</span>
</code></pre><p>上面的代码是有问题的。<code>strcpy()</code>将字符串分配给指针变量<code>str</code>，但是<code>str</code>并没有进行初始化，指向的是一个随机的位置，因此字符串可能被复制到任意地方。</p><p>如果不用<code>strcpy()</code>，自己实现字符串的拷贝，可以用下面的代码。</p><pre><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span><span class="token operator">*</span> ptr <span class="token operator">=</span> dest<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>dest<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>source<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ptr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">strcpy</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>上面代码中，关键的一行是<code>while (*dest++ = *source++)</code>，这是一个循环，依次将<code>source</code>的每个字符赋值给<code>dest</code>，然后移向下一个位置，直到遇到<code>\\0</code>，循环判断条件不再为真，从而跳出循环。其中，<code>*dest++</code>这个表达式等同于<code>*(dest++)</code>，即先返回<code>dest</code>这个地址，再进行自增运算移向下一个位置，而<code>*dest</code>可以对当前位置赋值。</p><p><code>strcpy()</code>函数有安全风险，因为它并不检查目标字符串的长度，是否足够容纳源字符串的副本，可能导致写入溢出。如果不能保证不会发生溢出，建议使用<code>strncpy()</code>函数代替。</p><h2 id="_5-strncpy" tabindex="-1"><a class="header-anchor" href="#_5-strncpy"><span>5 strncpy()</span></a></h2><p><code>strncpy()</code>跟<code>strcpy()</code>的用法完全一样，只是多了第3个参数，用来指定复制的最大字符数，防止溢出目标字符串变量的边界。</p><pre><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">strncpy</span><span class="token punctuation">(</span>
  <span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">,</span> 
  <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">,</span> 
  <span class="token class-name">size_t</span> n
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面原型中，第三个参数<code>n</code>定义了复制的最大字符数。如果达到最大字符数以后，源字符串仍然没有复制完，就会停止复制，这时目的字符串结尾将没有终止符<code>\\0</code>，这一点务必注意。如果源字符串的字符数小于<code>n</code>，则<code>strncpy()</code>的行为与<code>strcpy()</code>完全一致。</p><pre><code class="language-c"><span class="token function">strncpy</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
str1<span class="token punctuation">[</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，字符串<code>str2</code>复制给<code>str1</code>，但是复制长度最多为<code>str1</code>的长度减去1，<code>str1</code>剩下的最后一位用于写入字符串的结尾标志<code>\\0</code>。这是因为<code>strncpy()</code>不会自己添加<code>\\0</code>，如果复制的字符串片段不包含结尾标志，就需要手动添加。</p><p><code>strncpy()</code>也可以用来拷贝部分字符串。</p><pre><code class="language-c"><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>

<span class="token function">strncpy</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello</span>
</code></pre><p>上面示例中，指定只拷贝前5个字符。</p><h2 id="_6-strcat" tabindex="-1"><a class="header-anchor" href="#_6-strcat"><span>6 strcat()</span></a></h2><p><code>strcat()</code>函数用于连接字符串。它接受两个字符串作为参数，把第二个字符串的副本添加到第一个字符串的末尾。这个函数会改变第一个字符串，但是第二个字符串不变。</p><p>该函数的原型定义在<code>string.h</code>头文件里面。</p><pre><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">strcat</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p><code>strcat()</code>的返回值是一个字符串指针，指向第一个参数。</p><pre><code class="language-c"><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>

<span class="token function">strcat</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">puts</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;helloworld&quot;</span>
</code></pre><p>上面示例中，调用<code>strcat()</code>以后，可以看到字符串<code>s1</code>的值变了。</p><p>注意，<code>strcat()</code>的第一个参数的长度，必须足以容纳添加第二个参数字符串。否则，拼接后的字符串会溢出第一个字符串的边界，写入相邻的内存单元，这是很危险的，建议使用下面的<code>strncat()</code>代替。</p><h2 id="_7-strncat" tabindex="-1"><a class="header-anchor" href="#_7-strncat"><span>7 strncat()</span></a></h2><p><code>strncat()</code>用于连接两个字符串，用法与<code>strcat()</code>完全一致，只是增加了第三个参数，指定最大添加的字符数。在添加过程中，一旦达到指定的字符数，或者在源字符串中遇到空字符<code>\\0</code>，就不再添加了。它的原型定义在<code>string.h</code>头文件里面。</p><pre><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">strncat</span><span class="token punctuation">(</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">,</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">,</span>
  <span class="token class-name">size_t</span> n
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p><code>strncat()</code>返回第一个参数，即目标字符串指针。</p><p>为了保证连接后的字符串，不超过目标字符串的长度，<code>strncat()</code>通常会写成下面这样。</p><pre><code class="language-c"><span class="token function">strncat</span><span class="token punctuation">(</span>
  str1<span class="token punctuation">,</span> 
  str2<span class="token punctuation">,</span> 
  <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p><code>strncat()</code>总是会在拼接结果的结尾，自动添加空字符<code>\\0</code>，所以第三个参数的最大值，应该是<code>str1</code>的变量长度减去<code>str1</code>的字符串长度，再减去<code>1</code>。下面是一个用法实例。</p><pre><code class="language-c"><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Monday&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Tuesday&quot;</span><span class="token punctuation">;</span>

<span class="token function">strncat</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">puts</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;MondayTue&quot;</span>
</code></pre><p>上面示例中，<code>s1</code>的变量长度是10，字符长度是6，两者相减后再减去1，得到<code>3</code>，表明<code>s1</code>最多可以再添加三个字符，所以得到的结果是<code>MondayTue</code>。</p><h2 id="_8-strcmp" tabindex="-1"><a class="header-anchor" href="#_8-strcmp"><span>8 strcmp()</span></a></h2><p>如果要比较两个字符串，无法直接比较，只能一个个字符进行比较，C 语言提供了<code>strcmp()</code>函数。</p><p><code>strcmp()</code>函数用于比较两个字符串的内容。该函数的原型如下，定义在<code>string.h</code>头文件里面。</p><pre><code class="language-c"><span class="token keyword">int</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>按照字典顺序，如果两个字符串相同，返回值为<code>0</code>；如果<code>s1</code>小于<code>s2</code>，<code>strcmp()</code>返回值小于0；如果<code>s1</code>大于<code>s2</code>，返回值大于0。</p><p>下面是一个用法示例。</p><pre><code class="language-c"><span class="token comment">// s1 = Happy New Year</span>
<span class="token comment">// s2 = Happy New Year</span>
<span class="token comment">// s3 = Happy Holidays</span>

<span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token comment">// 0</span>
<span class="token function">strcmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s3<span class="token punctuation">)</span> <span class="token comment">// 大于 0</span>
<span class="token function">strcmp</span><span class="token punctuation">(</span>s3<span class="token punctuation">,</span> s1<span class="token punctuation">)</span> <span class="token comment">// 小于 0</span>
</code></pre><p>注意，<code>strcmp()</code>只用来比较字符串，不用来比较字符。因为字符就是小整数，直接用相等运算符（<code>==</code>）就能比较。所以，不要把字符类型（<code>char</code>）的值，放入<code>strcmp()</code>当作参数。</p><h2 id="_9-strncmp" tabindex="-1"><a class="header-anchor" href="#_9-strncmp"><span>9 strncmp()</span></a></h2><p>由于<code>strcmp()</code>比较的是整个字符串，C 语言又提供了<code>strncmp()</code>函数，只比较到指定的位置。</p><p>该函数增加了第三个参数，指定了比较的字符数。它的原型定义在<code>string.h</code>头文件里面。</p><pre><code class="language-c"><span class="token keyword">int</span> <span class="token function">strncmp</span><span class="token punctuation">(</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s1<span class="token punctuation">,</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s2<span class="token punctuation">,</span> 
  <span class="token class-name">size_t</span> n
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>它的返回值与<code>strcmp()</code>一样。如果两个字符串相同，返回值为<code>0</code>；如果<code>s1</code>小于<code>s2</code>，<code>strcmp()</code>返回值小于0；如果<code>s1</code>大于<code>s2</code>，返回值大于0。</p><p>下面是一个例子。</p><pre><code class="language-c"><span class="token keyword">char</span> s1<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello C&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;They all have hello.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>上面示例只比较两个字符串的前5个字符。</p><h2 id="_10-sprintf-snprintf" tabindex="-1"><a class="header-anchor" href="#_10-sprintf-snprintf"><span>10 sprintf()，snprintf()</span></a></h2><p><code>sprintf()</code>函数跟<code>printf()</code>类似，但是用于将数据写入字符串，而不是输出到显示器。该函数的原型定义在<code>stdio.h</code>头文件里面。</p><pre><code class="language-c"><span class="token keyword">int</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p><code>sprintf()</code>的第一个参数是字符串指针变量，其余参数和<code>printf()</code>相同，即第二个参数是格式字符串，后面的参数是待写入的变量列表。</p><pre><code class="language-c"><span class="token keyword">char</span> first<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> last<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;%s %s&quot;</span><span class="token punctuation">,</span> first<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello world</span>
</code></pre><p>上面示例中，<code>sprintf()</code>将输出内容组合成“hello world”，然后放入了变量<code>s</code>。</p><p><code>sprintf()</code>的返回值是写入变量的字符数量（不计入尾部的空字符<code>\\0</code>）。如果遇到错误，返回负值。</p><p><code>sprintf()</code>有严重的安全风险，如果写入的字符串过长，超过了目标字符串的长度，<code>sprintf()</code>依然会将其写入，导致发生溢出。为了控制写入的字符串的长度，C 语言又提供了另一个函数<code>snprintf()</code>。</p><p><code>snprintf()</code>只比<code>sprintf()</code>多了一个参数<code>n</code>，用来控制写入变量的字符串不超过<code>n - 1</code>个字符，剩下一个位置写入空字符<code>\\0</code>。下面是它的原型。</p><pre><code class="language-c"><span class="token keyword">int</span> <span class="token function">snprintf</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p><code>snprintf()</code>总是会自动写入字符串结尾的空字符。如果你尝试写入的字符数超过指定的最大字符数，<code>snprintf()</code>会写入 n - 1 个字符，留出最后一个位置写入空字符。</p><p>下面是一个例子。</p><pre><code class="language-c"><span class="token function">snprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&quot;%s %s&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面的例子中，<code>snprintf()</code>的第二个参数是12，表示写入字符串的最大长度不超过12（包括尾部的空字符）。</p><p><code>snprintf()</code>的返回值是写入格式字符串的字符数量（不计入尾部的空字符<code>\\0</code>）。如果<code>n</code>足够大，返回值应该小于<code>n</code>，但是有时候格式字符串的长度可能大于<code>n</code>，那么这时返回值会大于<code>n</code>，但实际上真正写入变量的还是<code>n-1</code>个字符。如果遇到错误，返回一个负值。因此，返回值只有在非负并且小于<code>n</code>时，才能确认完整的格式字符串写入了变量。</p><h2 id="_11-字符串数组" tabindex="-1"><a class="header-anchor" href="#_11-字符串数组"><span>11 字符串数组</span></a></h2><p>如果一个数组的每个成员都是一个字符串，需要通过二维的字符数组实现。每个字符串本身是一个字符数组，多个字符串再组成一个数组。</p><pre><code class="language-c"><span class="token keyword">char</span> weekdays<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;Monday&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Tuesday&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Wednesday&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Thursday&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Friday&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Saturday&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Sunday&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>上面示例就是一个字符串数组，一共包含7个字符串，所以第一维的长度是7。其中，最长的字符串的长度是10（含结尾的终止符<code>\\0</code>），所以第二维的长度统一设为10。</p><p>因为第一维的长度，编译器可以自动计算，所以可以省略。</p><pre><code class="language-c"><span class="token keyword">char</span> weekdays<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;Monday&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Tuesday&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Wednesday&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Thursday&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Friday&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Saturday&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Sunday&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，二维数组第一维的长度，可以由编译器根据后面的赋值，自动计算，所以可以不写。</p><p>数组的第二维，长度统一定为10，有点浪费空间，因为大多数成员的长度都小于10。解决方法就是把数组的第二维，从字符数组改成字符指针。</p><pre><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> weekdays<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;Monday&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Tuesday&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Wednesday&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Thursday&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Friday&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Saturday&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;Sunday&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>上面的字符串数组，其实是一个一维数组，成员就是7个字符指针，每个指针指向一个字符串（字符数组）。</p><p>遍历字符串数组的写法如下。</p><pre><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> weekdays<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>`,170)])])}const r=s(o,[["render",c]]),k=JSON.parse(`{"path":"/develop/C/8_string.html","title":"08. C语言-字符串","lang":"zh-CN","frontmatter":{"category":"C","tags":["C"],"description":"08. C语言-字符串 1 简介 C 语言没有单独的字符串类型，字符串被当作字符数组，即char类型的数组。比如，字符串“Hello”是当作数组{'H', 'e', 'l', 'l', 'o'}处理的。 编译器会给数组分配一段连续内存，所有字符储存在相邻的内存单元之中。在字符串结尾，C 语言会自动添加一个全是二进制0的字节，写作\\\\0字符，表示字符串结束...","head":[["meta",{"property":"og:url","content":"https://echo0d.github.io/DailyNotes/develop/C/8_string.html"}],["meta",{"property":"og:site_name","content":"echo0d-notes"}],["meta",{"property":"og:title","content":"08. C语言-字符串"}],["meta",{"property":"og:description","content":"08. C语言-字符串 1 简介 C 语言没有单独的字符串类型，字符串被当作字符数组，即char类型的数组。比如，字符串“Hello”是当作数组{'H', 'e', 'l', 'l', 'o'}处理的。 编译器会给数组分配一段连续内存，所有字符储存在相邻的内存单元之中。在字符串结尾，C 语言会自动添加一个全是二进制0的字节，写作\\\\0字符，表示字符串结束..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-11T02:11:10.000Z"}],["meta",{"property":"article:author","content":"echo0d"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:modified_time","content":"2025-04-11T02:11:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"08. C语言-字符串\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-11T02:11:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"echo0d\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"1 简介","slug":"_1-简介","link":"#_1-简介","children":[]},{"level":2,"title":"2 字符串变量的声明","slug":"_2-字符串变量的声明","link":"#_2-字符串变量的声明","children":[]},{"level":2,"title":"3 strlen()","slug":"_3-strlen","link":"#_3-strlen","children":[]},{"level":2,"title":"4 strcpy()","slug":"_4-strcpy","link":"#_4-strcpy","children":[]},{"level":2,"title":"5 strncpy()","slug":"_5-strncpy","link":"#_5-strncpy","children":[]},{"level":2,"title":"6 strcat()","slug":"_6-strcat","link":"#_6-strcat","children":[]},{"level":2,"title":"7 strncat()","slug":"_7-strncat","link":"#_7-strncat","children":[]},{"level":2,"title":"8 strcmp()","slug":"_8-strcmp","link":"#_8-strcmp","children":[]},{"level":2,"title":"9 strncmp()","slug":"_9-strncmp","link":"#_9-strncmp","children":[]},{"level":2,"title":"10 sprintf()，snprintf()","slug":"_10-sprintf-snprintf","link":"#_10-sprintf-snprintf","children":[]},{"level":2,"title":"11 字符串数组","slug":"_11-字符串数组","link":"#_11-字符串数组","children":[]}],"git":{"createdTime":1739005802000,"updatedTime":1744337470000,"contributors":[{"name":"echo0d","email":"echo0d@163.com","commits":2}]},"readingTime":{"minutes":18.03,"words":5410},"filePathRelative":"develop/C/8_string.md","localizedDate":"2025年2月8日","excerpt":"","autoDesc":true}`);export{r as comp,k as data};
