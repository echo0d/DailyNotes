import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as n,d as e,e as t,b as l,o as r,r as c}from"./app-CGtPVU7B.js";const u="/DailyNotes/assets/img3-CHQoKcOu.png",h="/DailyNotes/assets/img4-Cc-TOpoN.png",i="/DailyNotes/assets/img5-DM1U7445.png",d="/DailyNotes/assets/img6-DuPNXxmF.png",g="/DailyNotes/assets/img7-BxtR-Hub.png",m="/DailyNotes/assets/img8-B3G69nPN.png",k="/DailyNotes/assets/img9-CKAhy7mN.png",v="/DailyNotes/assets/img10-D3uLoXoy.png",_="/DailyNotes/assets/img1-CCfVdlC7.png",f="/DailyNotes/assets/img2--zLIvJQ3.png",b={},x={href:"https://www.cnnvd.org.cn/home/loophole",target:"_blank",rel:"noopener noreferrer"},y={href:"https://nvd.nist.gov/vuln/search",target:"_blank",rel:"noopener noreferrer"};function S(R,a){const s=c("ExternalLinkIcon");return r(),p("div",null,[a[2]||(a[2]=n("h1",{id:"权限绕过-shiro-cve-2020-13933-apache-shiro权限绕过漏洞",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#权限绕过-shiro-cve-2020-13933-apache-shiro权限绕过漏洞"},[n("span",null,"权限绕过_shiro_CVE-2020-13933_Apache Shiro权限绕过漏洞")])],-1)),a[3]||(a[3]=n("hr",null,null,-1)),a[4]||(a[4]=n("h2",{id:"漏洞介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#漏洞介绍"},[n("span",null,"漏洞介绍")])],-1)),n("blockquote",null,[n("p",null,[n("a",x,[a[0]||(a[0]=e("国家信息安全漏洞库 (cnnvd.org.cn)")),t(s)])]),n("p",null,[n("a",y,[a[1]||(a[1]=e("NVD - Search and Statistics (nist.gov)")),t(s)])])]),a[5]||(a[5]=l(`<hr><p>Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。2020年6月22日，Apache官方发布公告，修复了一个Apache Shiro身份验证绕过漏洞（CVE-2020-11989），攻击者可通过构造恶意请求利用该漏洞来绕过身份验证，并发布1.5.3版本。但这个修复并不完全，由于shiro在处理url时与spring仍然存在差异，shiro最新版仍然存在身份验证绕过漏洞。2020年8月17日Apache官方再次发布公告，进一步修复Apache Shiro身份验证绕过漏洞（CVE-2020-13933），并发布1.6.0版本。</p><hr><h3 id="漏洞危害" tabindex="-1"><a class="header-anchor" href="#漏洞危害"><span>漏洞危害</span></a></h3><p>该漏洞源于Apahce Shiro 1.6.0之前版本处理身份验证请求时存在权限绕过漏洞，远程攻击者通过发送特制的HTTP请求，绕过身份验证，从而获取对应用程序的访问权限。</p><hr><h3 id="影响范围" tabindex="-1"><a class="header-anchor" href="#影响范围"><span>影响范围</span></a></h3><p>Apache Shiro &lt; 1.6.0</p><hr><h3 id="漏洞原理" tabindex="-1"><a class="header-anchor" href="#漏洞原理"><span>漏洞原理</span></a></h3><p>shiro使用的时候需要先配置拦截规则如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token comment">// 配置路径拦截规则</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;/doLogin/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;anon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;/admin/*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;authc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里配置成/**就无法绕过了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.anon为匿名拦截器，不需要登录就能访问，一般用于静态资源,或者移动端接口</p><p>2.authc为登录拦截器，需要登录认证才能访问的资源。</p><p>使用了shiro的项目中，我们请求的URL(URL1)，经过shiro权限检验(URL2)，最后到springboot项目找到路由来处理(URL3) 漏洞的出现就在URL1,URL2和URL3 有可能不是同一个URL，这就导致我们能绕过shiro的校验，直接访问后端需要首选的URL。</p><h4 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析"><span>源码分析</span></a></h4><blockquote><p>参考：https://xz.aliyun.com/t/8230</p></blockquote><p>shiro处理URI如下所示：</p><p><img src="`+u+`" alt="img3" loading="lazy"> 经过对URI进行解码再去除分号，所以我们传入一个带编码的URI可以得到如下结果：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>/admin/%3bpage
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+h+'" alt="img4" tabindex="0" loading="lazy"><figcaption>img4</figcaption></figure><p><img src="'+i+'" alt="img5" loading="lazy"> 此处因为/admin/没有匹配到具体资源路径，所以通过过滤器到达Spring的处理逻辑。 而Spring的处理逻辑如下：</p><p><img src="'+i+'" alt="img5" loading="lazy"> 往下调试，这里得到的URI为解码前的原始URI：</p><p><img src="'+d+'" alt="img6" loading="lazy"> 之后在decodeAndCleanUriString方法里对URI进行相关处理。</p><figure><img src="'+g+'" alt="img7" tabindex="0" loading="lazy"><figcaption>img7</figcaption></figure><figure><img src="'+m+'" alt="img8" tabindex="0" loading="lazy"><figcaption>img8</figcaption></figure><p>注意这里Spring的处理逻辑为先去判断URI中是否存在分号，因为是编码过后的URI，所以未能直接识别出分号，所以index为-1，所以未进入if分支，从而仍然返回输入的带编码的URI。</p><p><img src="'+k+'" alt="img9" loading="lazy"> 接下来再进行对URI的解码。得到URI如下图：</p><p><img src="'+v+`" alt="img10" loading="lazy"> 之后进行匹配从而获取相应资源。</p><p>shiro后面的版本中为解决这种权限绕过问题，添加一个一个InvalidRequestFilter类，该类从全局上对分号，反斜杠和非ASCII字符进行了过滤。</p><hr><h2 id="漏洞利用" tabindex="-1"><a class="header-anchor" href="#漏洞利用"><span>漏洞利用</span></a></h2><p>只适用于shiro权限配置为如下的情况：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;/doLogin/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;anon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;/admin/*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;authc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里配置成/**就无法绕过了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="利用方式-1" tabindex="-1"><a class="header-anchor" href="#利用方式-1"><span>利用方式 1</span></a></h3><hr><h4 id="漏洞利用思路" tabindex="-1"><a class="header-anchor" href="#漏洞利用思路"><span>漏洞利用思路</span></a></h4><p>利用shiro对路径中分号的错误处理方式进行绕过。</p><h4 id="漏洞利用过程" tabindex="-1"><a class="header-anchor" href="#漏洞利用过程"><span>漏洞利用过程</span></a></h4><p>访问/admin/a会被重定向到login界面</p><p>尝试访问/admin/;/a 同样结果，说明利用CVE-2020-11989的绕过方法已经没有效果</p><figure><img src="`+_+'" alt="img1" tabindex="0" loading="lazy"><figcaption>img1</figcaption></figure><p>将url中的分号进行url编码，即可绕过</p><figure><img src="'+f+'" alt="img2" tabindex="0" loading="lazy"><figcaption>img2</figcaption></figure><hr><h4 id="威胁防护建议" tabindex="-1"><a class="header-anchor" href="#威胁防护建议"><span>威胁防护建议</span></a></h4><p>检测并拦截访问路径中的/;及其url编码</p><hr><h4 id="用户处置建议" tabindex="-1"><a class="header-anchor" href="#用户处置建议"><span>用户处置建议</span></a></h4><p>升级Shiro到最新版本</p><p>使用shiro授权时尽量避免使用单*的ant匹配。可以尝试将匹配方式更改为map.put(“hello/**”, “authc”)</p>',52))])}const C=o(b,[["render",S],["__file","权限绕过_shiro_CVE-2020-13933_Apache Shiro权限绕过漏洞.html.vue"]]),N=JSON.parse('{"path":"/CyberSecurity/RedTeam/2-WebVulnerability/shiro/%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87_shiro_CVE-2020-13933_Apache%20Shiro%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E.html","title":"权限绕过_shiro_CVE-2020-13933_Apache Shiro权限绕过漏洞","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"漏洞介绍","slug":"漏洞介绍","link":"#漏洞介绍","children":[{"level":3,"title":"漏洞危害","slug":"漏洞危害","link":"#漏洞危害","children":[]},{"level":3,"title":"影响范围","slug":"影响范围","link":"#影响范围","children":[]},{"level":3,"title":"漏洞原理","slug":"漏洞原理","link":"#漏洞原理","children":[]}]},{"level":2,"title":"漏洞利用","slug":"漏洞利用","link":"#漏洞利用","children":[{"level":3,"title":"利用方式 1","slug":"利用方式-1","link":"#利用方式-1","children":[]}]}],"git":{"createdTime":1731665131000,"updatedTime":1731665131000,"contributors":[{"name":"echo0d","email":"echo0d@163.com","commits":1}]},"readingTime":{"minutes":3.74,"words":1123},"filePathRelative":"CyberSecurity/RedTeam/2-WebVulnerability/shiro/权限绕过_shiro_CVE-2020-13933_Apache Shiro权限绕过漏洞.md","localizedDate":"2024年11月15日","excerpt":"\\n<hr>\\n<h2>漏洞介绍</h2>\\n<blockquote>\\n<p><a href=\\"https://www.cnnvd.org.cn/home/loophole\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">国家信息安全漏洞库 (cnnvd.org.cn)</a></p>\\n<p><a href=\\"https://nvd.nist.gov/vuln/search\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">NVD - Search and Statistics (nist.gov)</a></p>\\n</blockquote>"}');export{C as comp,N as data};
