import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as t,o as p}from"./app-vU8izl1I.js";const o={};function c(e,n){return p(),a("div",null,[...n[0]||(n[0]=[t(`<h1 id="_17-c语言-多字节字符" tabindex="-1"><a class="header-anchor" href="#_17-c语言-多字节字符"><span>17. C语言-多字节字符</span></a></h1><p>本章介绍 C 语言如何处理非英语字符。</p><h2 id="unicode-简介" tabindex="-1"><a class="header-anchor" href="#unicode-简介"><span>Unicode 简介</span></a></h2><p>C 语言诞生时，只考虑了英语字符，使用7位的 ASCII 码表示所有字符。ASCII 码的范围是0到127，也就是最多只能表示100多个字符，用一个字节就可以表示，所以<code>char</code>类型只占用一个字节。</p><p>但是，如果处理非英语字符，一个字节就不够了，单单是中文，就至少有几万个字符，字符集就势必使用多个字节表示。</p><p>最初，不同国家有自己的字符编码方式，这样不便于多种字符的混用。因此，后来就逐渐统一到 Unicode 编码，将所有字符放入一个字符集。</p><p>Unicode 为每个字符提供一个号码，称为码点（code point），其中0到127的部分，跟 ASCII 码是重合的。通常使用“U+十六进制码点”表示一个字符，比如<code>U+0041</code>表示字母<code>A</code>。</p><p>Unicode 编码目前一共包含了100多万个字符，码点范围是 U+0000 到 U+10FFFF。完整表达整个 Unicode 字符集，至少需要三个字节。但是，并不是所有文档都需要那么多字符，比如对于 ASCII 码就够用的英语文档，如果每个字符使用三个字节表示，就会比单字节表示的文件体积大出三倍。</p><p>为了适应不同的使用需求，Unicode 标准委员会提供了三种不同的表示方法，表示 Unicode 码点。</p><ul><li>UTF-8：使用1个到4个字节，表示一个码点。不同的字符占用的字节数不一样。</li><li>UTF-16：对于U+0000 到 U+FFFF 的字符（称为基本平面），使用2个字节表示一个码点。其他字符使用4个字节。</li><li>UTF-32：统一使用4个字节，表示一个码点。</li></ul><p>其中，UTF-8 的使用最为广泛，因为对于 ASCII 字符（U+0000 到 U+007F），它只使用一个字节表示，这就跟 ASCII 的编码方式完全一样。</p><p>C 语言提供了两个宏，表示当前系统支持的编码字节长度。这两个宏都定义在头文件<code>limits.h</code>。</p><ul><li><code>MB_LEN_MAX</code>：任意支持地区的最大字节长度，定义在<code>limits.h</code>。</li><li><code>MB_CUR_MAX</code>：当前语言的最大字节长度，总是小于或等于<code>MB_LEN_MAX</code>，定义在<code>stdlib.h</code>。</li></ul><h2 id="字符的表示方法" tabindex="-1"><a class="header-anchor" href="#字符的表示方法"><span>字符的表示方法</span></a></h2><p>字符表示法的本质，是将每个字符映射为一个整数，然后从编码表获得该整数对应的字符。</p><p>C 语言提供了不同的写法，用来表示字符的整数号码。</p><ul><li><code>\\123</code>：以八进制值表示一个字符，斜杠后面需要三个数字。</li><li><code>\\x4D</code>：以十六进制表示一个字符，<code>\\x</code>后面是十六进制整数。</li><li><code>\\u2620</code>：以 Unicode 码点表示一个字符（不适用于 ASCII 字符），码点以十六进制表示，<code>\\u</code>后面需要4个字符。</li><li><code>\\U0001243F</code>：以 Unicode 码点表示一个字符（不适用于 ASCII 字符），码点以十六进制表示，<code>\\U</code>后面需要8个字符。</li></ul><pre><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ABC\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\101\\102\\103\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\x41\\x42\\x43\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面三行都会输出“ABC”。</p><pre><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\u2022 Bullet 1\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\U00002022 Bullet 1\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面两行都会输出“• Bullet 1”。</p><h2 id="多字节字符的表示" tabindex="-1"><a class="header-anchor" href="#多字节字符的表示"><span>多字节字符的表示</span></a></h2><p>C 语言预设只有基本字符，才能使用字面量表示，其它字符都应该使用码点表示，并且当前系统还必须支持该码点的编码方法。</p><p>所谓基本字符，指的是所有可打印的 ASCII 字符，但是有三个字符除外：<code>@</code>、<code>$</code>、<code>\`</code>。</p><p>因此，遇到非英语字符，应该将其写成 Unicode 码点形式。</p><pre><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> s <span class="token operator">=</span> <span class="token string">&quot;\\u6625\\u5929&quot;</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 春天</span>
</code></pre><p>上面代码会输出中文“春天”。</p><p>如果当前系统是 UTF-8 编码，可以直接用字面量表示多字节字符。</p><pre><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> s <span class="token operator">=</span> <span class="token string">&quot;春天&quot;</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>注意，<code>\\u + 码点</code>和<code>\\U + 码点</code>的写法，不能用来表示 ASCII 码字符（码点小于<code>0xA0</code>的字符），只有三个字符除外：<code>0x24</code>（<code>$</code>），<code>0x40</code>（<code>@</code>）和<code>0x60</code>（<code>\`</code>）。</p><pre><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> s <span class="token operator">=</span> <span class="token string">&quot;\\u0024\\u0040\\u0060&quot;</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// @$\`</span>
</code></pre><p>上面代码会输出三个 Unicode 字符“@$\`”，但是其它 ASCII 字符都不能用这种表示法表示。</p><p>为了保证程序执行时，字符能够正确解读，最好将程序环境切换到本地化环境。</p><pre><code class="language-c"><span class="token function">setlocale</span><span class="token punctuation">(</span>LC_ALL<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面代码中，使用<code>setlocale()</code>切换执行环境到系统的本地化语言。<code>setlocale()</code>的原型定义在头文件<code>locale.h</code>，详见标准库部分的《locale.h》章节。</p><p>像下面这样，指定编码语言也可以。</p><pre><code class="language-c"><span class="token function">setlocale</span><span class="token punctuation">(</span>LC_ALL<span class="token punctuation">,</span> <span class="token string">&quot;zh_CN.UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面代码将程序执行环境，切换到中文环境的 UTF-8 编码。</p><p>C 语言允许使用<code>u8</code>前缀，对多字节字符串指定编码方式为 UTF-8。</p><pre><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> s <span class="token operator">=</span> u8<span class="token string">&quot;春天&quot;</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>一旦字符串里面包含多字节字符，就意味着字符串的字节数与字符数不再一一对应了。比如，字符串的长度为10字节，就不再是包含10个字符，而可能只包含7个字符、5个字符等等。</p><pre><code class="language-c"><span class="token function">setlocale</span><span class="token punctuation">(</span>LC_ALL<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token operator">*</span> s <span class="token operator">=</span> <span class="token string">&quot;春天&quot;</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
</code></pre><p>上面示例中，字符串<code>s</code>只包含两个字符，但是<code>strlen()</code>返回的结果却是6，表示这两个字符一共占据了6个字节。</p><p>C 语言的字符串函数只针对单字节字符有效，对于多字节字符都会失效，比如<code>strtok()</code>、<code>strchr()</code>、<code>strspn()</code>、<code>toupper()</code>、<code>tolower()</code>、<code>isalpha()</code>等不会得到正确结果。</p><h2 id="宽字符" tabindex="-1"><a class="header-anchor" href="#宽字符"><span>宽字符</span></a></h2><p>上一小节的多字节字符串，每个字符的字节宽度是可变的。这种编码方式虽然使用起来方便，但是很不利于字符串处理，因此必须逐一检查每个字符占用的字节数。所以除了这种方式，C 语言还提供了确定宽度的多字节字符存储方式，称为宽字符（wide character）。</p><p>所谓“宽字符”，就是每个字符占用的字节数是固定的，要么是2个字节，要么是4个字节。这样的话，就很容易快速处理。</p><p>宽字符有一个单独的数据类型 wchar_t，每个宽字符都是这个类型。它属于整数类型的别名，可能是有符号的，也可能是无符号的，由当前实现决定。该类型的长度为16位（2个字节）或32位（4个字节），足以容纳当前系统的所有字符。它定义在头文件<code>wchar.h</code>里面。</p><p>宽字符的字面量必须加上前缀“L”，否则 C 语言会把字面量当作窄字符类型处理。</p><pre><code class="language-c"><span class="token function">setlocale</span><span class="token punctuation">(</span>LC_ALL<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">wchar_t</span> c <span class="token operator">=</span> L<span class="token char">&#39;牛&#39;</span>；
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lc\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">wchar_t</span><span class="token operator">*</span> s <span class="token operator">=</span> L<span class="token string">&quot;春天&quot;</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%ls\\n&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，前缀“L”在单引号前面，表示宽字符，对应<code>printf()</code>的占位符为<code>%lc</code>；在双引号前面，表示宽字符串，对应<code>printf()</code>的占位符为<code>%ls</code>。</p><p>宽字符串的结尾也有一个空字符，不过是宽空字符，占用多个字节。</p><p>处理宽字符，需要使用宽字符专用的函数，绝大部分都定义在头文件<code>wchar.h</code>。</p><h2 id="多字节字符处理函数" tabindex="-1"><a class="header-anchor" href="#多字节字符处理函数"><span>多字节字符处理函数</span></a></h2><h3 id="mblen" tabindex="-1"><a class="header-anchor" href="#mblen"><span>mblen()</span></a></h3><p><code>mblen()</code>函数返回一个多字节字符占用的字节数。它的原型定义在头文件<code>stdlib.h</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> <span class="token function">mblen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> mbstr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>它接受两个参数，第一个参数是多字节字符串指针，一般会检查该字符串的第一个字符；第二个参数是需要检查的字节数，这个数字不能大于当前系统单个字符占用的最大字节，一般使用<code>MB_CUR_MAX</code>。</p><p>它的返回值是该字符占用的字节数。如果当前字符是空的宽字符，则返回<code>0</code>；如果当前字符不是有效的多字节字符，则返回<code>-1</code>。</p><pre><code class="language-c"><span class="token function">setlocale</span><span class="token punctuation">(</span>LC_ALL<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token operator">*</span> mbs1 <span class="token operator">=</span> <span class="token string">&quot;春天&quot;</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">mblen</span><span class="token punctuation">(</span>mbs1<span class="token punctuation">,</span> MB_CUR_MAX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>

<span class="token keyword">char</span><span class="token operator">*</span> mbs2 <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">mblen</span><span class="token punctuation">(</span>mbs2<span class="token punctuation">,</span> MB_CUR_MAX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><p>上面示例中，字符串“春天”的第一个字符“春”，占用3个字节；字符串“abc”的第一个字符“a”，占用1个字节。</p><h3 id="wctomb" tabindex="-1"><a class="header-anchor" href="#wctomb"><span>wctomb()</span></a></h3><p><code>wctomb()</code>函数（wide character to multibyte）用于将宽字符转为多字节字符。它的原型定义在头文件<code>stdlib.h</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> <span class="token function">wctomb</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token class-name">wchar_t</span> wc<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p><code>wctomb()</code>接受两个参数，第一个参数是作为目标的多字节字符数组，第二个参数是需要转换的一个宽字符。它的返回值是多字节字符存储占用的字节数量，如果无法转换，则返回<code>-1</code>。</p><pre><code class="language-c"><span class="token function">setlocale</span><span class="token punctuation">(</span>LC_ALL<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">wchar_t</span> wc <span class="token operator">=</span> L<span class="token char">&#39;牛&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> mbStr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> nBytes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
nBytes <span class="token operator">=</span> <span class="token function">wctomb</span><span class="token punctuation">(</span>mbStr<span class="token punctuation">,</span> wc<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> mbStr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 牛</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> nBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3</span>
</code></pre><p>上面示例中，<code>wctomb()</code>将宽字符“牛”转为多字节字符，<code>wctomb()</code>的返回值表示转换后的多字节字符占用3个字节。</p><h3 id="mbtowc" tabindex="-1"><a class="header-anchor" href="#mbtowc"><span>mbtowc()</span></a></h3><p><code>mbtowc()</code>用于将多字节字符转为宽字符。它的原型定义在头文件<code>stdlib.h</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> <span class="token function">mbtowc</span><span class="token punctuation">(</span>
   <span class="token class-name">wchar_t</span><span class="token operator">*</span> wchar<span class="token punctuation">,</span>
   <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> mbchar<span class="token punctuation">,</span>
   <span class="token class-name">size_t</span> count
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>它接受3个参数，第一个参数是作为目标的宽字符指针，第二个参数是待转换的多字节字符指针，第三个参数是多字节字符的字节数。</p><p>它的返回值是多字节字符的字节数，如果转换失败，则返回<code>-1</code>。</p><pre><code class="language-c"><span class="token function">setlocale</span><span class="token punctuation">(</span>LC_ALL<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token operator">*</span> mbchar <span class="token operator">=</span> <span class="token string">&quot;牛&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">wchar_t</span> wc<span class="token punctuation">;</span>
<span class="token class-name">wchar_t</span><span class="token operator">*</span> pwc <span class="token operator">=</span> <span class="token operator">&amp;</span>wc<span class="token punctuation">;</span>

<span class="token keyword">int</span> nBytes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
nBytes <span class="token operator">=</span> <span class="token function">mbtowc</span><span class="token punctuation">(</span>pwc<span class="token punctuation">,</span> mbchar<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> nBytes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lc\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>pwc<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 牛</span>
</code></pre><p>上面示例中，<code>mbtowc()</code>将多字节字符“牛”转为宽字符<code>wc</code>，返回值是<code>mbchar</code>占用的字节数（占用3个字节）。</p><h3 id="wcstombs" tabindex="-1"><a class="header-anchor" href="#wcstombs"><span>wcstombs()</span></a></h3><p><code>wcstombs()</code>用来将宽字符串转换为多字节字符串。它的原型定义在头文件<code>stdlib.h</code>。</p><pre><code class="language-c"><span class="token class-name">size_t</span> <span class="token function">wcstombs</span><span class="token punctuation">(</span>
   <span class="token keyword">char</span><span class="token operator">*</span> mbstr<span class="token punctuation">,</span>
   <span class="token keyword">const</span> <span class="token class-name">wchar_t</span><span class="token operator">*</span> wcstr<span class="token punctuation">,</span>
   <span class="token class-name">size_t</span> count
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>它接受三个参数，第一个参数<code>mbstr</code>是目标的多字节字符串指针，第二个参数<code>wcstr</code>是待转换的宽字符串指针，第三个参数<code>count</code>是用来存储多字节字符串的最大字节数。</p><p>如果转换成功，它的返回值是成功转换后的多字节字符串的字节数，不包括尾部的字符串终止符；如果转换失败，则返回<code>-1</code>。</p><p>下面是一个例子。</p><pre><code class="language-c"><span class="token function">setlocale</span><span class="token punctuation">(</span>LC_ALL<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> mbs<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">wchar_t</span><span class="token operator">*</span> wcs <span class="token operator">=</span> L<span class="token string">&quot;春天&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> nBytes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
nBytes <span class="token operator">=</span> <span class="token function">wcstombs</span><span class="token punctuation">(</span>mbs<span class="token punctuation">,</span> wcs<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> mbs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 春天</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> nBytes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
</code></pre><p>上面示例中，<code>wcstombs()</code>将宽字符串<code>wcs</code>转为多字节字符串<code>mbs</code>，返回值<code>6</code>表示写入<code>mbs</code>的字符串占用6个字节，不包括尾部的字符串终止符。</p><p>如果<code>wcstombs()</code>的第一个参数是 NULL，则返回转换成功所需要的目标字符串的字节数。</p><h3 id="mbstowcs" tabindex="-1"><a class="header-anchor" href="#mbstowcs"><span>mbstowcs()</span></a></h3><p><code>mbstowcs()</code>用来将多字节字符串转换为宽字符串。它的原型定义在头文件<code>stdlib.h</code>。</p><pre><code class="language-c"><span class="token class-name">size_t</span> <span class="token function">mbstowcs</span><span class="token punctuation">(</span>
  <span class="token class-name">wchar_t</span><span class="token operator">*</span> wcstr<span class="token punctuation">,</span>
  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> mbstr<span class="token punctuation">,</span>
  <span class="token class-name">size_t</span> count
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>它接受三个参数，第一个参数<code>wcstr</code>是目标宽字符串，第二个参数<code>mbstr</code>是待转换的多字节字符串，第三个参数是待转换的多字节字符串的最大字符数。</p><p>转换成功时，它的返回值是成功转换的多字节字符的数量；转换失败时，返回<code>-1</code>。如果返回值与第三个参数相同，那么转换后的宽字符串不是以 NULL 结尾的。</p><p>下面是一个例子。</p><pre><code class="language-c"><span class="token function">setlocale</span><span class="token punctuation">(</span>LC_ALL<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">char</span><span class="token operator">*</span> mbs <span class="token operator">=</span> <span class="token string">&quot;天气不错&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">wchar_t</span> wcs<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> nBytes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
nBytes <span class="token operator">=</span> <span class="token function">mbstowcs</span><span class="token punctuation">(</span>wcs<span class="token punctuation">,</span> mbs<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%ls\\n&quot;</span><span class="token punctuation">,</span> wcs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 天气不错</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> nBytes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
</code></pre><p>上面示例中，多字节字符串<code>mbs</code>被<code>mbstowcs()</code>转为宽字符串，成功转换了4个字符，所以该函数的返回值为4。</p><p>如果<code>mbstowcs()</code>的第一个参数为<code>NULL</code>，则返回目标宽字符串会包含的字符数量。</p>`,92)])])}const i=s(o,[["render",c]]),k=JSON.parse('{"path":"/develop/C/17_multibyte.html","title":"17. C语言-多字节字符","lang":"zh-CN","frontmatter":{"category":"C","tags":["C"],"description":"17. C语言-多字节字符 本章介绍 C 语言如何处理非英语字符。 Unicode 简介 C 语言诞生时，只考虑了英语字符，使用7位的 ASCII 码表示所有字符。ASCII 码的范围是0到127，也就是最多只能表示100多个字符，用一个字节就可以表示，所以char类型只占用一个字节。 但是，如果处理非英语字符，一个字节就不够了，单单是中文，就至少有几...","head":[["meta",{"property":"og:url","content":"https://echo0d.github.io/DailyNotes/develop/C/17_multibyte.html"}],["meta",{"property":"og:site_name","content":"echo0d-notes"}],["meta",{"property":"og:title","content":"17. C语言-多字节字符"}],["meta",{"property":"og:description","content":"17. C语言-多字节字符 本章介绍 C 语言如何处理非英语字符。 Unicode 简介 C 语言诞生时，只考虑了英语字符，使用7位的 ASCII 码表示所有字符。ASCII 码的范围是0到127，也就是最多只能表示100多个字符，用一个字节就可以表示，所以char类型只占用一个字节。 但是，如果处理非英语字符，一个字节就不够了，单单是中文，就至少有几..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-11T02:11:10.000Z"}],["meta",{"property":"article:author","content":"echo0d"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:modified_time","content":"2025-04-11T02:11:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"17. C语言-多字节字符\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-11T02:11:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"echo0d\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"Unicode 简介","slug":"unicode-简介","link":"#unicode-简介","children":[]},{"level":2,"title":"字符的表示方法","slug":"字符的表示方法","link":"#字符的表示方法","children":[]},{"level":2,"title":"多字节字符的表示","slug":"多字节字符的表示","link":"#多字节字符的表示","children":[]},{"level":2,"title":"宽字符","slug":"宽字符","link":"#宽字符","children":[]},{"level":2,"title":"多字节字符处理函数","slug":"多字节字符处理函数","link":"#多字节字符处理函数","children":[{"level":3,"title":"mblen()","slug":"mblen","link":"#mblen","children":[]},{"level":3,"title":"wctomb()","slug":"wctomb","link":"#wctomb","children":[]},{"level":3,"title":"mbtowc()","slug":"mbtowc","link":"#mbtowc","children":[]},{"level":3,"title":"wcstombs()","slug":"wcstombs","link":"#wcstombs","children":[]},{"level":3,"title":"mbstowcs()","slug":"mbstowcs","link":"#mbstowcs","children":[]}]}],"git":{"createdTime":1743672297000,"updatedTime":1744337470000,"contributors":[{"name":"echo0d","email":"echo0d@163.com","commits":3}]},"readingTime":{"minutes":9.96,"words":2989},"filePathRelative":"develop/C/17_multibyte.md","localizedDate":"2025年4月3日","excerpt":"","autoDesc":true}');export{i as comp,k as data};
