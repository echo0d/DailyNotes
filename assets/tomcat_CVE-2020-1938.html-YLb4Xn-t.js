import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as n,o as i,c,a as e,b as a,d as o,e as d}from"./app-dMCn0zhu.js";const s="/DailyNotes/assets/04-zFvqpV1r.png",l="/DailyNotes/assets/01-hU3wbWNt.png",h="/DailyNotes/assets/02-sslouQpS.png",p="/DailyNotes/assets/03-psUZvQ8L.png",u={},m=e("h1",{id:"漏洞名称-aapache-tomcat-ajp-文件包含漏洞",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#漏洞名称-aapache-tomcat-ajp-文件包含漏洞","aria-hidden":"true"},"#"),a(" 漏洞名称：Aapache Tomcat AJP 文件包含漏洞")],-1),v=e("hr",null,null,-1),g=e("h2",{id:"漏洞介绍",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#漏洞介绍","aria-hidden":"true"},"#"),a(" 漏洞介绍")],-1),x={href:"http://www.cnnvd.org.cn/index.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.chaitin.cn/zh/ghostcat",target:"_blank",rel:"noopener noreferrer"},f=d(`<hr><h3 id="漏洞危害" tabindex="-1"><a class="header-anchor" href="#漏洞危害" aria-hidden="true">#</a> 漏洞危害</h3><p>攻击者有可能实现任意文件读取，例如可以读取 webapp 配置文件或源代码。此外在目标应用有文件上传功能的情况下，配合文件包含的利用还可以达到远程代码执行的危害。</p><hr><h3 id="影响范围" tabindex="-1"><a class="header-anchor" href="#影响范围" aria-hidden="true">#</a> 影响范围</h3><p>Apache Tomcat 6 Apache Tomcat 7 &lt; 7.0.100 Apache Tomcat 8 &lt; 8.5.51 Apache Tomcat 9 &lt; 9.0.31</p><hr><h2 id="漏洞原理" tabindex="-1"><a class="header-anchor" href="#漏洞原理" aria-hidden="true">#</a> 漏洞原理</h2><p>Tomcat服务器通过Connector连接器组件与客户程序建立连接，Connector表示接收请求并返回响应的端点。即Connector组件负责接收客户的请求，以及把Tomcat服务器的响应结果发送给客户。Tomcat在server.xml中配置了两种连接器：HTTP Connector和AJP Connector。拥有HTTP连接器，Tomcat才能成为一个web服务器，但还额外可处理Servlet和jsp。AJP连接器可以通过AJP协议和另一个web容器进行交互。配置如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;!-- Define a non-SSL/TLS HTTP/1.1 Connector on port 8080 --&gt;
&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;
           connectionTimeout=&quot;20000&quot;
           redirectPort=&quot;8443&quot; /&gt;

&lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;
&lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+s+`" alt="04" tabindex="0" loading="lazy"><figcaption>04</figcaption></figure><p>Tomcat在接收AJP请求的时候调用<code>org.apache.coyote.ajp.AjpProcessor</code>来处理ajp消息，其中，<code>prepareRequest</code>将AJP里面的内容取出来设置成<code>request</code>对象的属性，因此可以控制<code>request</code>对象的三个属性:<code>javax.servlet.include.request_uri</code>、<code>javax.servlet.include.path_info</code>和<code>javax.servlet.include.servlet_path</code>，然后封装成对应的request之后，执行相应的操作，例如构造下面参数，实现文件读取</p><p>该漏洞主要原因就是：</p><ol><li>AJP Connector暴露给客户端了，AJP是Tomcat和其他web服务器之间内部使用的。</li><li>AJP 1.3协议存在缺陷，导致相关参数可控，攻击者利用该漏洞可通过构造特定参数，读取服务器webapp下的任意文件。若服务器端同时存在文件上传功能，攻击者可进一步实现远程代码的执行。</li></ol><hr><h3 id="靶机环境" tabindex="-1"><a class="header-anchor" href="#靶机环境" aria-hidden="true">#</a> 靶机环境</h3><p>vulhub/tomcat/CVE-2020-1938</p><hr><h3 id="利用方式-1" tabindex="-1"><a class="header-anchor" href="#利用方式-1" aria-hidden="true">#</a> 利用方式 1</h3><p>漏洞探测工具xray（https://github.com/chaitin/xray）进行探测，探测出tomcat版本为9.0.30</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./xray_linux_amd64 servicescan --target 192.168.1.189:8009   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+l+'" alt="01" tabindex="0" loading="lazy"><figcaption>01</figcaption></figure><figure><img src="'+h+`" alt="02" tabindex="0" loading="lazy"><figcaption>02</figcaption></figure><hr><h3 id="利用方式-2" tabindex="-1"><a class="header-anchor" href="#利用方式-2" aria-hidden="true">#</a> 利用方式 2</h3><p>使用https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi 中的poc，读取WEB-INF/web.xml文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python ./CNVD-2020-10487-Tomcat-Ajp-lfi.py 192.168.1.189 -p 8009 -f WEB-INF/web.xml  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+p+'" alt="03" tabindex="0" loading="lazy"><figcaption>03</figcaption></figure><hr><h2 id="威胁防护建议" tabindex="-1"><a class="header-anchor" href="#威胁防护建议" aria-hidden="true">#</a> 威胁防护建议</h2><hr><h3 id="用户处置建议" tabindex="-1"><a class="header-anchor" href="#用户处置建议" aria-hidden="true">#</a> 用户处置建议</h3><ol><li><p>更新到安全版本：Apache Tomcat 7.0.100、8.5.51、9.0.31</p></li><li><p>关闭AJP服务：修改Tomcat配置文件Service.xml将<code>&lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</code>注释掉</p></li><li><p>配置ajp配置中的secretRequired跟secret属性来限制认证</p></li></ol><hr><h3 id="安全产品检测建议" tabindex="-1"><a class="header-anchor" href="#安全产品检测建议" aria-hidden="true">#</a> 安全产品检测建议</h3><p>检测<code>javax.servlet.include.request_uri</code>、<code>javax.servlet.include.path_info</code>和<code>javax.servlet.include.servlet_path</code></p>',36);function _(T,q){const t=n("ExternalLinkIcon");return i(),c("div",null,[m,v,g,e("blockquote",null,[e("p",null,[e("a",x,[a("国家信息安全漏洞库 (cnnvd.org.cn)"),o(t)])])]),e("p",null,[e("a",b,[a("Ghostcat（幽灵猫）"),o(t)]),a(" 是由长亭科技安全研究员发现的存在于 Tomcat 中的安全漏洞，由于 Tomcat AJP 协议设计上存在缺陷，攻击者通过 Tomcat AJP Connector 可以读取或包含 Tomcat 上所有 webapp 目录下的任意文件。")]),f])}const C=r(u,[["render",_],["__file","tomcat_CVE-2020-1938.html.vue"]]);export{C as default};
