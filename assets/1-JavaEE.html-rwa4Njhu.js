import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as t,e as r}from"./app-XsN45Fjb.js";const i="/DailyNotes/assets/epub_40869976_113-uMZN9CR5.jpeg",o={},n=r('<h1 id="java代码审计-java-ee分层模型" tabindex="-1"><a class="header-anchor" href="#java代码审计-java-ee分层模型" aria-hidden="true">#</a> Java代码审计-Java EE分层模型</h1><blockquote><p>Java EE可以说是一个框架，也可以说是一种规范。</p><p>Java平台有3个主要版本，分别是 Java SE（Java Platform Standard Edition，Java平台标准版）、Java EE（Java Platform Enterprise Edition，Java平台企业版）和Java ME（Java Platform Micro Edition，Java平台微型版）。</p><p>Java EE是Sun公司为企业级应用推出的标准平台，用来开发B/S架构软件，是Java应用最广泛的版本。Java EE也称为Java 2 Platform或Enterprise Edition（J2EE），2018年3月更名为Jakarta EE。</p></blockquote><p>Web开发诞生之初都是静态的HTML页面，后来随着需求大量增长和技术快速发展，逐渐出现了数据库和动态页面，但是没有分层概念。当时的开发者在开发项目时，会把所有的代码都写在页面上，包括数据库连接代码、事务控制代码以及各种校验和逻辑控制代码等。如果项目规模巨大，一个文件可能有上万行代码。如果开发人员需要修改业务功能或者定位Bug，会有非常大的麻烦，可维护性差。随着时间的推移，Java EE 分层模型应运而生。</p><h2 id="_1、java-ee的核心技术" tabindex="-1"><a class="header-anchor" href="#_1、java-ee的核心技术" aria-hidden="true">#</a> 1、Java EE的核心技术</h2><blockquote><p>此处只记录部分</p></blockquote><p>JDBC（Java Database Connectivity，Java数据库连接）：在 Java 语言中用来规范客户端程序如何访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。</p><p>JNDI（Java Naming and Directory Interface，Java命名和目录接口）： Java 的一个目录服务应用程序界面（API），它提供了一个目录系统，并将服务名称与对象关联起来，从而使开发人员在开发过程中可以用名称来访问对象。</p><p>企业级JavaBean（Enterprise JavaBean，EJB）：一个用来构筑企业级应用的、在服务器端可被管理的组件。</p><p>RMI（Remote Method Invocation，远程方法调用）：Java的一组拥护开发分布式应用程序的API，它大大增强了Java开发分布式应用的能力。</p><p>Servlet（Server Applet）：使用Java编写的服务器端程序。狭义的Servlet是指 Java 语言实现的一个接口，广义的Servlet是指任何实现该Servlet接口的类。其主要功能在于交互式地浏览和修改数据，生成动态Web 内容。</p><p>JSP（JavaServer Pages）：由Sun公司主导并创建的一种动态网页技术标准。JSP 部署于网络服务器上，可以响应客户端发送的请求，并根据请求内容动态生成 HTML、XML 或其他格式文档的 Web 网页，然后返回给请求者。</p><p>XML（eXtensible Markup Language，可扩展标记语言）：是被设计用于传输和存储数据的语言。</p><p>Java消息服务（Java Message Service，JMS）是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间或分布式系统中发送消息，进行异步通信。</p><h2 id="_2、java-ee分层模型" tabindex="-1"><a class="header-anchor" href="#_2、java-ee分层模型" aria-hidden="true">#</a> 2、Java EE分层模型</h2><p>Java EE 应用的分层模型主要分为以下5层。</p><ol><li><strong>Domain Object</strong>（领域对象）层：本层由一系列POJO（Plain Old Java Object，普通的、传统的Java对象）组成，这些对象是该系统的Domain Object，通常包含各自所需实现的业务逻辑方法。</li><li><strong>DAO</strong>（Data Access Object，数据访问对象）层：本层由一系列 DAO 组件组成，这些DAO实现了对数据库的创建、查询、更新和删除等操作。</li><li><strong>Service</strong>（业务逻辑）层：本层由一系列的业务逻辑对象组成，这些业务逻辑对象实现了系统所需要的业务逻辑方法。</li><li><strong>Controller</strong>（控制器）层：本层由一系列控制器组成，这些控制器用于拦截用户的请求，并调用业务逻辑组件的业务逻辑方法去处理用户请求，然后根据处理结果向不同的View组件转发。</li><li><strong>View</strong>（表现）层：本层由一系列的页面及视图组件组成，负责收集用户请求，并显示处理后的结果。</li></ol><p>如图，首先由数据库给Domain Object层提供持久化服务，然后由 Domain Object层去封装DAO层，DAO层为业务逻辑层提供数据访问服务，接着业务逻辑层为控制器层提供逻辑支持，最终在表现层显示结果。</p><figure><img src="'+i+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>分层模型Java EE分层模型的应用，使得项目易于维护，管理简化，并且适应大规模和复杂的应用需求以及不断变化的业务需求。此外，分层模型还能有效提高系统并发处理能力。</p>',19),v=[n];function J(p,s){return e(),t("div",null,v)}const E=a(o,[["render",J],["__file","1-JavaEE.html.vue"]]);export{E as default};
