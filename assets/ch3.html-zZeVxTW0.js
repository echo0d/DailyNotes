import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as t}from"./app-zj8-EXSH.js";const p="/DailyNotes/assets/1712132982776-5sNP_u4m.png",o="/DailyNotes/assets/image-20240409145949392-L31ElQ5o.png",e="/DailyNotes/assets/20240411-RGTluMUx.png",c="/DailyNotes/assets/1712825319476-k_63g1zT.png",l="/DailyNotes/assets/image-20240411172248377-oJQ0g591.png",i="/DailyNotes/assets/image-20240415134037655-bDicuz9E.png",u="/DailyNotes/assets/image-20240415143331842--ljWaQ6G.png",r="/DailyNotes/assets/image-20240415153834143-Vkdn7Vch.png",k="/DailyNotes/assets/image-20240415153609218-fT7JXFo-.png",d={},m=t(`<h1 id="_3-基础数据类型" tabindex="-1"><a class="header-anchor" href="#_3-基础数据类型" aria-hidden="true">#</a> 3. 基础数据类型</h1><p>Go语言将数据类型分为四类：基础类型、复合类型、引用类型和接口类型。</p><ul><li>本章介绍基础类型，包括：数字、字符串和布尔型。</li><li>复合数据类型——数组（§4.1）和结构体（§4.2）——是通过组合简单类型，来表达更加复杂的数据结构。</li><li>引用类型包括指针（§2.3.2）、切片（§4.2)）、字典（§4.3）、函数（§5）、通道（§8）</li><li>将在第7章介绍接口类型</li></ul><p>虽然数据种类很多，但它们都是对程序中一个变量或状态的间接引用。这意味着对任一引用类型数据的修改都会影响所有该引用的拷贝。</p><p>Go语言的数值类型包括几种不同大小的整数、浮点数和复数。每种数值类型都决定了对应的大小范围和是否支持正负符号。</p><h2 id="_3-1-整型" tabindex="-1"><a class="header-anchor" href="#_3-1-整型" aria-hidden="true">#</a> 3.1. 整型</h2><h3 id="不同的整型-值域" tabindex="-1"><a class="header-anchor" href="#不同的整型-值域" aria-hidden="true">#</a> 不同的整型&amp;值域</h3><p>Go语言同时提供了有符号和无符号类型的整数运算。</p><ul><li>int8、int16、int32和int64四种截然不同大小的有符号整数类型，分别对应8、16、32、64bit大小的有符号整数，与此对应的是uint8、uint16、uint32和uint64四种无符号整数类型。</li><li>两种一般对应特定CPU平台机器字大小的有符号和无符号整数int和uint；其中int是应用最广泛的数值类型。不同的编译器即使在相同的硬件平台上可能产生不同的大小。</li><li>Unicode字符rune类型是和int32等价的类型，通常用于表示一个Unicode码点。这两个名称可以互换使用。</li><li>byte也是uint8类型的等价类型，byte类型一般用于强调数值是一个原始的数据而不是一个小的整数。</li><li>无符号的整数类型uintptr，没有指定具体的bit大小但是足以容纳指针。uintptr类型只有在底层编程时才需要，特别是Go语言和C语言函数库或操作系统接口相交互的地方。</li></ul><p>不管它们的具体大小，int、uint和uintptr是不同类型的兄弟类型。其中int和int32也是不同的类型，即使int的大小也是32bit，在需要将int当作int32类型的地方需要一个显式的类型转换操作，反之亦然。</p><p><strong>值域</strong></p><p>其中有符号整数采用2的补码形式表示，也就是最高bit位用来表示符号位，一个n-bit的有符号数的值域是从-2n-1到2n-1-1。无符号整数的所有bit位都用于表示非负数，值域是0到2n-1。例如，int8类型整数的值域是从-128到127，而uint8类型整数的值域是从0到255。</p><h3 id="二元运算符" tabindex="-1"><a class="header-anchor" href="#二元运算符" aria-hidden="true">#</a> 二元运算符</h3><p>下面是Go语言中关于算术运算、逻辑运算和比较运算的二元运算符，它们按照优先级递减的顺序排列：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>*      /      %      &lt;&lt;       &gt;&gt;     &amp;       &amp;^
+      -      |      ^
==     !=     &lt;      &lt;=       &gt;      &gt;=
&amp;&amp;
||
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二元运算符有五种优先级。在同一个优先级，使用左优先结合规则，但是使用括号可以明确优先顺序，使用括号也可以用于提升优先级，例如 <code>mask &amp; (1 &lt;&lt; 28)</code>。对于上表中前两行的运算符，例如+运算符还有一个与赋值相结合的对应运算符+=，可以用于简化赋值语句。</p><h4 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符" aria-hidden="true">#</a> 算数运算符</h4><ul><li>算术运算符 <code>+</code>、<code>-</code>、<code>*</code>和 <code>/</code>可以适用于整数、浮点数和复数，但是取模运算符%仅用于整数间的运算。</li><li>对于不同编程语言，%取模运算的行为可能并不相同。在Go语言中，%取模运算符的符号和被取模数的符号总是一致的，因此 <code>-5%3</code>和 <code>-5%-3</code>结果都是-2。</li><li>除法运算符 <code>/</code>的行为则依赖于操作数是否全为整数，比如 <code>5.0/4.0</code>的结果是1.25，但是5/4的结果是1，因为整数除法会向着0方向截断余数。</li></ul><p><strong>结果溢出</strong></p><p>一个算术运算的结果，不管是有符号或者是无符号的，如果需要更多的bit位才能正确表示的话，就说明计算结果是溢出了。超出的高位的bit位部分将被丢弃。如果原始的数值是有符号类型，而且最左边的bit位是1的话，那么最终结果可能是负的，例如int8的例子：</p><div class="language-Go line-numbers-mode" data-ext="Go"><pre class="language-Go"><code>var u uint8 = 255
fmt.Println(u, u+1, u*u) // &quot;255 0 1&quot;

var i int8 = 127
fmt.Println(i, i+1, i*i) // &quot;127 -128 1&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h4><p>两个相同的整数类型可以使用下面的二元比较运算符进行比较；比较表达式的结果是布尔类型。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>==    等于
!=    不等于
&lt;     小于
&lt;=    小于等于
&gt;     大于
&gt;=    大于等于
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事实上，布尔型、数字类型和字符串等基本类型都是可比较的，也就是说两个相同类型的值可以用==和!=进行比较。此外，整数、浮点数和字符串可以根据比较结果排序。许多其它类型的值可能是不可比较的，因此也就可能是不可排序的。对于我们遇到的每种类型，我们需要保证规则的一致性。</p><h3 id="其他运算符" tabindex="-1"><a class="header-anchor" href="#其他运算符" aria-hidden="true">#</a> 其他运算符</h3><h4 id="一元的加减法运算符" tabindex="-1"><a class="header-anchor" href="#一元的加减法运算符" aria-hidden="true">#</a> 一元的加减法运算符</h4><p>这里是一元的加法和减法运算符：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>+      一元加法（无效果）
-      负数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于整数，+x是0+x的简写，-x则是0-x的简写；对于浮点数和复数，+x就是x，-x则是x 的负数。</p><h4 id="bit位操作运算符" tabindex="-1"><a class="header-anchor" href="#bit位操作运算符" aria-hidden="true">#</a> bit位操作运算符</h4><p>Go语言还提供了以下的bit位操作运算符，前面4个操作运算符并不区分是有符号还是无符号数：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&amp;      位运算 AND
|      位运算 OR
^      位运算 XOR
&amp;^     位清空 AND(a, NOT(b))
&lt;&lt;     左移
&gt;&gt;     右移
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>位操作运算符 <code>^</code>作为二元运算符时是按位异或（XOR），当用作一元运算符时表示按位取反；也就是说，它返回一个每个bit位都取反的数。</p><p>位操作运算符 <code>&amp;^</code>用于按位置零（AND NOT）：如果对应y中bit位为1的话，表达式 <code>z = x &amp;^ y</code>结果z的对应的bit位为0，否则z对应的bit位等于x相应的bit位的值。</p><h3 id="无符号-有符号" tabindex="-1"><a class="header-anchor" href="#无符号-有符号" aria-hidden="true">#</a> 无符号&amp;有符号</h3><p>下面的代码演示了如何使用位操作解释uint8类型值的8个独立的bit位。</p><p>使用Printf函数的%b参数打印二进制格式的数字；其中%08b中08表示打印至少8个字符宽度，不足的前缀部分用0填充。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> x <span class="token builtin">uint8</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">5</span>
<span class="token keyword">var</span> y <span class="token builtin">uint8</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span>

fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%08b\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token comment">// &quot;00100010&quot;, the set {1, 5}</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%08b\\n&quot;</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token comment">// &quot;00000110&quot;, the set {1, 2}</span>

fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%08b\\n&quot;</span><span class="token punctuation">,</span> x<span class="token operator">&amp;</span>y<span class="token punctuation">)</span>  <span class="token comment">// &quot;00000010&quot;, the intersection {1}</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%08b\\n&quot;</span><span class="token punctuation">,</span> x<span class="token operator">|</span>y<span class="token punctuation">)</span>  <span class="token comment">// &quot;00100110&quot;, the union {1, 2, 5}</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%08b\\n&quot;</span><span class="token punctuation">,</span> x<span class="token operator">^</span>y<span class="token punctuation">)</span>  <span class="token comment">// &quot;00100100&quot;, the symmetric difference {2, 5}</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%08b\\n&quot;</span><span class="token punctuation">,</span> x<span class="token operator">&amp;^</span>y<span class="token punctuation">)</span> <span class="token comment">// &quot;00100000&quot;, the difference {5}</span>

<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">uint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span> <span class="token comment">// membership test</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// &quot;1&quot;, &quot;5&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%08b\\n&quot;</span><span class="token punctuation">,</span> x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// &quot;01000100&quot;, the set {2, 6}</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%08b\\n&quot;</span><span class="token punctuation">,</span> x<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// &quot;00010001&quot;, the set {0, 4}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="1712132982776" tabindex="0" loading="lazy"><figcaption>1712132982776</figcaption></figure><p>在x&lt;&lt;n和x&gt;&gt;n移位运算中，n必须是无符号数，x均可。例如上面用i := int(-1)就编不过</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token comment">// NOTE: 此处i是无符号整型，才能实现1&lt;&lt;i，例如上面用i := int(-1)就编不过</span>
		<span class="token keyword">if</span> x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span> <span class="token comment">// membership test</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// &quot;1&quot;, &quot;5&quot;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>算术上，一个x&lt;&lt;n左移运算等价于乘以$2<sup>n$，一个x&gt;&gt;n右移运算等价于除以$2</sup>n$。</p><p>左移运算用零填充右边空缺的bit位，无符号数的右移运算也是用0填充左边空缺的bit位，但是有符号数的右移运算会用符号位的值填充左边空缺的bit位。因为这个原因，最好用无符号运算，这样你可以将整数完全当作一个bit位模式处理。</p><p>尽管Go语言提供了无符号数的运算，但即使数值本身不可能出现负数，我们还是倾向于使用有符号的int类型，就像数组的长度那样，虽然使用uint无符号类型似乎是一个更合理的选择。事实上，内置的len函数返回一个有符号的int，我们可以像下面例子那样处理逆序循环。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	medals <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;gold&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;silver&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bronze&quot;</span><span class="token punctuation">}</span>
	<span class="token comment">// NOTE: 此处len(medals)返回的有符号int类型，要不然i--总&gt;=0，就死循环了</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>medals<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>medals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// &quot;bronze&quot;, &quot;silver&quot;, &quot;gold&quot;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在三次迭代之后，也就是i == 0时，i--语句将不会产生-1，而是变成一个uint类型的最大值（可能是$2^64-1$），然后medals[i]表达式运行时将发生panic异常（§5.9），也就是试图访问一个slice范围以外的元素。</p><blockquote><p>无符号数往往只有在位运算或其它特殊的运算场景才会使用，就像bit集合、分析二进制文件格式或者是哈希和加密操作等。它们通常并不用于仅仅是表达非负数量的场合。</p></blockquote><h3 id="数值类型转换" tabindex="-1"><a class="header-anchor" href="#数值类型转换" aria-hidden="true">#</a> 数值类型转换</h3><p>需要一个显式的转换将一个值从一种类型转化为另一种类型，并且算术和逻辑运算的二元操作中必须是相同的类型。类似下面代码的常见的错误：</p><div class="language-Go line-numbers-mode" data-ext="Go"><pre class="language-Go"><code>var apples int32 = 1
var oranges int16 = 2
var compote int = apples + oranges // compile error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当尝试编译这三个语句时，将产生一个错误信息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>invalid operation: apples + oranges (mismatched types int32 and int16)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种类型不匹配的问题可以有几种不同的方法修复，最常见方法是将它们都显式转型为一个常见类型：</p><div class="language-Go line-numbers-mode" data-ext="Go"><pre class="language-Go"><code>var compote = int(apples) + int(oranges)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如2.5节所述，对于每种类型T，如果转换允许的话，类型转换操作T(x)将x转换为T类型。许多整数之间的相互转换并不会改变数值；它们只是告诉编译器如何解释这个值。但是对于将一个大尺寸的整数类型转为一个小尺寸的整数类型，或者是将一个浮点数转为整数，可能会改变数值或丢失精度：</p><div class="language-Go line-numbers-mode" data-ext="Go"><pre class="language-Go"><code>f := 3.141 // a float64
i := int(f)
fmt.Println(f, i) // &quot;3.141 3&quot;
f = 1.99
fmt.Println(int(f)) // &quot;1&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浮点数到整数的转换将丢失任何小数部分，然后向数轴零方向截断。你应该避免对可能会超出目标类型表示范围的数值做类型转换，因为截断的行为可能依赖于具体的实现：</p><div class="language-Go line-numbers-mode" data-ext="Go"><pre class="language-Go"><code>f := 1e100  // a float64
i := int(f) // 结果依赖于具体实现
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+o+`" alt="image-20240409145949392" tabindex="0" loading="lazy"><figcaption>image-20240409145949392</figcaption></figure><ul><li>任何大小的整数字面值都可以用以0开始的八进制格式书写，例如0666，八进制数据通常用于POSIX操作系统上的文件访问权限标志；</li><li>或用以0x或0X开头的十六进制格式书写，例如0xdeadbeef，（大小写都可），十六进制数字则更强调数字值的bit位模式。</li></ul><h3 id="格式化输出整型" tabindex="-1"><a class="header-anchor" href="#格式化输出整型" aria-hidden="true">#</a> 格式化输出整型</h3><p>当使用fmt包打印一个数值时，我们可以用 <code>%d</code>、<code>%o</code>或 <code>%x</code>参数控制输出的进制格式</p><div class="language-Go line-numbers-mode" data-ext="Go"><pre class="language-Go"><code>o := 0666
fmt.Printf(&quot;%d %[1]o %#[1]o\\n&quot;, o) // &quot;438 666 0666&quot;
x := int64(0xdeadbeef)
fmt.Printf(&quot;%d %[1]x %#[1]x %#[1]X\\n&quot;, x)
// Output:
// 3735928559 deadbeef 0xdeadbeef 0XDEADBEEF
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>意义：</p><ol><li>%d 是格式化占位符，表示按照十进制格式输出一个整数。</li><li>%[1]o 是格式化占位符的扩展用法，[1] 表示引用第一个参数，o 表示按照八进制格式输出一个整数。</li><li>%#[1]o 是格式化占位符的扩展用法，# 表示输出格式带有前缀，[1] 表示引用第一个参数，o 表示按照八进制格式输出一个整数。</li><li>%[1]x类似%[1]o，x表示十六进制</li><li>%#[1]x带前缀，十六进制，前缀为0x</li><li>%#[1]X带前缀，十六进制，前缀为0X</li></ol><p>字符也可以转成整型，也就是转成他的Unicode，字符使用 <code>%c</code>参数打印，或者是用 <code>%q</code>参数打印带单引号的字符：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ascii <span class="token operator">:=</span> <span class="token char">&#39;a&#39;</span>
unicode <span class="token operator">:=</span> <span class="token char">&#39;国&#39;</span>
newline <span class="token operator">:=</span> <span class="token char">&#39;\\n&#39;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %[1]c %[1]q\\n&quot;</span><span class="token punctuation">,</span> ascii<span class="token punctuation">)</span>   <span class="token comment">// &quot;97 a &#39;a&#39;&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %[1]c %[1]q\\n&quot;</span><span class="token punctuation">,</span> unicode<span class="token punctuation">)</span> <span class="token comment">// &quot;22269 国 &#39;国&#39;&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %[1]q\\n&quot;</span><span class="token punctuation">,</span> newline<span class="token punctuation">)</span>       <span class="token comment">// &quot;10 &#39;\\n&#39;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+e+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_3-2-浮点数" tabindex="-1"><a class="header-anchor" href="#_3-2-浮点数" aria-hidden="true">#</a> 3.2. 浮点数</h2><h3 id="浮点数精度" tabindex="-1"><a class="header-anchor" href="#浮点数精度" aria-hidden="true">#</a> 浮点数精度</h3><p>Go提供两种精度的浮点数，float32和float64。浮点数的范围极限可以在math包中找到。常量math.MaxFloat32表示float32能表示的最大数值，大约是 3.4e38；对应的math.MaxFloat64常量大约是1.8e308。它们分别能表示的最小值近似为1.4e-45和4.9e-324。一个float32类型的浮点数可以提供大约6个十进制数的精度，而float64则可以提供约15个十进制数的精度；</p><p>通常应该优先使用float64类型，因为float32类型的累计计算误差很容易扩散，float32的有效bit位只有23个，其它的bit位用于指数和符号；当整数大于23bit能表达的范围时，float32的表示将出现误差：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> f <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">16777216</span> <span class="token comment">// 1 &lt;&lt; 24</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>f <span class="token operator">==</span> f<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// &quot;true&quot;!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>浮点数的字面值可以直接写小数部分，像这样：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token number">2.71828</span> <span class="token comment">// (approximately)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>小数点前面或后面的数字都可能被省略（例如.707或1.）。很小或很大的数最好用科学计数法书写，通过e或E来指定指数部分：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> Avogadro <span class="token operator">=</span> <span class="token number">6.02214129e23</span>  <span class="token comment">// 阿伏伽德罗常数</span>
<span class="token keyword">const</span> Planck   <span class="token operator">=</span> <span class="token number">6.62606957e-34</span> <span class="token comment">// 普朗克常数\\</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>用Printf函数的%g参数打印浮点数，将采用更紧凑的表示形式打印，并提供足够的精度，但是对应表格的数据，使用%e（带指数）或%f的形式打印可能更合适。所有的这三个打印形式都可以指定打印的宽度和控制打印精度。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">for</span> x <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> x<span class="token operator">++</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;x = %d e^x = %8.3f\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Exp</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码打印e的幂，打印精度是小数点后三个小数精度和8个字符宽度：</p><figure><img src="`+c+`" alt="1712825319476" tabindex="0" loading="lazy"><figcaption>1712825319476</figcaption></figure><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p><h3 id="浮点数特殊值" tabindex="-1"><a class="header-anchor" href="#浮点数特殊值" aria-hidden="true">#</a> 浮点数特殊值</h3><p>=======</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>96567323cfc2043fbd664cc254d198a3cc1f5994 math包中除了提供大量常用的数学函数外，还提供了IEEE754浮点数标准中定义的特殊值的创建和测试：正无穷大和负无穷大，分别用于表示太大溢出的数字和除零的结果；还有NaN非数，一般用于表示无效的除法操作结果0/0或Sqrt(-1).</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> z <span class="token builtin">float64</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> <span class="token operator">-</span>z<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">/</span>z<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span>z<span class="token punctuation">,</span> z<span class="token operator">/</span>z<span class="token punctuation">)</span> <span class="token comment">// &quot;0 -0 +Inf -Inf NaN&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>函数<code>math.IsNaN</code>用于测试一个数是否是非数NaN，<code>math.NaN</code>则返回非数对应的值。虽然可以用<code>math.NaN</code>来表示一个非法的结果，但是测试一个结果是否是非数NaN则是充满风险的，因为NaN和任何数都是不相等的（译注：在浮点数中，NaN、正无穷大和负无穷大都不是唯一的，每个都有非常多种的bit模式表示）：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>nan <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">NaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>nan <span class="token operator">==</span> nan<span class="token punctuation">,</span> nan <span class="token operator">&lt;</span> nan<span class="token punctuation">,</span> nan <span class="token operator">&gt;</span> nan<span class="token punctuation">)</span> <span class="token comment">// &quot;false false false&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+l+`" alt="image-20240411172248377" tabindex="0" loading="lazy"><figcaption>image-20240411172248377</figcaption></figure><p>如果一个函数返回的浮点数结果可能失败，最好的做法是用单独的标志报告失败，像这样：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token builtin">float64</span><span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">if</span> failed <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">,</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD 接下来的程序演示了通过浮点计算生成的图形。它是带有两个参数的z = f(x, y)函数的三维形式，使用了可缩放矢量图形（SVG）格式输出，SVG是一个用于矢量线绘制的XML标准。图3.1显示了sin(r)/r函数的输出图形，其中r是<code>sqrt(x*x+y*y)</code>。</p><figure><img src="`+i+`" alt="image-20240415134037655" tabindex="0" loading="lazy"><figcaption>image-20240415134037655</figcaption></figure><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// Surface computes an SVG rendering of a 3-D surface function.</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;math&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
    width<span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">320</span>            <span class="token comment">// canvas size in pixels</span>
    cells         <span class="token operator">=</span> <span class="token number">100</span>                 <span class="token comment">// number of grid cells</span>
    xyrange       <span class="token operator">=</span> <span class="token number">30.0</span>                <span class="token comment">// axis ranges (-xyrange..+xyrange)</span>
    xyscale       <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">/</span> xyrange <span class="token comment">// pixels per x or y unit</span>
    zscale        <span class="token operator">=</span> height <span class="token operator">*</span> <span class="token number">0.4</span>        <span class="token comment">// pixels per z unit</span>
    angle         <span class="token operator">=</span> math<span class="token punctuation">.</span>Pi <span class="token operator">/</span> <span class="token number">6</span>         <span class="token comment">// angle of x, y axes (=30°)</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> sin30<span class="token punctuation">,</span> cos30 <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Cos</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span> <span class="token comment">// sin(30°), cos(30°)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; &quot;</span><span class="token operator">+</span>
        <span class="token string">&quot;style=&#39;stroke: grey; fill: white; stroke-width: 0.7&#39; &quot;</span><span class="token operator">+</span>
        <span class="token string">&quot;width=&#39;%d&#39; height=&#39;%d&#39;&gt;&quot;</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cells<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cells<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
            ax<span class="token punctuation">,</span> ay <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>
            bx<span class="token punctuation">,</span> by <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
            cx<span class="token punctuation">,</span> cy <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
            dx<span class="token punctuation">,</span> dy <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;polygon points=&#39;%g,%g %g,%g %g,%g %g,%g&#39;/&gt;\\n&quot;</span><span class="token punctuation">,</span>
                ax<span class="token punctuation">,</span> ay<span class="token punctuation">,</span> bx<span class="token punctuation">,</span> by<span class="token punctuation">,</span> cx<span class="token punctuation">,</span> cy<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/svg&gt;&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Find point (x,y) at corner of cell (i,j).</span>
    x <span class="token operator">:=</span> xyrange <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">/</span>cells <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
    y <span class="token operator">:=</span> xyrange <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">/</span>cells <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span>

    <span class="token comment">// Compute surface height z.</span>
    z <span class="token operator">:=</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

    <span class="token comment">// Project (x,y,z) isometrically onto 2-D SVG canvas (sx,sy).</span>
    sx <span class="token operator">:=</span> width<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">*</span>cos30<span class="token operator">*</span>xyscale
    sy <span class="token operator">:=</span> height<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">*</span>sin30<span class="token operator">*</span>xyscale <span class="token operator">-</span> z<span class="token operator">*</span>zscale
    <span class="token keyword">return</span> sx<span class="token punctuation">,</span> sy
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
    r <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Hypot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token comment">// distance from (0,0)</span>
    <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> r
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="练习-3-1" tabindex="-1"><a class="header-anchor" href="#练习-3-1" aria-hidden="true">#</a> 练习 3.1</h3><p>如果f函数返回的是无限制的float64值，那么SVG文件可能输出无效的多边形元素（虽然许多SVG渲染器会妥善处理这类问题）。修改程序跳过无效的多边形。</p><p>在for循环里处理一下corner函数的返回值：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cells<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cells<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
			ax<span class="token punctuation">,</span> ay <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>
			bx<span class="token punctuation">,</span> by <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
			cx<span class="token punctuation">,</span> cy <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
			dx<span class="token punctuation">,</span> dy <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token comment">// NOTE: 跳过无效的多边形</span>
			<span class="token keyword">if</span> math<span class="token punctuation">.</span><span class="token function">IsNaN</span><span class="token punctuation">(</span>ax<span class="token punctuation">)</span> <span class="token operator">||</span> math<span class="token punctuation">.</span><span class="token function">IsNaN</span><span class="token punctuation">(</span>ay<span class="token punctuation">)</span> <span class="token operator">||</span> math<span class="token punctuation">.</span><span class="token function">IsNaN</span><span class="token punctuation">(</span>bx<span class="token punctuation">)</span> <span class="token operator">||</span> math<span class="token punctuation">.</span><span class="token function">IsNaN</span><span class="token punctuation">(</span>by<span class="token punctuation">)</span> <span class="token operator">||</span> math<span class="token punctuation">.</span><span class="token function">IsNaN</span><span class="token punctuation">(</span>cx<span class="token punctuation">)</span> <span class="token operator">||</span> math<span class="token punctuation">.</span><span class="token function">IsNaN</span><span class="token punctuation">(</span>cy<span class="token punctuation">)</span> <span class="token operator">||</span> math<span class="token punctuation">.</span><span class="token function">IsNaN</span><span class="token punctuation">(</span>dx<span class="token punctuation">)</span> <span class="token operator">||</span> math<span class="token punctuation">.</span><span class="token function">IsNaN</span><span class="token punctuation">(</span>dy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>

			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;polygon points=&#39;%g,%g %g,%g %g,%g %g,%g&#39;/&gt;\\n&quot;</span><span class="token punctuation">,</span>
				ax<span class="token punctuation">,</span> ay<span class="token punctuation">,</span> bx<span class="token punctuation">,</span> by<span class="token punctuation">,</span> cx<span class="token punctuation">,</span> cy<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span>

		<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="练习-3-2" tabindex="-1"><a class="header-anchor" href="#练习-3-2" aria-hidden="true">#</a> 练习 3.2</h3><p>试验math包中其他函数的渲染图形。你是否能输出一个egg box、moguls或a saddle图案?</p><p>把原本的f(x)改成别的函数</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Hypot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token comment">// distance from (0,0)</span>
	<span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> r
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">eggbox</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span> <span class="token comment">//鸡蛋盒</span>
	r <span class="token operator">:=</span> <span class="token number">0.2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Cos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> math<span class="token punctuation">.</span><span class="token function">Cos</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> r
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">saddle</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span> <span class="token comment">//马鞍</span>
	a <span class="token operator">:=</span> <span class="token number">25.0</span> <span class="token operator">*</span> <span class="token number">25.0</span>
	b <span class="token operator">:=</span> <span class="token number">17.0</span> <span class="token operator">*</span> <span class="token number">17.0</span>
	r <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> a <span class="token operator">*</span> math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> b
	<span class="token keyword">return</span> r
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="练习-3-3" tabindex="-1"><a class="header-anchor" href="#练习-3-3" aria-hidden="true">#</a> 练习 3.3</h3><p>根据高度给每个多边形上色，那样峰值部将是红色（#ff0000），谷部将是蓝色（#0000ff）。</p><p>感觉不难 但我不会</p><h3 id="练习-3-4" tabindex="-1"><a class="header-anchor" href="#练习-3-4" aria-hidden="true">#</a> 练习 3.4</h3><p>参考1.7节Lissajous例子的函数，构造一个web服务器，用于计算函数曲面然后返回SVG数据给客户端。允许客户端通过HTTP请求参数设置高度、宽度和颜色等参数。</p><p>服务器必须设置Content-Type头部：（因为服务器使用标准的PNG图像格式，可以根据前面的512个字节自动输出对应的头部。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;image/svg+xml&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打印异常的时候还得把&quot;Content-Type&quot;转成text，要不然：</p><figure><img src="`+u+`" alt="image-20240415143331842" tabindex="0" loading="lazy"><figcaption>image-20240415143331842</figcaption></figure><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;math&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
	<span class="token string">&quot;strconv&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	cells   <span class="token operator">=</span> <span class="token number">100</span>         <span class="token comment">// number of grid cells</span>
	xyrange <span class="token operator">=</span> <span class="token number">30.0</span>        <span class="token comment">// axis ranges (-xyrange .....+xyrange)</span>
	angle   <span class="token operator">=</span> math<span class="token punctuation">.</span>Pi <span class="token operator">/</span> <span class="token number">6</span> <span class="token comment">// angle of x,y axes (=30˚)</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> sin30<span class="token punctuation">,</span> cos30 <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Cos</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
	err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;localhost:8888&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">handler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// NOTE: 不加Content-Type，浏览器显示的是svg文件内容，而不是解析显示为图片</span>
	w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;image/svg+xml&quot;</span><span class="token punctuation">)</span>
	width <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">FormValue</span><span class="token punctuation">(</span><span class="token string">&quot;width&quot;</span><span class="token punctuation">)</span>
	widthInt<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token comment">// 这里打印异常，要把Content-Type转成text，要不然</span>
		<span class="token comment">// This page contains the following errors: error on line 1 at column 75: EntityRef: expecting &#39;;&#39;</span>
		w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html; charset=utf-8&quot;</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;&lt;html&gt;&lt;body&gt;请按要求填写参数&#39;width&#39;!!!例如: http://localhost:8888/?width=2160&amp;height=1280&amp;color=red&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	height <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">FormValue</span><span class="token punctuation">(</span><span class="token string">&quot;height&quot;</span><span class="token punctuation">)</span>
	heightInt<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html; charset=utf-8&quot;</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;&lt;html&gt;&lt;body&gt;请按要求填写参数&#39;height&#39;!!!例如: http://localhost:8888/?width=2160&amp;height=1280&amp;color=red&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	color <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">FormValue</span><span class="token punctuation">(</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">)</span>
	<span class="token function">surface</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> widthInt<span class="token punctuation">,</span> heightInt<span class="token punctuation">,</span> color<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">surface</span><span class="token punctuation">(</span>out http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> width <span class="token builtin">int64</span><span class="token punctuation">,</span> height <span class="token builtin">int64</span><span class="token punctuation">,</span> color <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// NOTE: Header.Set(.... image/svg+xml)填这也行</span>
	<span class="token comment">// out.Header().Set(&quot;Content-Type&quot;, &quot;image/svg+xml&quot;)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token string">&quot;&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39;&quot;</span><span class="token operator">+</span>
		<span class="token string">&quot; style=&#39;stroke: %s;fill:white;stroke-width:0.7&#39;&quot;</span><span class="token operator">+</span>
		<span class="token string">&quot; width=&#39;%d&#39; height=&#39;%d&#39;&gt;&quot;</span><span class="token punctuation">,</span> color<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cells<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cells<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
			ax<span class="token punctuation">,</span> ay <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>
			bx<span class="token punctuation">,</span> by <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>
			cx<span class="token punctuation">,</span> cy <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>
			dx<span class="token punctuation">,</span> dy <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>

			<span class="token keyword">if</span> math<span class="token punctuation">.</span><span class="token function">IsNaN</span><span class="token punctuation">(</span>ax<span class="token punctuation">)</span> <span class="token operator">||</span> math<span class="token punctuation">.</span><span class="token function">IsNaN</span><span class="token punctuation">(</span>ay<span class="token punctuation">)</span> <span class="token operator">||</span> math<span class="token punctuation">.</span><span class="token function">IsNaN</span><span class="token punctuation">(</span>bx<span class="token punctuation">)</span> <span class="token operator">||</span> math<span class="token punctuation">.</span><span class="token function">IsNaN</span><span class="token punctuation">(</span>by<span class="token punctuation">)</span> <span class="token operator">||</span> math<span class="token punctuation">.</span><span class="token function">IsNaN</span><span class="token punctuation">(</span>cx<span class="token punctuation">)</span> <span class="token operator">||</span> math<span class="token punctuation">.</span><span class="token function">IsNaN</span><span class="token punctuation">(</span>cy<span class="token punctuation">)</span> <span class="token operator">||</span> math<span class="token punctuation">.</span><span class="token function">IsNaN</span><span class="token punctuation">(</span>dx<span class="token punctuation">)</span> <span class="token operator">||</span> math<span class="token punctuation">.</span><span class="token function">IsNaN</span><span class="token punctuation">(</span>dy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// 跳过无效的多边形</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">}</span>

			fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token string">&quot;&lt;polygon points=&#39;%g,%g %g,%g %g,%g %g,%g&#39;/&gt;\\n&quot;</span><span class="token punctuation">,</span>
				ax<span class="token punctuation">,</span> ay<span class="token punctuation">,</span> bx<span class="token punctuation">,</span> by<span class="token punctuation">,</span> cx<span class="token punctuation">,</span> cy<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> <span class="token string">&quot;&lt;/svg&gt;&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">,</span> width <span class="token builtin">int64</span><span class="token punctuation">,</span> height <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Find Point (x, y) at corner of cell(i, j)</span>
	x <span class="token operator">:=</span> xyrange <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">/</span>cells <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
	y <span class="token operator">:=</span> xyrange <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">/</span>cells <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span>

	zscale <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.4</span>         <span class="token comment">// pixels per z unit</span>
	xyscale <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">/</span> xyrange <span class="token comment">// pixels per x or y unit</span>

	<span class="token comment">// compute surface height z</span>
	z <span class="token operator">:=</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

	<span class="token comment">// project (x,y,z) isometrically onto 2-D SVG canvas (sx, sy)</span>
	sx <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>width<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">*</span>cos30<span class="token operator">*</span>xyscale
	sy <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>height<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">*</span>sin30<span class="token operator">*</span>xyscale <span class="token operator">-</span> z<span class="token operator">*</span>zscale
	<span class="token keyword">return</span> sx<span class="token punctuation">,</span> sy
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Hypot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token comment">// distance from (0,0)</span>
	<span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> r
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-3-复数" tabindex="-1"><a class="header-anchor" href="#_3-3-复数" aria-hidden="true">#</a> 3.3. 复数</h2><h3 id="复数表达式" tabindex="-1"><a class="header-anchor" href="#复数表达式" aria-hidden="true">#</a> 复数表达式</h3><p>Go语言提供了两种精度的复数类型：complex64和complex128，分别对应float32和float64两种浮点数精度。内置的complex函数用于构建复数，内建的real和imag函数分别返回复数的实部和虚部：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> x <span class="token builtin">complex128</span> <span class="token operator">=</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 1+2i</span>
<span class="token keyword">var</span> y <span class="token builtin">complex128</span> <span class="token operator">=</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 3+4i</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token operator">*</span>y<span class="token punctuation">)</span>                 <span class="token comment">// &quot;(-5+10i)&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>x<span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment">// &quot;-5&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>x<span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment">// &quot;10&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果一个浮点数面值或一个十进制整数面值后面跟着一个i，例如3.141592i或2i，它将构成一个复数的虚部，复数的实部是0：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1i</span> <span class="token operator">*</span> <span class="token number">1i</span><span class="token punctuation">)</span> <span class="token comment">// &quot;(-1+0i)&quot;, i^2 = -1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在常量算术规则下，一个复数常量可以加到另一个普通数值常量（整数或浮点数、实部或虚部），我们可以用自然的方式书写复数，就像1+2i或与之等价的写法2i+1。上面x和y的声明语句还可以简化：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>x <span class="token operator">:=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2i</span>
y <span class="token operator">:=</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4i</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>复数也可以用==和!=进行相等比较。只有两个复数的实部和虚部都相等的时候它们才是相等的（译注：浮点数的相等比较是危险的，需要特别小心处理精度问题）。</p><h3 id="math-cmplx包" tabindex="-1"><a class="header-anchor" href="#math-cmplx包" aria-hidden="true">#</a> math/cmplx包</h3><p>math/cmplx包提供了复数处理的许多函数，例如求复数的平方根函数和求幂函数。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cmplx<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;(0+1i)&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面的程序使用complex128复数算法来生成一个Mandelbrot图像。</p><pre><code>// Mandelbrot emits a PNG image of the Mandelbrot fractal.
package main

import (
    &quot;image&quot;
    &quot;image/color&quot;
    &quot;image/png&quot;
    &quot;math/cmplx&quot;
    &quot;os&quot;
)
</code></pre><p>​<br> func main() { const ( xmin, ymin, xmax, ymax = -2, -2, +2, +2 width, height = 1024, 1024 ) img := image.NewRGBA(image.Rect(0, 0, width, height)) for py := 0; py &lt; height; py++ { y := float64(py)/height*(ymax-ymin) + ymin for px := 0; px &lt; width; px++ { x := float64(px)/width*(xmax-xmin) + xmin z := complex(x, y) // Image point (px, py) represents complex value z. img.Set(px, py, mandelbrot(z)) } } png.Encode(os.Stdout, img) // NOTE: ignoring errors }</p><pre><code>func mandelbrot(z complex128) color.Color {
    const iterations = 200
    const contrast = 15
    var v complex128
for n := uint8(0); n &lt; iterations; n++ {
    v = v*v + z
    if cmplx.Abs(v) &gt; 2 {
        return color.Gray{255 - contrast*n}
    }
}
return color.Black
}
</code></pre><p>用于遍历1024x1024图像每个点的两个嵌套的循环对应-2到+2区间的复数平面。程序反复测试每个点对应复数值平方值加一个增量值对应的点是否超出半径为2的圆。如果超过了，通过根据预设置的逃逸迭代次数对应的灰度颜色来代替。如果不是，那么该点属于Mandelbrot集合，使用黑色颜色标记。最终程序将生成的PNG格式分形图像输出到标准输出。</p><figure><img src="`+r+'" alt="image-20240415153834143" tabindex="0" loading="lazy"><figcaption>image-20240415153834143</figcaption></figure><blockquote><p>[!NOTE]</p><p>此处要用cmd执行go run mandelbrot.go &gt; out.png ，要不然powershell会出问题：</p><figure><img src="'+k+`" alt="image-20240415153609218" tabindex="0" loading="lazy"><figcaption>image-20240415153609218</figcaption></figure></blockquote><h3 id="练习-3-5" tabindex="-1"><a class="header-anchor" href="#练习-3-5" aria-hidden="true">#</a> 练习 3.5</h3><p>实现一个彩色的Mandelbrot图像，使用image.NewRGBA创建图像，使用color.RGBA或color.YCbCr生成颜色。</p><p>添加一个选择颜色的函数，替换原来的灰度，颜色参考https://stackoverflow.com/questions/16500656/which-color-gradient-is-used-to-color-mandelbrot-in-wikipedia</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">mandelbrot</span><span class="token punctuation">(</span>z <span class="token builtin">complex128</span><span class="token punctuation">)</span> color<span class="token punctuation">.</span>Color <span class="token punctuation">{</span>
	<span class="token keyword">const</span> iterations <span class="token operator">=</span> <span class="token number">200</span>
	<span class="token comment">// const contrast = 15</span>

	<span class="token keyword">var</span> v <span class="token builtin">complex128</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> iterations<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		v <span class="token operator">=</span> v<span class="token operator">*</span>v <span class="token operator">+</span> z
		<span class="token keyword">if</span> cmplx<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token punctuation">{</span>
			<span class="token comment">// return color.Gray{255 - contrast*n}</span>
			<span class="token comment">// NOTE: 原本return灰度的地方，改成返回一个颜色</span>
			<span class="token keyword">return</span> <span class="token function">getColor</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> color<span class="token punctuation">.</span>Black
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">getColor</span><span class="token punctuation">(</span>n <span class="token builtin">uint8</span><span class="token punctuation">)</span> color<span class="token punctuation">.</span>Color <span class="token punctuation">{</span>
	paletted <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span>color<span class="token punctuation">.</span>Color<span class="token punctuation">{</span>
		<span class="token comment">// NOTE: type RGBA struct {R, G, B, A uint8}</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// brown 3</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment">// dark violett</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment">//darkest blue</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment">//blue 5</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment">//blue 4</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">138</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">//blue 3</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">177</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">//blue 2</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">209</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">//blue 1</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">134</span><span class="token punctuation">,</span> <span class="token number">181</span><span class="token punctuation">,</span> <span class="token number">229</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// blue 0</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">211</span><span class="token punctuation">,</span> <span class="token number">236</span><span class="token punctuation">,</span> <span class="token number">248</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// lightest blue</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">241</span><span class="token punctuation">,</span> <span class="token number">233</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// lightest yellow</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">248</span><span class="token punctuation">,</span> <span class="token number">201</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// light yellow</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">// dirty yellow</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">204</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">// brown 0</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">153</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// brown 1</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// brown 2</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> paletted<span class="token punctuation">[</span>n<span class="token operator">%</span><span class="token number">16</span><span class="token punctuation">]</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="练习-3-6" tabindex="-1"><a class="header-anchor" href="#练习-3-6" aria-hidden="true">#</a> 练习 3.6</h3><p>升采样技术可以降低每个像素对计算颜色值和平均值的影响。简单的方法是将每个像素分成四个子像素，实现它。</p><p>原本使用坐标x,y直接算个颜色出来，现在是取坐标x,y四周的四个点，算出颜色的平均值（将r、g、b、a四个的值求平均）</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;image&quot;</span>
	<span class="token string">&quot;image/color&quot;</span>
	<span class="token string">&quot;image/png&quot;</span>
	<span class="token string">&quot;math/cmplx&quot;</span>
	<span class="token string">&quot;os&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// go command:</span>
<span class="token comment">// go run ./src/chapter3/work3_6/work3_6.go &gt; ./src/chapter3/work3_6/out.png</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> <span class="token punctuation">(</span>
		xmin<span class="token punctuation">,</span> ymin<span class="token punctuation">,</span> xmax<span class="token punctuation">,</span> ymax <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">2</span>
		width<span class="token punctuation">,</span> height          <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">1024</span>
		epsX                   <span class="token operator">=</span> <span class="token punctuation">(</span>xmax <span class="token operator">-</span> xmin<span class="token punctuation">)</span> <span class="token operator">/</span> width
		epsY                   <span class="token operator">=</span> <span class="token punctuation">(</span>ymax <span class="token operator">-</span> ymin<span class="token punctuation">)</span> <span class="token operator">/</span> height
	<span class="token punctuation">)</span>
	<span class="token comment">// 升采样的间隔</span>
	offX <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">{</span><span class="token operator">-</span>epsX<span class="token punctuation">,</span> epsX<span class="token punctuation">}</span>
	offY <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">{</span><span class="token operator">-</span>epsY<span class="token punctuation">,</span> epsY<span class="token punctuation">}</span>

	img <span class="token operator">:=</span> image<span class="token punctuation">.</span><span class="token function">NewRGBA</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span><span class="token function">Rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// create a 1024 * 1024 canvas</span>
	<span class="token keyword">for</span> py <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> py <span class="token operator">&lt;</span> height<span class="token punctuation">;</span> py<span class="token operator">++</span> <span class="token punctuation">{</span>
		y <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>py<span class="token punctuation">)</span><span class="token operator">/</span>height<span class="token operator">*</span><span class="token punctuation">(</span>ymax<span class="token operator">-</span>ymin<span class="token punctuation">)</span> <span class="token operator">+</span> ymin
		<span class="token keyword">for</span> px <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> px <span class="token operator">&lt;</span> width<span class="token punctuation">;</span> px<span class="token operator">++</span> <span class="token punctuation">{</span>
			x <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>px<span class="token punctuation">)</span><span class="token operator">/</span>width<span class="token operator">*</span><span class="token punctuation">(</span>xmax<span class="token operator">-</span>xmin<span class="token punctuation">)</span> <span class="token operator">+</span> xmin
			<span class="token comment">// NOTE: 原本使用坐标x,y直接算个颜色出来，现在是取坐标x,y四周的四个点，算出颜色的平均值。</span>
			subPixels <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>color<span class="token punctuation">.</span>Color<span class="token punctuation">{</span><span class="token punctuation">}</span>
			<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
				<span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
					z <span class="token operator">:=</span> <span class="token function">complex</span><span class="token punctuation">(</span>x<span class="token operator">+</span>offX<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token operator">+</span>offY<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
					subPixels <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>subPixels<span class="token punctuation">,</span> <span class="token function">mandelbrot</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
			img<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>px<span class="token punctuation">,</span> py<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>subPixels<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// loop every pixels set a specific color</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	png<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> img<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">mandelbrot</span><span class="token punctuation">(</span>z <span class="token builtin">complex128</span><span class="token punctuation">)</span> color<span class="token punctuation">.</span>Color <span class="token punctuation">{</span>
	<span class="token keyword">const</span> iterations <span class="token operator">=</span> <span class="token number">200</span>
	<span class="token comment">// const contrast = 15</span>
	<span class="token keyword">var</span> v <span class="token builtin">complex128</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> iterations<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		v <span class="token operator">=</span> v<span class="token operator">*</span>v <span class="token operator">+</span> z
		<span class="token keyword">if</span> cmplx<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token punctuation">{</span>
			<span class="token comment">// return color.Gray{255 - contrast*n} // gray version use this</span>
			<span class="token keyword">return</span> <span class="token function">getColor</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> color<span class="token punctuation">.</span>Black
<span class="token punctuation">}</span>

<span class="token comment">// 根据维基百科的图片，定义了16个颜色</span>
<span class="token keyword">func</span> <span class="token function">getColor</span><span class="token punctuation">(</span>n <span class="token builtin">uint8</span><span class="token punctuation">)</span> color<span class="token punctuation">.</span>Color <span class="token punctuation">{</span>
	paletted <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span>color<span class="token punctuation">.</span>Color<span class="token punctuation">{</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// # brown 3</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment">// # dark violett</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment">//# darkest blue</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment">//# blue 5</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment">//# blue 4</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">138</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">//# blue 3</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">177</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">//# blue 2</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">209</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">//# blue 1</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">134</span><span class="token punctuation">,</span> <span class="token number">181</span><span class="token punctuation">,</span> <span class="token number">229</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// # blue 0</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">211</span><span class="token punctuation">,</span> <span class="token number">236</span><span class="token punctuation">,</span> <span class="token number">248</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// # lightest blue</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">241</span><span class="token punctuation">,</span> <span class="token number">233</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// # lightest yellow</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">248</span><span class="token punctuation">,</span> <span class="token number">201</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// # light yellow</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">// # dirty yellow</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">204</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">// # brown 0</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">153</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// # brown 1</span>
		color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// # brown 2</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> paletted<span class="token punctuation">[</span>n<span class="token operator">%</span><span class="token number">16</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">// NOTE: 计算颜色平均值，将r、g、b、a四个的值求平均</span>
<span class="token keyword">func</span> <span class="token function">avg</span><span class="token punctuation">(</span>colors <span class="token punctuation">[</span><span class="token punctuation">]</span>color<span class="token punctuation">.</span>Color<span class="token punctuation">)</span> color<span class="token punctuation">.</span>Color <span class="token punctuation">{</span>
	<span class="token keyword">var</span> r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token builtin">uint16</span>
	n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span>
	<span class="token comment">// 这里的uint32(n)=4，其实就是像素值相加除以4，也就是算平均</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token keyword">range</span> colors <span class="token punctuation">{</span>
		tr<span class="token punctuation">,</span> tg<span class="token punctuation">,</span> tb<span class="token punctuation">,</span> ta <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">RGBA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		r <span class="token operator">+=</span> <span class="token function">uint16</span><span class="token punctuation">(</span>tr <span class="token operator">/</span> <span class="token function">uint32</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
		g <span class="token operator">+=</span> <span class="token function">uint16</span><span class="token punctuation">(</span>tg <span class="token operator">/</span> <span class="token function">uint32</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
		b <span class="token operator">+=</span> <span class="token function">uint16</span><span class="token punctuation">(</span>tb <span class="token operator">/</span> <span class="token function">uint32</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
		a <span class="token operator">+=</span> <span class="token function">uint16</span><span class="token punctuation">(</span>ta <span class="token operator">/</span> <span class="token function">uint32</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// NOTE: type RGBA64 struct {R, G, B, A uint16}</span>
	<span class="token keyword">return</span> color<span class="token punctuation">.</span>RGBA64<span class="token punctuation">{</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="练习-3-7" tabindex="-1"><a class="header-anchor" href="#练习-3-7" aria-hidden="true">#</a> 练习 3.7</h3><p>另一个生成分形图像的方式是使用牛顿法来求解一个复数方程，例如$z^4-1=0$。每个起点到四个根的迭代次数对应阴影的灰度。方程根对应的点用颜色表示。</p><p>=======</p><p>接下来的程序演示了通过浮点计算生成的图形。它是带有两个参数的z = f(x, y)函数的三维形式，使用了可缩放矢量图形（SVG）格式输出，SVG是一个用于矢量线绘制的XML标准。图3.1显示了sin(r)/r函数的输出图形，其中r是<code>sqrt(x*x+y*y)</code>。</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>96567323cfc2043fbd664cc254d198a3cc1f5994</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote>`,145),v=[m];function b(g,f){return s(),a("div",null,v)}const y=n(d,[["render",b],["__file","ch3.html.vue"]]);export{y as default};
