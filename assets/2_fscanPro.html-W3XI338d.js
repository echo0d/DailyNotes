import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as t,o as p}from"./app-BXZXPl0s.js";const o="/DailyNotes/assets/image-20240818193210381-DP7DjP1V.png",e="/DailyNotes/assets/image-20240818214317217-CRd58TmC.png",c="/DailyNotes/assets/image-20240819095429072-bgsUbgaw.png",i="/DailyNotes/assets/image-20240819095521796-DlsUmDgg.png",u="/DailyNotes/assets/image-20240819101048478-Bak2zDRs.png",l={};function k(r,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h1 id="_2-go练习-fscan" tabindex="-1"><a class="header-anchor" href="#_2-go练习-fscan"><span>2. Go练习-fscan</span></a></h1><h2 id="_2-1-优化存活主机探测结果输出" tabindex="-1"><a class="header-anchor" href="#_2-1-优化存活主机探测结果输出"><span>2.1. 优化存活主机探测结果输出</span></a></h2><p>Plugins目录下的icmp.go文件中CheckLive函数对应着探测存活主机功能，堆栈：</p><pre><code>Plugins.CheckLive (c:\\Users\\18846\\Desktop\\fscan\\Plugins\\icmp.go:23)
Plugins.Scan (c:\\Users\\18846\\Desktop\\fscan\\Plugins\\scanner.go:27)
main.main (c:\\Users\\18846\\Desktop\\fscan\\main.go:15)
</code></pre><figure><img src="`+o+`" alt="image-20240818193210381" tabindex="0" loading="lazy"><figcaption>image-20240818193210381</figcaption></figure><p>整体逻辑：<code>checkLive</code>函数中创建<code>chanHosts</code>通道，用channel接收多线程探测存活主机的结果。</p><p>修改：多线程里<code>chanHosts</code>中的IP不再实时输出，原本的打印逻辑注释掉，只保留扫描结果<code>AliveHosts</code></p><pre><code class="language-go">chanHosts <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>hostslist<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> ip <span class="token operator">:=</span> <span class="token keyword">range</span> chanHosts <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> ExistHosts<span class="token punctuation">[</span>ip<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token operator">&amp;&amp;</span> <span class="token function">IsContain</span><span class="token punctuation">(</span>hostslist<span class="token punctuation">,</span> ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				ExistHosts<span class="token punctuation">[</span>ip<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
				<span class="token comment">// if common.Silent == false {</span>
				<span class="token comment">// 	if Ping == false {</span>
				<span class="token comment">// 		fmt.Printf(&quot;(icmp) Target %-15s is alive\\n&quot;, ip)</span>
				<span class="token comment">// 	} else {</span>
				<span class="token comment">// 		fmt.Printf(&quot;(ping) Target %-15s is alive\\n&quot;, ip)</span>
				<span class="token comment">// 	}</span>
				<span class="token comment">// }</span>
				AliveHosts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>AliveHosts<span class="token punctuation">,</span> ip<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			livewg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><p>在<code>AliveHosts</code>返回之前对其进行排序并输出</p><pre><code class="language-go">	<span class="token comment">// Sort the AliveHosts slice</span>
	sort<span class="token punctuation">.</span><span class="token function">Strings</span><span class="token punctuation">(</span>AliveHosts<span class="token punctuation">)</span>
	<span class="token comment">// Print sorted AliveHosts</span>
	<span class="token keyword">if</span> Ping <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ip <span class="token operator">:=</span> <span class="token keyword">range</span> AliveHosts <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;(icmp) Target %-15s is alive\\n&quot;</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ip <span class="token operator">:=</span> <span class="token keyword">range</span> AliveHosts <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;(ping) Target %-15s is alive\\n&quot;</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> AliveHosts
</code></pre><p>缺点：要等到全部存活探测结束才有输出</p><p>优点：有排序，不会太乱</p><p>但是，结果跑出来发现排序不对</p><figure><img src="`+e+`" alt="image-20240818214317217" tabindex="0" loading="lazy"><figcaption>image-20240818214317217</figcaption></figure><p>修改一下排序的逻辑，不直接用<code>sort.Strings</code>了,使用<code>net</code>包中的<code>ParseIP</code>函数，解析一下IP再排序</p><pre><code class="language-go">	<span class="token comment">// sort.Strings(AliveHosts)</span>
	sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>AliveHosts<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> bytes<span class="token punctuation">.</span><span class="token function">Compare</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span><span class="token function">ParseIP</span><span class="token punctuation">(</span>AliveHosts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">To4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> net<span class="token punctuation">.</span><span class="token function">ParseIP</span><span class="token punctuation">(</span>AliveHosts<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">To4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><p>这回应该没啥问题了，就是不知道效率被影响的程度，毕竟多解析了一遍IP，等用的时候再说吧</p><h2 id="_2-2-优化端口探测结果输出" tabindex="-1"><a class="header-anchor" href="#_2-2-优化端口探测结果输出"><span>2.2. 优化端口探测结果输出</span></a></h2><p>fscan 端口扫描函数调用堆栈</p><pre><code>Plugins.PortScan (portscan.go:48) github.com/shadow1ng/fscan/Plugins
Plugins.Scan (scanner.go:40) github.com/shadow1ng/fscan/Plugins
main.main (main.go:15) main
runtime.main (proc.go:250) runtime
</code></pre><figure><img src="`+c+'" alt="image-20240819095429072" tabindex="0" loading="lazy"><figcaption>image-20240819095429072</figcaption></figure><p>原本的探测结果在<code>PortConnect()</code>函数。一边扫描一边就输出，这样太乱了。但是也有对应的接收结果的 <code>results</code> channel, 那直接删除掉原本的输出，处理 <code>AliveAddress</code> 结果即可 修改代码如下</p><figure><img src="'+i+`" alt="image-20240819095521796" tabindex="0" loading="lazy"><figcaption>image-20240819095521796</figcaption></figure><p>在<code>PortConnect()</code>函数中<code>AliveAddress</code> 返回之前，处理一遍结果。</p><pre><code class="language-go"><span class="token keyword">func</span> <span class="token function">PortScan</span><span class="token punctuation">(</span>hostslist <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> ports <span class="token builtin">string</span><span class="token punctuation">,</span> timeout <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token comment">//</span>
	<span class="token comment">// 中间省略</span>
    <span class="token comment">// </span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">close</span><span class="token punctuation">(</span>Addrs<span class="token punctuation">)</span>
	<span class="token function">close</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>
	<span class="token function">MapIPToPorts</span><span class="token punctuation">(</span>AliveAddress<span class="token punctuation">)</span>
	<span class="token keyword">return</span> AliveAddress
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">MapIPToPorts</span><span class="token punctuation">(</span>ipPortList <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ipToPorts <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
	<span class="token comment">// 遍历列表，解析IP和端口，并将端口添加到对应IP的列表中</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ipPort <span class="token operator">:=</span> <span class="token keyword">range</span> ipPortList <span class="token punctuation">{</span>
		parts <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>ipPort<span class="token punctuation">,</span> <span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span>
		ip <span class="token operator">:=</span> parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
		port<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		ipToPorts<span class="token punctuation">[</span>ip<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ipToPorts<span class="token punctuation">[</span>ip<span class="token punctuation">]</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> ip<span class="token punctuation">,</span> ports <span class="token operator">:=</span> <span class="token keyword">range</span> ipToPorts <span class="token punctuation">{</span>
		sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>ports<span class="token punctuation">)</span>
		result <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot; %s: %v&quot;</span><span class="token punctuation">,</span> ip<span class="token punctuation">,</span> ports<span class="token punctuation">)</span>
		common<span class="token punctuation">.</span><span class="token function">LogSuccess</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>结果大概这样</p><figure><img src="`+u+'" alt="image-20240819101048478" tabindex="0" loading="lazy"><figcaption>image-20240819101048478</figcaption></figure>',27)]))}const d=s(l,[["render",k],["__file","2_fscanPro.html.vue"]]),f=JSON.parse(`{"path":"/develop/Go/ImprovingGo/2_fscanPro.html","title":"2. Go练习-fscan","lang":"zh-CN","frontmatter":{"description":"2. Go练习-fscan 2.1. 优化存活主机探测结果输出 Plugins目录下的icmp.go文件中CheckLive函数对应着探测存活主机功能，堆栈： image-20240818193210381image-20240818193210381 整体逻辑：checkLive函数中创建chanHosts通道，用channel接收多线程探测存活主机...","head":[["meta",{"property":"og:url","content":"https://echo0d.github.io/DailyNotes/develop/Go/ImprovingGo/2_fscanPro.html"}],["meta",{"property":"og:site_name","content":"echo0d'notes"}],["meta",{"property":"og:title","content":"2. Go练习-fscan"}],["meta",{"property":"og:description","content":"2. Go练习-fscan 2.1. 优化存活主机探测结果输出 Plugins目录下的icmp.go文件中CheckLive函数对应着探测存活主机功能，堆栈： image-20240818193210381image-20240818193210381 整体逻辑：checkLive函数中创建chanHosts通道，用channel接收多线程探测存活主机..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-19T02:25:45.000Z"}],["meta",{"property":"article:author","content":"echo0d"}],["meta",{"property":"article:modified_time","content":"2024-08-19T02:25:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2. Go练习-fscan\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-19T02:25:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"echo0d\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"2.1. 优化存活主机探测结果输出","slug":"_2-1-优化存活主机探测结果输出","link":"#_2-1-优化存活主机探测结果输出","children":[]},{"level":2,"title":"2.2. 优化端口探测结果输出","slug":"_2-2-优化端口探测结果输出","link":"#_2-2-优化端口探测结果输出","children":[]}],"git":{"createdTime":1723990650000,"updatedTime":1724034345000,"contributors":[{"name":"echo0d","email":"echo0d@163.com","commits":2}]},"readingTime":{"minutes":2.08,"words":623},"filePathRelative":"develop/Go/ImprovingGo/2_fscanPro.md","localizedDate":"2024年8月18日","autoDesc":true,"excerpt":"\\n<h2>2.1. 优化存活主机探测结果输出</h2>\\n<p>Plugins目录下的icmp.go文件中CheckLive函数对应着探测存活主机功能，堆栈：</p>\\n<pre><code>Plugins.CheckLive (c:\\\\Users\\\\18846\\\\Desktop\\\\fscan\\\\Plugins\\\\icmp.go:23)\\nPlugins.Scan (c:\\\\Users\\\\18846\\\\Desktop\\\\fscan\\\\Plugins\\\\scanner.go:27)\\nmain.main (c:\\\\Users\\\\18846\\\\Desktop\\\\fscan\\\\main.go:15)\\n</code></pre>\\n<figure><figcaption>image-20240818193210381</figcaption></figure>"}`);export{d as comp,f as data};
