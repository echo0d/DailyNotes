import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,a as s,d as a,e as p,b as e,o as l,r as u}from"./app-C5cR4qpO.js";const i="/DailyNotes/assets/662E827A-FA32-4464-B0BD-40087F429E98-D8fhfjEO.jpg",k="/DailyNotes/assets/20210105-java-object-1-BE8GkbVI.png",r="/DailyNotes/assets/java-switch-case-flow-diagram-CJ6Mx7FG.jpeg",d="/DailyNotes/assets/OOP_WrapperClass-Dea18TkO.png",g="/DailyNotes/assets/java-string-1-2020-12-01-C6dasCSY.png",m="/DailyNotes/assets/java-string-20201208-Cxw7V1l2.png",y="/DailyNotes/assets/2021-03-01-java-stringbuffer-CoLIOmlx.svg",h="/DailyNotes/assets/D53C92B3-9643-4871-8A72-33D491299653-COHsAmr2.jpg",f="/DailyNotes/assets/12-130Q1221013F0-DhLZ8-gO.jpg",w="/DailyNotes/assets/iostream2xx-C4vrm-xB.png",b="/DailyNotes/assets/exception-hierarchy-D14jU_8-.png",x={},v={href:"https://www.runoob.com/java/java-tutorial.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.runoob.com/java/java-inner-class.html",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.runoob.com/java/java-anonymous-class.html",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.runoob.com/manual/jdk11api/java.base/java/lang/String.html",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.runoob.com/wp-content/uploads/2013/12/iostream2xx.png",target:"_blank",rel:"noopener noreferrer"};function J(D,n){const t=u("ExternalLinkIcon");return l(),c("div",null,[n[9]||(n[9]=s("h1",{id:"_1-java基础笔记",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-java基础笔记"},[s("span",null,"1-Java基础笔记")])],-1)),s("blockquote",null,[s("p",null,[s("a",v,[n[0]||(n[0]=a("Java 教程 | 菜鸟教程 (runoob.com)")),p(t)])])]),n[10]||(n[10]=e(`<h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><p>一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。Java 作为一种面向对象的编程语言，支持以下基本概念：</p><p>1、<strong>类（Class）</strong>：</p><ul><li>定义对象的蓝图，包括属性和方法。</li><li>示例：<code>public class Car { ... }</code></li></ul><p><strong>2、对象（Object）</strong>：</p><ul><li>类的实例，具有状态和行为。</li><li>示例：<code>Car myCar = new Car();</code></li></ul><p><strong>3、继承（Inheritance）</strong>：</p><ul><li>一个类可以继承另一个类的属性和方法。</li><li>示例：<code>public class Dog extends Animal { ... }</code></li></ul><p><strong>4、封装（Encapsulation）</strong>：</p><ul><li><p>将对象的状态（字段）私有化，通过公共方法访问。</p></li><li><p>示例：</p><pre><code>private String name; 
public String getName() { return name; }
</code></pre></li></ul><p><strong>5、多态（Polymorphism）</strong>：</p><ul><li>对象可以表现为多种形态，主要通过方法重载和方法重写实现。</li><li>示例： <ul><li>方法重载：<code>public int add(int a, int b) { ... }</code> 和 <code>public double add(double a, double b) { ... }</code></li><li>方法重写：<code>@Override public void makeSound() { System.out.println(&quot;Meow&quot;); }</code></li></ul></li></ul><p><strong>6、抽象（Abstraction）</strong>：</p><ul><li>使用抽象类和接口来定义必须实现的方法，不提供具体实现。</li><li>示例： <ul><li>抽象类：<code>public abstract class Shape { abstract void draw(); }</code></li><li>接口：<code>public interface Animal { void eat(); }</code></li></ul></li></ul><p><strong>7、接口（Interface）</strong>：</p><ul><li>定义类必须实现的方法，支持多重继承。</li><li>示例：<code>public interface Drivable { void drive(); }</code></li></ul><p><strong>8、方法（Method）</strong>：</p><ul><li>定义类的行为，包含在类中的函数。</li><li>示例：<code>public void displayInfo() { System.out.println(&quot;Info&quot;); }</code></li></ul><p><strong>9、方法重载（Method Overloading）</strong>：</p><ul><li><p>同一个类中可以有多个同名的方法，但参数不同。</p></li><li><p>示例：</p><pre><code>public class MathUtils {
    public int add(int a, int b) {
        return a + b;
    }

    public double add(double a, double b) {
        return a + b;
    }
}
</code></pre></li></ul><hr><p>下面看一个简单的 Java 程序，它将输出字符串 <em>Hello World</em></p><pre><code class="language-go">public class HelloWorld <span class="token punctuation">{</span>
    <span class="token comment">/* 第一个Java程序
     * 它将输出字符串 Hello World
     */</span>
    public static void <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 Hello World</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><figure><img src="`+i+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>下面将逐步介绍如何保存、编译以及运行这个程序：</p><ul><li>打开代码编辑器，把上面的代码添加进去；</li><li>把文件名保存为：<code>HelloWorld.java</code>；</li><li>打开 cmd 命令窗口，进入目标文件所在的位置，假设是 <code>C:\\</code></li><li>在命令行窗口输入<code> javac HelloWorld.java</code> 按下回车键编译代码。如果代码没有错误，cmd 命令提示符会进入下一行（假设环境变量都设置好了）。</li><li>再键输入<code>java HelloWorld</code>按下回车键就可以运行程序了</li></ul><p>你将会在窗口看到 Hello World</p><pre><code>$ javac HelloWorld.java
$ java HelloWorld 
Hello World
</code></pre><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释"><span>注释</span></a></h2><p>单行注释以双斜杠 <code>//</code> 开始</p><pre><code class="language-java"><span class="token comment">// 这是一个单行注释</span>
<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 初始化一个变量x为10</span>
</code></pre><p>多行注释以 <code>/*</code>开始，以<code>*/</code>结束：</p><pre><code class="language-java"><span class="token comment">/*
这是一个多行注释
可以用来注释多行代码
*/</span>
<span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// 初始化一个变量y为20</span>
</code></pre><p>文档注释以 <code>/**</code> 开始，以 <code>*/</code> 结束，通常出现在类、方法、字段等的声明前面，用于生成代码文档，这种注释可以被工具提取并生成 API 文档，如 JavaDoc。</p><pre><code class="language-java"><span class="token doc-comment comment">/**
 * 这是一个文档注释示例
 * 它通常包含有关类、方法或字段的详细信息
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
    <span class="token comment">// 类的成员和方法</span>
<span class="token punctuation">}</span>
</code></pre><p>文档注释的格式通常包含一些特定的标签，如 <code>@param</code>用于描述方法参数，<code>@return</code> 用于描述返回值，<code>@throws</code> 用于描述可能抛出的异常等等，这些标签有助于生成清晰的API文档，以便其他开发者能够更好地理解和使用你的代码。</p><h2 id="对象和类" tabindex="-1"><a class="header-anchor" href="#对象和类"><span>对象和类</span></a></h2><h3 id="java中的对象" tabindex="-1"><a class="header-anchor" href="#java中的对象"><span>Java中的对象</span></a></h3><p>拿一条狗来举例，它的状态有：名字、品种、颜色，行为有：叫、摇尾巴和跑。</p><p>对比现实对象和软件对象，它们之间十分相似。</p><p>软件对象也有状态和行为。软件对象的状态就是属性，行为通过方法体现。</p><p>在软件开发中，方法操作对象内部状态的改变，对象的相互调用也是通过方法来完成。</p><h3 id="java-中的类" tabindex="-1"><a class="header-anchor" href="#java-中的类"><span>Java 中的类</span></a></h3><p>类可以看成是创建 Java 对象的模板。</p><figure><img src="`+k+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>通过上图创建一个简单的类来理解下 Java 中类的定义：</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> breed<span class="token punctuation">;</span>
    <span class="token keyword">int</span> size<span class="token punctuation">;</span>
    <span class="token class-name">String</span> colour<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
 
    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>一个类可以包含以下类型变量：</p><ul><li><strong>局部变量</strong>：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</li><li><strong>成员变量</strong>：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</li><li><strong>类变量</strong>：类变量也声明在类中，方法体之外，但必须声明为 static 类型。</li></ul><p>一个类可以拥有多个方法，在上面的例子中：<code>eat()</code>、<code>run()</code>、<code>sleep()</code> 和 <code>name()</code> 都是 <code>Dog</code>类的方法。</p><h3 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法"><span>构造方法</span></a></h3><p>每个类都有构造方法。如果没有显式地为类定义构造方法，Java 编译器将会为该类提供一个默认构造方法。</p><p>在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。</p><p>下面是一个构造方法示例：</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Puppy</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Puppy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">public</span> <span class="token class-name">Puppy</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 这个构造器仅有一个参数：name</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="创建对象" tabindex="-1"><a class="header-anchor" href="#创建对象"><span>创建对象</span></a></h3><p>对象是根据类创建的。在Java中，使用关键字 new 来创建一个新的对象。创建对象需要以下三步：</p><ul><li><strong>声明</strong>：声明一个对象，包括对象名称和对象类型。</li><li><strong>实例化</strong>：使用关键字 new 来创建一个对象。</li><li><strong>初始化</strong>：使用 new 创建对象时，会调用构造方法初始化对象。</li></ul><p>下面是一个创建对象的例子：</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Puppy</span><span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token class-name">Puppy</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">//这个构造器仅有一个参数：name</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;小狗的名字是 : &quot;</span> <span class="token operator">+</span> name <span class="token punctuation">)</span><span class="token punctuation">;</span> 
   <span class="token punctuation">}</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">// 下面的语句将创建一个Puppy对象</span>
      <span class="token class-name">Puppy</span> myPuppy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Puppy</span><span class="token punctuation">(</span> <span class="token string">&quot;tommy&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>编译并运行上面的程序，会打印出下面的结果：</p><pre><code>小狗的名字是 : tommy
</code></pre><h3 id="访问实例变量和方法" tabindex="-1"><a class="header-anchor" href="#访问实例变量和方法"><span>访问实例变量和方法</span></a></h3><p>通过已创建的对象来访问成员变量和成员方法，如下所示：</p><pre><code class="language-java"><span class="token comment">/* 实例化对象 */</span>
<span class="token class-name">Object</span> referenceVariable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* 访问类中的变量 */</span>
referenceVariable<span class="token punctuation">.</span>variableName<span class="token punctuation">;</span>
<span class="token comment">/* 访问类中的方法 */</span>
referenceVariable<span class="token punctuation">.</span><span class="token function">methodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>使用 Object 类型声明变量只能在编译时访问 Object 类中的方法和属性，但在运行时，你可以通过强制类型转换将其转换为特定类型，以便访问特定类型的方法和属性。</p><p>下面的例子展示如何访问实例变量和调用成员方法：</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Puppy</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
 
    <span class="token comment">// 构造器</span>
    <span class="token keyword">public</span> <span class="token class-name">Puppy</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;小狗的名字是 : &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token comment">// 设置 age 的值</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token comment">// 获取 age 的值</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token comment">// 获取 name 的值</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token comment">// 主方法</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建对象</span>
        <span class="token class-name">Puppy</span> myPuppy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Puppy</span><span class="token punctuation">(</span><span class="token string">&quot;Tommy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">// 通过方法来设定 age</span>
        myPuppy<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">// 调用另一个方法获取 age</span>
        <span class="token keyword">int</span> age <span class="token operator">=</span> myPuppy<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;小狗的年龄为 : &quot;</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">// 也可以直接访问成员变量（通过 getter 方法）</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;变量值 : &quot;</span> <span class="token operator">+</span> myPuppy<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>编译并运行上面的程序，产生如下结果：</p><pre><code>小狗的名字是 : tommy
小狗的年龄为 : 2
变量值 : 2
</code></pre><h3 id="源文件声明规则" tabindex="-1"><a class="header-anchor" href="#源文件声明规则"><span>源文件声明规则</span></a></h3><p>在本节的最后部分，我们将学习源文件的声明规则。当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。</p><ul><li>一个源文件中只能有一个 public 类</li><li>一个源文件可以有多个非 public 类</li><li>源文件的名称应该和 public 类的类名保持一致。例如：源文件中 <code>public</code> 类的类名是 <code>Employee</code>，那么源文件应该命名为<code>Employee.java</code>。</li><li>如果一个类定义在某个包中，那么 <code>package</code> 语句应该在源文件的首行。</li><li>如果源文件包含 <code>import</code> 语句，那么应该放在 <code>package</code> 语句和类定义之间。如果没有 <code>package</code> 语句，那么 <code>import</code> 语句应该在源文件中最前面。</li><li><code>import</code> 语句和 <code>package</code> 语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。</li></ul>`,73)),s("p",null,[n[3]||(n[3]=a("类有若干种访问级别，并且类也分不同的类型：抽象类和 final 类等。除了上面提到的几种类型，Java 还有一些特殊的类，如：")),s("a",S,[n[1]||(n[1]=a("内部类")),p(t)]),n[4]||(n[4]=a("、")),s("a",q,[n[2]||(n[2]=a("匿名类")),p(t)]),n[5]||(n[5]=a("。"))]),n[11]||(n[11]=e(`<h3 id="java-包" tabindex="-1"><a class="header-anchor" href="#java-包"><span>Java 包</span></a></h3><p>包主要用来对类和接口进行分类。当开发 Java 程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。</p><h3 id="import-语句" tabindex="-1"><a class="header-anchor" href="#import-语句"><span>import 语句</span></a></h3><p>在 Java 中，如果给出一个完整的限定名，包括包名、类名，那么 Java 编译器就可以很容易地定位到源代码或者类。import 语句就是用来提供一个合理的路径，使得编译器可以找到某个类。</p><p>例如，下面的命令行将会命令编译器载入 <code>java_installation/java/io</code> 路径下的所有类</p><pre><code>import java.io.*;
</code></pre><h2 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span>基本数据类型</span></a></h2><h3 id="内置数据类型" tabindex="-1"><a class="header-anchor" href="#内置数据类型"><span>内置数据类型</span></a></h3><p>Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p><p>实际上，JAVA中还存在另外一种基本类型 void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作。</p><p>下表列出了 Java 各个类型的默认值：</p><table><thead><tr><th style="text-align:left;"><strong>数据类型</strong></th><th style="text-align:left;"><strong>默认值</strong></th></tr></thead><tbody><tr><td style="text-align:left;">byte</td><td style="text-align:left;">0</td></tr><tr><td style="text-align:left;">short</td><td style="text-align:left;">0</td></tr><tr><td style="text-align:left;">int</td><td style="text-align:left;">0</td></tr><tr><td style="text-align:left;">long</td><td style="text-align:left;">0L</td></tr><tr><td style="text-align:left;">float</td><td style="text-align:left;">0.0f</td></tr><tr><td style="text-align:left;">double</td><td style="text-align:left;">0.0d</td></tr><tr><td style="text-align:left;">char</td><td style="text-align:left;">&#39;u0000&#39;</td></tr><tr><td style="text-align:left;">String (or any object)</td><td style="text-align:left;">null</td></tr><tr><td style="text-align:left;">boolean</td><td style="text-align:left;">false</td></tr></tbody></table><h3 id="引用类型" tabindex="-1"><a class="header-anchor" href="#引用类型"><span>引用类型</span></a></h3><ul><li>在Java中，引用类型的变量非常类似于C/C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。</li><li>对象、数组都是引用数据类型。</li><li>所有引用类型的默认值都是null。</li><li>一个引用变量可以用来引用任何与之兼容的类型。</li><li>例子：Site site = new Site(&quot;Runoob&quot;)。</li></ul><h2 id="java-常量" tabindex="-1"><a class="header-anchor" href="#java-常量"><span>Java 常量</span></a></h2><p>常量在程序运行时是不能被修改的。</p><p>在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似：</p><pre><code>final double PI = 3.1415927;
</code></pre><p>虽然常量名也可以用小写，但为了便于识别，通常使用大写字母表示常量。</p><p>字面量可以赋给任何内置类型的变量。例如：</p><pre><code>byte a = 68;
char a = &#39;A&#39;
</code></pre><p>byte、int、long、和short都可以用十进制、16进制以及8进制的方式来表示。</p><p>当使用字面量的时候，前缀 <strong>0</strong> 表示 8 进制，而前缀 <strong>0x</strong> 代表 16 进制, 例如：</p><pre><code>int decimal = 100;
int octal = 0144;
int hexa =  0x64;
</code></pre><p>和其他语言一样，Java的字符串常量也是包含在两个引号之间的字符序列。下面是字符串型字面量的例子：</p><pre><code>&quot;Hello World&quot;
&quot;two\\nlines&quot;
&quot;\\&quot;This is in quotes\\&quot;&quot;
</code></pre><p>字符串常量和字符变量都可以包含任何 Unicode 字符。例如：</p><pre><code>char a = &#39;\\u0001&#39;;
String a = &quot;\\u0001&quot;;
</code></pre><p>Java语言支持一些特殊的转义字符序列。</p><table><thead><tr><th style="text-align:left;">符号</th><th style="text-align:left;">字符含义</th></tr></thead><tbody><tr><td style="text-align:left;"><code>\\n</code></td><td style="text-align:left;">换行 (0x0a)</td></tr><tr><td style="text-align:left;"><code>\\r</code></td><td style="text-align:left;">回车 (0x0d)</td></tr><tr><td style="text-align:left;"><code>\\f</code></td><td style="text-align:left;">换页符(0x0c)</td></tr><tr><td style="text-align:left;"><code>\\b</code></td><td style="text-align:left;">退格 (0x08)</td></tr><tr><td style="text-align:left;"><code>\\0</code></td><td style="text-align:left;">空字符 (0x0)</td></tr><tr><td style="text-align:left;"><code>\\s</code></td><td style="text-align:left;">空格 (0x20)</td></tr><tr><td style="text-align:left;"><code>\\t</code></td><td style="text-align:left;">制表符</td></tr><tr><td style="text-align:left;"><code>\\&quot;</code></td><td style="text-align:left;">双引号</td></tr><tr><td style="text-align:left;"><code>\\&#39;</code></td><td style="text-align:left;">单引号</td></tr><tr><td style="text-align:left;"><code>\\\\</code></td><td style="text-align:left;">反斜杠</td></tr><tr><td style="text-align:left;"><code>\\ddd</code></td><td style="text-align:left;">八进制字符 (ddd)</td></tr><tr><td style="text-align:left;"><code>\\uxxxx</code></td><td style="text-align:left;">16进制Unicode字符 (xxxx)</td></tr></tbody></table><hr><h2 id="自动类型转换" tabindex="-1"><a class="header-anchor" href="#自动类型转换"><span>自动类型转换</span></a></h2><p><strong>整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。</strong></p><p>转换从低级到高级。</p><pre><code>低  ------------------------------------&gt;  高

byte,short,char—&gt; int —&gt; long—&gt; float —&gt; double 
</code></pre><p>数据类型转换必须满足如下规则：</p><ul><li><ol><li>不能对boolean类型进行类型转换。</li></ol></li><li><ol start="2"><li>不能把对象类型转换成不相关类的对象。</li></ol></li><li><ol start="3"><li>在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</li></ol></li><li><ol start="4"><li>转换过程中可能导致溢出或损失精度，例如：</li></ol><pre><code>int i =128;   
byte b = (byte)i;
</code></pre><p>因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。</p></li><li><ol start="5"><li>浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如：</li></ol><pre><code>(int)23.7 == 23;        
(int)-45.89f == -45
</code></pre></li></ul><h3 id="自动类型转换-1" tabindex="-1"><a class="header-anchor" href="#自动类型转换-1"><span>自动类型转换</span></a></h3><p>必须满足转换前的数据类型的位数要低于转换后的数据类型，例如: short数据类型的位数为16位，就可以自动转换位数为32的int类型，同样float数据类型的位数为32，可以自动转换为64位的double类型。</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZiDongLeiZhuan</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">char</span> c1<span class="token operator">=</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span><span class="token comment">//定义一个char类型</span>
            <span class="token keyword">int</span> i1 <span class="token operator">=</span> c1<span class="token punctuation">;</span><span class="token comment">//char自动类型转换为int</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;char自动类型转换为int后的值等于&quot;</span><span class="token operator">+</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span><span class="token comment">//定义一个char类型</span>
            <span class="token keyword">int</span> i2 <span class="token operator">=</span> c2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//char 类型和 int 类型计算</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;char类型和int计算后的值等于&quot;</span><span class="token operator">+</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>运行结果为:</p><pre><code>char自动类型转换为int后的值等于97
char类型和int计算后的值等于66
</code></pre><p>**解析：**c1 的值为字符 <strong>a</strong> ,查 ASCII 码表可知对应的 int 类型值为 97， A 对应值为 65，所以 <strong>i2=65+1=66</strong>。</p><h3 id="强制类型转换" tabindex="-1"><a class="header-anchor" href="#强制类型转换"><span>强制类型转换</span></a></h3><ul><li><ol><li>条件是转换的数据类型必须是兼容的。</li></ol></li><li><ol start="2"><li>格式：(type)value type是要强制类型转换后的数据类型 实例：</li></ol><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForceTransform</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>i1<span class="token punctuation">;</span><span class="token comment">//强制类型转换为byte</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;int强制类型转换为byte后的值等于&quot;</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>运行结果：</p><pre><code>int强制类型转换为byte后的值等于123
</code></pre></li></ul><h3 id="隐含强制类型转换" tabindex="-1"><a class="header-anchor" href="#隐含强制类型转换"><span>隐含强制类型转换</span></a></h3><ul><li>整数的默认类型是 int。</li><li>小数默认是 double 类型浮点型，在定义 float 类型时必须在数字后面跟上 F 或者 f。</li></ul><h2 id="变量类型" tabindex="-1"><a class="header-anchor" href="#变量类型"><span>变量类型</span></a></h2><p>在 Java 语言中，所有的变量在使用前必须声明。</p><p>声明变量的基本格式如下：</p><pre><code class="language-java">type identifier <span class="token punctuation">[</span> <span class="token operator">=</span> value<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span> identifier <span class="token punctuation">[</span><span class="token operator">=</span> value<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>
</code></pre><p><strong>格式说明：</strong></p><ul><li>type -- 数据类型。</li><li>identifier -- 是变量名，可以使用逗号 <strong>,</strong> 隔开来声明多个同类型变量。</li></ul><p>以下列出了一些变量的声明实例。注意有些包含了初始化过程。</p><pre><code class="language-java"><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>         <span class="token comment">// 声明三个int型整数：a、 b、c</span>
<span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 声明三个整数并赋予初值</span>
<span class="token keyword">byte</span> z <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>         <span class="token comment">// 声明并初始化 z</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;runoob&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 声明并初始化字符串 s</span>
<span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span> <span class="token comment">// 声明了双精度浮点型变量 pi</span>
<span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token char">&#39;x&#39;</span><span class="token punctuation">;</span>        <span class="token comment">// 声明变量 x 的值是字符 &#39;x&#39;。</span>
</code></pre><p>Java 语言支持的变量类型有：</p><ul><li><p>**局部变量（Local Variables）：**局部变量是在方法、构造函数或块内部声明的变量，它们在声明的方法、构造函数或块执行结束后被销毁，局部变量在声明时需要初始化，否则会导致编译错误。</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exampleMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> localVar <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 局部变量</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></li><li><p>**实例变量（Instance Variables）：**实例变量是在类中声明，但在方法、构造函数或块之外，它们属于类的实例，每个类的实例都有自己的副本，如果不明确初始化，实例变量会被赋予默认值（数值类型为0，boolean类型为false，对象引用类型为null）。</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> instanceVar<span class="token punctuation">;</span> <span class="token comment">// 实例变量</span>
<span class="token punctuation">}</span>
</code></pre></li><li><p>**静态变量或类变量（Class Variables）：**类变量是在类中用 static 关键字声明的变量，它们属于类而不是实例，所有该类的实例共享同一个类变量的值，类变量在类加载时被初始化，而且只初始化一次。</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> classVar<span class="token punctuation">;</span> <span class="token comment">// 类变量</span>
<span class="token punctuation">}</span>
</code></pre></li><li><p>**参数变量（Parameters）：**参数是方法或构造函数声明中的变量，用于接收调用该方法或构造函数时传递的值，参数变量的作用域只限于方法内部。</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exampleMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> parameterVar<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 参数变量</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></li></ul><p><strong>常量和静态变量的区别</strong></p><p>常量也是与类相关的，但它是用 final 关键字修饰的变量，一旦被赋值就不能再修改。与静态变量不同的是，常量在编译时就已经确定了它的值，而静态变量的值可以在运行时改变。另外，常量通常用于存储一些固定的值，如数学常数、配置信息等，而静态变量通常用于存储可变的数据，如计数器、全局状态等。</p><p>总之，静态变量是与类相关的变量，具有唯一性和共享性，可以用于存储整个程序都需要使用的数据，但需要注意初始化时机和与常量的区别。</p><h2 id="变量命名规则" tabindex="-1"><a class="header-anchor" href="#变量命名规则"><span>变量命名规则</span></a></h2><p><strong>局部变量</strong></p><ul><li>使用驼峰命名法。</li><li>应该以小写字母开头。</li><li>变量名应该是描述性的，能够清晰地表示其用途。</li></ul><pre><code>int myLocalVariable;
</code></pre><p><strong>实例变量（成员变量）</strong></p><ul><li>使用驼峰命名法。</li><li>应该以小写字母开头。</li><li>变量名应该是描述性的，能够清晰地表示其用途。</li></ul><pre><code>private int myInstanceVariable;
</code></pre><p><strong>静态变量（类变量）</strong></p><ul><li>使用驼峰命名法，应该以小写字母开头。</li><li>通常也可以使用大写蛇形命名法，全大写字母，单词之间用下划线分隔。</li><li>变量名应该是描述性的，能够清晰地表示其用途。</li></ul><pre><code>// 使用驼峰命名法
public static int myStaticVariable;

// 使用大写蛇形命名法
public static final int MAX_SIZE = 100;
</code></pre><p><strong>常量</strong></p><ul><li>使用全大写字母，单词之间用下划线分隔。</li><li>常量通常使用 <code>final</code> 修饰。</li></ul><pre><code>public static final double PI = 3.14;
</code></pre><p><strong>参数</strong></p><ul><li>使用驼峰命名法。</li><li>应该以小写字母开头。</li><li>参数名应该是描述性的，能够清晰地表示其用途。</li></ul><pre><code>public void myMethod(int myParameter) {
    // 方法体
}
</code></pre><p><strong>类名</strong></p><ul><li>使用驼峰命名法。</li><li>应该以大写字母开头。</li><li>类名应该是描述性的，能够清晰地表示其用途。</li></ul><pre><code>public class MyClass {
    // 类的成员和方法
}
</code></pre><h2 id="java-运算符" tabindex="-1"><a class="header-anchor" href="#java-运算符"><span>Java 运算符</span></a></h2><h3 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span>算术运算符</span></a></h3><p>算术运算符用在数学表达式中，它们的作用和在数学中的作用一样。下表列出了所有的算术运算符。</p><p>表格中的实例假设整数变量A的值为10，变量B的值为20：</p><table><thead><tr><th style="text-align:left;">操作符</th><th style="text-align:left;">描述</th><th style="text-align:left;">例子</th></tr></thead><tbody><tr><td style="text-align:left;">+</td><td style="text-align:left;">加法 - 相加运算符两侧的值</td><td style="text-align:left;">A + B 等于 30</td></tr><tr><td style="text-align:left;">-</td><td style="text-align:left;">减法 - 左操作数减去右操作数</td><td style="text-align:left;">A – B 等于 -10</td></tr><tr><td style="text-align:left;">*</td><td style="text-align:left;">乘法 - 相乘操作符两侧的值</td><td style="text-align:left;">A * B等于200</td></tr><tr><td style="text-align:left;">/</td><td style="text-align:left;">除法 - 左操作数除以右操作数</td><td style="text-align:left;">B / A等于2</td></tr><tr><td style="text-align:left;">％</td><td style="text-align:left;">取余 - 左操作数除以右操作数的余数</td><td style="text-align:left;">B%A等于0</td></tr><tr><td style="text-align:left;">++</td><td style="text-align:left;">自增: 操作数的值增加1</td><td style="text-align:left;">B++ 或 ++B 等于 21（区别详见下文）</td></tr><tr><td style="text-align:left;">--</td><td style="text-align:left;">自减: 操作数的值减少1</td><td style="text-align:left;">B-- 或 --B 等于 19（区别详见下文）</td></tr></tbody></table><h3 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符"><span>关系运算符</span></a></h3><p>下表为Java支持的关系运算符</p><p>表格中的实例整数变量A的值为10，变量B的值为20：</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th><th style="text-align:left;">例子</th></tr></thead><tbody><tr><td style="text-align:left;">==</td><td style="text-align:left;">检查如果两个操作数的值是否相等，如果相等则条件为真。</td><td style="text-align:left;">（A == B）为假。</td></tr><tr><td style="text-align:left;">!=</td><td style="text-align:left;">检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td><td style="text-align:left;">(A != B) 为真。</td></tr><tr><td style="text-align:left;">&gt;</td><td style="text-align:left;">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td><td style="text-align:left;">（A&gt; B）为假。</td></tr><tr><td style="text-align:left;">&lt;</td><td style="text-align:left;">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td><td style="text-align:left;">（A &lt;B）为真。</td></tr><tr><td style="text-align:left;">&gt;=</td><td style="text-align:left;">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td><td style="text-align:left;">（A&gt; = B）为假。</td></tr><tr><td style="text-align:left;">&lt;=</td><td style="text-align:left;">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td><td style="text-align:left;">（A &lt;= B）为真。</td></tr></tbody></table><h3 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符"><span>位运算符</span></a></h3><p>Java定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。</p><p>位运算符作用在所有的位上，并且按位运算。假设a = 60，b = 13;它们的二进制格式表示将如下：</p><pre><code>A = 0011 1100
B = 0000 1101
-----------------
A&amp;B = 0000 1100
A | B = 0011 1101
A ^ B = 0011 0001
~A= 1100 0011
</code></pre><p>下表列出了位运算符的基本运算，假设整数变量 A 的值为 60 和变量 B 的值为 13：</p><table><thead><tr><th style="text-align:left;">操作符</th><th style="text-align:left;">描述</th><th style="text-align:left;">例子</th></tr></thead><tbody><tr><td style="text-align:left;">＆</td><td style="text-align:left;">如果相对应位都是1，则结果为1，否则为0</td><td style="text-align:left;">（A＆B），得到12，即0000 1100</td></tr><tr><td style="text-align:left;">|</td><td style="text-align:left;">如果相对应位都是 0，则结果为 0，否则为 1</td><td style="text-align:left;">（A | B）得到61，即 0011 1101</td></tr><tr><td style="text-align:left;">^</td><td style="text-align:left;">如果相对应位值相同，则结果为0，否则为1</td><td style="text-align:left;">（A ^ B）得到49，即 0011 0001</td></tr><tr><td style="text-align:left;">〜</td><td style="text-align:left;">按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</td><td style="text-align:left;">（〜A）得到-61，即1100 0011</td></tr><tr><td style="text-align:left;">&lt;&lt;</td><td style="text-align:left;">按位左移运算符。左操作数按位左移右操作数指定的位数。</td><td style="text-align:left;">A &lt;&lt; 2得到240，即 1111 0000</td></tr><tr><td style="text-align:left;">&gt;&gt;</td><td style="text-align:left;">按位右移运算符。左操作数按位右移右操作数指定的位数。</td><td style="text-align:left;">A &gt;&gt; 2得到15即 1111</td></tr><tr><td style="text-align:left;">&gt;&gt;&gt;</td><td style="text-align:left;">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td><td style="text-align:left;">A&gt;&gt;&gt;2得到15即0000 1111</td></tr></tbody></table><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h3><p>下表列出了逻辑运算符的基本运算，假设布尔变量A为真，变量B为假</p><table><thead><tr><th style="text-align:left;">操作符</th><th style="text-align:left;">描述</th><th style="text-align:left;">例子</th></tr></thead><tbody><tr><td style="text-align:left;">&amp;&amp;</td><td style="text-align:left;">称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td><td style="text-align:left;">（A &amp;&amp; B）为假。</td></tr><tr><td style="text-align:left;">| |</td><td style="text-align:left;">称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td><td style="text-align:left;">（A | | B）为真。</td></tr><tr><td style="text-align:left;">！</td><td style="text-align:left;">称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td><td style="text-align:left;">！（A &amp;&amp; B）为真。</td></tr></tbody></table><h3 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符"><span>赋值运算符</span></a></h3><p>下面是Java语言支持的赋值运算符：</p><table><thead><tr><th style="text-align:left;">操作符</th><th style="text-align:left;">描述</th><th style="text-align:left;">例子</th></tr></thead><tbody><tr><td style="text-align:left;">=</td><td style="text-align:left;">简单的赋值运算符，将右操作数的值赋给左侧操作数</td><td style="text-align:left;">C = A + B将把A + B得到的值赋给C</td></tr><tr><td style="text-align:left;">+ =</td><td style="text-align:left;">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td><td style="text-align:left;">C + = A等价于C = C + A</td></tr><tr><td style="text-align:left;">- =</td><td style="text-align:left;">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td><td style="text-align:left;">C - = A等价于C = C - A</td></tr><tr><td style="text-align:left;">* =</td><td style="text-align:left;">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td><td style="text-align:left;">C * = A等价于C = C * A</td></tr><tr><td style="text-align:left;">/ =</td><td style="text-align:left;">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td><td style="text-align:left;">C / = A，C 与 A 同类型时等价于 C = C / A</td></tr><tr><td style="text-align:left;">（％）=</td><td style="text-align:left;">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td><td style="text-align:left;">C％= A等价于C = C％A</td></tr><tr><td style="text-align:left;">&lt;&lt; =</td><td style="text-align:left;">左移位赋值运算符</td><td style="text-align:left;">C &lt;&lt; = 2等价于C = C &lt;&lt; 2</td></tr><tr><td style="text-align:left;">&gt;&gt; =</td><td style="text-align:left;">右移位赋值运算符</td><td style="text-align:left;">C &gt;&gt; = 2等价于C = C &gt;&gt; 2</td></tr><tr><td style="text-align:left;">＆=</td><td style="text-align:left;">按位与赋值运算符</td><td style="text-align:left;">C＆= 2等价于C = C＆2</td></tr><tr><td style="text-align:left;">^ =</td><td style="text-align:left;">按位异或赋值操作符</td><td style="text-align:left;">C ^ = 2等价于C = C ^ 2</td></tr><tr><td style="text-align:left;">| =</td><td style="text-align:left;">按位或赋值操作符</td><td style="text-align:left;">C | = 2等价于C = C | 2</td></tr></tbody></table><h3 id="条件运算符" tabindex="-1"><a class="header-anchor" href="#条件运算符"><span>条件运算符（?:）</span></a></h3><p>条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p><pre><code>variable x = (expression) ? value if true : value if false
</code></pre><h3 id="instanceof-运算符" tabindex="-1"><a class="header-anchor" href="#instanceof-运算符"><span>instanceof 运算符</span></a></h3><p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p><p>instanceof运算符使用格式如下：</p><pre><code>( Object reference variable ) instanceof  (class/interface type)
</code></pre><p>如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。</p><p>下面是一个例子：</p><pre><code>String name = &quot;James&quot;;
boolean result = name instanceof String; // 由于 name 是 String 类型，所以返回真
</code></pre><p>如果被比较的对象兼容于右侧类型，该运算符仍然返回 true。</p><h2 id="循环结构" tabindex="-1"><a class="header-anchor" href="#循环结构"><span>循环结构</span></a></h2><h3 id="while-循环" tabindex="-1"><a class="header-anchor" href="#while-循环"><span>while 循环</span></a></h3><p>while是最基本的循环，它的结构为：</p><pre><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span> 布尔表达式 <span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//循环内容</span>
<span class="token punctuation">}</span>
</code></pre><p>只要布尔表达式为 true，循环就会一直执行下去。</p><h3 id="do-while-循环" tabindex="-1"><a class="header-anchor" href="#do-while-循环"><span>do…while 循环</span></a></h3><p>对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。</p><p>do…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。</p><pre><code class="language-java"><span class="token keyword">do</span> <span class="token punctuation">{</span>
       <span class="token comment">//代码语句</span>
<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>**注意：**布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。</p><h3 id="for循环" tabindex="-1"><a class="header-anchor" href="#for循环"><span>for循环</span></a></h3><p>虽然所有循环结构都可以用 while 或者 do...while表示，但 Java 提供了另一种语句 —— for 循环，使一些循环结构变得更加简单。</p><p>for循环执行的次数是在执行前就确定的。语法格式如下：</p><pre><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化<span class="token punctuation">;</span> 布尔表达式<span class="token punctuation">;</span> 更新<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//代码语句</span>
<span class="token punctuation">}</span>
</code></pre><p>关于 for 循环有以下几点说明：</p><ul><li>最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。</li><li>然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。</li><li>执行一次循环后，更新循环控制变量。</li><li>再次检测布尔表达式。循环执行上面的过程。</li></ul><h3 id="增强-for-循环" tabindex="-1"><a class="header-anchor" href="#增强-for-循环"><span>增强 for 循环</span></a></h3><p>语法格式如下:</p><pre><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>声明语句 <span class="token operator">:</span> 表达式<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token comment">//代码句子</span>
<span class="token punctuation">}</span>
</code></pre><p>**声明语句：**声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p><p>**表达式：**表达式是要访问的数组名，或者是返回值为数组的方法。</p><h3 id="break-关键字" tabindex="-1"><a class="header-anchor" href="#break-关键字"><span>break 关键字</span></a></h3><p>break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。</p><p>break 跳出最里层的循环，并且继续执行该循环下面的语句。</p><p>break 的用法很简单，就是循环结构中的一条语句：</p><pre><code>break;
</code></pre><h3 id="continue-关键字" tabindex="-1"><a class="header-anchor" href="#continue-关键字"><span>continue 关键字</span></a></h3><p>continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。</p><p>在 for 循环中，continue 语句使程序立即跳转到更新语句。</p><p>在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。</p><p>continue 就是循环体中一条简单的语句：</p><pre><code>continue;
</code></pre><h2 id="条件语句" tabindex="-1"><a class="header-anchor" href="#条件语句"><span>条件语句</span></a></h2><h3 id="if-else语句" tabindex="-1"><a class="header-anchor" href="#if-else语句"><span>if...else语句</span></a></h3><pre><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token comment">//如果布尔表达式为true将执行的语句</span>
<span class="token punctuation">}</span>
</code></pre><p>或者</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
 
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
 
      <span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">&lt;</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;这是 if 语句&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;这是 else 语句&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="if-else-if-else-语句" tabindex="-1"><a class="header-anchor" href="#if-else-if-else-语句"><span>if...else if...else 语句</span></a></h3><p>if 语句后面可以跟 else if…else 语句，这种语句可以检测到多种可能的情况。</p><p>使用 if，else if，else 语句的时候，需要注意下面几点：</p><ul><li>if 语句至多有 1 个 else 语句，else 语句在所有的 else if 语句之后。</li><li>if 语句可以有若干个 else if 语句，它们必须在 else 语句之前。</li><li>一旦其中一个 else if 语句检测为 true，其他的 else if 以及 else 语句都将跳过执行。</li></ul><pre><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式 <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">//如果布尔表达式 1的值为true执行代码</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式 <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">//如果布尔表达式 2的值为true执行代码</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式 <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">//如果布尔表达式 3的值为true执行代码</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
   <span class="token comment">//如果以上布尔表达式都不为true执行代码</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="switch-case-语句" tabindex="-1"><a class="header-anchor" href="#switch-case-语句"><span>switch case 语句</span></a></h2><p><strong>switch case 执行时，一定会先进行匹配，匹配成功返回当前 case 的值，再根据是否有 break，判断是否继续输出，或是跳出判断。</strong></p><pre><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">case</span> value <span class="token operator">:</span>
       <span class="token comment">//语句</span>
       <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//可选</span>
    <span class="token keyword">case</span> value <span class="token operator">:</span>
       <span class="token comment">//语句</span>
       <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//可选</span>
    <span class="token comment">//你可以有任意数量的case语句</span>
    <span class="token keyword">default</span> <span class="token operator">:</span> <span class="token comment">//可选</span>
       <span class="token comment">//语句</span>
<span class="token punctuation">}</span>
</code></pre><figure><img src="`+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="number-math-类" tabindex="-1"><a class="header-anchor" href="#number-math-类"><span>Number &amp; Math 类</span></a></h2><p>一般地，当需要使用数字的时候，我们通常使用内置数据类型，如：<strong>byte、int、long、double</strong> 等。然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。为了解决这个问题，Java 语言为每一个内置数据类型提供了对应的包装类。所有的包装类**（Integer、Long、Byte、Double、Float、Short）**都是抽象类 Number 的子类。</p><table><thead><tr><th style="text-align:left;">包装类</th><th style="text-align:left;">基本数据类型</th></tr></thead><tbody><tr><td style="text-align:left;">Boolean</td><td style="text-align:left;">boolean</td></tr><tr><td style="text-align:left;">Byte</td><td style="text-align:left;">byte</td></tr><tr><td style="text-align:left;">Short</td><td style="text-align:left;">short</td></tr><tr><td style="text-align:left;">Integer</td><td style="text-align:left;">int</td></tr><tr><td style="text-align:left;">Long</td><td style="text-align:left;">long</td></tr><tr><td style="text-align:left;">Character</td><td style="text-align:left;">char</td></tr><tr><td style="text-align:left;">Float</td><td style="text-align:left;">float</td></tr><tr><td style="text-align:left;">Double</td><td style="text-align:left;">double</td></tr></tbody></table><figure><img src="'+d+`" alt="Java Number类" tabindex="0" loading="lazy"><figcaption>Java Number类</figcaption></figure><p>这种由编译器特别支持的包装称为装箱，所以当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为包装类。相似的，编译器也可以把一个对象拆箱为内置类型。Number 类属于 java.lang 包。</p><p>Java 的 Math 包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。Math 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用。</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span>  
    <span class="token punctuation">{</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;90 度的正弦值：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;0度的余弦值：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;60度的正切值：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">tan</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;1的反正切值： &quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">atan</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;π/2的角度值：&quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">toDegrees</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><p>下面的表中列出的是 Number &amp; Math 类常用的一些方法：</p><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">方法与描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;"><code>xxxValue()</code>将 Number 对象转换为xxx数据类型的值并返回。</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;"><code>compareTo()</code>将number对象与参数比较。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;"><code>equals()</code>判断number对象是否与参数相等。</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;"><code>valueOf()</code> 返回一个 Number 对象指定的内置数据类型</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;"><code>toString()</code> 以字符串形式返回值。</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;"><code>parseInt()</code>将字符串解析为int类型。</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;"><code>abs()</code> 返回参数的绝对值。</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;"><code>ceil()</code> 返回大于等于( &gt;= )给定参数的的最小整数，类型为双精度浮点型。</td></tr><tr><td style="text-align:left;">9</td><td style="text-align:left;"><code>floor()</code> 返回小于等于（&lt;=）给定参数的最大整数 。</td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;"><code>rint()</code> 返回与参数最接近的整数。返回类型为double。</td></tr><tr><td style="text-align:left;">11</td><td style="text-align:left;"><code>round()</code> 它表示<strong>四舍五入</strong>，算法为 <strong>Math.floor(x+0.5)</strong>，即将原来的数字加上 0.5 后再向下取整，所以，Math.round(11.5) 的结果为12，Math.round(-11.5) 的结果为-11。</td></tr><tr><td style="text-align:left;">12</td><td style="text-align:left;"><code>min()</code> 返回两个参数中的最小值。</td></tr><tr><td style="text-align:left;">13</td><td style="text-align:left;"><code>max()</code> 返回两个参数中的最大值。</td></tr><tr><td style="text-align:left;">14</td><td style="text-align:left;"><code>exp()</code> 返回自然数底数e的参数次方。</td></tr><tr><td style="text-align:left;">15</td><td style="text-align:left;"><code>log()</code> 返回参数的自然数底数的对数值。</td></tr><tr><td style="text-align:left;">16</td><td style="text-align:left;"><code>pow()</code> 返回第一个参数的第二个参数次方。</td></tr><tr><td style="text-align:left;">17</td><td style="text-align:left;"><code>sqrt()</code> 求参数的算术平方根。</td></tr><tr><td style="text-align:left;">18</td><td style="text-align:left;"><code>sin()</code> 求指定double类型参数的正弦值。</td></tr><tr><td style="text-align:left;">19</td><td style="text-align:left;"><code>cos()</code> 求指定double类型参数的余弦值。</td></tr><tr><td style="text-align:left;">20</td><td style="text-align:left;"><code>tan()</code> 求指定double类型参数的正切值。</td></tr><tr><td style="text-align:left;">21</td><td style="text-align:left;"><code>asin()</code>求指定double类型参数的反正弦值。</td></tr><tr><td style="text-align:left;">22</td><td style="text-align:left;"><code>acos()</code> 求指定double类型参数的反余弦值。</td></tr><tr><td style="text-align:left;">23</td><td style="text-align:left;"><code>atan()</code> 求指定double类型参数的反正切值。</td></tr><tr><td style="text-align:left;">24</td><td style="text-align:left;"><code>atan2()</code> 将笛卡尔坐标转换为极坐标，并返回极坐标的角度值。</td></tr><tr><td style="text-align:left;">25</td><td style="text-align:left;"><code>toDegrees()</code> 将参数转化为角度。</td></tr><tr><td style="text-align:left;">26</td><td style="text-align:left;"><code>toRadians()</code> 将角度转换为弧度。</td></tr><tr><td style="text-align:left;">27</td><td style="text-align:left;"><code>random()</code> 返回一个随机数。</td></tr></tbody></table><h2 id="character-类" tabindex="-1"><a class="header-anchor" href="#character-类"><span>Character 类</span></a></h2><p>Character 类用于对单个字符进行操作。</p><p>Character 类在对象中包装一个基本类型 <strong>char</strong> 的值</p><pre><code class="language-java"><span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
 
<span class="token comment">// Unicode 字符表示形式</span>
<span class="token keyword">char</span> uniChar <span class="token operator">=</span> <span class="token char">&#39;\\u039A&#39;</span><span class="token punctuation">;</span> 
 
<span class="token comment">// 字符数组</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span><span class="token punctuation">{</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>Java语言为内置数据类型char提供了包装类Character类。</p><p>Character类提供了一系列方法来操纵字符。你可以使用Character的构造方法创建一个Character类对象，例如：</p><pre><code class="language-java"><span class="token class-name">Character</span> ch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>在某些情况下，Java编译器会自动创建一个Character对象。例如，将一个char类型的参数传递给需要一个Character类型参数的方法时，那么编译器会自动地将char类型参数转换为Character对象。 这种特征称为装箱，反过来称为拆箱。</p><pre><code class="language-java"><span class="token comment">// 原始字符 &#39;a&#39; 装箱到 Character 对象 ch 中</span>
<span class="token class-name">Character</span> ch <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
 
<span class="token comment">// 原始字符 &#39;x&#39; 用 test 方法装箱</span>
<span class="token comment">// 返回拆箱的值到 &#39;c&#39;</span>
<span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token char">&#39;x&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h3 id="转义序列" tabindex="-1"><a class="header-anchor" href="#转义序列"><span>转义序列</span></a></h3><p>前面有反斜杠（\\）的字符代表转义字符，它对编译器来说是有特殊含义的。</p><p>下面列表展示了Java的转义序列：</p><table><thead><tr><th style="text-align:left;">转义序列</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">\\t</td><td style="text-align:left;">在文中该处插入一个tab键</td></tr><tr><td style="text-align:left;">\\b</td><td style="text-align:left;">在文中该处插入一个后退键</td></tr><tr><td style="text-align:left;">\\n</td><td style="text-align:left;">在文中该处换行</td></tr><tr><td style="text-align:left;">\\r</td><td style="text-align:left;">在文中该处插入回车</td></tr><tr><td style="text-align:left;">\\f</td><td style="text-align:left;">在文中该处插入换页符</td></tr><tr><td style="text-align:left;">&#39;</td><td style="text-align:left;">在文中该处插入单引号</td></tr><tr><td style="text-align:left;">&quot;</td><td style="text-align:left;">在文中该处插入双引号</td></tr><tr><td style="text-align:left;">\\</td><td style="text-align:left;">在文中该处插入反斜杠</td></tr></tbody></table><p>当打印语句遇到一个转义序列时，编译器可以正确地对其进行解释。以下实例转义双引号并输出：</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
 
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;访问\\&quot;菜鸟教程!\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="character-方法" tabindex="-1"><a class="header-anchor" href="#character-方法"><span>Character 方法</span></a></h3><table><thead><tr><th style="text-align:left;">方法与描述</th><th></th></tr></thead><tbody><tr><td style="text-align:left;"><code>isLetter()</code></td><td>是否是一个字母</td></tr><tr><td style="text-align:left;"><code>isDigit()</code></td><td>是否是一个数字字符</td></tr><tr><td style="text-align:left;"><code>isWhitespace()</code></td><td>是否是一个空白字符</td></tr><tr><td style="text-align:left;"><code>isUpperCase()</code></td><td>是否是大写字母</td></tr><tr><td style="text-align:left;"><code>isLowerCase() </code></td><td>是否是小写字母</td></tr><tr><td style="text-align:left;"><code>toUpperCase()</code></td><td>指定字母的大写形式</td></tr><tr><td style="text-align:left;"><code>toLowerCase()</code></td><td>指定字母的小写形式</td></tr><tr><td style="text-align:left;"><code>toString()</code></td><td>返回字符的字符串形式，字符串的长度仅为1</td></tr></tbody></table><h2 id="string-类" tabindex="-1"><a class="header-anchor" href="#string-类"><span>String 类</span></a></h2><p>Java 提供了 String 类来创建和操作字符串。</p><h3 id="创建字符串" tabindex="-1"><a class="header-anchor" href="#创建字符串"><span>创建字符串</span></a></h3><pre><code class="language-java"><span class="token comment">// 在代码中遇到字符串常量时，这里的值是 &quot;Runoob&quot;，编译器会使用该值创建一个 String 对象。</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;Runoob&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 或者使用构造函数创建字符串</span>
<span class="token class-name">String</span> str2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Runoob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>String 创建的字符串存储在公共池中，而 new 创建的字符串对象在堆上：</p><pre><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;Runoob&quot;</span><span class="token punctuation">;</span>              <span class="token comment">// String 直接创建</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;Runoob&quot;</span><span class="token punctuation">;</span>              <span class="token comment">// String 直接创建</span>
<span class="token class-name">String</span> s3 <span class="token operator">=</span> s1<span class="token punctuation">;</span>                    <span class="token comment">// 相同引用</span>
<span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Runoob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// String 对象创建</span>
<span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Runoob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// String 对象创建</span>
</code></pre><figure><img src="`+g+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>String 类有 11 种构造方法，这些方法提供不同的参数来初始化字符串，比如提供一个字符数组参数:</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo</span><span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> helloArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token char">&#39;r&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;u&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;n&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;b&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span> helloString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>helloArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> helloString <span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><blockquote><p>**注意:**String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了</p><p>如果需要对字符串做很多修改，那么应该选择使用<code>StringBuffer</code> &amp; <code>StringBuilder</code> 类</p></blockquote><h3 id="字符串长度" tabindex="-1"><a class="header-anchor" href="#字符串长度"><span>字符串长度</span></a></h3><p>用于获取有关对象的信息的方法称为访问器方法。String 类的一个访问器方法是 <code>length()</code> 方法，它返回字符串对象包含的字符数。</p><pre><code class="language-java">		<span class="token class-name">String</span> site <span class="token operator">=</span> <span class="token string">&quot;www.runoob.com&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> site<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h3 id="连接字符串" tabindex="-1"><a class="header-anchor" href="#连接字符串"><span>连接字符串</span></a></h3><pre><code class="language-java"><span class="token comment">// 使用concat() 方法</span>
string1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用加号</span>
string1 <span class="token operator">+</span> string2
</code></pre><h3 id="创建格式化字符串" tabindex="-1"><a class="header-anchor" href="#创建格式化字符串"><span>创建格式化字符串</span></a></h3><p>我们知道输出格式化数字可以使用 <code>printf()</code> 和 <code>format()</code> 方法。<code>String</code> 类使用静态方法 <code>format()</code> 返回一个<code>String</code> 对象而不是 <code>PrintStream</code> 对象。</p><p><code>String</code> 类的静态方法 <code>format()</code> 能用来创建可复用的格式化字符串，而不仅仅是用于一次打印输出。</p><pre><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;浮点型变量的值为 &quot;</span> <span class="token operator">+</span>
                  <span class="token string">&quot;%f, 整型变量的值为 &quot;</span> <span class="token operator">+</span>
                  <span class="token string">&quot; %d, 字符串变量的值为 &quot;</span> <span class="token operator">+</span>
                  <span class="token string">&quot;is %s&quot;</span><span class="token punctuation">,</span> floatVar<span class="token punctuation">,</span> intVar<span class="token punctuation">,</span> stringVar<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>或者</p><pre><code class="language-java"><span class="token class-name">String</span> fs<span class="token punctuation">;</span>
fs <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;浮点型变量的值为 &quot;</span> <span class="token operator">+</span>
                   <span class="token string">&quot;%f, 整型变量的值为 &quot;</span> <span class="token operator">+</span>
                   <span class="token string">&quot; %d, 字符串变量的值为 &quot;</span> <span class="token operator">+</span>
                   <span class="token string">&quot; %s&quot;</span><span class="token punctuation">,</span> floatVar<span class="token punctuation">,</span> intVar<span class="token punctuation">,</span> stringVar<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h3 id="string-方法" tabindex="-1"><a class="header-anchor" href="#string-方法"><span>String 方法</span></a></h3>`,205)),s("p",null,[s("a",j,[n[6]||(n[6]=a("String (Java SE 11 & JDK 11 ) (runoob.com)")),p(t)])]),n[12]||(n[12]=e('<h2 id="stringbuffer-和-stringbuilder-类" tabindex="-1"><a class="header-anchor" href="#stringbuffer-和-stringbuilder-类"><span>StringBuffer 和 StringBuilder 类</span></a></h2><p>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。</p><p>和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。</p><figure><img src="'+m+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>在使用 StringBuffer 类时，每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，所以如果需要对字符串进行修改推荐使用 StringBuffer。</li><li>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。</li><li>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。</li></ul><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunoobTest</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Runoob..&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">&quot;Java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        sb<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>以上实例编译运行结果如下：</p><pre><code>Runoob..
Runoob..!
Runoob..Java!
RunooJava!
</code></pre><figure><img src="`+y+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>更多内容：</p><ul><li>StringBuffer 类：https://www.runoob.com/manual/jdk11api/java.base/java/lang/StringBuffer.html</li><li>StringBuilder 类：https://www.runoob.com/manual/jdk11api/java.base/java/lang/StringBuilder.html</li></ul><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><h3 id="声明数组变量" tabindex="-1"><a class="header-anchor" href="#声明数组变量"><span>声明数组变量</span></a></h3><pre><code class="language-java">dataType<span class="token punctuation">[</span><span class="token punctuation">]</span> arrayRefVar<span class="token punctuation">;</span>   <span class="token comment">// 首选的方法</span>
 
或
 
dataType arrayRefVar<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 效果相同，但不是首选方法，这样是C语言的风格</span>
</code></pre><h3 id="创建数组" tabindex="-1"><a class="header-anchor" href="#创建数组"><span>创建数组</span></a></h3><p>Java语言使用new操作符来创建数组，语法如下：</p><pre><code>arrayRefVar = new dataType[arraySize];
</code></pre><p>上面的语法语句做了两件事：</p><ul><li>一、使用 <code>dataType[arraySize]</code> 创建了一个数组。</li><li>二、把新创建的数组的引用赋值给变量 <code>arrayRefVar</code>。</li></ul><p>数组变量的声明，和创建数组可以用一条语句完成，如下所示：</p><pre><code>dataType[] arrayRefVar = new dataType[arraySize];
</code></pre><p>另外，你还可以使用如下的方式创建数组。</p><pre><code>dataType[] arrayRefVar = {value0, value1, ..., valuek};
</code></pre><p>数组的元素是通过索引访问的。数组索引从 0 开始，所以索引值从 0 到 arrayRefVar.length-1。</p><h3 id="处理数组" tabindex="-1"><a class="header-anchor" href="#处理数组"><span>处理数组</span></a></h3><p>数组的元素类型和数组的大小都是确定的，所以当处理数组元素时候，我们通常使用基本循环或者 For-Each 循环。</p><pre><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>type element<span class="token operator">:</span> array<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="数组作为函数的参数" tabindex="-1"><a class="header-anchor" href="#数组作为函数的参数"><span>数组作为函数的参数</span></a></h3><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="数组作为函数的返回值" tabindex="-1"><a class="header-anchor" href="#数组作为函数的返回值"><span>数组作为函数的返回值</span></a></h3><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
 
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="多维数组" tabindex="-1"><a class="header-anchor" href="#多维数组"><span>多维数组</span></a></h3><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组，例如：</p><pre><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><p><strong>多维数组的动态初始化（以二维数组为例）</strong></p><pre><code class="language-java"><span class="token comment">// 直接为每一维分配空间，</span>
type<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> typeName <span class="token operator">=</span> <span class="token keyword">new</span> type<span class="token punctuation">[</span>typeLength1<span class="token punctuation">]</span><span class="token punctuation">[</span>typeLength2<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//二维数组 a 可以看成一个两行三列的数组。</span>

<span class="token comment">// 从最高维开始，分别为每一维分配空间</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Good&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;Luck&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;to&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;you&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h3 id="arrays-类" tabindex="-1"><a class="header-anchor" href="#arrays-类"><span>Arrays 类</span></a></h3><p><code>java.util.Arrays</code> 类能方便地操作数组，它提供的所有方法都是静态的。</p><p>具有以下功能：</p><ul><li>给数组赋值：通过 fill 方法。</li><li>对数组排序：通过 sort 方法,按升序。</li><li>比较数组：通过 equals 方法比较数组中元素值是否相等。</li><li>查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</li></ul><h2 id="日期时间" tabindex="-1"><a class="header-anchor" href="#日期时间"><span>日期时间</span></a></h2><p>java.util 包提供了 Date 类来封装当前的日期和时间。 Date 类提供两个构造函数来实例化 Date 对象。</p><p>第一个构造函数使用当前日期和时间来初始化对象。</p><pre><code class="language-java"><span class="token class-name">Date</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>
</code></pre><p>第二个构造函数接收一个参数，该参数是从 1970 年 1 月 1 日起的毫秒数。</p><pre><code class="language-java"><span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token keyword">long</span> millisec<span class="token punctuation">)</span>
</code></pre><p>Date 对象创建以后，可以调用下面的方法。</p><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">方法和描述</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>boolean after(Date date)</strong></td><td style="text-align:left;">若当调用此方法的Date对象在指定日期之后返回true,否则返回false。</td></tr><tr><td style="text-align:left;"><strong>boolean before(Date date)</strong></td><td style="text-align:left;">若当调用此方法的Date对象在指定日期之前返回true,否则返回false。</td></tr><tr><td style="text-align:left;"><strong>Object clone( )</strong></td><td style="text-align:left;">返回此对象的副本。</td></tr><tr><td style="text-align:left;"><strong>int compareTo(Date date)</strong></td><td style="text-align:left;">比较当调用此方法的Date对象和指定日期。两者相等时候返回0。调用对象在指定日期之前则返回负数。调用对象在指定日期之后则返回正数。</td></tr><tr><td style="text-align:left;"><strong>int compareTo(Object obj)</strong></td><td style="text-align:left;">若obj是Date类型则操作等同于compareTo(Date) 。否则它抛出ClassCastException。</td></tr><tr><td style="text-align:left;"><strong>boolean equals(Object date)</strong></td><td style="text-align:left;">当调用此方法的Date对象和指定日期相等时候返回true,否则返回false。</td></tr><tr><td style="text-align:left;"><strong>long getTime( )</strong></td><td style="text-align:left;">返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</td></tr><tr><td style="text-align:left;"><strong>int hashCode( )</strong></td><td style="text-align:left;">返回此对象的哈希码值。</td></tr><tr><td style="text-align:left;"><strong>void setTime(long time)</strong></td><td style="text-align:left;">用自1970年1月1日00:00:00 GMT以后time毫秒数设置时间和日期。</td></tr><tr><td style="text-align:left;"><strong>String toString( )</strong></td><td style="text-align:left;">把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)。</td></tr></tbody></table><h3 id="获取当前日期时间" tabindex="-1"><a class="header-anchor" href="#获取当前日期时间"><span>获取当前日期时间</span></a></h3><p>使用 Date 对象的 toString() 方法来打印当前日期和时间，</p><pre><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span>
  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateDemo</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// 初始化 Date 对象</span>
       <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
       <span class="token comment">// 使用 toString() 函数显示日期时间</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="日期比较" tabindex="-1"><a class="header-anchor" href="#日期比较"><span>日期比较</span></a></h3><p>Java使用以下三种方法来比较两个日期：</p><ul><li>使用 getTime() 方法获取两个日期（自1970年1月1日经历的毫秒数值），然后比较这两个值。</li><li>使用方法 before()，after() 和 equals()。例如，一个月的12号比18号早，则 new Date(99, 2, 12).before(new Date (99, 2, 18)) 返回true。</li><li>使用 compareTo() 方法，它是由 Comparable 接口定义的，Date 类实现了这个接口。</li></ul><h3 id="使用-simpledateformat-格式化日期" tabindex="-1"><a class="header-anchor" href="#使用-simpledateformat-格式化日期"><span>使用 SimpleDateFormat 格式化日期</span></a></h3><p>SimpleDateFormat 是一个以语言环境敏感的方式来格式化和分析日期的类。SimpleDateFormat 允许你选择任何用户自定义日期时间格式来运行。例如：</p><pre><code class="language-java"><span class="token keyword">import</span>  <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateDemo</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 
      <span class="token class-name">Date</span> dNow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">SimpleDateFormat</span> ft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span> <span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前时间为: &quot;</span> <span class="token operator">+</span> ft<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dNow<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="使用printf格式化日期" tabindex="-1"><a class="header-anchor" href="#使用printf格式化日期"><span>使用printf格式化日期</span></a></h3><p>printf 方法可以很轻松地格式化时间和日期。使用两个字母格式，它以 <strong>%t</strong> 开头并且以下面表格中的一个字母结尾。</p><ul><li>%tY：输出四位数的年份，例如：2023</li><li>%ty：输出两位数的年份，例如：23</li><li>%tm：输出两位数的月份，例如：02</li><li>%tB：输出月份的全名，例如：February</li><li>%tb：输出月份的缩写，例如：Feb</li><li>......</li></ul><pre><code class="language-java"><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%tY-%tm-%td %tH:%tM:%tS %tZ&quot;</span><span class="token punctuation">,</span> date<span class="token punctuation">,</span> date<span class="token punctuation">,</span> date<span class="token punctuation">,</span> date<span class="token punctuation">,</span> date<span class="token punctuation">,</span> date<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h3 id="解析字符串为时间" tabindex="-1"><a class="header-anchor" href="#解析字符串为时间"><span>解析字符串为时间</span></a></h3><p>SimpleDateFormat 类有一些附加的方法，特别是parse()，它试图按照给定的SimpleDateFormat 对象的格式化存储来解析字符串。</p><pre><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateDemo</span> <span class="token punctuation">{</span>
 
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">SimpleDateFormat</span> ft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span> <span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
      <span class="token class-name">String</span> input <span class="token operator">=</span> args<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&quot;1818-11-11&quot;</span> <span class="token operator">:</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
 
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>input <span class="token operator">+</span> <span class="token string">&quot; Parses as &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
      <span class="token class-name">Date</span> t<span class="token punctuation">;</span> 
 
      <span class="token keyword">try</span> <span class="token punctuation">{</span> 
          t <span class="token operator">=</span> ft<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span> 
          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> 
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Unparseable using &quot;</span> <span class="token operator">+</span> ft<span class="token punctuation">)</span><span class="token punctuation">;</span> 
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="java-休眠-sleep" tabindex="-1"><a class="header-anchor" href="#java-休眠-sleep"><span>Java 休眠(sleep)</span></a></h3><pre><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SleepDemo</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span> 
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
         <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 休眠3秒</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Got an exception!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h2><p><code>java.util.regex</code> 包是 Java 标准库中用于支持正则表达式操作的包。它包含了 Pattern 和 Matcher 类，</p><p><code>java.util.regex</code> 包主要包括以下三个类：</p><ul><li><p>Pattern 类：</p><p>pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。</p></li><li><p>Matcher 类：</p><p>Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。</p></li><li><p>PatternSyntaxException：</p><p>PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</p></li></ul><pre><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
 
<span class="token keyword">class</span> <span class="token class-name">RegexExample1</span><span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">&quot;I am noob &quot;</span> <span class="token operator">+</span>
        <span class="token string">&quot;from runoob.com.&quot;</span><span class="token punctuation">;</span>
 
      <span class="token class-name">String</span> pattern <span class="token operator">=</span> <span class="token string">&quot;.*runoob.*&quot;</span><span class="token punctuation">;</span>
 
      <span class="token keyword">boolean</span> isMatch <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;字符串中是否包含了 &#39;runoob&#39; 子字符串? &quot;</span> <span class="token operator">+</span> isMatch<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><p>Java方法是语句的集合，它们在一起执行一个功能。</p><ul><li>方法是解决一类问题的步骤的有序组合</li><li>方法包含于类或对象中</li><li>方法在程序中被创建，在其他地方被引用</li></ul><h3 id="方法的优点" tabindex="-1"><a class="header-anchor" href="#方法的优点"><span>方法的优点</span></a></h3><ul><li><ol><li>使程序变得更简短而清晰。</li></ol></li><li><ol start="2"><li>有利于程序维护。</li></ol></li><li><ol start="3"><li>可以提高程序开发的效率。</li></ol></li><li><ol start="4"><li>提高了代码的重用性。</li></ol></li></ul><h3 id="方法的命名规则" tabindex="-1"><a class="header-anchor" href="#方法的命名规则"><span>方法的命名规则</span></a></h3><ul><li>1.方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头写，不使用连接符。例如：<code>addPerson</code>。</li><li>2.下划线可能出现在 JUnit 测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：<code>test&lt;MethodUnderTest&gt;_&lt;state&gt;</code>，例如 <code>testPop_emptyStack</code>。</li></ul><h3 id="方法的定义" tabindex="-1"><a class="header-anchor" href="#方法的定义"><span>方法的定义</span></a></h3><p>一般情况下，定义一个方法包含以下语法：</p><pre><code class="language-java">修饰符 返回值类型 方法名<span class="token punctuation">(</span>参数类型 参数名<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    方法体
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">return</span> 返回值<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>方法包含一个方法头和一个方法体。下面是一个方法的所有部分：</p><ul><li>**修饰符：**修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。</li></ul><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publicMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 公共方法可以被任何类访问</span>
<span class="token punctuation">}</span>

<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">protectedMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 受保护方法可以被同一包内的类或者子类访问</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">defaultMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 默认方法可以被同一包内的类访问</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">privateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 私有方法只能被同一个类中的其他方法访问</span>
<span class="token punctuation">}</span>
</code></pre><ul><li><strong>返回值类型 ：<strong>方法可能会返回值。returnValueType 是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType 是关键字</strong>void</strong>。</li><li>**方法名：**是方法的实际名称。方法名和参数表共同构成方法签名。</li><li>**参数类型：**参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</li><li>**方法体：**方法体包含具体的语句，定义该方法的功能。</li></ul><figure><img src="`+h+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如：</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token keyword">int</span> birthday<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><p>参数可以有多个：</p><pre><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">interest</span><span class="token punctuation">(</span><span class="token keyword">float</span> principal<span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><p><strong>注意：</strong> 在一些其它语言中方法指过程和函数。一个返回非void类型返回值的方法称为函数；一个返回void类型返回值的方法叫做过程。</p><h3 id="方法调用" tabindex="-1"><a class="header-anchor" href="#方法调用"><span>方法调用</span></a></h3><p>Java 支持两种调用方法的方式，根据方法是否返回值来选择。当程序调用一个方法时，程序的控制权交给了被调用的方法。当被调用方法的返回语句执行或者到达方法体闭括号时候交还控制权给程序。</p><p>当方法返回一个值的时候，方法调用通常被当做一个值。例如：</p><pre><code class="language-java"><span class="token keyword">int</span> larger <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>如果方法返回值是void，方法调用一定是一条语句。例如，方法println返回void。下面的调用是个语句：</p><pre><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;欢迎访问菜鸟教程！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h3 id="方法的重载" tabindex="-1"><a class="header-anchor" href="#方法的重载"><span>方法的重载</span></a></h3><pre><code class="language-java"> <span class="token doc-comment comment">/** 返回两个整数变量较大的值 */</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> result<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">&gt;</span> num2<span class="token punctuation">)</span>
         result <span class="token operator">=</span> num1<span class="token punctuation">;</span>
      <span class="token keyword">else</span>
         result <span class="token operator">=</span> num2<span class="token punctuation">;</span>
 
      <span class="token keyword">return</span> result<span class="token punctuation">;</span> 
   <span class="token punctuation">}</span>
</code></pre><p>上面使用的max方法仅仅适用于int型数据。但如果你想得到两个浮点类型数据的最大值呢？</p><p>解决方法是创建另一个有相同名字但参数不同的方法，如下面代码所示：</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span> num1<span class="token punctuation">,</span> <span class="token keyword">double</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">&gt;</span> num2<span class="token punctuation">)</span>
    <span class="token keyword">return</span> num1<span class="token punctuation">;</span>
  <span class="token keyword">else</span>
    <span class="token keyword">return</span> num2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>如果你调用max方法时传递的是int型参数，则 int型参数的max方法就会被调用；如果传递的是double型参数，则double类型的max方法体会被调用，这叫做方法重载；就是说一个类的两个方法拥有相同的名字，但是有不同的参数列表。Java编译器根据方法签名判断哪个方法应该被调用。</p><p>方法重载可以让程序更清晰易读。执行密切相关任务的方法应该使用相同的名字。重载的方法必须拥有不同的参数列表。你不能仅仅依据修饰符或者返回类型的不同来重载方法。</p><h3 id="变量作用域" tabindex="-1"><a class="header-anchor" href="#变量作用域"><span>变量作用域</span></a></h3><p>变量的范围是程序中该变量可以被引用的部分。方法内定义的变量被称为局部变量。局部变量的作用范围从声明开始，直到包含它的块结束。局部变量必须声明才可以使用。</p><p>方法的参数范围涵盖整个方法。参数实际上是一个局部变量。for循环的初始化部分声明的变量，其作用范围在整个循环。但循环体内声明的变量其适用范围是从它声明到循环体结束。它包含如下所示的变量声明：</p><figure><img src="`+f+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>你可以在一个方法里，不同的非嵌套块中多次声明一个具有相同的名称局部变量，但你不能在嵌套块内两次声明局部变量。</p><h3 id="命令行参数的使用" tabindex="-1"><a class="header-anchor" href="#命令行参数的使用"><span>命令行参数的使用</span></a></h3><p>命令行参数是在执行程序时候紧跟在程序名字后面的信息。</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommandLine</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span> 
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;args[&quot;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&quot;]: &quot;</span> <span class="token operator">+</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>结果</p><pre><code class="language-bash">$ javac CommandLine.java 
$ <span class="token function">java</span> CommandLine this is a <span class="token builtin class-name">command</span> line <span class="token number">200</span> <span class="token parameter variable">-100</span>
args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>: this
args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: is
args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>: a
args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>: <span class="token builtin class-name">command</span>
args<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>: line
args<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>: <span class="token number">200</span>
args<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>: <span class="token parameter variable">-100</span>

</code></pre><h3 id="构造方法-1" tabindex="-1"><a class="header-anchor" href="#构造方法-1"><span>构造方法</span></a></h3><p>当一个对象被创建时候，构造方法用来初始化该对象。构造方法和它所在类的名字相同，但构造方法没有返回值。通常会使用构造方法给一个类的实例变量赋初值，或者执行其它必要的步骤来创建一个完整的对象。</p><p>不管你是否自定义构造方法，所有的类都有构造方法，因为 Java 自动提供了一个默认构造方法，默认构造方法的访问修饰符和类的访问修饰符相同(类为 public，构造函数也为 public；类改为 protected，构造函数也改为 protected)。一旦你定义了自己的构造方法，默认构造方法就会失效。</p><pre><code class="language-java"><span class="token comment">// 一个简单的构造函数</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> x<span class="token punctuation">;</span>
 
  <span class="token comment">// 以下是构造函数</span>
  <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    x <span class="token operator">=</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>可以像下面这样调用构造方法来初始化一个对象：</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsDemo</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MyClass</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MyClass</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> t2<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="可变参数" tabindex="-1"><a class="header-anchor" href="#可变参数"><span>可变参数</span></a></h3><p>JDK 1.5 开始，Java支持传递同类型的可变参数给一个方法。</p><p>方法的可变参数的声明如下所示：</p><pre><code class="language-java">typeName<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterName
</code></pre><p>在方法声明中，在指定参数类型后加一个省略号(...) 。</p><p><strong>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。</strong></p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VarargsDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用可变参数的方法</span>
        <span class="token function">printMax</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">56.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printMax</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printMax</span><span class="token punctuation">(</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;No argument passed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
 
        <span class="token keyword">double</span> result <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>  numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span>  result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result <span class="token operator">=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;The max value is &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="finalize-方法" tabindex="-1"><a class="header-anchor" href="#finalize-方法"><span>finalize() 方法</span></a></h3><p>Java 允许定义这样的方法，它在对象被垃圾收集器析构(回收)之前调用，这个方法叫做 finalize( )，它用来清除回收对象。例如，你可以使用 finalize() 来确保一个对象打开的文件被关闭了。</p><p>在 finalize() 方法里，你必须指定在对象销毁时候要执行的操作。</p><pre><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token comment">// 在这里终结代码</span>
<span class="token punctuation">}</span>
</code></pre><p>关键字 protected 是一个限定符，它确保 finalize() 方法不会被该类以外的代码调用。</p><p>当然，Java 的内存回收可以由 JVM 来自动完成。如果你手动使用，则可以使用上面的方法。</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalizationDemo</span> <span class="token punctuation">{</span>  
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token class-name">Cake</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cake</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">Cake</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cake</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">Cake</span> c3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cake</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
      
    c2 <span class="token operator">=</span> c3 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用Java垃圾收集器</span>
  <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  
 
<span class="token keyword">class</span> <span class="token class-name">Cake</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span> <span class="token punctuation">{</span>  
  <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>  
  <span class="token keyword">public</span> <span class="token class-name">Cake</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>  
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Cake Object &quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&quot;is created&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>  
    
  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Throwable</span> <span class="token punctuation">{</span>  
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Cake Object &quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&quot;is disposed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><h2 id="流-stream-、文件-file-和io" tabindex="-1"><a class="header-anchor" href="#流-stream-、文件-file-和io"><span>流(Stream)、文件(File)和IO</span></a></h2><p>Java.io 包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。Java.io 包中的流支持很多种格式，比如：基本类型、对象、本地化字符集等等。</p><p>一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。</p><h3 id="读取控制台输入" tabindex="-1"><a class="header-anchor" href="#读取控制台输入"><span>读取控制台输入</span></a></h3><p>Java 的控制台输入由 System.in 完成。为了获得一个绑定到控制台的字符流，你可以把 System.in 包装在一个 BufferedReader 对象中来创建一个字符流。</p><p>下面是创建 BufferedReader 的基本语法：</p><pre><code class="language-java"><span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> 
                      <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>BufferedReader 对象创建后，我们便可以使用 read() 方法从控制台读取一个字符，或者用 readLine() 方法读取一个字符串。它的语法如下：</p><pre><code class="language-java"><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>
</code></pre><p>每次调用 read() 方法，它从输入流读取一个字符并把该字符作为整数值返回。 当流结束的时候返回 -1。该方法抛出 IOException。</p><p>下面的程序示范了用 read() 方法从控制台不断读取字符直到用户输入 <strong>q</strong>。</p><pre><code class="language-java"><span class="token comment">//使用 BufferedReader 在控制台读取字符</span>
 
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BRRead</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span> c<span class="token punctuation">;</span>
        <span class="token comment">// 使用 System.in 创建 BufferedReader</span>
        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;输入字符, 按下 &#39;q&#39; 键退出。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 读取字符</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> br<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token char">&#39;q&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>从标准输入读取一个字符串需要使用 BufferedReader 的 readLine() 方法。它的一般格式是：</p><pre><code class="language-java"><span class="token class-name">String</span> <span class="token function">readLine</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>
</code></pre><p>下面的程序读取和显示字符行直到你输入了单词&quot;end&quot;。</p><pre><code class="language-java"><span class="token comment">//使用 BufferedReader 在控制台读取字符</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BRReadLines</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用 System.in 创建 BufferedReader</span>
        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Enter lines of text.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Enter &#39;end&#39; to quit.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            str <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>也可以使用 Java Scanner类来获取控制台的输入。</p><pre><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsoleInputExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建一个Scanner对象，用于接收控制台输入</span>
        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 提示用户输入信息</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入您的名字：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 读取用户输入的字符串</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 提示用户输入年龄</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;请输入您的年龄：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 读取用户输入的整数</span>
        <span class="token keyword">int</span> age <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 显示用户输入的信息</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;您的名字是：&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;您的年龄是：&quot;</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 关闭Scanner对象</span>
        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="控制台输出" tabindex="-1"><a class="header-anchor" href="#控制台输出"><span>控制台输出</span></a></h3><p>在此前已经介绍过，控制台的输出由 print( ) 和 println() 完成。这些方法都由类 PrintStream 定义，System.out 是该类对象的一个引用。</p><p>PrintStream 继承了 OutputStream类，并且实现了方法 write()。这样，write() 也可以用来往控制台写操作。</p><pre><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
 
<span class="token comment">//演示 System.out.write().</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WriteDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> b<span class="token punctuation">;</span>
        b <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="读写文件" tabindex="-1"><a class="header-anchor" href="#读写文件"><span>读写文件</span></a></h3><p>如前所述，一个流被定义为一个数据序列。输入流用于从源读取数据，输出流用于向目标写数据。</p><p>下图是一个描述输入流和输出流的类层次图。</p>`,159)),s("figure",null,[s("a",C,[n[7]||(n[7]=s("img",{src:w,alt:"img",tabindex:"0",loading:"lazy"},null,-1)),p(t)]),n[8]||(n[8]=s("figcaption",null,"img",-1))]),n[13]||(n[13]=e(`<p>下面将要讨论的两个重要的流是 <strong>FileInputStream</strong> 和 <strong>FileOutputStream</strong>。</p><h3 id="fileinputstream" tabindex="-1"><a class="header-anchor" href="#fileinputstream"><span>FileInputStream</span></a></h3><p>该流用于从文件读取数据，它的对象可以用关键字 new 来创建。</p><p>有多种构造方法可用来创建对象。</p><p>可以使用字符串类型的文件名来创建一个输入流对象来读取文件：</p><pre><code class="language-java"><span class="token class-name">InputStream</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;C:/java/hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>也可以使用一个文件对象来创建一个输入流对象来读取文件。我们首先得使用 File() 方法来创建一个文件对象：</p><pre><code class="language-java"><span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;C:/java/hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>创建了InputStream对象，就可以使用下面的方法来读取流或者进行其他的流操作。</p><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><code>public void close() throws IOException{}</code></td><td style="text-align:left;">关闭此文件输入流并释放与此流有关的所有系统资源。抛出IOException异常。</td></tr><tr><td style="text-align:left;"><code>protected void finalize()throws IOException {}</code></td><td style="text-align:left;">这个方法清除与该文件的连接。确保在不再引用文件输入流时调用其 close 方法。抛出IOException异常。</td></tr><tr><td style="text-align:left;"><code>public int read(int r)throws IOException{}</code></td><td style="text-align:left;">这个方法从 InputStream 对象读取指定字节的数据。返回为整数值。返回下一字节数据，如果已经到结尾则返回-1。</td></tr><tr><td style="text-align:left;"><code>public int read(byte[] r) throws IOException{}</code></td><td style="text-align:left;">这个方法从输入流读取r.length长度的字节。返回读取的字节数。如果是文件结尾则返回-1。</td></tr><tr><td style="text-align:left;"><code>public int available() throws IOException{}</code></td><td style="text-align:left;">返回下一次对此输入流调用的方法可以不受阻塞地从此输入流读取的字节数。返回一个整数值。</td></tr></tbody></table><h3 id="fileoutputstream" tabindex="-1"><a class="header-anchor" href="#fileoutputstream"><span>FileOutputStream</span></a></h3><p>该类用来创建一个文件并向文件中写数据。</p><p>如果该流在打开文件进行输出前，目标文件不存在，那么该流会创建该文件。</p><p>有两个构造方法可以用来创建 FileOutputStream 对象。</p><p>使用字符串类型的文件名来创建一个输出流对象：</p><pre><code class="language-java"><span class="token class-name">OutputStream</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;C:/java/hello&quot;</span><span class="token punctuation">)</span>
</code></pre><p>也可以使用一个文件对象来创建一个输出流来写文件。我们首先得使用File()方法来创建一个文件对象：</p><pre><code class="language-java"><span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;C:/java/hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">OutputStream</span> fOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>创建OutputStream 对象完成后，就可以使用下面的方法来写入流或者进行其他的流操作。</p><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;"><strong>方法及描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><code>public void close() throws IOException{}</code></td><td style="text-align:left;">关闭此文件输入流并释放与此流有关的所有系统资源。抛出IOException异常。</td></tr><tr><td style="text-align:left;"><code>protected void finalize()throws IOException {}</code></td><td style="text-align:left;">这个方法清除与该文件的连接。确保在不再引用文件输入流时调用其 close 方法。抛出IOException异常。</td></tr><tr><td style="text-align:left;"><code>public void write(int w)throws IOException{}</code></td><td style="text-align:left;">这个方法把指定的字节写到输出流中。</td></tr><tr><td style="text-align:left;"><code>public void write(byte[] w)</code></td><td style="text-align:left;">把指定数组中w.length长度的字节写到OutputStream中。</td></tr></tbody></table><h3 id="文件和i-o" tabindex="-1"><a class="header-anchor" href="#文件和i-o"><span>文件和I/O</span></a></h3><p>还有一些关于文件和I/O的类，我们也需要知道：</p><ul><li>File Class(类)</li><li>FileReader Class(类)</li><li>FileWriter Class(类)</li></ul><h3 id="java中的目录" tabindex="-1"><a class="header-anchor" href="#java中的目录"><span>Java中的目录</span></a></h3><p>File类中有两个方法可以用来创建文件夹：</p><ul><li>**mkdir( )**方法创建一个文件夹，成功则返回true，失败则返回false。失败表明File对象指定的路径已经存在，或者由于整个路径还不存在，该文件夹不能被创建。</li><li>**mkdirs()**方法创建一个文件夹和它的所有父文件夹。</li></ul><p>下面的例子创建 &quot;/tmp/user/java/bin&quot;文件夹：</p><pre><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateDir</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> dirname <span class="token operator">=</span> <span class="token string">&quot;/tmp/user/java/bin&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">File</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dirname<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 现在创建目录</span>
        d<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>目录其实就是一个 File 对象，它包含其他文件和文件夹。如果创建一个 File 对象并且它是一个目录，那么调用 isDirectory() 方法会返回 true。可以通过调用该对象上的 list() 方法，来提取它包含的文件和文件夹的列表。</p><p>下面展示的例子说明如何使用 list() 方法来检查一个文件夹中包含的内容：</p><pre><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirList</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> dirname <span class="token operator">=</span> <span class="token string">&quot;/tmp&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dirname<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;目录 &quot;</span> <span class="token operator">+</span> dirname<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dirname <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; 是一个目录&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot; 是一个文件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dirname <span class="token operator">+</span> <span class="token string">&quot; 不是一个目录&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>删除文件可以使用 <strong>java.io.File.delete()</strong> 方法。需要注意的是当删除某一目录时，必须保证该目录下没有其他文件才能正确删除，否则将删除失败。</p><pre><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeleteFileDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里修改为自己的测试目录</span>
        <span class="token class-name">File</span> folder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/tmp/java/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">deleteFolder</span><span class="token punctuation">(</span>folder<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token comment">// 删除文件及目录</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deleteFolder</span><span class="token punctuation">(</span><span class="token class-name">File</span> folder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> folder<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>files <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> f <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">deleteFolder</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    f<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        folder<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="scanner-类" tabindex="-1"><a class="header-anchor" href="#scanner-类"><span>Scanner 类</span></a></h2><p>可以通过 Scanner 类来获取用户的输入。</p><pre><code class="language-java"><span class="token class-name">Scanner</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>接下来我们演示一个最简单的数据输入，并通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要 使用 hasNext 与 hasNextLine 判断是否还有输入的数据：</p><pre><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span> 
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScannerDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 从键盘接收数据</span>
 
        <span class="token comment">// next方式接收字符串</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;next方式接收：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断是否还有输入</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>scan<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> str1 <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;输入的数据为：&quot;</span> <span class="token operator">+</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        scan<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>执行以上程序输出结果为：</p><pre><code>$ javac ScannerDemo.java
$ java ScannerDemo
next方式接收：
runoob com
输入的数据为：runoob
</code></pre><p>可以看到 com 字符串并未输出，接下来我们看 nextLine。</p><pre><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScannerDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 从键盘接收数据</span>
 
        <span class="token comment">// nextLine方式接收字符串</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;nextLine方式接收：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断是否还有输入</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>scan<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> str2 <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;输入的数据为：&quot;</span> <span class="token operator">+</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        scan<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>执行以上程序输出结果为：</p><pre><code>$ javac ScannerDemo.java
$ java ScannerDemo
nextLine方式接收：
runoob com
输入的数据为：runoob com
</code></pre><p>next():</p><ul><li>1、一定要读取到有效字符后才可以结束输入。</li><li>2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。</li><li>3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li><li>next() 不能得到带有空格的字符串。</li></ul><p>nextLine()：</p><ul><li>1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。</li><li>2、可以获得空白。</li></ul><p>如果要输入 int 或 float 类型的数据，在 Scanner 类中也有支持，但是在输入之前最好先使用 hasNextXxx() 方法进行验证，再使用 nextXxx() 来读取</p><h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h2><p>要理解 Java 异常处理是如何工作的，你需要掌握以下三种类型的异常：</p><ul><li><p>**检查性异常：**最具代表的检查性异常是用户错误或问题引起的异常，这些异常在编译时强制要求程序员处理。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</p><p>这类异常通常使用 <strong>try-catch</strong> 块来捕获并处理异常，或者在方法声明中使用 <strong>throws</strong> 子句声明方法可能抛出的异常。</p><pre><code>try {
    // 可能会抛出异常的代码
} catch (IOException e) {
    // 处理异常的代码
}
</code></pre><p>或者：</p><pre><code>public void readFile() throws IOException {
    // 可能会抛出IOException的代码
}
</code></pre></li><li><p><strong>运行时异常：</strong> 这些异常在编译时不强制要求处理，通常是由程序中的错误引起的，例如 NullPointerException、ArrayIndexOutOfBoundsException 等，这类异常可以选择处理，但并非强制要求。</p><pre><code>try {
    // 可能会抛出异常的代码
} catch (NullPointerException e) {
    // 处理异常的代码
}
</code></pre></li><li><p><strong>错误：</strong> 错误不是异常，而是脱离程序员控制的问题，错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。</p></li></ul><p>Java 提供了以下关键字和类来支持异常处理：</p><ul><li><strong>try</strong>：用于包裹可能会抛出异常的代码块。</li><li><strong>catch</strong>：用于捕获异常并处理异常的代码块。</li><li><strong>finally</strong>：用于包含无论是否发生异常都需要执行的代码块。</li><li><strong>throw</strong>：用于手动抛出异常。</li><li><strong>throws</strong>：用于在方法声明中指定方法可能抛出的异常。</li><li><strong>Exception</strong>类：是所有异常类的父类，它提供了一些方法来获取异常信息，如 <strong>getMessage()、printStackTrace()</strong> 等。</li></ul><h3 id="exception-类的层次" tabindex="-1"><a class="header-anchor" href="#exception-类的层次"><span>Exception 类的层次</span></a></h3><p>所有的异常类是从 java.lang.Exception 类继承的子类。</p><p>Exception 类是 Throwable 类的子类。除了Exception类外，Throwable还有一个子类Error 。</p><p>Java 程序通常不捕获错误。错误一般发生在严重故障时，它们在Java程序处理的范畴之外。</p><p>Error 用来指示运行时环境发生的错误。</p><p>例如，JVM 内存溢出。一般地，程序不会从错误中恢复。</p><p>异常类有两个主要的子类：IOException 类和 RuntimeException 类。</p><figure><img src="`+b+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在 Java 内置类中(接下来会说明)，有大部分常用检查性和非检查性异常。</p><h3 id="多重捕获块" tabindex="-1"><a class="header-anchor" href="#多重捕获块"><span>多重捕获块</span></a></h3><p>一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获。</p><p>多重捕获块的语法如下所示：</p><pre><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>
   <span class="token comment">// 程序代码</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">1</span> 异常的变量名<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 程序代码</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">2</span> 异常的变量名<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 程序代码</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">3</span> 异常的变量名<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 程序代码</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="throws-throw-关键字" tabindex="-1"><a class="header-anchor" href="#throws-throw-关键字"><span>throws/throw 关键字</span></a></h3><p>在Java中， <strong>throw</strong> 和 <strong>throws</strong> 关键字是用于处理异常的。<strong>throw</strong> 关键字用于在代码中抛出异常，而 <strong>throws</strong> 关键字用于在方法声明中指定可能会抛出的异常类型。</p><p><strong>throw</strong> 关键字用于在当前方法中抛出一个异常。通常情况下，当代码执行到某个条件下无法继续正常执行时，可以使用 <strong>throw</strong> 关键字抛出异常，以告知调用者当前代码的执行状态。</p><p>例如，下面的代码中，在方法中判断 num 是否小于 0，如果是，则抛出一个 IllegalArgumentException 异常。</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Number must be positive&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p><strong>throws</strong> 关键字用于在方法声明中指定该方法可能抛出的异常。当方法内部抛出指定类型的异常时，该异常会被传递给调用该方法的代码，并在该代码中处理异常。</p><p>例如，下面的代码中，当 readFile 方法内部发生 IOException 异常时，会将该异常传递给调用该方法的代码。在调用该方法的代码中，必须捕获或声明处理 IOException 异常。</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> filePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
  <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>line <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
    line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>一个方法可以声明抛出多个异常，多个异常之间用逗号隔开。</p><p>例如，下面的方法声明抛出 RemoteException 和 InsufficientFundsException：</p><pre><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> className
<span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span>
                              <span class="token class-name">InsufficientFundsException</span>
   <span class="token punctuation">{</span>
       <span class="token comment">// Method implementation</span>
   <span class="token punctuation">}</span>
   <span class="token comment">//Remainder of class definition</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="finally关键字" tabindex="-1"><a class="header-anchor" href="#finally关键字"><span>finally关键字</span></a></h3><p>finally 关键字用来创建在 try 代码块后面执行的代码块。无论是否发生异常，finally 代码块中的代码总会被执行。在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。finally 代码块出现在 catch 代码块最后，语法如下：</p><pre><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>
  <span class="token comment">// 程序代码</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">1</span> 异常的变量名<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 程序代码</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">2</span> 异常的变量名<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 程序代码</span>
<span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
  <span class="token comment">// 程序代码</span>
<span class="token punctuation">}</span>
</code></pre><p>注意下面事项：</p><ul><li>catch 不能独立于 try 存在。</li><li>在 try/catch 后面添加 finally 块并非强制性要求的。</li><li>try 代码后不能既没 catch 块也没 finally 块。</li><li>try, catch, finally 块之间不能添加任何代码。</li></ul><h3 id="try-with-resources" tabindex="-1"><a class="header-anchor" href="#try-with-resources"><span>try-with-resources</span></a></h3><p>JDK7 之后，Java 新增的 <strong>try-with-resource</strong> 语法结构，旨在自动管理资源，确保资源在使用后能够及时关闭，避免资源泄露 。</p><p>try-with-resources 是一种异常处理机制，它能够自动关闭在 try 块中声明的资源，无需显式地在 finally 块中关闭。</p><p>在 try-with-resources 语句中，你只需要在 try 关键字后面声明资源，然后跟随一个代码块。无论代码块中的操作是否成功，资源都会在 try 代码块执行完毕后自动关闭。。</p><pre><code>try (resource declaration) {
  // 使用的资源
} catch (ExceptionType e1) {
  // 异常块
}
</code></pre><p>以上的语法中 try 用于声明和实例化资源，catch 用于处理关闭资源时可能引发的所有异常。</p><p>**注意：**try-with-resources 语句关闭所有实现 AutoCloseable 接口的资源。</p><p>再看下不使用 <strong>try-with-resources</strong> 而改成 <strong>finally</strong> 来关闭资源，整体代码量多了很多，而且更复杂繁琐了：</p><pre><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">RunoobTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> line<span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Entering try block&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Line =&gt;&quot;</span><span class="token operator">+</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;IOException in try block =&gt;&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Entering finally block&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>br <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;IOException in finally block =&gt;&quot;</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="声明自定义异常" tabindex="-1"><a class="header-anchor" href="#声明自定义异常"><span>声明自定义异常</span></a></h3><p>在 Java 中你可以自定义异常。编写自己的异常类时需要记住下面的几点。</p><ul><li>所有异常都必须是 Throwable 的子类。</li><li>如果希望写一个检查性异常类，则需要继承 Exception 类。</li><li>如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。</li></ul><p>可以像下面这样定义自己的异常类：</p><pre><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><p>只继承Exception 类来创建的异常类是检查性异常类。下面的 InsufficientFundsException 类是用户定义的异常类，它继承自 Exception。一个异常类和其它任何类一样，包含有变量和方法。</p><h3 id="通用异常" tabindex="-1"><a class="header-anchor" href="#通用异常"><span>通用异常</span></a></h3><p>在Java中定义了两种类型的异常和错误。</p><ul><li><strong>JVM(Java虚拟机)</strong> **异常：**由 JVM 抛出的异常或错误。例如：NullPointerException 类，ArrayIndexOutOfBoundsException 类，ClassCastException 类。</li><li>**程序级异常：**由程序或者API程序抛出的异常。例如 IllegalArgumentException 类，IllegalStateException 类。</li></ul>`,101))])}const I=o(x,[["render",J],["__file","1_JavaBase.html.vue"]]),A=JSON.parse(`{"path":"/develop/Java/1_JavaBase.html","title":"1-Java基础笔记","lang":"zh-CN","frontmatter":{"description":"1-Java基础笔记 Java 教程 | 菜鸟教程 (runoob.com) 基本概念 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。Java 作为一种面向对象的编程语言，支持以下基本概念： 1、类（Class）： 定义对象的蓝图，包括属性和方法。 示例：public class Car { ... } 2、对...","head":[["meta",{"property":"og:url","content":"https://echo0d.github.io/DailyNotes/develop/Java/1_JavaBase.html"}],["meta",{"property":"og:site_name","content":"echo0d'notes"}],["meta",{"property":"og:title","content":"1-Java基础笔记"}],["meta",{"property":"og:description","content":"1-Java基础笔记 Java 教程 | 菜鸟教程 (runoob.com) 基本概念 一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。Java 作为一种面向对象的编程语言，支持以下基本概念： 1、类（Class）： 定义对象的蓝图，包括属性和方法。 示例：public class Car { ... } 2、对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-26T14:47:27.000Z"}],["meta",{"property":"article:author","content":"echo0d"}],["meta",{"property":"article:modified_time","content":"2024-08-26T14:47:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1-Java基础笔记\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-26T14:47:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"echo0d\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":2,"title":"注释","slug":"注释","link":"#注释","children":[]},{"level":2,"title":"对象和类","slug":"对象和类","link":"#对象和类","children":[{"level":3,"title":"Java中的对象","slug":"java中的对象","link":"#java中的对象","children":[]},{"level":3,"title":"Java 中的类","slug":"java-中的类","link":"#java-中的类","children":[]},{"level":3,"title":"构造方法","slug":"构造方法","link":"#构造方法","children":[]},{"level":3,"title":"创建对象","slug":"创建对象","link":"#创建对象","children":[]},{"level":3,"title":"访问实例变量和方法","slug":"访问实例变量和方法","link":"#访问实例变量和方法","children":[]},{"level":3,"title":"源文件声明规则","slug":"源文件声明规则","link":"#源文件声明规则","children":[]},{"level":3,"title":"Java 包","slug":"java-包","link":"#java-包","children":[]},{"level":3,"title":"import 语句","slug":"import-语句","link":"#import-语句","children":[]}]},{"level":2,"title":"基本数据类型","slug":"基本数据类型","link":"#基本数据类型","children":[{"level":3,"title":"内置数据类型","slug":"内置数据类型","link":"#内置数据类型","children":[]},{"level":3,"title":"引用类型","slug":"引用类型","link":"#引用类型","children":[]}]},{"level":2,"title":"Java 常量","slug":"java-常量","link":"#java-常量","children":[]},{"level":2,"title":"自动类型转换","slug":"自动类型转换","link":"#自动类型转换","children":[{"level":3,"title":"自动类型转换","slug":"自动类型转换-1","link":"#自动类型转换-1","children":[]},{"level":3,"title":"强制类型转换","slug":"强制类型转换","link":"#强制类型转换","children":[]},{"level":3,"title":"隐含强制类型转换","slug":"隐含强制类型转换","link":"#隐含强制类型转换","children":[]}]},{"level":2,"title":"变量类型","slug":"变量类型","link":"#变量类型","children":[]},{"level":2,"title":"变量命名规则","slug":"变量命名规则","link":"#变量命名规则","children":[]},{"level":2,"title":"Java 运算符","slug":"java-运算符","link":"#java-运算符","children":[{"level":3,"title":"算术运算符","slug":"算术运算符","link":"#算术运算符","children":[]},{"level":3,"title":"关系运算符","slug":"关系运算符","link":"#关系运算符","children":[]},{"level":3,"title":"位运算符","slug":"位运算符","link":"#位运算符","children":[]},{"level":3,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[]},{"level":3,"title":"赋值运算符","slug":"赋值运算符","link":"#赋值运算符","children":[]},{"level":3,"title":"条件运算符（?:）","slug":"条件运算符","link":"#条件运算符","children":[]},{"level":3,"title":"instanceof 运算符","slug":"instanceof-运算符","link":"#instanceof-运算符","children":[]}]},{"level":2,"title":"循环结构","slug":"循环结构","link":"#循环结构","children":[{"level":3,"title":"while 循环","slug":"while-循环","link":"#while-循环","children":[]},{"level":3,"title":"do…while 循环","slug":"do-while-循环","link":"#do-while-循环","children":[]},{"level":3,"title":"for循环","slug":"for循环","link":"#for循环","children":[]},{"level":3,"title":"增强 for 循环","slug":"增强-for-循环","link":"#增强-for-循环","children":[]},{"level":3,"title":"break 关键字","slug":"break-关键字","link":"#break-关键字","children":[]},{"level":3,"title":"continue 关键字","slug":"continue-关键字","link":"#continue-关键字","children":[]}]},{"level":2,"title":"条件语句","slug":"条件语句","link":"#条件语句","children":[{"level":3,"title":"if...else语句","slug":"if-else语句","link":"#if-else语句","children":[]},{"level":3,"title":"if...else if...else 语句","slug":"if-else-if-else-语句","link":"#if-else-if-else-语句","children":[]}]},{"level":2,"title":"switch case 语句","slug":"switch-case-语句","link":"#switch-case-语句","children":[]},{"level":2,"title":"Number & Math 类","slug":"number-math-类","link":"#number-math-类","children":[]},{"level":2,"title":"Character 类","slug":"character-类","link":"#character-类","children":[{"level":3,"title":"转义序列","slug":"转义序列","link":"#转义序列","children":[]},{"level":3,"title":"Character 方法","slug":"character-方法","link":"#character-方法","children":[]}]},{"level":2,"title":"String 类","slug":"string-类","link":"#string-类","children":[{"level":3,"title":"创建字符串","slug":"创建字符串","link":"#创建字符串","children":[]},{"level":3,"title":"字符串长度","slug":"字符串长度","link":"#字符串长度","children":[]},{"level":3,"title":"连接字符串","slug":"连接字符串","link":"#连接字符串","children":[]},{"level":3,"title":"创建格式化字符串","slug":"创建格式化字符串","link":"#创建格式化字符串","children":[]},{"level":3,"title":"String 方法","slug":"string-方法","link":"#string-方法","children":[]}]},{"level":2,"title":"StringBuffer 和 StringBuilder 类","slug":"stringbuffer-和-stringbuilder-类","link":"#stringbuffer-和-stringbuilder-类","children":[]},{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[{"level":3,"title":"声明数组变量","slug":"声明数组变量","link":"#声明数组变量","children":[]},{"level":3,"title":"创建数组","slug":"创建数组","link":"#创建数组","children":[]},{"level":3,"title":"处理数组","slug":"处理数组","link":"#处理数组","children":[]},{"level":3,"title":"数组作为函数的参数","slug":"数组作为函数的参数","link":"#数组作为函数的参数","children":[]},{"level":3,"title":"数组作为函数的返回值","slug":"数组作为函数的返回值","link":"#数组作为函数的返回值","children":[]},{"level":3,"title":"多维数组","slug":"多维数组","link":"#多维数组","children":[]},{"level":3,"title":"Arrays 类","slug":"arrays-类","link":"#arrays-类","children":[]}]},{"level":2,"title":"日期时间","slug":"日期时间","link":"#日期时间","children":[{"level":3,"title":"获取当前日期时间","slug":"获取当前日期时间","link":"#获取当前日期时间","children":[]},{"level":3,"title":"日期比较","slug":"日期比较","link":"#日期比较","children":[]},{"level":3,"title":"使用 SimpleDateFormat 格式化日期","slug":"使用-simpledateformat-格式化日期","link":"#使用-simpledateformat-格式化日期","children":[]},{"level":3,"title":"使用printf格式化日期","slug":"使用printf格式化日期","link":"#使用printf格式化日期","children":[]},{"level":3,"title":"解析字符串为时间","slug":"解析字符串为时间","link":"#解析字符串为时间","children":[]},{"level":3,"title":"Java 休眠(sleep)","slug":"java-休眠-sleep","link":"#java-休眠-sleep","children":[]}]},{"level":2,"title":"正则表达式","slug":"正则表达式","link":"#正则表达式","children":[]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[{"level":3,"title":"方法的优点","slug":"方法的优点","link":"#方法的优点","children":[]},{"level":3,"title":"方法的命名规则","slug":"方法的命名规则","link":"#方法的命名规则","children":[]},{"level":3,"title":"方法的定义","slug":"方法的定义","link":"#方法的定义","children":[]},{"level":3,"title":"方法调用","slug":"方法调用","link":"#方法调用","children":[]},{"level":3,"title":"方法的重载","slug":"方法的重载","link":"#方法的重载","children":[]},{"level":3,"title":"变量作用域","slug":"变量作用域","link":"#变量作用域","children":[]},{"level":3,"title":"命令行参数的使用","slug":"命令行参数的使用","link":"#命令行参数的使用","children":[]},{"level":3,"title":"构造方法","slug":"构造方法-1","link":"#构造方法-1","children":[]},{"level":3,"title":"可变参数","slug":"可变参数","link":"#可变参数","children":[]},{"level":3,"title":"finalize() 方法","slug":"finalize-方法","link":"#finalize-方法","children":[]}]},{"level":2,"title":"流(Stream)、文件(File)和IO","slug":"流-stream-、文件-file-和io","link":"#流-stream-、文件-file-和io","children":[{"level":3,"title":"读取控制台输入","slug":"读取控制台输入","link":"#读取控制台输入","children":[]},{"level":3,"title":"控制台输出","slug":"控制台输出","link":"#控制台输出","children":[]},{"level":3,"title":"读写文件","slug":"读写文件","link":"#读写文件","children":[]},{"level":3,"title":"FileInputStream","slug":"fileinputstream","link":"#fileinputstream","children":[]},{"level":3,"title":"FileOutputStream","slug":"fileoutputstream","link":"#fileoutputstream","children":[]},{"level":3,"title":"文件和I/O","slug":"文件和i-o","link":"#文件和i-o","children":[]},{"level":3,"title":"Java中的目录","slug":"java中的目录","link":"#java中的目录","children":[]}]},{"level":2,"title":"Scanner 类","slug":"scanner-类","link":"#scanner-类","children":[]},{"level":2,"title":"异常处理","slug":"异常处理","link":"#异常处理","children":[{"level":3,"title":"Exception 类的层次","slug":"exception-类的层次","link":"#exception-类的层次","children":[]},{"level":3,"title":"多重捕获块","slug":"多重捕获块","link":"#多重捕获块","children":[]},{"level":3,"title":"throws/throw 关键字","slug":"throws-throw-关键字","link":"#throws-throw-关键字","children":[]},{"level":3,"title":"finally关键字","slug":"finally关键字","link":"#finally关键字","children":[]},{"level":3,"title":"try-with-resources","slug":"try-with-resources","link":"#try-with-resources","children":[]},{"level":3,"title":"声明自定义异常","slug":"声明自定义异常","link":"#声明自定义异常","children":[]},{"level":3,"title":"通用异常","slug":"通用异常","link":"#通用异常","children":[]}]}],"git":{"createdTime":1724164754000,"updatedTime":1724683647000,"contributors":[{"name":"echo0d","email":"echo0d@163.com","commits":2}]},"readingTime":{"minutes":58.29,"words":17488},"filePathRelative":"develop/Java/1_JavaBase.md","localizedDate":"2024年8月20日","autoDesc":true,"excerpt":"\\n<blockquote>\\n<p><a href=\\"https://www.runoob.com/java/java-tutorial.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Java 教程 | 菜鸟教程 (runoob.com)</a></p>\\n</blockquote>\\n<h2>基本概念</h2>\\n<p>一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。Java 作为一种面向对象的编程语言，支持以下基本概念：</p>\\n<p>1、<strong>类（Class）</strong>：</p>\\n<ul>\\n<li>定义对象的蓝图，包括属性和方法。</li>\\n<li>示例：<code>public class Car { ... }</code></li>\\n</ul>"}`);export{I as comp,A as data};
