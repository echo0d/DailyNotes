import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,f as t,o as p}from"./app-BJ0txEXQ.js";const o="/DailyNotes/assets/image-20240205153742410-BASrQLrb.png",e="/DailyNotes/assets/image-20240205155116269-_yO88AzO.png",c="/DailyNotes/assets/image-20240205160656335-DFqNbHHI.png",l="/DailyNotes/assets/image-20240205164508613-DwZzX3Uj.png",u="/DailyNotes/assets/image-20240205164941878-tnKGex9s.png",i="/DailyNotes/assets/image-20240206091545375--JDxvos7.png",k="/DailyNotes/assets/image-20240206100811599-vd4BJ4k4.png",r="/DailyNotes/assets/image-20240206101028514-CtZ_a4_t.png",g="/DailyNotes/assets/image-20240206105633570-B_wZjv5l.png",d="/DailyNotes/assets/image-20240206105859063-C6P6nG0d.png",m={};function y(h,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h1 id="django第一次使用记录" tabindex="-1"><a class="header-anchor" href="#django第一次使用记录"><span>Django第一次使用记录</span></a></h1><h2 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目"><span>创建项目</span></a></h2><pre><code>pip install django
mkdir test_django
cd test_django
django-admin.exe startproject myproject (# python的Scripts/文件夹路径加入环境变量Path里才能直接写执行)

</code></pre><p>项目建立后目录结构</p><figure><img src="`+o+`" alt="image-20240205153742410" tabindex="0" loading="lazy"><figcaption>image-20240205153742410</figcaption></figure><pre><code>manage.py  # 简单的命令文件封装文件，可以通过这个文件生成应用程序
myproject/ # 一个目录，与项目名称一样，称为项目目录
__init.py__ # 一个空文件，用来告诉Python这是myproject目录的一个模块
settings.py # 项目配置文件，包含一些初始化设置
urls.py # # 存放URL表达式的文件，这里定义的每一个URL都对应一个视图函数，这个文件称为路由文件
wsgi.py # 服务器程序和应用程序的一个协议接口，规定了使用的接口和功能，这个文件不需修改， Django已为项目配置好
</code></pre><h2 id="创建应用程序" tabindex="-1"><a class="header-anchor" href="#创建应用程序"><span>创建应用程序</span></a></h2><pre><code>cd myproject
python manage.py startapp myapp
</code></pre><figure><img src="`+e+`" alt="image-20240205155116269" tabindex="0" loading="lazy"><figcaption>image-20240205155116269</figcaption></figure><pre><code>myapp/
__init__.pyadmin.py　　# 配置管理后台，写少量代码就可以启用Django Admin管理后台
apps.py：　　# 存放当前应用程序的配置
models.py　 # 存放数据库相关的内容
tests.py　　# 可在这个文件写测试代码以对当前应用程序进行测试
views.py　　# 存放业务请求功能的代码
migrations/ # 这个文件夹中的文件保存该应用程序的数据库表与变化的相关内容
</code></pre><h2 id="静态html页面" tabindex="-1"><a class="header-anchor" href="#静态html页面"><span>静态HTML页面</span></a></h2><p>1、业务逻辑代码</p><p>业务逻辑代码按照Django的约定一般要写在views.py文件中，换句话说就是要在views.py文件中生成一个视图函数并在其中编写代码。</p><pre><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> HttpResponse
<span class="token comment"># Create your views here.</span>
<span class="token keyword">def</span> <span class="token function">indec</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">&#39;&lt;h1&gt;hrllo world&lt;/h1&gt;&#39;</span><span class="token punctuation">)</span>
</code></pre><p>2、建立URL与视图函数的对应关系</p><p>URL与视图函数的对应关系要放在<code>urls.py</code>文件中，对应关系以URL配置项形式放在文件中的一个列表变量中。</p><p>第二个参数<code>views.index</code>指的是<code>views.py</code>文件中的函数。</p><pre><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin
<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path
<span class="token keyword">from</span> myapp <span class="token keyword">import</span> views

urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    path<span class="token punctuation">(</span><span class="token string">&#39;admin/&#39;</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span><span class="token string">&#39;index/&#39;</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><p>3、启动程序</p><pre><code>python manage.py runserver
</code></pre><p>访问http://127.0.0.1:8000/index/</p><figure><img src="`+c+'" alt="image-20240205160656335" tabindex="0" loading="lazy"><figcaption>image-20240205160656335</figcaption></figure><h2 id="动态加载html页面" tabindex="-1"><a class="header-anchor" href="#动态加载html页面"><span>动态加载HTML页面</span></a></h2><p>新建<code>templates</code>文件夹，在里面新建test.html文件</p><figure><img src="'+l+`" alt="image-20240205164508613" tabindex="0" loading="lazy"><figcaption>image-20240205164508613</figcaption></figure><pre><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>测试模板<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{ hi }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{ test }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><p>然后在settings.py中指定templates文件夹</p><pre><code class="language-python">TEMPLATES <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token string">&#39;BACKEND&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;django.template.backends.django.DjangoTemplates&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;DIRS&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>BASE_DIR<span class="token operator">/</span><span class="token string">&#39;templates&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><p>在views.py中定义</p><pre><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    hi<span class="token operator">=</span><span class="token string">&#39;你好，世界是美好的&#39;</span>
    test<span class="token operator">=</span><span class="token string">&#39;这是一个测试页，动态页面正常显示，测试成功！&#39;</span>
    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">&#39;test.html&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">:</span>hi<span class="token punctuation">,</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">:</span>test<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><p>urls.py中添加test的路径</p><pre><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    path<span class="token punctuation">(</span><span class="token string">&#39;admin/&#39;</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span><span class="token string">&#39;index/&#39;</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>
    path<span class="token punctuation">(</span><span class="token string">&#39;test/&#39;</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>test<span class="token punctuation">)</span>
<span class="token punctuation">]</span>

</code></pre><p>效果</p><figure><img src="`+u+`" alt="image-20240205164941878" tabindex="0" loading="lazy"><figcaption>image-20240205164941878</figcaption></figure><h2 id="配置静态文件" tabindex="-1"><a class="header-anchor" href="#配置静态文件"><span>配置静态文件</span></a></h2><p>要让Django找到这些文件必须进行设置，首先在<code>setttings.py</code>文件的<code>INSTALLED_APPS</code>代码块中要有<code>django.contrib.staticfiles</code>这一行</p><p>然后在<code>setttings.py</code>文件中增加以下代码。</p><pre><code class="language-python">STATIC_URL <span class="token operator">=</span> <span class="token string">&#39;/static/&#39;</span>
STATICFILES_DIRS <span class="token operator">=</span> <span class="token punctuation">[</span>
    os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">&#39;static&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><p>需要在项目根目录下新建文件夹<code>static</code>，将网页要引用的静态文件或相关文件夹保存在这里。</p><p>然后在<code>templates</code>文件夹中添加<code>login.html</code></p><pre><code class="language-html">{% load static %}

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>zh-CN<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>登录页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{% static &#39;bootstrap/css/bootstrap.min.css&#39; %}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{% static &#39;sigin.css&#39; %}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{% static &#39;fontawesome/css/font-awesome.min.css&#39; %}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{% static &#39;jquery-3.7.1.js&#39; %}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{% static &#39;bootstrap/js/bootstrap.min.js&#39; %}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form-signin<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            {% csrf_token %}
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form-signin-heading<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>请登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sr-only<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form-control<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>用户<span class="token punctuation">&quot;</span></span> <span class="token attr-name">required</span> <span class="token attr-name">autofocus</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sr-only<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>密 码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form-control<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>密码<span class="token punctuation">&quot;</span></span> <span class="token attr-name">required</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn btn-lg btn-primary btn-block<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- /container --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><p>除了sigin.css以外，都是下载好直接放static文件夹，sigin.css自己编的</p><pre><code class="language-css"><span class="token selector">.form-signin</span><span class="token punctuation">{</span>
    <span class="token property">max-width</span><span class="token punctuation">:</span> 330px<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.form-signin-heading</span><span class="token punctuation">{</span>
    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><p>ps</p><pre><code>&lt;link href=&quot;{% static &#39;bootstrap/css/bootstrap.min.css&#39; %}&quot; rel=&quot;stylesheet&quot;&gt;
这句代码会被Django渲染成
&lt;link href=&quot;/static/bootstrap/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;
</code></pre><p><code>views.py</code>中写后台处理逻辑</p><pre><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> redirect

<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">:</span><span class="token comment"># 打开login.html页面</span>
        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">&quot;login.html&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token comment"># 从表单提取用户名</span>
        username <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span><span class="token comment"># 从表单提取密码</span>
        password <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>username<span class="token operator">==</span><span class="token string">&#39;test&#39;</span> <span class="token keyword">and</span> password<span class="token operator">==</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 用户名与密码都正确时，定向到test.html渲染的页面</span>
            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">&#39;/test/&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">&quot;login.html&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;用户名或密码错误！&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><p><code>urls.py</code>中添加</p><pre><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    path<span class="token punctuation">(</span><span class="token string">&#39;login/&#39;</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>login<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><p>效果</p><figure><img src="`+i+`" alt="image-20240206091545375" tabindex="0" loading="lazy"><figcaption>image-20240206091545375</figcaption></figure><h2 id="连接数据库" tabindex="-1"><a class="header-anchor" href="#连接数据库"><span>连接数据库</span></a></h2><p>用命令生成项目与应用程序后，项目根目录下会生成一个默认的数据库<code>db.sqlite3</code>，在<code>settings.py</code>文件中有这个数据库的默认连接，</p><pre><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;default&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;ENGINE&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;django.db.backends.sqlite3&#39;</span><span class="token punctuation">,</span>  <span class="token comment"># 数据库引擎，指明数据库类型</span>
        <span class="token string">&#39;NAME&#39;</span><span class="token punctuation">:</span> BASE_DIR <span class="token operator">/</span> <span class="token string">&#39;db.sqlite3&#39;</span><span class="token punctuation">,</span>  <span class="token comment"># 指明数据库所在位置，本项目中数据库位置：/myproject/db.sqlites</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><p>ps. Django可以生成数据库表，不能生成数据库，生成数据库要用到数据库原生命令。</p><p>不想使用sqlite3可以换成mysql等，只需要</p><pre><code class="language-shell">pip <span class="token function">install</span> pymysql
</code></pre><p>在settings.py中设置DATABASES代码块</p><pre><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;default&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token comment"># &#39;ENGINE&#39;: &#39;django.db.backends.sqlite3&#39;,</span>
        <span class="token comment"># &#39;NAME&#39;: BASE_DIR / &#39;db.sqlite3&#39;,</span>
        <span class="token string">&#39;ENGINE&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;django.db.backends.mysql&#39;</span><span class="token punctuation">,</span> <span class="token comment"># 数据库引擎，指明数据库类型</span>
        <span class="token string">&#39;NAME&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;mytest&#39;</span><span class="token punctuation">,</span>  <span class="token comment"># 数据库名称，需要先手动建个数据库</span>
        <span class="token string">&#39;HOST&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;PORT&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;3306&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;USER&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;PASSWORD&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><p>然后在<code>/myproject/myapp/models.py</code>中建立数据表</p><pre><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models

<span class="token comment"># Create your models here.</span>
<span class="token keyword">class</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    user<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">&#39;姓名&#39;</span><span class="token punctuation">)</span>
    email<span class="token operator">=</span>models<span class="token punctuation">.</span>EmailField<span class="token punctuation">(</span>verbose_name<span class="token operator">=</span><span class="token string">&#39;邮箱&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>user
</code></pre><p><code>models.py</code>中有了代码，它所属的应用程序必须在<code>settings.py</code>的<code>INSTALLED_APPS</code>代码块中注册</p><pre><code class="language-python">
INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;django.contrib.admin&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;django.contrib.auth&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;django.contrib.contenttypes&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;django.contrib.sessions&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;django.contrib.messages&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;django.contrib.staticfiles&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;myapp&#39;</span><span class="token punctuation">,</span> <span class="token comment">#新增</span>
<span class="token punctuation">]</span>

</code></pre><p>在项目目录<code>/myproject/myproject/__init__.py</code>中编写以下代码，指明以<code>pymysql</code>模块代替<code>MySQLdb</code>模块，这里要十分注意字母的大小写。</p><pre><code class="language-python"><span class="token keyword">import</span> pymysql
pymysql<span class="token punctuation">.</span>install_as_MySQLdb<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><p>最后运行命令生成数据表，在终端输入以下命令：</p><pre><code class="language-shell">python manage.py makemigrations
python manage.py migrate
</code></pre><figure><img src="`+k+'" alt="image-20240206100811599" tabindex="0" loading="lazy"><figcaption>image-20240206100811599</figcaption></figure><p>可以看到该数据库中新增了很多表，最主要的是<code>myaap_userinfo</code></p><figure><img src="'+r+`" alt="image-20240206101028514" tabindex="0" loading="lazy"><figcaption>image-20240206101028514</figcaption></figure><p>Django生成数据表时会把<code>models.py</code>中的类名转成小写，然后在前面加上应用程序的名字和下划线，如<code>myapp_userinfo</code>。以<code>auth_</code>和<code>django_</code>开头的数据表是Django自动生成的系统表。</p><h2 id="使用django建立后台管理系统" tabindex="-1"><a class="header-anchor" href="#使用django建立后台管理系统"><span>使用Django建立后台管理系统</span></a></h2><p>注册数据库表，在<code>/myproject/myapp/admin.py</code>中注册<code>models.py</code>生成的数据表，代码如下。</p><pre><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin

<span class="token comment"># Register your models here.</span>
<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> UserInfo
<span class="token comment"># 注册数据库表</span>
<span class="token comment"># 自定义数据模型在管理后台的显示样式</span>
<span class="token keyword">class</span> <span class="token class-name">UserInfoAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token comment"># 指明在Django Admin管理后台列表模式下显示哪几个字段</span>
    list_display<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;email&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># admin.site.register()函数表示：如果只有一个参数，以默认方式在后台显示或管理数据表；如果有第二个参数，就按第二个参数传入的类定制的方式显示和管理数据表。</span>
admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>UserInfo<span class="token punctuation">,</span>UserInfoAdmin<span class="token punctuation">)</span>
</code></pre><p>为了使后台管理系统用中文显示，需要在<code>settings.py</code>中修改<code>LANGUAGE_CODE</code>、<code>TIME_ZONE</code>两个变量，修改的值如下。</p><pre><code class="language-python"><span class="token comment"># LANGUAGE_CODE = &#39;en-us&#39;</span>
LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">&#39;zh-hans&#39;</span>
<span class="token comment"># TIME_ZONE = &#39;UTC&#39;</span>
TIME_ZONE <span class="token operator">=</span> <span class="token string">&#39;Asia/Shanghai&#39;</span>
</code></pre><p>创建后台管理超级用户，需在命令行终端输入</p><pre><code>python manage.py createsuperuser
</code></pre><p>按提示输入用户名、电子邮箱地址、密码等相关信息</p><figure><img src="`+g+'" alt="image-20240206105633570" tabindex="0" loading="lazy"><figcaption>image-20240206105633570</figcaption></figure><p>http://127.0.0.1:8000/admin/ 这个URL就是项目搭建开始的时候就默认生成的</p><figure><img src="'+d+'" alt="image-20240206105859063" tabindex="0" loading="lazy"><figcaption>image-20240206105859063</figcaption></figure>',82)]))}const _=s(m,[["render",y],["__file","test_django.html.vue"]]),j=JSON.parse('{"path":"/develop/Python/test_django.html","title":"Django第一次使用记录","lang":"zh-CN","frontmatter":{"category":"Python","tag":["Python","Django"],"description":"Django第一次使用记录 创建项目 项目建立后目录结构 image-20240205153742410image-20240205153742410 创建应用程序 image-20240205155116269image-20240205155116269 静态HTML页面 1、业务逻辑代码 业务逻辑代码按照Django的约定一般要写在views.p...","head":[["meta",{"property":"og:url","content":"https://echo0d.github.io/DailyNotes/develop/Python/test_django.html"}],["meta",{"property":"og:site_name","content":"echo0d-notes"}],["meta",{"property":"og:title","content":"Django第一次使用记录"}],["meta",{"property":"og:description","content":"Django第一次使用记录 创建项目 项目建立后目录结构 image-20240205153742410image-20240205153742410 创建应用程序 image-20240205155116269image-20240205155116269 静态HTML页面 1、业务逻辑代码 业务逻辑代码按照Django的约定一般要写在views.p..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-10T05:36:24.000Z"}],["meta",{"property":"article:author","content":"echo0d"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:tag","content":"Django"}],["meta",{"property":"article:modified_time","content":"2025-01-10T05:36:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Django第一次使用记录\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-10T05:36:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"echo0d\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"创建项目","slug":"创建项目","link":"#创建项目","children":[]},{"level":2,"title":"创建应用程序","slug":"创建应用程序","link":"#创建应用程序","children":[]},{"level":2,"title":"静态HTML页面","slug":"静态html页面","link":"#静态html页面","children":[]},{"level":2,"title":"动态加载HTML页面","slug":"动态加载html页面","link":"#动态加载html页面","children":[]},{"level":2,"title":"配置静态文件","slug":"配置静态文件","link":"#配置静态文件","children":[]},{"level":2,"title":"连接数据库","slug":"连接数据库","link":"#连接数据库","children":[]},{"level":2,"title":"使用Django建立后台管理系统","slug":"使用django建立后台管理系统","link":"#使用django建立后台管理系统","children":[]}],"git":{"createdTime":1722415943000,"updatedTime":1736487384000,"contributors":[{"name":"echo0d","email":"echo0d@163.com","commits":2}]},"readingTime":{"minutes":6.07,"words":1822},"filePathRelative":"develop/Python/test_django.md","localizedDate":"2024年7月31日","excerpt":"\\n<h2>创建项目</h2>\\n<pre><code>pip install django\\nmkdir test_django\\ncd test_django\\ndjango-admin.exe startproject myproject (# python的Scripts/文件夹路径加入环境变量Path里才能直接写执行)\\n\\n</code></pre>\\n<p>项目建立后目录结构</p>\\n<figure><figcaption>image-20240205153742410</figcaption></figure>\\n<pre><code>manage.py  # 简单的命令文件封装文件，可以通过这个文件生成应用程序\\nmyproject/ # 一个目录，与项目名称一样，称为项目目录\\n__init.py__ # 一个空文件，用来告诉Python这是myproject目录的一个模块\\nsettings.py # 项目配置文件，包含一些初始化设置\\nurls.py # # 存放URL表达式的文件，这里定义的每一个URL都对应一个视图函数，这个文件称为路由文件\\nwsgi.py # 服务器程序和应用程序的一个协议接口，规定了使用的接口和功能，这个文件不需修改， Django已为项目配置好\\n</code></pre>","autoDesc":true}');export{_ as comp,j as data};
