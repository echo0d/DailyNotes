import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as t,o as p}from"./app-CV56mcHb.js";const o={};function e(c,n){return p(),a("div",null,n[0]||(n[0]=[t(`<h1 id="反调试" tabindex="-1"><a class="header-anchor" href="#反调试"><span>反调试</span></a></h1><p>反调试技术用于检测和防止调试器附加到程序上，以保护程序免受逆向工程和调试。以下是几种编程语言中的常见反调试方法：</p><h2 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h2><h3 id="检查jvm启动参数" tabindex="-1"><a class="header-anchor" href="#检查jvm启动参数"><span>检查JVM启动参数</span></a></h3><p>检查启动参数中是否包含调试相关选项。</p><h3 id="检查调试器线程" tabindex="-1"><a class="header-anchor" href="#检查调试器线程"><span>检查调试器线程</span></a></h3><p>检查是否存在与调试相关的线程。</p><h3 id="检查程序是否运行在ide环境中" tabindex="-1"><a class="header-anchor" href="#检查程序是否运行在ide环境中"><span>检查程序是否运行在IDE环境中</span></a></h3><p>检查当前项目中是否有<code>.vscode</code>、<code>.idea</code>等文件夹</p><p>以上三种方式的实现：</p><pre><code class="language-java">
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>management<span class="token punctuation">.</span></span><span class="token class-name">ManagementFactory</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">util<span class="token punctuation">.</span></span><span class="token class-name">SelfDelete</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DebugStatus</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 检查是否在调试状态</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDebuggerAttached</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isRunningInIDE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;禁止调试！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">SelfDelete</span><span class="token punctuation">.</span><span class="token function">selfDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;正常运行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 检查程序是否处于调试状态
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isDebuggerAttached</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 方法1：检查JVM启动参数中是否包含调试相关选项</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> arg <span class="token operator">:</span> <span class="token class-name">ManagementFactory</span><span class="token punctuation">.</span><span class="token function">getRuntimeMXBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>arg<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;-agentlib:jdwp&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> arg<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;-Xdebug&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 方法2：检查是否存在调试器线程</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span> thread <span class="token operator">:</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">getAllStackTraces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;JDB&quot;</span><span class="token punctuation">)</span>
                    <span class="token operator">||</span> thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;Debug&quot;</span><span class="token punctuation">)</span>
                    <span class="token operator">||</span> thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;Debugger&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 检查程序是否运行在IDE环境中
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isRunningInIDE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> classPath <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;java.class.path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 检查常见IDE的特定文件或目录</span>
        <span class="token keyword">boolean</span> isInIDE <span class="token operator">=</span> classPath<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;idea&quot;</span><span class="token punctuation">)</span> <span class="token comment">// IntelliJ IDEA</span>
                <span class="token operator">||</span> classPath<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;eclipse&quot;</span><span class="token punctuation">)</span> <span class="token comment">// Eclipse</span>
                <span class="token operator">||</span> classPath<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;netbeans&quot;</span><span class="token punctuation">)</span> <span class="token comment">// NetBeans</span>
                <span class="token operator">||</span> classPath<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;vscode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// VSCode</span>

        <span class="token comment">// 检查IDE特定的文件或目录</span>
        isInIDE <span class="token operator">=</span> isInIDE <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>File</span><span class="token punctuation">(</span><span class="token string">&quot;.idea&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// IntelliJ IDEA</span>
                <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>File</span><span class="token punctuation">(</span><span class="token string">&quot;.project&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Eclipse</span>
                <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>File</span><span class="token punctuation">(</span><span class="token string">&quot;nbproject&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// NetBeans</span>
                <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>File</span><span class="token punctuation">(</span><span class="token string">&quot;.vscode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// VSCode</span>

        <span class="token keyword">return</span> isInIDE<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><h3 id="debug-symbol" tabindex="-1"><a class="header-anchor" href="#debug-symbol"><span>debug symbol</span></a></h3><p>去掉 Class 文件行号 LineNumberTable 属性。 IDEA 等 IDE 对于 Java 的调试，主要是通过行号作为下断点的条件。 如果去掉 Class 文件行号（LineNumberTable）这一属性，则 无法使用 IDE 调试。只能通过 Jdb 并通过方法断点来调试。</p><ul><li><strong>使用 <code>javac</code> 编译时去掉调试信息</strong></li></ul><pre><code class="language-shell">javac <span class="token parameter variable">-g:none</span> YourClass.java
</code></pre><ul><li><strong>使用 ASM 库修改字节码</strong></li></ul><p>如果你需要在编译后去掉现有的 Class 文件中的行号信息，可以使用 ASM 库来修改字节码。以下是一个示例代码，展示如何使用 ASM 库去掉 Class 文件中的行号信息：</p><p>添加 ASM 库依赖（如果使用 Maven）：</p><pre><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.ow2.asm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>asm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

</code></pre><p>使用 ASM 库去掉行号信息：</p><pre><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>objectweb<span class="token punctuation">.</span>asm<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoveLineNumber</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Usage: RemoveLineNumber &lt;input class file&gt; &lt;output class file&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">File</span> inputFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">File</span> outputFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>inputFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ClassReader</span> classReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassReader</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ClassWriter</span> classWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span>classReader<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ClassVisitor</span> classVisitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassVisitor</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">ASM9</span><span class="token punctuation">,</span> classWriter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">MethodVisitor</span> <span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> access<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> descriptor<span class="token punctuation">,</span> <span class="token class-name">String</span> signature<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> exceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">MethodVisitor</span> mv <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span>access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> signature<span class="token punctuation">,</span> exceptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MethodVisitor</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">ASM9</span><span class="token punctuation">,</span> mv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visitLineNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> line<span class="token punctuation">,</span> <span class="token class-name">Label</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// Do not call super.visitLineNumber to remove line number info</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        classReader<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>classVisitor<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>outputFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>classWriter<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>编译并运行 <code>RemoveLineNumber</code> 类：</p><pre><code class="language-shell">javac <span class="token parameter variable">-cp</span> asm-9.2.jar RemoveLineNumber.java

<span class="token function">java</span> <span class="token parameter variable">-cp</span> .:asm-9.2.jar RemoveLineNumber InputClass.class OutputClass.class
</code></pre><p>这样，<code>OutputClass.class</code> 文件将不包含行号信息，无法在 IDE 中使用行号断点进行调试。</p><h2 id="c-c" tabindex="-1"><a class="header-anchor" href="#c-c"><span>C/C++</span></a></h2><ol><li><strong>检查调试标志</strong>：使用<code>IsDebuggerPresent</code>函数检查调试器是否附加。</li><li><strong>检查调试寄存器</strong>：检查调试寄存器是否被设置。</li></ol><pre><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h&gt;</span></span>

<span class="token keyword">bool</span> <span class="token function">isDebuggerAttached</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">IsDebuggerPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h2><ol><li><strong>检查调试器模块</strong>：检查是否加载了调试器模块。</li><li><strong>检查调试器端口</strong>：检查调试器使用的端口是否被占用。</li></ol><pre><code class="language-python"><span class="token keyword">import</span> sys

<span class="token keyword">def</span> <span class="token function">is_debugger_attached</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">any</span><span class="token punctuation">(</span><span class="token string">&#39;pydevd&#39;</span> <span class="token keyword">in</span> arg <span class="token keyword">for</span> arg <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
</code></pre><h2 id="javascript-node-js" tabindex="-1"><a class="header-anchor" href="#javascript-node-js"><span>JavaScript (Node.js)</span></a></h2><ol><li><strong>检查调试标志</strong>：检查进程启动参数中是否包含调试标志。</li><li><strong>检查调试端口</strong>：检查调试端口是否被占用。</li></ol><pre><code class="language-js"><span class="token keyword">function</span> <span class="token function">isDebuggerAttached</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> process<span class="token punctuation">.</span>execArgv<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">arg</span> <span class="token operator">=&gt;</span> arg<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;--inspect&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> arg<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;--debug&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="c" tabindex="-1"><a class="header-anchor" href="#c"><span>C</span></a></h2><ol><li><strong>检查调试标志</strong>：使用<code>Debugger.IsAttached</code>属性检查调试器是否附加。</li><li><strong>检查调试器端口</strong>：检查调试器使用的端口是否被占用。</li></ol><pre><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Diagnostics</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DebugStatus</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsDebuggerAttached</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Debugger<span class="token punctuation">.</span>IsAttached<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>`,36)]))}const k=s(o,[["render",e],["__file","anti-debug.html.vue"]]),i=JSON.parse('{"path":"/develop/other/anti-debug.html","title":"反调试","lang":"zh-CN","frontmatter":{"category":"开发","tag":"反调试","description":"反调试 反调试技术用于检测和防止调试器附加到程序上，以保护程序免受逆向工程和调试。以下是几种编程语言中的常见反调试方法： Java 检查JVM启动参数 检查启动参数中是否包含调试相关选项。 检查调试器线程 检查是否存在与调试相关的线程。 检查程序是否运行在IDE环境中 检查当前项目中是否有.vscode、.idea等文件夹 以上三种方式的实现： deb...","head":[["meta",{"property":"og:url","content":"https://echo0d.github.io/DailyNotes/develop/other/anti-debug.html"}],["meta",{"property":"og:site_name","content":"echo0d-notes"}],["meta",{"property":"og:title","content":"反调试"}],["meta",{"property":"og:description","content":"反调试 反调试技术用于检测和防止调试器附加到程序上，以保护程序免受逆向工程和调试。以下是几种编程语言中的常见反调试方法： Java 检查JVM启动参数 检查启动参数中是否包含调试相关选项。 检查调试器线程 检查是否存在与调试相关的线程。 检查程序是否运行在IDE环境中 检查当前项目中是否有.vscode、.idea等文件夹 以上三种方式的实现： deb..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-10T05:36:24.000Z"}],["meta",{"property":"article:author","content":"echo0d"}],["meta",{"property":"article:tag","content":"反调试"}],["meta",{"property":"article:modified_time","content":"2025-01-10T05:36:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"反调试\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-10T05:36:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"echo0d\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"Java","slug":"java","link":"#java","children":[{"level":3,"title":"检查JVM启动参数","slug":"检查jvm启动参数","link":"#检查jvm启动参数","children":[]},{"level":3,"title":"检查调试器线程","slug":"检查调试器线程","link":"#检查调试器线程","children":[]},{"level":3,"title":"检查程序是否运行在IDE环境中","slug":"检查程序是否运行在ide环境中","link":"#检查程序是否运行在ide环境中","children":[]},{"level":3,"title":"debug symbol","slug":"debug-symbol","link":"#debug-symbol","children":[]}]},{"level":2,"title":"C/C++","slug":"c-c","link":"#c-c","children":[]},{"level":2,"title":"Python","slug":"python","link":"#python","children":[]},{"level":2,"title":"JavaScript (Node.js)","slug":"javascript-node-js","link":"#javascript-node-js","children":[]},{"level":2,"title":"C","slug":"c","link":"#c","children":[]}],"git":{"createdTime":1736331018000,"updatedTime":1736487384000,"contributors":[{"name":"echo0d","email":"echo0d@163.com","commits":3}]},"readingTime":{"minutes":3.21,"words":962},"filePathRelative":"develop/other/anti-debug.md","localizedDate":"2025年1月8日","excerpt":"\\n<p>反调试技术用于检测和防止调试器附加到程序上，以保护程序免受逆向工程和调试。以下是几种编程语言中的常见反调试方法：</p>\\n<h2>Java</h2>\\n<h3>检查JVM启动参数</h3>\\n<p>检查启动参数中是否包含调试相关选项。</p>\\n<h3>检查调试器线程</h3>\\n<p>检查是否存在与调试相关的线程。</p>\\n<h3>检查程序是否运行在IDE环境中</h3>\\n<p>检查当前项目中是否有<code>.vscode</code>、<code>.idea</code>等文件夹</p>\\n<p>以上三种方式的实现：</p>\\n<pre><code class=\\"language-java\\">\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>lang<span class=\\"token punctuation\\">.</span>management<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">ManagementFactory</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">util<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">SelfDelete</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">DebugStatus</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">Exception</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 检查是否在调试状态</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token function\\">isDebuggerAttached</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> <span class=\\"token function\\">isRunningInIDE</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>err<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"禁止调试！\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">SelfDelete</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">selfDelete</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">exit</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"正常运行\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 检查程序是否处于调试状态\\n     */</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">isDebuggerAttached</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 方法1：检查JVM启动参数中是否包含调试相关选项</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> arg <span class=\\"token operator\\">:</span> <span class=\\"token class-name\\">ManagementFactory</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getRuntimeMXBean</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getInputArguments</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>arg<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">contains</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"-agentlib:jdwp\\"</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> arg<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">contains</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"-Xdebug\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">// 方法2：检查是否存在调试器线程</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Thread</span> thread <span class=\\"token operator\\">:</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getAllStackTraces</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">keySet</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>thread<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">contains</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"JDB\\"</span><span class=\\"token punctuation\\">)</span>\\n                    <span class=\\"token operator\\">||</span> thread<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">contains</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Debug\\"</span><span class=\\"token punctuation\\">)</span>\\n                    <span class=\\"token operator\\">||</span> thread<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">contains</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Debugger\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token doc-comment comment\\">/**\\n     * 检查程序是否运行在IDE环境中\\n     */</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">boolean</span> <span class=\\"token function\\">isRunningInIDE</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">String</span> classPath <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getProperty</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"java.class.path\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">// 检查常见IDE的特定文件或目录</span>\\n        <span class=\\"token keyword\\">boolean</span> isInIDE <span class=\\"token operator\\">=</span> classPath<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">contains</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"idea\\"</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// IntelliJ IDEA</span>\\n                <span class=\\"token operator\\">||</span> classPath<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">contains</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"eclipse\\"</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// Eclipse</span>\\n                <span class=\\"token operator\\">||</span> classPath<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">contains</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"netbeans\\"</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// NetBeans</span>\\n                <span class=\\"token operator\\">||</span> classPath<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">contains</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"vscode\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// VSCode</span>\\n\\n        <span class=\\"token comment\\">// 检查IDE特定的文件或目录</span>\\n        isInIDE <span class=\\"token operator\\">=</span> isInIDE <span class=\\"token operator\\">||</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>io<span class=\\"token punctuation\\">.</span></span>File</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\".idea\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">exists</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// IntelliJ IDEA</span>\\n                <span class=\\"token operator\\">||</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>io<span class=\\"token punctuation\\">.</span></span>File</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\".project\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">exists</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// Eclipse</span>\\n                <span class=\\"token operator\\">||</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>io<span class=\\"token punctuation\\">.</span></span>File</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"nbproject\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">exists</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// NetBeans</span>\\n                <span class=\\"token operator\\">||</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>io<span class=\\"token punctuation\\">.</span></span>File</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\".vscode\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">exists</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// VSCode</span>\\n\\n        <span class=\\"token keyword\\">return</span> isInIDE<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre>","autoDesc":true}');export{k as comp,i as data};
