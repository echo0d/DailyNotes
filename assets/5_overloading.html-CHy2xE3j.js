import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as t,o as p}from"./app-vU8izl1I.js";const o={};function e(l,n){return p(),a("div",null,[...n[0]||(n[0]=[t(`<h1 id="_05-c-重载运算符和重载函数" tabindex="-1"><a class="header-anchor" href="#_05-c-重载运算符和重载函数"><span>05. C++ 重载运算符和重载函数</span></a></h1><p>在 C++ 中，<strong>重载（Overloading）</strong> 是一种允许在同一个作用域中定义多个同名函数或运算符的特性。通过重载，函数或运算符可以根据参数类型、数量或顺序的不同来实现不同的功能。重载分为<strong>函数重载</strong>和<strong>运算符重载</strong>两种。</p><hr><h2 id="_1-函数重载" tabindex="-1"><a class="header-anchor" href="#_1-函数重载"><span>1 <strong>函数重载</strong></span></a></h2><p>函数重载是指在同一个作用域中定义多个同名函数，但这些函数的参数列表（参数的类型、数量或顺序）必须不同。编译器通过参数列表来区分调用的是哪个函数。</p><h3 id="_1-1-规则" tabindex="-1"><a class="header-anchor" href="#_1-1-规则"><span>1.1 <strong>规则</strong></span></a></h3><ul><li>函数名相同。</li><li>参数列表必须不同（参数的类型、数量或顺序）。</li><li>返回值类型不能作为函数重载的依据。</li></ul><h3 id="_1-2-示例" tabindex="-1"><a class="header-anchor" href="#_1-2-示例"><span>1.2 <strong>示例</strong></span></a></h3><pre><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">// 函数重载示例</span>
<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;整数: &quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;浮点数: &quot;</span> <span class="token operator">&lt;&lt;</span> d <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;字符串: &quot;</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 调用第一个print函数</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 调用第二个print函数</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 调用第三个print函数</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="_1-3-注意事项" tabindex="-1"><a class="header-anchor" href="#_1-3-注意事项"><span>1.3 <strong>注意事项</strong></span></a></h3><ul><li>参数的默认值可能会导致歧义，因此在重载时应避免使用默认参数。</li><li>函数指针的使用可能会导致重载函数的调用不明确。</li></ul><hr><h2 id="_2-运算符重载" tabindex="-1"><a class="header-anchor" href="#_2-运算符重载"><span>2 <strong>运算符重载</strong></span></a></h2><p>运算符重载是指为 C++ 中的运算符赋予新的功能，使其能够作用于用户自定义类型（如类或结构体）。通过运算符重载，可以让自定义类型的对象像内置类型一样使用运算符。</p><h3 id="_2-1-规则" tabindex="-1"><a class="header-anchor" href="#_2-1-规则"><span>2.1 <strong>规则</strong></span></a></h3><ul><li>运算符必须是类的成员函数或全局函数。</li><li>至少有一个操作数是用户自定义类型（不能对内置类型的运算符进行重载）。</li><li>不能重载以下运算符： <ul><li><code>::</code>（作用域解析运算符）</li><li><code>.</code>（成员访问运算符）</li><li><code>.*</code>（成员指针访问运算符）</li><li><code>sizeof</code>（大小运算符）</li><li><code>typeid</code>（类型信息运算符）</li></ul></li></ul><h3 id="_2-2-示例" tabindex="-1"><a class="header-anchor" href="#_2-2-示例"><span>2.2 <strong>示例</strong></span></a></h3><pre><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Complex</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">double</span> real<span class="token punctuation">,</span> imag<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Complex</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">,</span> <span class="token keyword">double</span> i<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">real</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">imag</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token comment">// 重载加法运算符</span>
    Complex <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Complex<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">Complex</span><span class="token punctuation">(</span>real <span class="token operator">+</span> other<span class="token punctuation">.</span>real<span class="token punctuation">,</span> imag <span class="token operator">+</span> other<span class="token punctuation">.</span>imag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 重载输出运算符</span>
    <span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> <span class="token keyword">const</span> Complex<span class="token operator">&amp;</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        os <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>real <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; + &quot;</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>imag <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;i&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> os<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Complex <span class="token function">c1</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">c2</span><span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Complex c3 <span class="token operator">=</span> c1 <span class="token operator">+</span> c2<span class="token punctuation">;</span> <span class="token comment">// 使用重载的加法运算符</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;c1 + c2 = &quot;</span> <span class="token operator">&lt;&lt;</span> c3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 使用重载的输出运算符</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="_2-3-注意事项" tabindex="-1"><a class="header-anchor" href="#_2-3-注意事项"><span>2.3 <strong>注意事项</strong></span></a></h3><ul><li>运算符重载应遵循直观性和一致性原则，避免引入歧义。</li><li>重载的运算符应尽量保持与其原始语义一致。</li></ul><hr><h2 id="_3-函数重载与运算符重载的区别" tabindex="-1"><a class="header-anchor" href="#_3-函数重载与运算符重载的区别"><span>3 <strong>函数重载与运算符重载的区别</strong></span></a></h2><table><thead><tr><th>特性</th><th>函数重载</th><th>运算符重载</th></tr></thead><tbody><tr><td>作用对象</td><td>普通函数</td><td>运算符</td></tr><tr><td>是否必须是成员函数</td><td>否</td><td>部分运算符必须是成员函数</td></tr><tr><td>参数要求</td><td>参数列表必须不同</td><td>至少有一个参数是用户自定义类型</td></tr><tr><td>使用场景</td><td>提供多种函数实现</td><td>自定义类型支持运算符操作</td></tr></tbody></table><hr><h2 id="_4-重载的优点" tabindex="-1"><a class="header-anchor" href="#_4-重载的优点"><span>4 <strong>重载的优点</strong></span></a></h2><ul><li>提高代码的可读性和可维护性。</li><li>使代码更具灵活性，支持多种输入类型。</li><li>允许用户自定义类型与内置类型具有类似的操作方式。</li></ul><h2 id="_5-重载的限制" tabindex="-1"><a class="header-anchor" href="#_5-重载的限制"><span>5 <strong>重载的限制</strong></span></a></h2><ul><li>不能通过返回值类型区分重载函数。</li><li>某些运算符无法重载。</li><li>可能会引入歧义，导致代码难以理解。</li></ul><p>通过重载，C++ 提供了强大的多态性支持，使得代码更加灵活和易用。</p>`,29)])])}const i=s(o,[["render",e]]),u=JSON.parse('{"path":"/develop/CPP/5_overloading.html","title":"05. C++ 重载运算符和重载函数","lang":"zh-CN","frontmatter":{"category":"C++","tags":["Cpp"],"description":"05. C++ 重载运算符和重载函数 在 C++ 中，重载（Overloading） 是一种允许在同一个作用域中定义多个同名函数或运算符的特性。通过重载，函数或运算符可以根据参数类型、数量或顺序的不同来实现不同的功能。重载分为函数重载和运算符重载两种。 1 函数重载 函数重载是指在同一个作用域中定义多个同名函数，但这些函数的参数列表（参数的类型、数量或...","head":[["meta",{"property":"og:url","content":"https://echo0d.github.io/DailyNotes/develop/CPP/5_overloading.html"}],["meta",{"property":"og:site_name","content":"echo0d-notes"}],["meta",{"property":"og:title","content":"05. C++ 重载运算符和重载函数"}],["meta",{"property":"og:description","content":"05. C++ 重载运算符和重载函数 在 C++ 中，重载（Overloading） 是一种允许在同一个作用域中定义多个同名函数或运算符的特性。通过重载，函数或运算符可以根据参数类型、数量或顺序的不同来实现不同的功能。重载分为函数重载和运算符重载两种。 1 函数重载 函数重载是指在同一个作用域中定义多个同名函数，但这些函数的参数列表（参数的类型、数量或..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-07T01:17:50.000Z"}],["meta",{"property":"article:author","content":"echo0d"}],["meta",{"property":"article:tag","content":"Cpp"}],["meta",{"property":"article:modified_time","content":"2025-05-07T01:17:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"05. C++ 重载运算符和重载函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-07T01:17:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"echo0d\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"1 函数重载","slug":"_1-函数重载","link":"#_1-函数重载","children":[{"level":3,"title":"1.1 规则","slug":"_1-1-规则","link":"#_1-1-规则","children":[]},{"level":3,"title":"1.2 示例","slug":"_1-2-示例","link":"#_1-2-示例","children":[]},{"level":3,"title":"1.3 注意事项","slug":"_1-3-注意事项","link":"#_1-3-注意事项","children":[]}]},{"level":2,"title":"2 运算符重载","slug":"_2-运算符重载","link":"#_2-运算符重载","children":[{"level":3,"title":"2.1 规则","slug":"_2-1-规则","link":"#_2-1-规则","children":[]},{"level":3,"title":"2.2 示例","slug":"_2-2-示例","link":"#_2-2-示例","children":[]},{"level":3,"title":"2.3 注意事项","slug":"_2-3-注意事项","link":"#_2-3-注意事项","children":[]}]},{"level":2,"title":"3 函数重载与运算符重载的区别","slug":"_3-函数重载与运算符重载的区别","link":"#_3-函数重载与运算符重载的区别","children":[]},{"level":2,"title":"4 重载的优点","slug":"_4-重载的优点","link":"#_4-重载的优点","children":[]},{"level":2,"title":"5 重载的限制","slug":"_5-重载的限制","link":"#_5-重载的限制","children":[]}],"git":{"createdTime":1744688109000,"updatedTime":1746580670000,"contributors":[{"name":"echo0d","email":"echo0d@163.com","commits":2}]},"readingTime":{"minutes":3.07,"words":922},"filePathRelative":"develop/CPP/5_overloading.md","localizedDate":"2025年4月15日","excerpt":"","autoDesc":true}');export{i as comp,u as data};
