const e=JSON.parse(`{"key":"v-1c694910","path":"/CodeAudittutorial/1-JavaBase/7-DynamicProxy.html","title":"Java代码审计-动态代理","lang":"zh-CN","frontmatter":{"description":"代理是 Java中的一种设计模式，主要用于提供对目标对象另外的访问方式，即通过代理对象访问目标对象。这样，就可以在目标对象实现的基础上，加强额外的功能操作，实现扩展目标对象的功能。代理模式的关键点在于代理对象和目标对象，代理对象是对目标对象的扩展，并且代理对象会调用目标对象。Java 代理的方式有3种：静态代理、动态代理和CGLib代理。 1、静态代理...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/DailyNotes/CodeAudittutorial/1-JavaBase/7-DynamicProxy.html"}],["meta",{"property":"og:site_name","content":"echo0d'notes"}],["meta",{"property":"og:title","content":"Java代码审计-动态代理"}],["meta",{"property":"og:description","content":"代理是 Java中的一种设计模式，主要用于提供对目标对象另外的访问方式，即通过代理对象访问目标对象。这样，就可以在目标对象实现的基础上，加强额外的功能操作，实现扩展目标对象的功能。代理模式的关键点在于代理对象和目标对象，代理对象是对目标对象的扩展，并且代理对象会调用目标对象。Java 代理的方式有3种：静态代理、动态代理和CGLib代理。 1、静态代理..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-docs-demo.netlify.app/DailyNotes/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-24T03:35:37.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Java代码审计-动态代理"}],["meta",{"property":"article:author","content":"echo0d"}],["meta",{"property":"article:modified_time","content":"2023-12-24T03:35:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java代码审计-动态代理\\",\\"image\\":[\\"https://vuepress-theme-hope-docs-demo.netlify.app/DailyNotes/\\"],\\"dateModified\\":\\"2023-12-24T03:35:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"echo0d\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"1、静态代理","slug":"_1、静态代理","link":"#_1、静态代理","children":[]},{"level":2,"title":"2、动态代理","slug":"_2、动态代理","link":"#_2、动态代理","children":[{"level":3,"title":"2.1、Proxy类","slug":"_2-1、proxy类","link":"#_2-1、proxy类","children":[]},{"level":3,"title":"2.2、InvocationHandler接口","slug":"_2-2、invocationhandler接口","link":"#_2-2、invocationhandler接口","children":[]}]}],"git":{"createdTime":1703388937000,"updatedTime":1703388937000,"contributors":[{"name":"echo0d","email":"57850812+echo0d@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.39,"words":1318},"filePathRelative":"CodeAudittutorial/1-JavaBase/7-DynamicProxy.md","localizedDate":"2023年12月24日","autoDesc":true,"excerpt":""}`);export{e as data};
