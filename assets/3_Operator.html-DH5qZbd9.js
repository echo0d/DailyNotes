import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o}from"./app-vU8izl1I.js";const p={};function c(t,n){return o(),a("div",null,[...n[0]||(n[0]=[e(`<h1 id="_03-c语言-运算符" tabindex="-1"><a class="header-anchor" href="#_03-c语言-运算符"><span>03. C语言-运算符</span></a></h1><h2 id="_1-算数运算符" tabindex="-1"><a class="header-anchor" href="#_1-算数运算符"><span>1 算数运算符</span></a></h2><p>算术运算符专门用于算术运算，主要有下面几种。</p><ul><li><code>+</code>：正值运算符（一元运算符）</li><li><code>-</code>：负值运算符（一元运算符）</li><li><code>+</code>：加法运算符（二元运算符）</li><li><code>-</code>：减法运算符（二元运算符）</li><li><code>*</code>：乘法运算符</li><li><code>/</code>：除法运算符</li><li><code>%</code>：余值运算符</li></ul><p>（1）<code>+</code>，<code>-</code></p><p><code>+</code>和<code>-</code>既可以作为一元运算符，也可以作为二元运算符。所谓“一元运算符”，指的是只需要一个运算数就可以执行。一元运算符<code>-</code>用来改变一个值的正负号。</p><pre><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，<code>-</code>将<code>12</code>这个值变成<code>-12</code>。</p><p>一元运算符<code>+</code>对正负值没有影响，是一个完全可以省略的运算符，但是写了也不会报错。</p><pre><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token operator">+</span>x<span class="token punctuation">;</span>
</code></pre><p>上面示例中，变量<code>y</code>的值还是<code>-12</code>，因为<code>+</code>不会改变正负值。</p><p>二元运算符<code>+</code>和<code>-</code>用来完成加法和减法。</p><pre><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">22</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">61</span> <span class="token operator">-</span> <span class="token number">23</span><span class="token punctuation">;</span>
</code></pre><p>（2）<code>*</code></p><p>运算符<code>*</code>用来完成乘法。</p><pre><code class="language-c"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%i\\n&quot;</span><span class="token punctuation">,</span> num <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 25</span>
</code></pre><p>（3）<code>/</code></p><p>运算符<code>/</code>用来完成除法。注意，两个整数相除，得到还是一个整数。</p><pre><code class="language-c"><span class="token keyword">float</span> x <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 1.000000</span>
</code></pre><p>上面示例中，尽管变量<code>x</code>的类型是<code>float</code>（浮点数），但是<code>6 / 4</code>得到的结果是<code>1.0</code>，而不是<code>1.5</code>。原因就在于 C 语言里面的整数除法是整除，只会返回整数部分，丢弃小数部分。</p><p>如果希望得到浮点数的结果，两个运算数必须至少有一个浮点数，这时 C 语言就会进行浮点数除法。</p><pre><code class="language-c"><span class="token keyword">float</span> x <span class="token operator">=</span> <span class="token number">6.0</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 或者写成 6 / 4.0</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 1.500000</span>
</code></pre><p>上面示例中，<code>6.0 / 4</code>表示进行浮点数除法，得到的结果就是<code>1.5</code>。</p><p>下面是另一个例子。</p><pre><code class="language-c"><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
score <span class="token operator">=</span> <span class="token punctuation">(</span>score <span class="token operator">/</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span>
</code></pre><p>上面的代码，你可能觉得经过运算，<code>score</code>会等于<code>25</code>，但是实际上<code>score</code>等于<code>0</code>。这是因为<code>score / 20</code>是整除，会得到一个整数值<code>0</code>，所以乘以<code>100</code>后得到的也是<code>0</code>。</p><p>为了得到预想的结果，可以将除数<code>20</code>改成<code>20.0</code>，让整除变成浮点数除法。</p><pre><code class="language-c">score <span class="token operator">=</span> <span class="token punctuation">(</span>score <span class="token operator">/</span> <span class="token number">20.0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span>
</code></pre><p>（4）<code>%</code></p><p>运算符<code>%</code>表示求模运算，即返回两个整数相除的余值。这个运算符只能用于整数，不能用于浮点数。</p><pre><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre><p>负数求模的规则是，结果的正负号由第一个运算数的正负号决定。</p><pre><code class="language-c"><span class="token number">11</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token comment">// 1</span>
<span class="token operator">-</span><span class="token number">11</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token comment">// -1</span>
<span class="token operator">-</span><span class="token number">11</span> <span class="token operator">%</span> <span class="token number">5</span> <span class="token comment">// -1</span>
</code></pre><p>上面示例中，第一个运算数的正负号（<code>11</code>或<code>-11</code>）决定了结果的正负号。</p><p>（5）赋值运算的简写形式</p><p>如果变量对自身的值进行算术运算，C 语言提供了简写形式，允许将赋值运算符和算术运算符结合成一个运算符。</p><ul><li><code>+=</code></li><li><code>-=</code></li><li><code>*=</code></li><li><code>/=</code></li><li><code>%=</code></li></ul><p>下面是一些例子。</p><pre><code class="language-c">i <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// 等同于 i = i + 3</span>
i <span class="token operator">-=</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token comment">// 等同于 i = i - 8</span>
i <span class="token operator">*=</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token comment">// 等同于 i = i * 9</span>
i <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 等同于 i = i / 2</span>
i <span class="token operator">%=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">// 等同于 i = i % 5</span>
</code></pre><h2 id="_2-自增运算符-自减运算符" tabindex="-1"><a class="header-anchor" href="#_2-自增运算符-自减运算符"><span>2 自增运算符，自减运算符</span></a></h2><p>C 语言提供两个运算符，对变量自身进行<code>+ 1</code>和<code>- 1</code>的操作。</p><ul><li><code>++</code>：自增运算符</li><li><code>--</code>：自减运算符</li></ul><pre><code class="language-c">i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 等同于 i = i + 1</span>
i<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 等同于 i = i - 1</span>
</code></pre><p>这两个运算符放在变量的前面或后面，结果是不一样的。<code>++var</code>和<code>--var</code>是先执行自增或自减操作，再返回操作后<code>var</code>的值；<code>var++</code>和<code>var--</code>则是先返回操作前<code>var</code>的值，再执行自增或自减操作。</p><pre><code class="language-c"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> j<span class="token punctuation">;</span>

j <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">++</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// i: 43</span>
<span class="token comment">// j: 52</span>

j <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token comment">// i: 44</span>
<span class="token comment">// j: 54</span>
</code></pre><p>上面示例中，自增运算符的位置差异，会导致变量<code>j</code>得到不同的值。这样的写法很容易出现意料之外的结果，为了消除意外，可以改用下面的写法。</p><pre><code class="language-c"><span class="token comment">/* 写法一 */</span>
j <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
i<span class="token operator">++</span><span class="token punctuation">;</span>

<span class="token comment">/* 写法二 */</span>
i<span class="token operator">++</span><span class="token punctuation">;</span>
j <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，变量<code>i</code>的自增运算与返回值是分离的两个步骤，这样就不太会出错，也提高了代码的可读性。</p><h2 id="_3-关系运算符" tabindex="-1"><a class="header-anchor" href="#_3-关系运算符"><span>3 关系运算符</span></a></h2><p>C 语言用于比较的表达式，称为“关系表达式”（relational expression），里面使用的运算符就称为“关系运算符”（relational operator），主要有下面6个。</p><ul><li><code>&gt;</code> 大于运算符</li><li><code>&lt;</code> 小于运算符</li><li><code>&gt;=</code> 大于等于运算符</li><li><code>&lt;=</code> 小于等于运算符</li><li><code>==</code> 相等运算符</li><li><code>!=</code> 不相等运算符</li></ul><p>下面是一些例子。</p><pre><code class="language-c">a <span class="token operator">==</span> b<span class="token punctuation">;</span>
a <span class="token operator">!=</span> b<span class="token punctuation">;</span>
a <span class="token operator">&lt;</span> b<span class="token punctuation">;</span>
a <span class="token operator">&gt;</span> b<span class="token punctuation">;</span>
a <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span>
a <span class="token operator">&gt;=</span> b<span class="token punctuation">;</span>
</code></pre><p>关系表达式通常返回<code>0</code>或<code>1</code>，表示真伪。C 语言中，<code>0</code>表示伪，所有非零值表示真。比如，<code>20 &gt; 12</code>返回<code>1</code>，<code>12 &gt; 20</code>返回<code>0</code>。</p><p>关系表达式常用于<code>if</code>或<code>while</code>结构。</p><pre><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;x is 3.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>注意，相等运算符<code>==</code>与赋值运算符<code>=</code>是两个不一样的运算符，不要混淆。有时候，可能会不小心写出下面的代码，它可以运行，但很容易出现意料之外的结果。</p><pre><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><p>上面示例中，原意是<code>x == 3</code>，但是不小心写成<code>x = 3</code>。这个式子表示对变量<code>x</code>赋值<code>3</code>，它的返回值为<code>3</code>，所以<code>if</code>判断总是为真。</p><p>为了防止出现这种错误，有的程序员喜欢将变量写在等号的右边。</p><pre><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><p>这样的话，如果把<code>==</code>误写成<code>=</code>，编译器就会报错。</p><pre><code class="language-c"><span class="token comment">/* 报错 */</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">=</span> x<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><p>另一个需要避免的错误是，多个关系运算符不宜连用。</p><pre><code class="language-c">i <span class="token operator">&lt;</span> j <span class="token operator">&lt;</span> k
</code></pre><p>上面示例中，连续使用两个小于运算符。这是合法表达式，不会报错，但是通常达不到想要的结果，即不是保证变量<code>j</code>的值在<code>i</code>和<code>k</code>之间。因为关系运算符是从左到右计算，所以实际执行的是下面的表达式。</p><pre><code class="language-c"><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&lt;</span> k
</code></pre><p>上面式子中，<code>i &lt; j</code>返回<code>0</code>或<code>1</code>，所以最终是<code>0</code>或<code>1</code>与变量<code>k</code>进行比较。如果想要判断变量<code>j</code>的值是否在<code>i</code>和<code>k</code>之间，应该使用下面的写法。</p><pre><code class="language-c">i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> k
</code></pre><h2 id="_4-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_4-逻辑运算符"><span>4 逻辑运算符</span></a></h2><p>逻辑运算符提供逻辑判断功能，用于构建更复杂的表达式，主要有下面三个运算符。</p><ul><li><code>!</code>：否运算符（改变单个表达式的真伪）。</li><li><code>&amp;&amp;</code>：与运算符（两侧的表达式都为真，则为真，否则为伪）。</li><li><code>||</code>：或运算符（两侧至少有一个表达式为真，则为真，否则为伪）。</li></ul><p>下面是与运算符的例子。</p><pre><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Doing something!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，只有<code>x &lt; 10</code>和<code>y &gt; 20</code>同时为真，<code>x &lt; 10 &amp;&amp; y &gt; 20</code>才会为真。</p><p>下面是否运算符的例子。</p><pre><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;x is not less than 12\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，由于否运算符<code>!</code>具有比<code>&lt;</code>更高的优先级，所以必须使用括号，才能对表达式<code>x &lt; 12</code>进行否运算。当然，合理的写法是<code>if (x &gt;= 12)</code>，这里只是为了举例。</p><p>对于逻辑运算符来说，任何非零值都表示真，零值表示伪。比如，<code>5 || 0</code>会返回<code>1</code>，<code>5 &amp;&amp; 0</code>会返回<code>0</code>。</p><p>逻辑运算符还有一个特点，它总是<strong>先对左侧的表达式求值，再对右边的表达式求值</strong>，这个顺序是保证的。如果左边的表达式满足逻辑运算符的条件，就不再对右边的表达式求值。这种情况称为“短路”。</p><pre><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">12</span><span class="token operator">/</span>number <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><p>上面示例中，如果<code>&amp;&amp;</code>左侧的表达式（<code>number != 0</code>）为伪，即<code>number</code>等于<code>0</code>时，右侧的表达式（<code>12/number == 2</code>）是不会执行的。因为这时左侧表达式返回<code>0</code>，整个<code>&amp;&amp;</code>表达式肯定为伪，就直接返回<code>0</code>，不再执行右侧的表达式了。</p><p>由于逻辑运算符的执行顺序是先左后右，所以下面的代码是有问题的。</p><pre><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><p>上面示例中，执行左侧表达式后，变量<code>x</code>的值就已经变了。等到执行右侧表达式的时候，是用新的值在计算，这通常不是原始意图。</p><h2 id="_5-位运算符" tabindex="-1"><a class="header-anchor" href="#_5-位运算符"><span>5 位运算符</span></a></h2><p>C 语言提供一些位运算符，用来操作二进制位（bit）。</p><p>（1）取反运算符<code>～</code></p><p>取反运算符<code>～</code>是一个一元运算符，用来将每一个二进制位变成相反值，即<code>0</code>变成<code>1</code>，<code>1</code>变成<code>0</code>。</p><pre><code class="language-c"><span class="token comment">// 返回 01101100</span>
<span class="token operator">~</span> <span class="token number">10010011</span>
</code></pre><p>上面示例中，<code>~</code>对每个二进制位取反，就得到了一个新的值。</p><p>注意，<code>~</code>运算符不会改变变量的值，只是返回一个新的值。</p><p>（2）与运算符<code>&amp;</code></p><p>与运算符<code>&amp;</code>将两个值的每一个二进制位进行比较，返回一个新的值。当两个二进制位都为<code>1</code>，就返回<code>1</code>，否则返回<code>0</code>。</p><pre><code class="language-c"><span class="token comment">// 返回 00010001</span>
<span class="token number">10010011</span> <span class="token operator">&amp;</span> <span class="token number">00111101</span>
</code></pre><p>上面示例中，两个八位二进制数进行逐位比较，返回一个新的值。</p><p>与运算符<code>&amp;</code>可以与赋值运算符<code>=</code>结合，简写成<code>&amp;=</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
val <span class="token operator">=</span> val <span class="token operator">&amp;</span> <span class="token number">0377</span><span class="token punctuation">;</span>

<span class="token comment">// 简写成</span>
val <span class="token operator">&amp;=</span> <span class="token number">0377</span><span class="token punctuation">;</span>
</code></pre><p>（3）或运算符<code>|</code></p><p>或运算符<code>|</code>将两个值的每一个二进制位进行比较，返回一个新的值。两个二进制位只要有一个为<code>1</code>（包含两个都为<code>1</code>的情况），就返回<code>1</code>，否则返回<code>0</code>。</p><pre><code class="language-c"><span class="token comment">// 返回 10111111</span>
<span class="token number">10010011</span> <span class="token operator">|</span> <span class="token number">00111101</span>
</code></pre><p>或运算符<code>|</code>可以与赋值运算符<code>=</code>结合，简写成<code>|=</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
val <span class="token operator">=</span> val <span class="token operator">|</span> <span class="token number">0377</span><span class="token punctuation">;</span>

<span class="token comment">// 简写为</span>
val <span class="token operator">|=</span> <span class="token number">0377</span><span class="token punctuation">;</span>
</code></pre><p>（4）异或运算符<code>^</code></p><p>异或运算符<code>^</code>将两个值的每一个二进制位进行比较，返回一个新的值。两个二进制位有且仅有一个为<code>1</code>，就返回<code>1</code>，否则返回<code>0</code>。</p><pre><code class="language-c"><span class="token comment">// 返回 10101110</span>
<span class="token number">10010011</span> <span class="token operator">^</span> <span class="token number">00111101</span>
</code></pre><p>异或运算符<code>^</code>可以与赋值运算符<code>=</code>结合，简写成<code>^=</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
val <span class="token operator">=</span> val <span class="token operator">^</span> <span class="token number">0377</span><span class="token punctuation">;</span>

<span class="token comment">// 简写为</span>
val <span class="token operator">^=</span> <span class="token number">0377</span><span class="token punctuation">;</span>
</code></pre><p>（5）左移运算符<code>&lt;&lt;</code></p><p>左移运算符<code>&lt;&lt;</code>将左侧运算数的每一位，向左移动指定的位数，尾部空出来的位置使用<code>0</code>填充。</p><pre><code class="language-c"><span class="token comment">// 1000101000</span>
<span class="token number">10001010</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span>
</code></pre><p>上面示例中，<code>10001010</code>的每一个二进制位，都向左侧移动了两位。</p><p>左移运算符相当于将运算数乘以2的指定次方，比如左移2位相当于乘以4（2的2次方）。</p><p>左移运算符<code>&lt;&lt;</code>可以与赋值运算符<code>=</code>结合，简写成<code>&lt;&lt;=</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
val <span class="token operator">=</span> val <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token comment">// 简写为</span>
val <span class="token operator">&lt;&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><p>（6）右移运算符<code>&gt;&gt;</code></p><p>右移运算符<code>&gt;&gt;</code>将左侧运算数的每一位，向右移动指定的位数，尾部无法容纳的值将丢弃，头部空出来的位置使用<code>0</code>填充。</p><pre><code class="language-c"><span class="token comment">// 返回 00100010</span>
<span class="token number">10001010</span> <span class="token operator">&gt;&gt;</span> <span class="token number">2</span>
</code></pre><p>上面示例中，<code>10001010</code>的每一个二进制位，都向右移动两位。最低的两位<code>10</code>被丢弃，头部多出来的两位补<code>0</code>，所以最后得到<code>00100010</code>。</p><p>注意，右移运算符最好只用于无符号整数，不要用于负数。因为不同系统对于右移后如何处理负数的符号位，有不同的做法，可能会得到不一样的结果。</p><p>右移运算符相当于将运算数除以2的指定次方，比如右移2位就相当于除以4（2的2次方）。</p><p>右移运算符<code>&gt;&gt;</code>可以与赋值运算符<code>=</code>结合，简写成<code>&gt;&gt;=</code>。</p><pre><code class="language-c"><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
val <span class="token operator">=</span> val <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token comment">// 简写为</span>
val <span class="token operator">&gt;&gt;=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><h2 id="_6-逗号运算符" tabindex="-1"><a class="header-anchor" href="#_6-逗号运算符"><span>6 逗号运算符</span></a></h2><p>逗号运算符用于将多个表达式写在一起，从左到右依次运行每个表达式。</p><pre><code class="language-c">x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，有两个表达式（<code>x = 10</code>和<code>y = 20</code>），逗号使得它们可以放在同一条语句里面。</p><p>逗号运算符返回最后一个表达式的值，作为整个语句的值。</p><pre><code class="language-c"><span class="token keyword">int</span> x<span class="token punctuation">;</span>

x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，括号里面的逗号运算符，返回最后一个表达式的值，所以变量<code>x</code>等于<code>3</code>。</p><h2 id="_7-运算优先级" tabindex="-1"><a class="header-anchor" href="#_7-运算优先级"><span>7 运算优先级</span></a></h2><p>优先级指的是，如果一个表达式包含多个运算符，哪个运算符应该优先执行。各种运算符的优先级是不一样的。</p><pre><code class="language-c"><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，表达式<code>3 + 4 * 5</code>里面既有加法运算符（<code>+</code>），又有乘法运算符（<code>*</code>）。由于乘法的优先级高于加法，所以会先计算<code>4 * 5</code>，而不是先计算<code>3 + 4</code>。</p><p>如果两个运算符优先级相同，则根据运算符是左结合，还是右结合，决定执行顺序。大部分运算符是左结合（从左到右执行），少数运算符是右结合（从右到左执行），比如赋值运算符（<code>=</code>）。</p><pre><code class="language-c"><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，<code>*</code>和<code>/</code>的优先级相同，它们都是左结合运算符，所以从左到右执行，先计算<code>5 * 6</code>，再计算<code>30 / 2</code>。</p><p>运算符的优先级顺序很复杂。下面是部分运算符的优先级顺序（按照优先级从高到低排列）。</p><ul><li>圆括号（<code>()</code>）</li><li>自增运算符（<code>++</code>），自减运算符（<code>--</code>）</li><li>一元运算符（<code>+</code>和<code>-</code>）</li><li>乘法（<code>*</code>），除法（<code>/</code>）</li><li>加法（<code>+</code>），减法（<code>-</code>）</li><li>关系运算符（<code>&lt;</code>、<code>&gt;</code>等）</li><li>赋值运算符（<code>=</code>）</li></ul><p>由于圆括号的优先级最高，可以使用它改变其他运算符的优先级。</p><pre><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，由于添加了圆括号，加法会先于乘法进行运算。</p><p>完全记住所有运算符的优先级没有必要，解决方法是多用圆括号，防止出现意料之外的情况，也有利于提高代码的可读性。</p>`,143)])])}const r=s(p,[["render",c]]),k=JSON.parse('{"path":"/develop/C/3_Operator.html","title":"03. C语言-运算符","lang":"zh-CN","frontmatter":{"category":"C","tags":["C"],"description":"03. C语言-运算符 1 算数运算符 算术运算符专门用于算术运算，主要有下面几种。 +：正值运算符（一元运算符） -：负值运算符（一元运算符） +：加法运算符（二元运算符） -：减法运算符（二元运算符） *：乘法运算符 /：除法运算符 %：余值运算符 （1）+，- +和-既可以作为一元运算符，也可以作为二元运算符。所谓“一元运算符”，指的是只需要一个...","head":[["meta",{"property":"og:url","content":"https://echo0d.github.io/DailyNotes/develop/C/3_Operator.html"}],["meta",{"property":"og:site_name","content":"echo0d-notes"}],["meta",{"property":"og:title","content":"03. C语言-运算符"}],["meta",{"property":"og:description","content":"03. C语言-运算符 1 算数运算符 算术运算符专门用于算术运算，主要有下面几种。 +：正值运算符（一元运算符） -：负值运算符（一元运算符） +：加法运算符（二元运算符） -：减法运算符（二元运算符） *：乘法运算符 /：除法运算符 %：余值运算符 （1）+，- +和-既可以作为一元运算符，也可以作为二元运算符。所谓“一元运算符”，指的是只需要一个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-11T02:11:10.000Z"}],["meta",{"property":"article:author","content":"echo0d"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:modified_time","content":"2025-04-11T02:11:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"03. C语言-运算符\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-11T02:11:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"echo0d\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"1 算数运算符","slug":"_1-算数运算符","link":"#_1-算数运算符","children":[]},{"level":2,"title":"2 自增运算符，自减运算符","slug":"_2-自增运算符-自减运算符","link":"#_2-自增运算符-自减运算符","children":[]},{"level":2,"title":"3 关系运算符","slug":"_3-关系运算符","link":"#_3-关系运算符","children":[]},{"level":2,"title":"4 逻辑运算符","slug":"_4-逻辑运算符","link":"#_4-逻辑运算符","children":[]},{"level":2,"title":"5 位运算符","slug":"_5-位运算符","link":"#_5-位运算符","children":[]},{"level":2,"title":"6 逗号运算符","slug":"_6-逗号运算符","link":"#_6-逗号运算符","children":[]},{"level":2,"title":"7 运算优先级","slug":"_7-运算优先级","link":"#_7-运算优先级","children":[]}],"git":{"createdTime":1739005802000,"updatedTime":1744337470000,"contributors":[{"name":"echo0d","email":"echo0d@163.com","commits":2}]},"readingTime":{"minutes":11.58,"words":3474},"filePathRelative":"develop/C/3_Operator.md","localizedDate":"2025年2月8日","excerpt":"","autoDesc":true}');export{r as comp,k as data};
