import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as t}from"./app-O_Y7TXmq.js";const p="/DailyNotes/assets/image-20240612221142796-qlfMVqt0.png",o={},e=t(`<h1 id="_06-方法" tabindex="-1"><a class="header-anchor" href="#_06-方法" aria-hidden="true">#</a> 06. 方法</h1><h2 id="_6-1-方法声明" tabindex="-1"><a class="header-anchor" href="#_6-1-方法声明" aria-hidden="true">#</a> 6.1. 方法声明</h2><p>方法是与特定类型关联的函数</p><p>方法有一个参数，称为接收者（receiver），它位于方法名称之前，并指定了方法作用的类型。接收者可以是任何类型，包括非结构体类型。</p><p>方法使用点符号将方法与实例进行关联。方法可以访问和修改其接收者类型的数据，这使得方法能够实现面向对象的特性，例如封装和封装的数据。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> geometry

<span class="token keyword">import</span> <span class="token string">&quot;math&quot;</span>

<span class="token keyword">type</span> Point <span class="token keyword">struct</span><span class="token punctuation">{</span> X<span class="token punctuation">,</span> Y <span class="token builtin">float64</span> <span class="token punctuation">}</span>

<span class="token comment">// traditional function</span>
<span class="token keyword">func</span> <span class="token function">Distance</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q Point<span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Hypot</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>X<span class="token operator">-</span>p<span class="token punctuation">.</span>X<span class="token punctuation">,</span> q<span class="token punctuation">.</span>Y<span class="token operator">-</span>p<span class="token punctuation">.</span>Y<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// same thing, but as a method of the Point type</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p Point<span class="token punctuation">)</span> <span class="token function">Distance</span><span class="token punctuation">(</span>q Point<span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Hypot</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>X<span class="token operator">-</span>p<span class="token punctuation">.</span>X<span class="token punctuation">,</span> q<span class="token punctuation">.</span>Y<span class="token operator">-</span>p<span class="token punctuation">.</span>Y<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Go语言中，并不会像其它语言那样用this或者self作为接收器，可以任意的选择接收器的名字。命名方式可以使用其类型的第一个字母，比如这里使用了Point的首字母p。</p><p>调用方式举例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>p <span class="token operator">:=</span> Point<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>
q <span class="token operator">:=</span> Point<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">Distance</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;5&quot;, function call</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// &quot;5&quot;, method call</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，上面的两个函数调用都是<code>Distance</code>，但是却没有发生冲突。第一个<code>Distance</code>的调用实际上用的是包级别的函数<code>geometry.Distance</code>，而第二个则是使用刚刚声明的Point，调用的是Point类型下声明的<code>Point.Distance</code>方法。</p><p>这种<code>p.Distance</code>的表达式叫做选择器，因为他会选择合适的对应p这个对象的<code>Distance</code>方法来执行。选择器也会被用来选择一个struct类型的字段，比如<code>p.X</code>。由于方法和字段都是在同一命名空间，所以如果我们在这里声明一个<code>X</code>方法的话，编译器会报错，因为在调用<code>p.X</code>时会有歧义。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// A Path is a journey connecting the points with straight lines.</span>
<span class="token keyword">type</span> Path <span class="token punctuation">[</span><span class="token punctuation">]</span>Point

<span class="token comment">// Distance returns the distance traveled along the path.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>path Path<span class="token punctuation">)</span> <span class="token function">Distance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
	sum <span class="token operator">:=</span> <span class="token number">0.0</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> path <span class="token punctuation">{</span>
		<span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			sum <span class="token operator">+=</span> path<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> sum
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    perim <span class="token operator">:=</span> Path<span class="token punctuation">{</span>
		<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>perim<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;12&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面两个对Distance名字的方法的调用中，编译器会根据方法的名字以及接收器来决定具体调用的是哪一个函数。第一个例子中path[i-1]数组中的类型是Point，因此Point.Distance这个方法被调用；在第二个例子中perim的类型是Path，因此Distance调用的是Path.Distance。</p><p>方法比之函数的一些好处：方法名可以简短。当我们在包外调用的时候这种好处就会被放大，因为我们可以使用这个短名字，而可以省略掉包的名字，下面是例子：</p><div class="language-Go line-numbers-mode" data-ext="Go"><pre class="language-Go"><code>import &quot;ch6/geometry&quot;

perim := geometry.Path{{1, 1}, {5, 1}, {5, 4}, {1, 1}}
fmt.Println(geometry.PathDistance(perim)) // &quot;12&quot;, standalone function
fmt.Println(perim.Distance())             // &quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-2-基于指针对象的方法" tabindex="-1"><a class="header-anchor" href="#_6-2-基于指针对象的方法" aria-hidden="true">#</a> 6.2. 基于指针对象的方法</h2><p>当调用一个函数时，会对其每一个参数值进行拷贝，如果一个函数需要更新一个变量，或者函数的其中一个参数实在太大我们希望能够避免进行这种默认的拷贝，就需要用到指针了。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Point<span class="token punctuation">)</span> <span class="token function">ScaleBy</span><span class="token punctuation">(</span>factor <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    p<span class="token punctuation">.</span>X <span class="token operator">*=</span> factor
    p<span class="token punctuation">.</span>Y <span class="token operator">*=</span> factor
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>想要调用指针类型方法<code>(*Point).ScaleBy</code>，只要提供一个Point类型的指针即可，像下面这样。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>r <span class="token operator">:=</span> <span class="token operator">&amp;</span>Point<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>
r<span class="token punctuation">.</span><span class="token function">ScaleBy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>r<span class="token punctuation">)</span> <span class="token comment">// &quot;{2, 4}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者这样：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>p <span class="token operator">:=</span> Point<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>
pptr <span class="token operator">:=</span> <span class="token operator">&amp;</span>p
pptr<span class="token punctuation">.</span><span class="token function">ScaleBy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// &quot;{2, 4}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者这样:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>p <span class="token operator">:=</span> Point<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>
<span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ScaleBy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// &quot;{2, 4}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过后面两种方法有些笨拙。幸运的是，go语言本身在这种地方会帮到我们。如果接收器p是一个Point类型的变量，并且其方法需要一个Point指针作为接收器，我们可以用下面这种简短的写法：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>p<span class="token punctuation">.</span><span class="token function">ScaleBy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编译器会隐式地帮我们用&amp;p去调用ScaleBy这个方法。这种简写方法只适用于“变量”，包括struct里的字段比如p.X，以及array和slice内的元素比如perim[0]。我们不能通过一个无法取到地址的接收器来调用指针方法，比如临时变量的内存地址就无法获取得到：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>Point<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">ScaleBy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// compile error: can&#39;t take address of Point literal</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>译注：</strong> 作者这里说的比较绕，其实有两点：</p><ol><li>不管你的method的receiver是指针类型还是非指针类型，都是可以通过指针/非指针类型进行调用的，编译器会帮你做类型转换。</li><li>在声明一个method的receiver该是指针还是非指针类型时，你需要考虑两方面的因素，第一方面是这个对象本身是不是特别大，如果声明为非指针变量时，调用会产生一次拷贝；第二方面是如果你用指针类型作为receiver，那么你一定要注意，这种指针类型指向的始终是一块内存地址，就算你对其进行了拷贝。</li></ol><h3 id="_6-2-1-nil也是合法的接收器类型" tabindex="-1"><a class="header-anchor" href="#_6-2-1-nil也是合法的接收器类型" aria-hidden="true">#</a> 6.2.1. nil也是合法的接收器类型</h3><p>就像一些函数允许nil指针作为参数一样，方法理论上也可以用nil指针作为其接收器，尤其当nil对于对象来说是合法的零值时，比如map或者slice。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>m <span class="token operator">:=</span> url<span class="token punctuation">.</span>Values<span class="token punctuation">{</span><span class="token string">&quot;lang&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&quot;en&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment">// direct construction</span>
m<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;item&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span>
m<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;item&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span>

fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;lang&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;en&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;q&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// &quot;&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;item&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;1&quot;      (first value)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token string">&quot;item&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment">// &quot;[1 2]&quot;  (direct map access)</span>

m <span class="token operator">=</span> <span class="token boolean">nil</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;item&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;&quot;</span>
m<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">&quot;item&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span>         <span class="token comment">// panic: assignment to entry in nil map</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="image-20240612221142796" tabindex="0" loading="lazy"><figcaption>image-20240612221142796</figcaption></figure><p>对Get的最后一次调用中，nil接收器的行为即是一个空map的行为。我们可以等价地将这个操作写成<code>Value(nil).Get(&quot;item&quot;)</code>，但是如果你直接写<code>nil.Get(&quot;item&quot;)</code>的话是无法通过编译的，因为nil的字面量编译器无法判断其准确类型。所以相比之下，最后的那行<code>m.Add</code>的调用就会产生一个panic，因为他尝试更新一个空map。</p><h3 id="评论区总结" tabindex="-1"><a class="header-anchor" href="#评论区总结" aria-hidden="true">#</a> <strong>评论区总结：</strong></h3><blockquote><ol><li>按值传递，调用函数时会复制该对象与传递函数形参，在函数内部修改该对象需要通过return来返回（否则将只相当于函数内部的临时变量）</li><li>按指针传递，调用函数时将传递对象指针，然后传递函数形参，在函数内部的修改就是对指针指向的内存的修改。</li></ol></blockquote><h2 id="_6-3-通过嵌入结构体来扩展类型" tabindex="-1"><a class="header-anchor" href="#_6-3-通过嵌入结构体来扩展类型" aria-hidden="true">#</a> 6.3. 通过嵌入结构体来扩展类型</h2><h3 id="嵌入结构体" tabindex="-1"><a class="header-anchor" href="#嵌入结构体" aria-hidden="true">#</a> 嵌入结构体</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Point <span class="token keyword">struct</span><span class="token punctuation">{</span> X<span class="token punctuation">,</span> Y <span class="token builtin">float64</span> <span class="token punctuation">}</span>

<span class="token keyword">type</span> ColoredPoint <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Point
	Color color<span class="token punctuation">.</span>RGBA
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> cp ColoredPoint
	cp<span class="token punctuation">.</span>X <span class="token operator">=</span> <span class="token number">1</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cp<span class="token punctuation">.</span>Point<span class="token punctuation">.</span>X<span class="token punctuation">)</span> <span class="token comment">// &quot;1&quot;</span>
	cp<span class="token punctuation">.</span>Point<span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">2</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cp<span class="token punctuation">.</span>Y<span class="token punctuation">)</span> <span class="token comment">// &quot;2&quot;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>struct内嵌可以使我们在定义ColoredPoint时得到一种句法上的简写形式，并使其包含Point类型所具有的一切字段，然后再定义一些自己的。调用的时候可以直接认为通过嵌入的字段就是ColoredPoint自身的字段，而完全不需要在调用时指出Point。</p><h3 id="嵌入结构体类型当作接收器" tabindex="-1"><a class="header-anchor" href="#嵌入结构体类型当作接收器" aria-hidden="true">#</a> 嵌入结构体类型当作接收器</h3><p>对于Point中的方法我们也有类似的用法，我们可以把ColoredPoint类型当作接收器来调用Point里的方法，即使ColoredPoint里没有声明这些方法：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>p Point<span class="token punctuation">)</span> <span class="token function">Distance</span><span class="token punctuation">(</span>q Point<span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Hypot</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>X<span class="token operator">-</span>p<span class="token punctuation">.</span>X<span class="token punctuation">,</span> q<span class="token punctuation">.</span>Y<span class="token operator">-</span>p<span class="token punctuation">.</span>Y<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Point<span class="token punctuation">)</span> <span class="token function">ScaleBy</span><span class="token punctuation">(</span>factor <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	p<span class="token punctuation">.</span>X <span class="token operator">*=</span> factor
	p<span class="token punctuation">.</span>Y <span class="token operator">*=</span> factor
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	red <span class="token operator">:=</span> color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span>
	blue <span class="token operator">:=</span> color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span>
	<span class="token keyword">var</span> p <span class="token operator">=</span> ColoredPoint<span class="token punctuation">{</span>Point<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> red<span class="token punctuation">}</span>
	<span class="token keyword">var</span> q <span class="token operator">=</span> ColoredPoint<span class="token punctuation">{</span>Point<span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> blue<span class="token punctuation">}</span>
	<span class="token comment">// NOTE: 可以把ColoredPoint类型当作接收器来调用Point里的方法，即使ColoredPoint里没有声明这些方法</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>Point<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;5&quot;</span>
	p<span class="token punctuation">.</span><span class="token function">ScaleBy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
	q<span class="token punctuation">.</span><span class="token function">ScaleBy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>Point<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;10&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Point类的方法也被引入了ColoredPoint。用这种方式，内嵌可以使我们定义字段特别多的复杂类型，我们可以将字段先按小类型分组，然后定义小类型的方法，之后再把它们组合起来。</p><p>一个ColoredPoint并不是一个Point，但他&quot;has a&quot;Point，并且它有从Point类里引入的Distance和ScaleBy方法。如果你喜欢从实现的角度来考虑问题，内嵌字段会指导编译器去生成额外的包装方法来委托已经声明好的方法，和下面的形式是等价的：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>p ColoredPoint<span class="token punctuation">)</span> <span class="token function">Distance</span><span class="token punctuation">(</span>q Point<span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> p<span class="token punctuation">.</span>Point<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>ColoredPoint<span class="token punctuation">)</span> <span class="token function">ScaleBy</span><span class="token punctuation">(</span>factor <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    p<span class="token punctuation">.</span>Point<span class="token punctuation">.</span><span class="token function">ScaleBy</span><span class="token punctuation">(</span>factor<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当Point.Distance被第一个包装方法调用时，它的接收器值是p.Point，而不是p。</p><h3 id="在type中内嵌的匿名字段可以是某type的指针" tabindex="-1"><a class="header-anchor" href="#在type中内嵌的匿名字段可以是某type的指针" aria-hidden="true">#</a> 在type中内嵌的匿名字段可以是某type的指针</h3><p>在类型中内嵌的匿名字段也可能是一个命名类型的指针，这种情况下字段和方法会被间接地引入到当前的类型中</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> ColoredPoint <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>Point
    Color color<span class="token punctuation">.</span>RGBA
<span class="token punctuation">}</span>

p <span class="token operator">:=</span> ColoredPoint<span class="token punctuation">{</span><span class="token operator">&amp;</span>Point<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> red<span class="token punctuation">}</span>
q <span class="token operator">:=</span> ColoredPoint<span class="token punctuation">{</span><span class="token operator">&amp;</span>Point<span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> blue<span class="token punctuation">}</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span><span class="token operator">*</span>q<span class="token punctuation">.</span>Point<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;5&quot;</span>
q<span class="token punctuation">.</span>Point <span class="token operator">=</span> p<span class="token punctuation">.</span>Point                 <span class="token comment">// p and q now share the same Point</span>
p<span class="token punctuation">.</span><span class="token function">ScaleBy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">.</span>Point<span class="token punctuation">,</span> <span class="token operator">*</span>q<span class="token punctuation">.</span>Point<span class="token punctuation">)</span> <span class="token comment">// &quot;{2 2} {2 2}&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一个struct类型可以有多个匿名字段" tabindex="-1"><a class="header-anchor" href="#一个struct类型可以有多个匿名字段" aria-hidden="true">#</a> 一个struct类型可以有多个匿名字段</h3><p>一个struct类型也可能会有多个匿名字段。我们将ColoredPoint定义为下面这样：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> ColoredPoint <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    Point
    color<span class="token punctuation">.</span>RGBA
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后这种类型的值便会拥有Point和RGBA类型的所有方法，以及直接定义在ColoredPoint中的方法。</p><h2 id="_6-4-方法值和方法表达式" tabindex="-1"><a class="header-anchor" href="#_6-4-方法值和方法表达式" aria-hidden="true">#</a> 6.4. 方法值和方法表达式</h2><p>如下，distanceFromP叫方法值，本质是一个函数，<code>var distanceFromP func(q Point) float64 = p. Distance</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	p <span class="token operator">:=</span> Point<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>
	q <span class="token operator">:=</span> Point<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>
	distanceFromP <span class="token operator">:=</span> p<span class="token punctuation">.</span>Distance        <span class="token comment">// method value</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">distanceFromP</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">// &quot;5&quot;</span>
	<span class="token keyword">var</span> origin Point                   <span class="token comment">// {0, 0}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">distanceFromP</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;2.23606797749979&quot;, sqrt(5)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样写会更简短点。</p><p>如下distance是一个方法表达式，distance是一个方法表达式，<code>var distance func(Point, Point) float64 = Point. Distance</code>。写作<code>type.func</code>或者<code>(*type).func</code>，会返回一个函数“值”，这种函数会将其第一个参数用作接收器，</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>p <span class="token operator">:=</span> Point<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>
q <span class="token operator">:=</span> Point<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>

distance <span class="token operator">:=</span> Point<span class="token punctuation">.</span>Distance   <span class="token comment">// method expression</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">distance</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// &quot;5&quot; //这里两个参数，第一个p是原本的接收器，后面的是原来方法的输入值</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T\\n&quot;</span><span class="token punctuation">,</span> distance<span class="token punctuation">)</span> <span class="token comment">// &quot;func(Point, Point) float64&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-5-示例-bit数组" tabindex="-1"><a class="header-anchor" href="#_6-5-示例-bit数组" aria-hidden="true">#</a> 6.5. 示例：Bit数组</h2><p>后面太难看进去了，以后再说</p>`,63),c=[e];function i(u,l){return s(),a("div",null,c)}const d=n(o,[["render",i],["__file","ch6.html.vue"]]);export{d as default};
