import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o}from"./app-vU8izl1I.js";const p={};function t(c,n){return o(),a("div",null,[...n[0]||(n[0]=[e(`<h1 id="_14-c语言-变量说明符" tabindex="-1"><a class="header-anchor" href="#_14-c语言-变量说明符"><span>14. C语言-变量说明符</span></a></h1><p>C 语言允许声明变量的时候，加上一些特定的说明符（specifier），为编译器提供变量行为的额外信息。它的主要作用是帮助编译器优化代码，有时会对程序行为产生影响。</p><h2 id="const" tabindex="-1"><a class="header-anchor" href="#const"><span>const</span></a></h2><p><code>const</code>说明符表示变量是只读的，不得被修改。</p><pre><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span>
PI <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
</code></pre><p>上面示例里面的<code>const</code>，表示变量<code>PI</code>的值不应改变。如果改变的话，编译器会报错。</p><p>对于数组，<code>const</code>表示数组成员不能修改。</p><pre><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
</code></pre><p>上面示例中，<code>const</code>使得数组<code>arr</code>的成员无法修改。</p><p>对于指针变量，<code>const</code>有两种写法，含义是不一样的。如果<code>const</code>在<code>*</code>前面，表示指针指向的值不可修改。</p><pre><code class="language-c"><span class="token comment">// const 表示指向的值 *x 不能修改</span>
<span class="token keyword">int</span> <span class="token keyword">const</span> <span class="token operator">*</span> x
<span class="token comment">// 或者</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span> x
</code></pre><p>下面示例中，对<code>x</code>指向的值进行修改导致报错。</p><pre><code class="language-c"><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> x <span class="token operator">=</span> <span class="token operator">&amp;</span>p<span class="token punctuation">;</span>

<span class="token punctuation">(</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
</code></pre><p>如果<code>const</code>在<code>*</code>后面，表示指针包含的地址不可修改。</p><pre><code class="language-c"><span class="token comment">// const 表示地址 x 不能修改</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token keyword">const</span> x
</code></pre><p>下面示例中，对<code>x</code>进行修改导致报错。</p><pre><code class="language-c"><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">int</span><span class="token operator">*</span> <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token operator">&amp;</span>p<span class="token punctuation">;</span>

x<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
</code></pre><p>这两者可以结合起来。</p><pre><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> x<span class="token punctuation">;</span>
</code></pre><p>上面示例中，指针变量<code>x</code>指向一个字符串。两个<code>const</code>意味着，<code>x</code>包含的内存地址以及<code>x</code>指向的字符串，都不能修改。</p><p><code>const</code>的一个用途，就是防止函数体内修改函数参数。如果某个参数在函数体内不会被修改，可以在函数声明时，对该参数添加<code>const</code>说明符。这样的话，使用这个函数的人看到原型里面的<code>const</code>，就知道调用函数前后，参数数组保持不变。</p><pre><code class="language-c"><span class="token keyword">void</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，函数<code>find</code>的参数数组<code>arr</code>有<code>const</code>说明符，就说明该数组在函数内部将保持不变。</p><p>有一种情况需要注意，如果一个指针变量指向<code>const</code>变量，那么该指针变量也不应该被修改。</p><pre><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token operator">*</span> j <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span>
<span class="token operator">*</span>j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
</code></pre><p>上面示例中，<code>j</code>是一个指针变量，指向变量<code>i</code>，即<code>j</code>和<code>i</code>指向同一个地址。<code>j</code>本身没有<code>const</code>说明符，但是<code>i</code>有。这种情况下，<code>j</code>指向的值也不能被修改。</p><h2 id="static" tabindex="-1"><a class="header-anchor" href="#static"><span>static</span></a></h2><p><code>static</code>说明符对于全局变量和局部变量有不同的含义。</p><p>（1）用于局部变量（位于块作用域内部）。</p><p><code>static</code>用于函数内部声明的局部变量时，表示该变量的值会在函数每次执行后得到保留，下次执行时不会进行初始化，就类似于一个只用于函数内部的全局变量。由于不必每次执行函数时，都对该变量进行初始化，这样可以提高函数的执行速度，详见《函数》一章。</p><p>（2）用于全局变量（位于块作用域外部）。</p><p><code>static</code>用于函数外部声明的全局变量时，表示该变量只用于当前文件，其他源码文件不可以引用该变量，即该变量不会被链接（link）。</p><p><code>static</code>修饰的变量，初始化时，值不能等于变量，必须是常量。</p><pre><code class="language-c"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> m <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment">// 报错</span>
</code></pre><p>上面示例中，变量<code>m</code>有<code>static</code>修饰，它的值如果等于变量<code>n</code>，就会报错，必须等于常量。</p><p>只在当前文件里面使用的函数，也可以声明为<code>static</code>，表明该函数只在当前文件使用，其他文件可以定义同名函数。</p><pre><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="auto" tabindex="-1"><a class="header-anchor" href="#auto"><span>auto</span></a></h2><p><code>auto</code>说明符表示该变量的存储，由编译器自主分配内存空间，且只存在于定义时所在的作用域，退出作用域时会自动释放。</p><p>由于只要不是<code>extern</code>的变量（外部变量），都是由编译器自主分配内存空间的，这属于默认行为，所以该说明符没有实际作用，一般都省略不写。</p><pre><code class="language-c"><span class="token keyword">auto</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token keyword">int</span> a<span class="token punctuation">;</span>
</code></pre><h2 id="extern" tabindex="-1"><a class="header-anchor" href="#extern"><span>extern</span></a></h2><p><code>extern</code>说明符表示，该变量在其他文件里面声明，没有必要在当前文件里面为它分配空间。通常用来表示，该变量是多个文件共享的。</p><pre><code class="language-c"><span class="token keyword">extern</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
</code></pre><p>上面代码中，<code>a</code>是<code>extern</code>变量，表示该变量在其他文件里面定义和初始化，当前文件不必为它分配存储空间。</p><p>但是，变量声明时，同时进行初始化，<code>extern</code>就会无效。</p><pre><code class="language-c"><span class="token comment">// extern 无效</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">// 等同于</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><p>上面代码中，<code>extern</code>对变量初始化的声明是无效的。这是为了防止多个<code>extern</code>对同一个变量进行多次初始化。</p><p>函数内部使用<code>extern</code>声明变量，就相当于该变量是静态存储，每次执行时都要从外部获取它的值。</p><p>函数本身默认是<code>extern</code>，即该函数可以被外部文件共享，通常省略<code>extern</code>不写。如果只希望函数在当前文件可用，那就需要在函数前面加上<code>static</code>。</p><pre><code class="language-c"><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="register" tabindex="-1"><a class="header-anchor" href="#register"><span>register</span></a></h2><p><code>register</code>说明符向编译器表示，该变量是经常使用的，应该提供最快的读取速度，所以应该放进寄存器。但是，编译器可以忽略这个说明符，不一定按照这个指示行事。</p><pre><code class="language-c"><span class="token keyword">register</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
</code></pre><p>上面示例中，<code>register</code>提示编译器，变量<code>a</code>会经常用到，要为它提供最快的读取速度。</p><p><code>register</code>只对声明在代码块内部的变量有效。</p><p>设为<code>register</code>的变量，不能获取它的地址。</p><pre><code class="language-c"><span class="token keyword">register</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment">// 编译器报错</span>
</code></pre><p>上面示例中，<code>&amp;a</code>会报错，因为变量<code>a</code>可能放在寄存器里面，无法获取内存地址。</p><p>如果数组设为<code>register</code>，也不能获取整个数组或任一个数组成员的地址。</p><pre><code class="language-c"><span class="token keyword">register</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> p <span class="token operator">=</span> a<span class="token punctuation">;</span>  <span class="token comment">// 报错</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
</code></pre><p>历史上，CPU 内部的缓存，称为寄存器（register）。与内存相比，寄存器的访问速度快得多，所以使用它们可以提高速度。但是它们不在内存之中，所以没有内存地址，这就是为什么不能获取指向它们的指针地址。现代编译器已经有巨大的进步，会尽可能优化代码，按照自己的规则决定怎么利用好寄存器，取得最佳的执行速度，所以可能会忽视代码里面的<code>register</code>说明符，不保证一定会把这些变量放到寄存器。</p><h2 id="volatile" tabindex="-1"><a class="header-anchor" href="#volatile"><span>volatile</span></a></h2><p><code>volatile</code>说明符表示所声明的变量，可能会预想不到地发生变化（即其他程序可能会更改它的值），不受当前程序控制，因此编译器不要对这类变量进行优化，每次使用时都应该查询一下它的值。硬件设备的编程中，这个说明符很常用。</p><pre><code class="language-c"><span class="token keyword">volatile</span> <span class="token keyword">int</span> foo<span class="token punctuation">;</span>
<span class="token keyword">volatile</span> <span class="token keyword">int</span><span class="token operator">*</span> bar<span class="token punctuation">;</span>
</code></pre><p><code>volatile</code>的目的是阻止编译器对变量行为进行优化，请看下面的例子。</p><pre><code class="language-c"><span class="token keyword">int</span> foo <span class="token operator">=</span> x<span class="token punctuation">;</span>
<span class="token comment">// 其他语句，假设没有改变 x 的值</span>
<span class="token keyword">int</span> bar <span class="token operator">=</span> x<span class="token punctuation">;</span>
</code></pre><p>上面代码中，由于变量<code>foo</code>和<code>bar</code>都等于<code>x</code>，而且<code>x</code>的值也没有发生变化，所以编译器可能会把<code>x</code>放入缓存，直接从缓存读取值（而不是从 x 的原始内存位置读取），然后对<code>foo</code>和<code>bar</code>进行赋值。如果<code>x</code>被设定为<code>volatile</code>，编译器就不会把它放入缓存，每次都从原始位置去取<code>x</code>的值，因为在两次读取之间，其他程序可能会改变<code>x</code>。</p><h2 id="restrict" tabindex="-1"><a class="header-anchor" href="#restrict"><span>restrict</span></a></h2><p><code>restrict</code>说明符允许编译器优化某些代码。它只能用于指针，表明该指针是访问数据的唯一方式。</p><pre><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span> restrict pt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>上面示例中，<code>restrict</code>表示变量<code>pt</code>是访问 malloc 所分配内存的唯一方式。</p><p>下面例子的变量<code>foo</code>，就不能使用<code>restrict</code>修饰符。</p><pre><code class="language-c"><span class="token keyword">int</span> foo<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span><span class="token operator">*</span> bar <span class="token operator">=</span> foo<span class="token punctuation">;</span>
</code></pre><p>上面示例中，变量<code>foo</code>指向的内存，可以用<code>foo</code>访问，也可以用<code>bar</code>访问，因此就不能将<code>foo</code>设为 restrict。</p><p>如果编译器知道某块内存只能用一个方式访问，可能可以更好地优化代码，因为不用担心其他地方会修改值。</p><p><code>restrict</code>用于函数参数时，表示参数的内存地址之间没有重叠。</p><pre><code class="language-c"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> restrict a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> restrict b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> t<span class="token punctuation">;</span>
  t <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>
  <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>
  <span class="token operator">*</span>b <span class="token operator">=</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>上面示例中，函数参数声明里的 <code>restrict</code> 表示，参数 <code>a</code> 和参数 <code>b</code> 的内存地址没有重叠。</p>`,79)])])}const d=s(p,[["render",t]]),k=JSON.parse('{"path":"/develop/C/14_specifier.html","title":"14. C语言-变量说明符","lang":"zh-CN","frontmatter":{"category":"C","tags":["C"],"description":"14. C语言-变量说明符 C 语言允许声明变量的时候，加上一些特定的说明符（specifier），为编译器提供变量行为的额外信息。它的主要作用是帮助编译器优化代码，有时会对程序行为产生影响。 const const说明符表示变量是只读的，不得被修改。 上面示例里面的const，表示变量PI的值不应改变。如果改变的话，编译器会报错。 对于数组，cons...","head":[["meta",{"property":"og:url","content":"https://echo0d.github.io/DailyNotes/develop/C/14_specifier.html"}],["meta",{"property":"og:site_name","content":"echo0d-notes"}],["meta",{"property":"og:title","content":"14. C语言-变量说明符"}],["meta",{"property":"og:description","content":"14. C语言-变量说明符 C 语言允许声明变量的时候，加上一些特定的说明符（specifier），为编译器提供变量行为的额外信息。它的主要作用是帮助编译器优化代码，有时会对程序行为产生影响。 const const说明符表示变量是只读的，不得被修改。 上面示例里面的const，表示变量PI的值不应改变。如果改变的话，编译器会报错。 对于数组，cons..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-11T02:11:10.000Z"}],["meta",{"property":"article:author","content":"echo0d"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:modified_time","content":"2025-04-11T02:11:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"14. C语言-变量说明符\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-11T02:11:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"echo0d\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"const","slug":"const","link":"#const","children":[]},{"level":2,"title":"static","slug":"static","link":"#static","children":[]},{"level":2,"title":"auto","slug":"auto","link":"#auto","children":[]},{"level":2,"title":"extern","slug":"extern","link":"#extern","children":[]},{"level":2,"title":"register","slug":"register","link":"#register","children":[]},{"level":2,"title":"volatile","slug":"volatile","link":"#volatile","children":[]},{"level":2,"title":"restrict","slug":"restrict","link":"#restrict","children":[]}],"git":{"createdTime":1743672297000,"updatedTime":1744337470000,"contributors":[{"name":"echo0d","email":"echo0d@163.com","commits":3}]},"readingTime":{"minutes":7.53,"words":2260},"filePathRelative":"develop/C/14_specifier.md","localizedDate":"2025年4月3日","excerpt":"","autoDesc":true}');export{d as comp,k as data};
