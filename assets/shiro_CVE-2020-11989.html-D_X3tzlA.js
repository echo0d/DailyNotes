import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as t,a,d as e,e as p,r as i,o as r}from"./app-vU8izl1I.js";const l="/DailyNotes/assets/img6-BC4xVItl.png",u="/DailyNotes/assets/img1-BeoV3Ouu.png",h={},d={href:"https://www.cnnvd.org.cn/home/loophole",target:"_blank",rel:"noopener noreferrer"},k={href:"https://nvd.nist.gov/vuln/search",target:"_blank",rel:"noopener noreferrer"};function g(m,n){const s=i("ExternalLinkIcon");return r(),c("div",null,[n[2]||(n[2]=t('<h1 id="权限绕过-shiro-cve-2020-11989-apache-shiro782-权限绕过漏洞" tabindex="-1"><a class="header-anchor" href="#权限绕过-shiro-cve-2020-11989-apache-shiro782-权限绕过漏洞"><span>权限绕过_shiro_CVE-2020-11989_Apache Shiro782 权限绕过漏洞</span></a></h1><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h2><hr><h2 id="漏洞介绍" tabindex="-1"><a class="header-anchor" href="#漏洞介绍"><span>漏洞介绍</span></a></h2>',4)),a("blockquote",null,[a("p",null,[a("a",d,[n[0]||(n[0]=e("国家信息安全漏洞库 (cnnvd.org.cn)",-1)),p(s)])]),a("p",null,[a("a",k,[n[1]||(n[1]=e("NVD - Search and Statistics (nist.gov)",-1)),p(s)])])]),n[3]||(n[3]=t(`<hr><p>Apache Shiro 是美国阿帕奇（Apache）软件基金会的一套用于执行认证、授权、加密和会话管理的 Java 安全框架。使用 Shiro 的易于理解的 API，可以快速、轻松地获得任何应用程序，从最小的移动应用程序到最大的网络和企业应用程序。</p><p>近日，监测发现 Apache Shiro 官网安全更新，其中 Apache Shiro 1.5.3 之前版本中存在认证绕过漏洞（CVE-2020-11989）。当 Apache Shiro 与 Spring 动态控制器一起使用时，特制请求可能会导致身份认证绕过。</p><hr><h3 id="漏洞危害" tabindex="-1"><a class="header-anchor" href="#漏洞危害"><span>漏洞危害</span></a></h3><p>在 Shiro&lt;1.5.3 的情况下，将 Shiro 与 Spring Controller 一起使用时，相应请求可能会导致身份验证绕过。</p><hr><h3 id="影响范围" tabindex="-1"><a class="header-anchor" href="#影响范围"><span>影响范围</span></a></h3><p>shiro &lt; 1.5.3</p><hr><h3 id="漏洞原理" tabindex="-1"><a class="header-anchor" href="#漏洞原理"><span>漏洞原理</span></a></h3><p>shiro 使用的时候需要先配置拦截规则如下：</p><pre><code class="language-java"> <span class="token comment">// 配置路径拦截规则</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;/doLogin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;anon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// map.put(&quot;/**&quot;, &quot;authc&quot;);</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;/hello/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;authc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//配置成map.put(&quot;/hello/*&quot;, &quot;authc&quot;);也可以</span>
</code></pre><p>1.anon 为匿名拦截器，不需要登录就能访问，一般用于静态资源,或者移动端接口</p><p>2.authc 为登录拦截器，需要登录认证才能访问的资源。</p><p>使用了 shiro 的项目中，我们请求的 URL(URL1)，经过 shiro 权限检验(URL2)，最后到 springboot 项目找到路由来处理(URL3) 漏洞的出现就在 URL1,URL2 和 URL3 有可能不是同一个 URL，这就导致我们能绕过 shiro 的校验，直接访问后端需要首选的 URL。</p><h4 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析"><span>源码分析</span></a></h4><p>由于 shiro 先获取的 url，然后会判断分号是否存在，如果存在就会把后面的删除，进入 shiro 匹配，匹配不上默认放行，之后 Spring web 对路径进行规范化从而访问到了相应的页面。</p><p>进入 decodeAndCleanUriString 方法，发现此方法会以分号将传入的 URI 进行截断，并将分号以及分号后面的数据进行清空，返回分号前面的 URI 数据，从而让/a/b;/c 变为/a/b。</p><pre><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">decodeAndCleanUriString</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">String</span> uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        uri <span class="token operator">=</span> <span class="token function">decodeRequestString</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> semicolonIndex <span class="token operator">=</span> uri<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>semicolonIndex <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> uri<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> semicolonIndex<span class="token punctuation">)</span> <span class="token operator">:</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><p>Spring 拦截器的 decodeAndCleanUriString 方法中，Spring 对于分号处理的方式与 Shiro 不同，Spring 会先获取分号的位置，并检测分号后是否存在/，如果有，将/的位置记录在 slashIndex 变量中，并将分号前的数据与/之后的数据进行拼接，从而让/a/b;/c 变为/a/b/c。返回处理后的 requestURI。</p><pre><code class="language-java">    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">decodeAndCleanUriString</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">String</span> uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        uri <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeSemicolonContent</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
        uri <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">decodeRequestString</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
        uri <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSanitizedPath</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> uri<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><hr><h2 id="漏洞利用" tabindex="-1"><a class="header-anchor" href="#漏洞利用"><span>漏洞利用</span></a></h2><hr><h3 id="利用方式-1" tabindex="-1"><a class="header-anchor" href="#利用方式-1"><span>利用方式 1</span></a></h3><hr><h4 id="漏洞利用思路" tabindex="-1"><a class="header-anchor" href="#漏洞利用思路"><span>漏洞利用思路</span></a></h4><p>利用 shiro 对路径中分号的错误处理方式进行绕过。</p><h4 id="漏洞利用过程" tabindex="-1"><a class="header-anchor" href="#漏洞利用过程"><span>漏洞利用过程</span></a></h4><p>直接访问历经/hello/1，会被重定向到 login 界面：（vulfocus 中的环境有些错误，需要访问 hello/xxx 才会重定向）</p><figure><img src="`+l+'" alt="img6" tabindex="0" loading="lazy"><figcaption>img6</figcaption></figure><p>访问/;/hello 即可绕过权限验证访问 hello 页面。</p><figure><img src="'+u+'" alt="img1" tabindex="0" loading="lazy"><figcaption>img1</figcaption></figure><hr><h4 id="威胁防护建议" tabindex="-1"><a class="header-anchor" href="#威胁防护建议"><span>威胁防护建议</span></a></h4><p>检测并拦截 url 中的/;字符</p><hr><h4 id="用户处置建议" tabindex="-1"><a class="header-anchor" href="#用户处置建议"><span>用户处置建议</span></a></h4><p>升级 Shiro 到最新版本</p>',40))])}const b=o(h,[["render",g]]),y=JSON.parse('{"path":"/CyberSecurity/RedTeam/2-WebVulnerability/shiro/shiro_CVE-2020-11989.html","title":"权限绕过_shiro_CVE-2020-11989_Apache Shiro782 权限绕过漏洞","lang":"zh-CN","frontmatter":{"category":"网络安全","tag":"漏洞分析","description":"权限绕过_shiro_CVE-2020-11989_Apache Shiro782 权限绕过漏洞 漏洞介绍 国家信息安全漏洞库 (cnnvd.org.cn) NVD - Search and Statistics (nist.gov) Apache Shiro 是美国阿帕奇（Apache）软件基金会的一套用于执行认证、授权、加密和会话管理的 Java ...","head":[["meta",{"property":"og:url","content":"https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/shiro/shiro_CVE-2020-11989.html"}],["meta",{"property":"og:site_name","content":"echo0d-notes"}],["meta",{"property":"og:title","content":"权限绕过_shiro_CVE-2020-11989_Apache Shiro782 权限绕过漏洞"}],["meta",{"property":"og:description","content":"权限绕过_shiro_CVE-2020-11989_Apache Shiro782 权限绕过漏洞 漏洞介绍 国家信息安全漏洞库 (cnnvd.org.cn) NVD - Search and Statistics (nist.gov) Apache Shiro 是美国阿帕奇（Apache）软件基金会的一套用于执行认证、授权、加密和会话管理的 Java ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-04T09:27:16.000Z"}],["meta",{"property":"article:author","content":"echo0d"}],["meta",{"property":"article:tag","content":"漏洞分析"}],["meta",{"property":"article:modified_time","content":"2025-06-04T09:27:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"权限绕过_shiro_CVE-2020-11989_Apache Shiro782 权限绕过漏洞\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-04T09:27:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"echo0d\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"","slug":"","link":"#","children":[]},{"level":2,"title":"漏洞介绍","slug":"漏洞介绍","link":"#漏洞介绍","children":[{"level":3,"title":"漏洞危害","slug":"漏洞危害","link":"#漏洞危害","children":[]},{"level":3,"title":"影响范围","slug":"影响范围","link":"#影响范围","children":[]},{"level":3,"title":"漏洞原理","slug":"漏洞原理","link":"#漏洞原理","children":[]}]},{"level":2,"title":"漏洞利用","slug":"漏洞利用","link":"#漏洞利用","children":[{"level":3,"title":"利用方式 1","slug":"利用方式-1","link":"#利用方式-1","children":[]}]}],"git":{"createdTime":1736908445000,"updatedTime":1749029236000,"contributors":[{"name":"echo0d","email":"echo0d@163.com","commits":2}]},"readingTime":{"minutes":2.84,"words":852},"filePathRelative":"CyberSecurity/RedTeam/2-WebVulnerability/shiro/shiro_CVE-2020-11989.md","localizedDate":"2025年1月15日","excerpt":"\\n<h2></h2>\\n","autoDesc":true}');export{b as comp,y as data};
