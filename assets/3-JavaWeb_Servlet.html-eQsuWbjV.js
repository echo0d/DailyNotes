import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as t,o as e}from"./app-vU8izl1I.js";const p="/DailyNotes/assets/image-20230917142106189-DvcIFGGS.png",o="/DailyNotes/assets/image-20230917142257469-fha5wOjR.png",c="/DailyNotes/assets/image-20230917142355555-B3WJ9AfO.png",l="/DailyNotes/assets/image-20230917143617997-CzQVvnzC.png",i="/DailyNotes/assets/image-20230917143840427-ZYD_b9Iy.png",u="/DailyNotes/assets/image-20230917144131725-BFqBBIJ_.png",r="/DailyNotes/assets/image-20230917144215457-DyoS94DI.png",k="/DailyNotes/assets/image-20230917210658947-2OFTt0ni.png",d="/DailyNotes/assets/image-20230917145921419-Ce86y1aK.png",m="/DailyNotes/assets/image-20230917150016178-CkI7S5G_.png",g="/DailyNotes/assets/image-20230917162433109-DnS1rF_l.png",v="/DailyNotes/assets/image-20230917210935417-KXcMJX04.png",S="/DailyNotes/assets/epub_40869976_119-BhAg9GTd.jpeg",y="/DailyNotes/assets/image-20230917211549868-CVpPX0tK.png",f="/DailyNotes/assets/image-20230917211839354-B8STn-1A.png",h="/DailyNotes/assets/image-20230917212105072-CVzavn9b.png",w="/DailyNotes/assets/image-20230917212131853-CwW44z7v.png",x="/DailyNotes/assets/image-20230917212206561-Bq28LYBI.png",b="/DailyNotes/assets/image-20230917212235770-BqQ9WpEx.png",q="/DailyNotes/assets/01-BdGhFDGm.png",_="/DailyNotes/assets/image-20230919212808630-Bei3sg41.png",T="/DailyNotes/assets/image-20230919215715426-CDXp2XYR.png",D="/DailyNotes/assets/image-20230919221001870-BOzA5aPO.png",H="/DailyNotes/assets/epub_40869976_121-CAHcjJtQ.jpeg",j={};function N(E,n){return e(),a("div",null,[...n[0]||(n[0]=[t('<h1 id="_3-javaweb-审计基础-servlet" tabindex="-1"><a class="header-anchor" href="#_3-javaweb-审计基础-servlet"><span>3-JavaWeb 审计基础-Servlet</span></a></h1><p>Servlet 其实是在 Java Web 容器中运行的小程序。用户通常使用 Servlet 来处理一些较为复杂的服务器端的业务逻辑。</p><p>Servlet 原则上可以通过任何客户端-服务器协议进行通信，但是它们常与 HTTP 一起使用，因此，“Servlet”通常用作“HTTP servlet”的简写。</p><p>Servlet 是 Java EE 的核心，也是所有 MVC 框架实现的根本。</p><h2 id="_1、servlet-的配置" tabindex="-1"><a class="header-anchor" href="#_1、servlet-的配置"><span>1、Servlet 的配置</span></a></h2><p>HTTPServlet 使用一个 HTML 表单来发送和接收数据。要创建一个 HTTPServlet，需要继承<code>javax.servlet.http.HttpServlet</code>类并重写<code>doXXX</code>(如<code>doGet、doPost</code>)方法或者<code>service</code>方法，该类是用专门的方法来处理 HTML 表单的 GenericServlet 的一个子类。</p><p>Servlet 3.0 之前的版本都是在 web.xml 中配置的，而 Servlet 3.0 之后的版本则使用更为便捷的注解方式来配置。</p><p>不同版本的 Servlet 所需的 Java/JDK 版本也不相同。</p><table><thead><tr><th>Servlet 版本</th><th>Java 版本</th><th>Tomcat 版本</th></tr></thead><tbody><tr><td>Servlet 2.0</td><td>Java 1.1</td><td></td></tr><tr><td>Servlet 2.1</td><td>未指定</td><td></td></tr><tr><td>Servlet 2.2</td><td>Java 1.1</td><td>Tomcat 3.3.X</td></tr><tr><td>Servlet 2.3</td><td>Java 1.3</td><td>Tomcat 4.1.X</td></tr><tr><td>Servlet 2.4</td><td>Java 1.4</td><td>Tomcat 5.5.X</td></tr><tr><td>Servlet 2.5</td><td>Java 5 / JDK 1.5</td><td>Tomcat 6.0.X</td></tr><tr><td>Servlet 3.0</td><td>Java 6 / JDK 1.6</td><td>Tomcat 7.0.X</td></tr><tr><td>Servlet 3.1</td><td>Java 7 / JDK 1.7</td><td>Tomcat 8.5.X</td></tr><tr><td>Servlet 4.0</td><td>Java 8 / JDK 1.8</td><td>Tomcat 9.0.X</td></tr></tbody></table><h3 id="_1-1-基于-web-xml" tabindex="-1"><a class="header-anchor" href="#_1-1-基于-web-xml"><span>1.1 基于 web.xml</span></a></h3><blockquote><p>在 web.xml 中，Servlet 的配置在 Servlet 标签中，Servlet 标签是由 Servlet 和 Servlet-mapping 标签组成，两者通过在 Servlet 和 Servlet-mapping 标签中相同的 Servlet-name 名称实现关联：</p><p><code>&lt;servlet&gt;</code>：声明 Servlet 配置入口。</p><p><code>&lt;description&gt;</code>：声明 Servlet 描述信息。</p><p><code>&lt;display-name&gt;</code>：定义 Web 应用的名字。</p><p><code>&lt;servlet-name&gt;</code>：声明 Servlet 名称以便在后面的映射时使用。</p><p><code>&lt;servlet-class&gt;</code>：指定当前 servlet 对应的类的路径。</p><p><code>&lt;servlet-mapping&gt;</code>：注册组件访问配置的路径入口。</p><p><code>&lt;servlet-name&gt;</code>：指定上文配置的 Servlet 的名称。</p><p><code>&lt;url-pattern&gt;</code>：指定配置这个组件的访问路径。</p></blockquote><p><strong>1. 首先新建一个 Java 项目并引入依赖包</strong></p><figure><img src="'+p+'" alt="image-20230917142106189" tabindex="0" loading="lazy"><figcaption>image-20230917142106189</figcaption></figure><p>为这个项目添加 Web 框架支持，右键单击创建的项目，点击 Add Framework Support，在弹出的对话框中勾选 Web Application(4.0)及 Create web.xml 复选框，单击“OK”按钮，完成添加。</p><figure><img src="'+o+'" alt="image-20230917142257469" tabindex="0" loading="lazy"><figcaption>image-20230917142257469</figcaption></figure><figure><img src="'+c+'" alt="image-20230917142355555" tabindex="0" loading="lazy"><figcaption>image-20230917142355555</figcaption></figure><p>然后添加依赖包，可以添加 Maven 依赖，如下</p><figure><img src="'+l+'" alt="image-20230917143617997" tabindex="0" loading="lazy"><figcaption>image-20230917143617997</figcaption></figure><p>也可以右键单击 WEB-INF 文件夹，在弹出的对话框中选择 New–&gt;Directory 命令，创建 lib 文件夹。将 Tomcat 安装目录下 lib 文件夹中的 servlet-api.jar 文件复制，然后右键项目内的 lib 文件夹，点击粘贴添加进去。</p><figure><img src="'+i+'" alt="image-20230917143840427" tabindex="0" loading="lazy"><figcaption>image-20230917143840427</figcaption></figure><figure><img src="'+u+'" alt="image-20230917144131725" tabindex="0" loading="lazy"><figcaption>image-20230917144131725</figcaption></figure><p>然后在 servlet-api.jar 文件上右击鼠标，选择 Add As Library，将 jar 包添加到 Library 中</p><figure><img src="'+r+`" alt="image-20230917144215457" tabindex="0" loading="lazy"><figcaption>image-20230917144215457</figcaption></figure><p><strong>2. 编写 Servlet 类</strong></p><p>在 src 文件夹下新建包和 UserServlet 类，继承<code>HttpServlet</code>类（一般处理 http 请求都直接继承<code>HttpServlet</code>类，它继承了<code>GenericServlet</code>类，<code>GenericServlet</code>类实现了<code>Servlet</code>等接口并重写了接口中的个方法）</p><pre><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sec<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> : echo0d
 * <span class="token keyword">@date</span> : 2023/9/17 14:29
 * @Description :
 */</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Hello,Servlet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><p><strong>3. 编写 web.xml 配置文件</strong></p><p>修改 WEB-INF 文件下下的 web.xml，两个<code>&lt;servlet-name&gt;</code>注意填写要完全一致，<code>&lt;servlet-class&gt;</code>处填写全类名，<code>&lt;url-pattern&gt;</code>是路径映射</p><pre><code class="language-xml"><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.sec.servlet.UserServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span>
</code></pre><p><strong>4. IDEA 集成 Tomcat 运行该项目</strong></p><p>如下图选择编辑配置</p><figure><img src="`+k+'" alt="image-20230917210658947" tabindex="0" loading="lazy"><figcaption>image-20230917210658947</figcaption></figure><p>点击左侧加号，选择 Smart Tomcat，点击 OK</p><figure><img src="'+d+'" alt="image-20230917145921419" tabindex="0" loading="lazy"><figcaption>image-20230917145921419</figcaption></figure><p>然后在 Tomcat server 处选择安装好的 Tomcat 目录，Deployment directory 处选择该项目的 web 目录。</p><figure><img src="'+m+'" alt="image-20230917150016178" tabindex="0" loading="lazy"><figcaption>image-20230917150016178</figcaption></figure><p>在 Context path 处填写网站的根目录：</p><figure><img src="'+g+'" alt="image-20230917162433109" tabindex="0" loading="lazy"><figcaption>image-20230917162433109</figcaption></figure><p>然后点击运行即可：</p><figure><img src="'+v+`" alt="image-20230917210935417" tabindex="0" loading="lazy"><figcaption>image-20230917210935417</figcaption></figure><h3 id="_1-2-基于注解方式" tabindex="-1"><a class="header-anchor" href="#_1-2-基于注解方式"><span>1.2 基于注解方式</span></a></h3><p>Servlet 3.0 以上的版本中，开发者无须在 web.xml 里面配置 Servlet，只需要添加@WebServlet 注解即可修改 Servlet 的属性,</p><p>上面的例子中，若把 web.xml 文件删除，用注解的方式修改如下，只需要添加一个@WebServlet 注解即可。</p><pre><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sec<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> : echo0d
 * <span class="token keyword">@date</span> : 2023/9/17 14:29
 * @Description :
 */</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> urlPatterns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;this is a UserServlet&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Hello,Servlet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


</code></pre><p>@WebServlet 的注解参数有 description、name 及 urlPatterns，除此之外还有很多参数，具体如下：</p><table><thead><tr><th>属性名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>String</td><td>指定 Servlet 的<code>name</code>属性,等价于<code>&lt;servlet-name&gt;</code></td></tr><tr><td>value</td><td>String[]</td><td>等价于 <code>urPatterns</code>属性</td></tr><tr><td>urlPatterns</td><td>String[]</td><td>指定-组 Serlet 的 URL 匹配模式,等价于<code>&lt;url-pattem&gt;</code>标签</td></tr><tr><td>loadOnStartup</td><td>int</td><td>指定 Servlet 的加载顺序,等价于<code>&lt;load-on-startup&gt;</code>标签</td></tr><tr><td>initParams</td><td>WeblnitParam[]</td><td>指定一组 Servlet 初始化参数,等价于<code>&lt;init-param&gt;</code>标签</td></tr><tr><td>asyncSupported</td><td>boolean</td><td>声明 Servlet 是否支持异步操作模式,等价于<code>&lt;async-supported&gt;</code>标签</td></tr><tr><td>description</td><td>String[]</td><td>Sevlet 的描述信息,等价于<code>&lt;description&gt;</code>标签</td></tr><tr><td>displayName</td><td>String[]</td><td>Servlet 的显示名,通常配合工具使用,等价于<code>&lt;display-name&gt;</code>标签</td></tr></tbody></table><p>由此可以看出，web.xml 可以配置的 Servlet 属性，都可以通过@WebServlet 的方式进行配置。</p><h2 id="_2、servlet-的访问流程" tabindex="-1"><a class="header-anchor" href="#_2、servlet-的访问流程"><span>2、Servlet 的访问流程</span></a></h2><p>在该 Servlet 配置中，其访问流程如图：</p><figure><img src="`+S+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>首先在浏览器地址栏中输入 user，即访问<code>&lt;url-patterns&gt; </code>标签中的值；然后浏览器发起请求，服务器通过<code>&lt;servlet-mapping&gt;</code>标签中找到文件名为 user 的<code>url-pattern</code>，通过其对应的<code>&lt;servlet-name&gt;</code>寻找 servlet 标签中<code>servlet-name</code>相同的 servlet；再通过 servlet 标签中的<code>servlet-name</code>，获取 <code>servlet-class</code>参数；最后得到具体的 class 文件路径，继而执行<code>&lt;servlet-class&gt;</code>标签中 class 文件的逻辑。</p><p><code>servlet</code>和<code>servlet-mapping</code>中都含有<code>&lt;servlet-name&gt; &lt;/servlet-name&gt;</code>标签，其主要原因是通过<code>servlet-name</code>作为纽带，将<code>servlet-class </code>和 <code>url-pattern</code> 构成联系，从而使 URL 映射到<code>servlet-class </code>所指定的类中执行相应逻辑。</p><h2 id="_3、servlet-的接口方法" tabindex="-1"><a class="header-anchor" href="#_3、servlet-的接口方法"><span>3、Servlet 的接口方法</span></a></h2><h3 id="_3-1-servlet-的接口方法简介" tabindex="-1"><a class="header-anchor" href="#_3-1-servlet-的接口方法简介"><span>3.1 Servlet 的接口方法简介</span></a></h3><p>**1. init() **：在 Servlet 实例化后，Servlet 容器会调用 init()方法来初始化该对象，主要是使 Servlet 对象在处理客户请求前可以完成一些初始化工作，例如建立数据库的连接，获取配置信息等。init() 方法在第一次创建 Servlet 时被调用，在后续每次用户请求时不再被调用。init() 方法的定义如下。</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">{</span>
  <span class="token comment">// 此处内容为开发者定义的初始化代码</span>
<span class="token punctuation">}</span>
</code></pre><p><strong>2. service() 接口</strong>：<code>service() </code>方法是执行实际任务的主要方法。Servlet 容器（Web 服务器）调用 service()方法来处理来自客户端（浏览器）的请求，并将格式化的响应写回给客户端，每次服务器接收到一个 Servlet 请求时，服务器都会产生一个新的线程并调用服务。要注意的是，在 service()方法被 Servlet 容器调用之前，必须确保<code>init()</code>方法正确完成。<code>Service()</code>方法的定义如下:</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 此处内容为开发者处理用户请求的代码</span>
<span class="token punctuation">}</span>
</code></pre><p><strong>3. doGet()/doPost()等接口</strong>：<code>doGet() </code>等方法根据 HTTP 的不同请求调用不同的方法。如果 HTTP 得到一个来自 URL 的 GET 请求，就会调用 <code>doGet() 方法</code>；如果得到的是一个 POST 请求，就会调用<code>doPost() </code>方法。</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>
               <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>
   <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span>
<span class="token punctuation">{</span>
<span class="token comment">// 此处内容为开发者处理 GET 请求的代码</span>
<span class="token comment">// 以此类推，若是 POST 请求，则调用 public void doPost方法</span>
<span class="token punctuation">}</span>
</code></pre><p>HTTP 有 8 种请求方法，分别为 GET、POST、HEAD、OPTIONS、PUT、DELETE、TRACE 以及 CONNECT 方法。与此类似，Servlet 接口中也对应着相应的请求接口（除了 CONNECT），这些接口对应着请求类型，<code>service()</code>方法会检查 HTTP 请求类型，然后在适当的时候调用 <code>doGet</code>、<code>doPost</code>、<code>doPut</code>，<code>doDelete</code>等方法。</p><p><strong>4. destroy() 接口</strong>：当 Servlet 容器检测到一个 Servlet 对象应该从服务中被移除时，会调用该对象的<code>destroy() </code>方法，以便 Servlet 对象释放它所使用的资源，保存数据到持久存储设备中。例如将内存中的数据保存到数据库中、关闭数据库连接、停止后台线程、把 Cookie 列表或单击计数器写入磁盘，并执行其他类似的清理活动等。<code>destroy() </code>方法与 <code>init() </code>方法相同，只会被调用一次。<code>destroy() </code>方法定义如下。</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token comment">// 此处内容为开发者进行终止操作的代码</span>
<span class="token punctuation">}</span>
</code></pre><p><strong>5. getServletConfig() 接口</strong>：<code>getServletConfig() </code>方法返回 Servlet 容器调用<code>init()</code>方法时传递给<code>Servlet</code>对象的<code>ServletConfig</code>对象，<code>ServletConfig</code>对象包含 Servlet 的初始化参数。开发者可以在 Servlet 的配置文件<code>web.xml</code>中，使用<code>&lt;init-param&gt;</code>标签为 Servlet 配置一些初始化参数：</p><pre><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.test.TestServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>userName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>panda<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>E-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>test@test.net<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>
</code></pre><p>经过上面的配置，即可在 Servlet 中通过调用<code>getServletConfig()</code>，并获得一些初始化的参数。</p><p><strong>6. getServletInfo() 接口</strong>：<code>getServletInfo() </code>方法会返回一个 String 类型的字符串，包括关于 Servlet 的信息，如作者、版本及版权等。</p><h3 id="_3-2-使用-idea-创建-servlet" tabindex="-1"><a class="header-anchor" href="#_3-2-使用-idea-创建-servlet"><span>3.2 使用 IDEA 创建 Servlet</span></a></h3><p>在创建 Servlet 文件时，IDEA 提供了直接创建 Servlet 的功能</p><figure><img src="`+y+'" alt="image-20230917211549868" tabindex="0" loading="lazy"><figcaption>image-20230917211549868</figcaption></figure><p>选择创建 Servlet，然后填写好名字</p><figure><img src="'+f+'" alt="image-20230917211839354" tabindex="0" loading="lazy"><figcaption>image-20230917211839354</figcaption></figure><p>点击 OK 即可创建好，默认只重写了<code>doGet</code>和<code>doPost</code>方法，若想要重写其他请求的方法，可以在新创建出的 Servlet 代码处右键，选择<code>Generate</code></p><figure><img src="'+h+'" alt="image-20230917212105072" tabindex="0" loading="lazy"><figcaption>image-20230917212105072</figcaption></figure><p>选择<code>Override Methods</code></p><figure><img src="'+w+'" alt="image-20230917212131853" tabindex="0" loading="lazy"><figcaption>image-20230917212131853</figcaption></figure><p>然后选中其他想要的方法，如下图：</p><figure><img src="'+x+'" alt="image-20230917212206561" tabindex="0" loading="lazy"><figcaption>image-20230917212206561</figcaption></figure><p>点击 OK 后结果如下：</p><figure><img src="'+b+'" alt="image-20230917212235770" tabindex="0" loading="lazy"><figcaption>image-20230917212235770</figcaption></figure><h3 id="_3-3-重写-doxxx-与-service-的区别" tabindex="-1"><a class="header-anchor" href="#_3-3-重写-doxxx-与-service-的区别"><span>3.3 重写 doXXX()与 service()的区别</span></a></h3><p>在继承了 HTTPServlet 类后我们在重写<code>service</code>方法后重写<code>doXXX</code>（如<code>doGet</code>）等方法时无法进入，原因是<code>HTTPServlet</code>的<code>service</code>方法做的请求方式的区分，如下：</p><figure><img src="'+q+`" alt="01" tabindex="0" loading="lazy"><figcaption>01</figcaption></figure><p>重写<code>doGet()</code>方法返回当前时间</p><pre><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sec<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> : echo0d
 * <span class="token keyword">@date</span> : 2023/9/17 21:19
 * @Description :
 */</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Enumeration</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;NewServlet&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;/NewServlet&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请求方式&quot;</span> <span class="token operator">+</span> req<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;访问路径&quot;</span> <span class="token operator">+</span> req<span class="token punctuation">.</span><span class="token function">getServletPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;协议类型&quot;</span> <span class="token operator">+</span> req<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//读取消息头，getHeaderNames()返回key的迭代器, 该迭代器是比Iterator更古老的迭代器.</span>
        <span class="token class-name">Enumeration</span> e <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> e<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> value <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//写消息头告诉浏览器给它输出的是什么格式的内容</span>
        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获取输出流，该流指向的目标就是浏览器</span>
        <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//省略代码N行</span>
        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> now <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//写实体内容</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;!DOCTYPE HTML&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;html&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;head&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;title&gt;TimeServlet&lt;/title&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;meta charset=&#39;utf-8&#39;&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/head&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;body&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;p&gt;&quot;</span><span class="token operator">+</span>now<span class="token operator">+</span><span class="token string">&quot;&lt;/p&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/body&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/html&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><p>结果如下：</p><figure><img src="`+_+`" alt="image-20230919212808630" tabindex="0" loading="lazy"><figcaption>image-20230919212808630</figcaption></figure><p>在继承了<code>HTTPServlet</code>后，重写<code>service</code>方法调用前面的<code>Newservlet1</code>返回当前时间：</p><pre><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sec<span class="token punctuation">.</span>servlet</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> : echo0d
 * <span class="token keyword">@date</span> : 2023/9/19 21:42
 * @Description :
 */</span>
<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;NewServlet2&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;/NewServlet2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewServlet2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 根据请求方式的不同，进行分别的处理</span>

        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> req<span class="token punctuation">;</span>

        <span class="token comment">//1. 获取请求方式</span>
        <span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//2. 判断</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// get方式的处理逻辑</span>
            <span class="token class-name">NewServlet1</span> httpServletTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewServlet1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            httpServletTest<span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> req<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// post方式的处理逻辑</span>
            <span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><figure><img src="`+T+'" alt="image-20230919215715426" tabindex="0" loading="lazy"><figcaption>image-20230919215715426</figcaption></figure><p>此处若直接实现<code>Servlet</code>接口，就需要这样：</p><figure><img src="'+D+'" alt="image-20230919221001870" tabindex="0" loading="lazy"><figcaption>image-20230919221001870</figcaption></figure><h2 id="_4、servlet-的生命周期" tabindex="-1"><a class="header-anchor" href="#_4、servlet-的生命周期"><span>4、Servlet 的生命周期</span></a></h2><p>在一个生命周期中，Servlet 经历了被加载、初始化、接收请求、响应请求以及提供服务的过程（利用的就是<code>Servlet</code>接口里的那些方法，见 3.1 节），如图：</p><figure><img src="'+H+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>当用户第一次向服务器发起请求时，服务器会解析用户的请求，此时容器会加载 Servlet，然后创建 Servet 实例，再调用<code>init()</code>方法初始化 Servlet，紧接着调用服务的<code>service() </code>方法去处理用户 GET、POST 或者其他类型的请求。当执行完 Servlet 中对应<code>class</code>文件的逻辑后，将结果返回给服务器，服务器再响应用户请求。当服务器不再需要 Servlet 实例或重新载入 Servlet 时，会调用<code>destroy() </code>方法，借助该方法，Servlet 可以释放掉所有在<code>init()</code>方法中申请的资源。</p>',96)])])}const J=s(j,[["render",N]]),O=JSON.parse('{"path":"/CodeAudittutorial/2-JavaWeb/3-JavaWeb_Servlet.html","title":"3-JavaWeb 审计基础-Servlet","lang":"zh-CN","frontmatter":{"category":"代码审计","tag":"Java","description":"3-JavaWeb 审计基础-Servlet Servlet 其实是在 Java Web 容器中运行的小程序。用户通常使用 Servlet 来处理一些较为复杂的服务器端的业务逻辑。 Servlet 原则上可以通过任何客户端-服务器协议进行通信，但是它们常与 HTTP 一起使用，因此，“Servlet”通常用作“HTTP servlet”的简写。 Ser...","head":[["meta",{"property":"og:url","content":"https://echo0d.github.io/DailyNotes/CodeAudittutorial/2-JavaWeb/3-JavaWeb_Servlet.html"}],["meta",{"property":"og:site_name","content":"echo0d-notes"}],["meta",{"property":"og:title","content":"3-JavaWeb 审计基础-Servlet"}],["meta",{"property":"og:description","content":"3-JavaWeb 审计基础-Servlet Servlet 其实是在 Java Web 容器中运行的小程序。用户通常使用 Servlet 来处理一些较为复杂的服务器端的业务逻辑。 Servlet 原则上可以通过任何客户端-服务器协议进行通信，但是它们常与 HTTP 一起使用，因此，“Servlet”通常用作“HTTP servlet”的简写。 Ser..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-04T09:27:16.000Z"}],["meta",{"property":"article:author","content":"echo0d"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2025-06-04T09:27:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3-JavaWeb 审计基础-Servlet\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-04T09:27:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"echo0d\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"1、Servlet 的配置","slug":"_1、servlet-的配置","link":"#_1、servlet-的配置","children":[{"level":3,"title":"1.1 基于 web.xml","slug":"_1-1-基于-web-xml","link":"#_1-1-基于-web-xml","children":[]},{"level":3,"title":"1.2 基于注解方式","slug":"_1-2-基于注解方式","link":"#_1-2-基于注解方式","children":[]}]},{"level":2,"title":"2、Servlet 的访问流程","slug":"_2、servlet-的访问流程","link":"#_2、servlet-的访问流程","children":[]},{"level":2,"title":"3、Servlet 的接口方法","slug":"_3、servlet-的接口方法","link":"#_3、servlet-的接口方法","children":[{"level":3,"title":"3.1 Servlet 的接口方法简介","slug":"_3-1-servlet-的接口方法简介","link":"#_3-1-servlet-的接口方法简介","children":[]},{"level":3,"title":"3.2 使用 IDEA 创建 Servlet","slug":"_3-2-使用-idea-创建-servlet","link":"#_3-2-使用-idea-创建-servlet","children":[]},{"level":3,"title":"3.3 重写 doXXX()与 service()的区别","slug":"_3-3-重写-doxxx-与-service-的区别","link":"#_3-3-重写-doxxx-与-service-的区别","children":[]}]},{"level":2,"title":"4、Servlet 的生命周期","slug":"_4、servlet-的生命周期","link":"#_4、servlet-的生命周期","children":[]}],"git":{"createdTime":1703388937000,"updatedTime":1749029236000,"contributors":[{"name":"echo0d","email":"echo0d@163.com","commits":5}]},"readingTime":{"minutes":10.75,"words":3225},"filePathRelative":"CodeAudittutorial/2-JavaWeb/3-JavaWeb_Servlet.md","localizedDate":"2023年12月24日","excerpt":"\\n","autoDesc":true}');export{J as comp,O as data};
