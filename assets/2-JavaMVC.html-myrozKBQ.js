import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as o,e as r}from"./app-EnAbQYwW.js";const t="/DailyNotes/assets/epub_40869976_114-J-uFVDqd.jpeg",i={},l=r('<h1 id="java代码审计-javamvc" tabindex="-1"><a class="header-anchor" href="#java代码审计-javamvc" aria-hidden="true">#</a> Java代码审计-JavaMVC</h1><blockquote><p><strong>Java MVC的框架</strong>有很多，如比较经典的Struts1框架、Struts2 框架、Spring MVC框架，此外还有小众的JSF框架以及Tapestry 框架。</p></blockquote><h2 id="_1、mvc的概念" tabindex="-1"><a class="header-anchor" href="#_1、mvc的概念" aria-hidden="true">#</a> 1、MVC的概念</h2><p>MVC 全名是 Model View Controller，M（Model）是指数据模型，V（View）是指用户界面，C（Controller）是控制器。使用 MVC 最直接的目的就是将M和V实现代码分离，C 则是确保 M 和 V 的同步，一旦 M 改变，V就应该同步更新。简单来说，MVC是一个设计模式，它强制性地使应用程序的输入、处理和输出分开。</p><p>MVC应用程序被分成3个核心部件：<strong>Model</strong>、<strong>View</strong>、<strong>Controller</strong>。它们独立处理各自的任务。具体如下：</p><ol><li>模型（Model）：表示携带数据的对象或Java POJO。即使模型内的数据改变，它也具有逻辑来更新控制器。</li><li>控制器（Controller）：表示逻辑控制，控制器对模型和视图都有作用，控制数据流进入模型对象，并在数据更改时更新视图，是视图和模型的中间层。</li><li>视图（View）：表示模型包含的数据的可视化层。</li></ol><h2 id="_2、mvc工作流程" tabindex="-1"><a class="header-anchor" href="#_2、mvc工作流程" aria-hidden="true">#</a> 2、MVC工作流程</h2><p>首先，Controller层接收用户的请求，并决定应该调用哪个Model来进行处理；</p><p>然后，由Model使用逻辑处理用户的请求并返回数据；</p><p>最后，返回的数据通过View层呈现给用户。具体流程如图所示。</p><figure><img src="'+t+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>MVC模式使视图层和业务层分离，以便更改View层代码时，不用重新编译Model和Controller代码。同样，当某个应用的业务流程或者业务规则发生改变时，只需要改动Model层即可实现需求。</p>',12),n=[l];function s(c,d){return a(),o("div",null,n)}const M=e(i,[["render",s],["__file","2-JavaMVC.html.vue"]]);export{M as default};
