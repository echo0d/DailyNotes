import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as t}from"./app-re7Yuxiw.js";const e="/DailyNotes/assets/image-20240818193210381-z-w4z9VT.png",p="/DailyNotes/assets/image-20240818214317217-kXefE5gr.png",o={},c=t(`<h1 id="_2-go练习-fscan" tabindex="-1"><a class="header-anchor" href="#_2-go练习-fscan" aria-hidden="true">#</a> 2. Go练习-fscan</h1><h2 id="_2-1-存活主机顺序输出" tabindex="-1"><a class="header-anchor" href="#_2-1-存活主机顺序输出" aria-hidden="true">#</a> 2.1. 存活主机顺序输出</h2><p>Plugins目录下的icmp.go文件中CheckLive函数对应着探测存活主机功能，堆栈：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Plugins.CheckLive (c:\\Users\\18846\\Desktop\\fscan\\Plugins\\icmp.go:23)
Plugins.Scan (c:\\Users\\18846\\Desktop\\fscan\\Plugins\\scanner.go:27)
main.main (c:\\Users\\18846\\Desktop\\fscan\\main.go:15)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+e+`" alt="image-20240818193210381" tabindex="0" loading="lazy"><figcaption>image-20240818193210381</figcaption></figure><p>整体逻辑：<code>checkLive</code>函数中创建<code>chanHosts</code>通道，用channel接收多线程探测存活主机的结果。</p><p>修改：多线程里<code>chanHosts</code>中的IP不再实时输出，原本的打印逻辑注释掉，只保留扫描结果<code>AliveHosts</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>chanHosts <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>hostslist<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> ip <span class="token operator">:=</span> <span class="token keyword">range</span> chanHosts <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> ExistHosts<span class="token punctuation">[</span>ip<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token operator">&amp;&amp;</span> <span class="token function">IsContain</span><span class="token punctuation">(</span>hostslist<span class="token punctuation">,</span> ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				ExistHosts<span class="token punctuation">[</span>ip<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
				<span class="token comment">// if common.Silent == false {</span>
				<span class="token comment">// 	if Ping == false {</span>
				<span class="token comment">// 		fmt.Printf(&quot;(icmp) Target %-15s is alive\\n&quot;, ip)</span>
				<span class="token comment">// 	} else {</span>
				<span class="token comment">// 		fmt.Printf(&quot;(ping) Target %-15s is alive\\n&quot;, ip)</span>
				<span class="token comment">// 	}</span>
				<span class="token comment">// }</span>
				AliveHosts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>AliveHosts<span class="token punctuation">,</span> ip<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
			livewg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>AliveHosts</code>返回之前对其进行排序并输出</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token comment">// Sort the AliveHosts slice</span>
	sort<span class="token punctuation">.</span><span class="token function">Strings</span><span class="token punctuation">(</span>AliveHosts<span class="token punctuation">)</span>
	<span class="token comment">// Print sorted AliveHosts</span>
	<span class="token keyword">if</span> Ping <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ip <span class="token operator">:=</span> <span class="token keyword">range</span> AliveHosts <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;(icmp) Target %-15s is alive\\n&quot;</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ip <span class="token operator">:=</span> <span class="token keyword">range</span> AliveHosts <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;(ping) Target %-15s is alive\\n&quot;</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> AliveHosts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>缺点：要等到全部存活探测结束才有输出</p><p>优点：有排序，不会太乱</p><p>但是，结果跑出来发现排序不对</p><figure><img src="`+p+`" alt="image-20240818214317217" tabindex="0" loading="lazy"><figcaption>image-20240818214317217</figcaption></figure><p>修改一下排序的逻辑，不直接用<code>sort.Strings</code>了,使用<code>net</code>包中的<code>ParseIP</code>函数，解析一下IP再排序</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>	<span class="token comment">// sort.Strings(AliveHosts)</span>
	sort<span class="token punctuation">.</span><span class="token function">Slice</span><span class="token punctuation">(</span>AliveHosts<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> bytes<span class="token punctuation">.</span><span class="token function">Compare</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span><span class="token function">ParseIP</span><span class="token punctuation">(</span>AliveHosts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">To4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> net<span class="token punctuation">.</span><span class="token function">ParseIP</span><span class="token punctuation">(</span>AliveHosts<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">To4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这回应该没啥问题了，就是不知道效率被影响的程度，毕竟多解析了一遍IP，等用的时候再说吧</p>`,17),i=[c];function l(u,r){return s(),a("div",null,i)}const v=n(o,[["render",l],["__file","2_fscanPro.html.vue"]]);export{v as default};
