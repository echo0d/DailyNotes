import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,f as t,o as e}from"./app-BoR_3jx9.js";const p="/DailyNotes/assets/file-20250113181713661-CXsJb2kW.png",o={};function i(c,a){return e(),s("div",null,a[0]||(a[0]=[t(`<h1 id="_8-native关键字" tabindex="-1"><a class="header-anchor" href="#_8-native关键字"><span>8-Native关键字</span></a></h1><p>在Java中，native关键字用于声明一个方法是由本地代码（通常是C或C++）实现的。这意味着该方法的具体实现不是用Java编写的，而是由底层的本地代码提供。</p><h2 id="native关键字的作用" tabindex="-1"><a class="header-anchor" href="#native关键字的作用"><span>native关键字的作用</span></a></h2><ul><li>与本地代码进行交互：通过native方法，Java程序可以与本地代码进行交互，调用本地库中的函数，实现更高效的操作，或者访问底层系统资源。</li><li>提高性能：使用本地代码实现某些功能通常比纯Java代码更高效。通过native方法，可以利用底层系统资源和优化的算法，提高程序的性能。</li></ul><h2 id="native关键字的使用方法" tabindex="-1"><a class="header-anchor" href="#native关键字的使用方法"><span>native关键字的使用方法</span></a></h2><p>要声明一个native方法，只需在Java方法的声明中加上native关键字，并且不需要提供方法的实现。例如：</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">nativeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>在这个例子中，<code>nativeMethod()</code>是一个native方法，它的具体实现将在本地代码中提供。</p><p>为了使用native方法，必须在Java程序中加载本地库，并确保本地库中包含了所需的函数。本地库可以使用Java的JNI（Java Native Interface）来编写，并在程序运行时通过 <code>System.loadLibrary()</code> 方法加载。下面是一个简单的示例：</p><ul><li><strong>编写 Java 类 (NativeExample.java)</strong></li></ul><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NativeExample</span> <span class="token punctuation">{</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token string">&quot;native_lib&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">NativeExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello from Java!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><ul><li><strong>编译 Java 类并生成头文件</strong></li></ul><p>使用以下命令编译 Java 类并生成 JNI 头文件：(<code>NativeExample.h</code>)</p><pre><code class="language-sh">javac <span class="token parameter variable">-h</span> <span class="token builtin class-name">.</span> NativeExample.java
</code></pre><p>这将在当前目录生成 <code>NativeExample.h</code> 头文件。</p><ul><li><strong>编译 C 代码为共享库</strong></li></ul><p>在 Windows 上</p><pre><code class="language-sh">gcc <span class="token parameter variable">-shared</span> <span class="token parameter variable">-o</span> native_lib.dll -I<span class="token string">&quot;%JAVA_HOME%\\include&quot;</span> -I<span class="token string">&quot;%JAVA_HOME%\\include\\win32&quot;</span> native_lib.c
</code></pre><p>在 Linux 上</p><pre><code class="language-sh">gcc <span class="token parameter variable">-shared</span> <span class="token parameter variable">-o</span> libnative_lib.so -I<span class="token string">&quot;<span class="token variable">$JAVA_HOME</span>/include&quot;</span> -I<span class="token string">&quot;<span class="token variable">$JAVA_HOME</span>/include/linux&quot;</span> native_lib.c
</code></pre><ul><li><strong>运行 Java 程序</strong>（确保共享库在 Java 的库路径上，然后运行 Java 程序。）</li></ul><p>在 Windows 上:</p><pre><code class="language-sh"><span class="token function">java</span> <span class="token parameter variable">-Djava.library.path</span><span class="token operator">=</span>. NativeExample
</code></pre><p>在 Linux 或 macOS 上</p><pre><code class="language-sh"><span class="token function">java</span> <span class="token parameter variable">-Djava.library.path</span><span class="token operator">=</span>. NativeExample
</code></pre><p>报错如下：</p><pre><code class="language-sh">Exception <span class="token keyword">in</span> thread <span class="token string">&quot;main&quot;</span> java.lang.UnsatisfiedLinkError: E:<span class="token punctuation">\\</span>MyDaily<span class="token punctuation">\\</span>DailyCode<span class="token punctuation">\\</span>JavaLearn<span class="token punctuation">\\</span>native<span class="token punctuation">\\</span>native_lib.dll: Can&#39;t load IA <span class="token number">32</span>-bit .dll on a AMD <span class="token number">64</span>-bit platform
        at java.base/jdk.internal.loader.NativeLibraries.load<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>
        at java.base/jdk.internal.loader.NativeLibraries<span class="token variable">$NativeLibraryImpl</span>.open<span class="token punctuation">(</span>NativeLibraries.java:388<span class="token punctuation">)</span>
        at java.base/jdk.internal.loader.NativeLibraries.loadLibrary<span class="token punctuation">(</span>NativeLibraries.java:232<span class="token punctuation">)</span>
        at java.base/jdk.internal.loader.NativeLibraries.loadLibrary<span class="token punctuation">(</span>NativeLibraries.java:174<span class="token punctuation">)</span>
        at java.base/jdk.internal.loader.NativeLibraries.findFromPaths<span class="token punctuation">(</span>NativeLibraries.java:315<span class="token punctuation">)</span>
        at java.base/jdk.internal.loader.NativeLibraries.loadLibrary<span class="token punctuation">(</span>NativeLibraries.java:287<span class="token punctuation">)</span>
        at java.base/java.lang.ClassLoader.loadLibrary<span class="token punctuation">(</span>ClassLoader.java:2427<span class="token punctuation">)</span>
        at java.base/java.lang.Runtime.loadLibrary0<span class="token punctuation">(</span>Runtime.java:818<span class="token punctuation">)</span>
        at java.base/java.lang.System.loadLibrary<span class="token punctuation">(</span>System.java:1993<span class="token punctuation">)</span>
        at NativeExample.<span class="token operator">&lt;</span>clinit<span class="token operator">&gt;</span><span class="token punctuation">(</span>NativeExample.java:5<span class="token punctuation">)</span>
</code></pre><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Java 版本和 gcc 的版本</p><pre><code class="language-sh"><span class="token operator">&gt;</span>java <span class="token parameter variable">-version</span>
<span class="token function">java</span> version <span class="token string">&quot;17.0.12&quot;</span> <span class="token number">2024</span>-07-16 LTS
Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build <span class="token number">17.0</span>.12+8-LTS-286<span class="token punctuation">)</span>
Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">17.0</span>.12+8-LTS-286, mixed mode, sharing<span class="token punctuation">)</span>

<span class="token operator">&gt;</span>gcc <span class="token parameter variable">-dumpmachine</span>
mingw32
</code></pre><p>试图解决</p><pre><code class="language-sh"><span class="token operator">&gt;</span> gcc <span class="token parameter variable">-m64</span>  <span class="token parameter variable">-shared</span> <span class="token parameter variable">-o</span> native_lib.dll -I<span class="token string">&quot;%JAVA_HOME%\\include&quot;</span> -I<span class="token string">&quot;%JAVA_HOME%\\include\\win32&quot;</span> native_lib.c 

native_lib.c:1:0: sorry, unimplemented: <span class="token number">64</span>-bit mode not compiled <span class="token keyword">in</span>
 <span class="token comment">#include &lt;jni.h&gt;</span>
</code></pre><p>想把编译器改成 64 位，但是报错说 <code>&lt;jni.h&gt;</code> 不支持 64 位</p><p>#TODO : 可能需要一个 32 位的 Java 环境，有空试一下</p>`,34)]))}const u=n(o,[["render",i],["__file","8_Native.html.vue"]]),v=JSON.parse('{"path":"/develop/Java/8_Native.html","title":"8-Native关键字","lang":"zh-CN","frontmatter":{"category":"Java","tag":"Java","description":"8-Native关键字 在Java中，native关键字用于声明一个方法是由本地代码（通常是C或C++）实现的。这意味着该方法的具体实现不是用Java编写的，而是由底层的本地代码提供。 native关键字的作用 与本地代码进行交互：通过native方法，Java程序可以与本地代码进行交互，调用本地库中的函数，实现更高效的操作，或者访问底层系统资源。 提...","head":[["meta",{"property":"og:url","content":"https://echo0d.github.io/DailyNotes/develop/Java/8_Native.html"}],["meta",{"property":"og:site_name","content":"echo0d-notes"}],["meta",{"property":"og:title","content":"8-Native关键字"}],["meta",{"property":"og:description","content":"8-Native关键字 在Java中，native关键字用于声明一个方法是由本地代码（通常是C或C++）实现的。这意味着该方法的具体实现不是用Java编写的，而是由底层的本地代码提供。 native关键字的作用 与本地代码进行交互：通过native方法，Java程序可以与本地代码进行交互，调用本地库中的函数，实现更高效的操作，或者访问底层系统资源。 提..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-15T02:34:05.000Z"}],["meta",{"property":"article:author","content":"echo0d"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2025-01-15T02:34:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"8-Native关键字\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-15T02:34:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"echo0d\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"native关键字的作用","slug":"native关键字的作用","link":"#native关键字的作用","children":[]},{"level":2,"title":"native关键字的使用方法","slug":"native关键字的使用方法","link":"#native关键字的使用方法","children":[]}],"git":{"createdTime":1736482757000,"updatedTime":1736908445000,"contributors":[{"name":"echo0d","email":"echo0d@163.com","commits":4}]},"readingTime":{"minutes":2.28,"words":683},"filePathRelative":"develop/Java/8_Native.md","localizedDate":"2025年1月10日","excerpt":"\\n<p>在Java中，native关键字用于声明一个方法是由本地代码（通常是C或C++）实现的。这意味着该方法的具体实现不是用Java编写的，而是由底层的本地代码提供。</p>\\n<h2>native关键字的作用</h2>\\n<ul>\\n<li>与本地代码进行交互：通过native方法，Java程序可以与本地代码进行交互，调用本地库中的函数，实现更高效的操作，或者访问底层系统资源。</li>\\n<li>提高性能：使用本地代码实现某些功能通常比纯Java代码更高效。通过native方法，可以利用底层系统资源和优化的算法，提高程序的性能。</li>\\n</ul>\\n<h2>native关键字的使用方法</h2>","autoDesc":true}');export{u as comp,v as data};
